
garage_door_opener.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008f8  08008b48  08008b48  00018b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009440  08009440  00020040  2**0
                  CONTENTS
  4 .ARM          00000008  08009440  08009440  00019440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009448  08009448  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009448  08009448  00019448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800944c  0800944c  0001944c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08009450  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a530  20000040  08009490  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000a570  08009490  0002a570  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021b10  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b8a  00000000  00000000  00041b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018c0  00000000  00000000  00046710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016c0  00000000  00000000  00047fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025e4a  00000000  00000000  00049690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bddc  00000000  00000000  0006f4da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000daf09  00000000  00000000  0008b2b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001661bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000635c  00000000  00000000  00166214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000040 	.word	0x20000040
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008b30 	.word	0x08008b30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000044 	.word	0x20000044
 80001cc:	08008b30 	.word	0x08008b30

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <board_wakeup>:
void board_wakeup(void);
void port_wakeup(void);


void board_wakeup(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	SystemClock_Config();
 80004dc:	f000 f81c 	bl	8000518 <SystemClock_Config>
	HAL_Init();
 80004e0:	f001 fcc5 	bl	8001e6e <HAL_Init>
}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <port_wakeup>:


void port_wakeup(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 80004ec:	f000 f908 	bl	8000700 <MX_GPIO_Init>
	MX_DMA_Init();
 80004f0:	f000 f8e0 	bl	80006b4 <MX_DMA_Init>
	MX_SPI2_Init();
 80004f4:	f000 f870 	bl	80005d8 <MX_SPI2_Init>
	MX_USART1_UART_Init();
 80004f8:	f000 f8ac 	bl	8000654 <MX_USART1_UART_Init>
}
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}

08000500 <board_init>:


void board_init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	board_wakeup();
 8000504:	f7ff ffe8 	bl	80004d8 <board_wakeup>
	port_wakeup();
 8000508:	f7ff ffee 	bl	80004e8 <port_wakeup>
	flash_init();
 800050c:	f000 f98e 	bl	800082c <flash_init>
	ssd1351_init();
 8000510:	f000 fe72 	bl	80011f8 <ssd1351_init>
	//gt521fx_fingerprint_init();
}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b0ae      	sub	sp, #184	; 0xb8
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000522:	2244      	movs	r2, #68	; 0x44
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f008 fafa 	bl	8008b20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800053c:	463b      	mov	r3, r7
 800053e:	2260      	movs	r2, #96	; 0x60
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f008 faec 	bl	8008b20 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000548:	2310      	movs	r3, #16
 800054a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800054c:	2301      	movs	r3, #1
 800054e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000558:	2360      	movs	r3, #96	; 0x60
 800055a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800055e:	2300      	movs	r3, #0
 8000560:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000564:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000568:	4618      	mov	r0, r3
 800056a:	f002 fdbf 	bl	80030ec <HAL_RCC_OscConfig>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000574:	f000 f952 	bl	800081c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000578:	230f      	movs	r3, #15
 800057a:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800057c:	2300      	movs	r3, #0
 800057e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000584:	2300      	movs	r3, #0
 8000586:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800058c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f003 f9ca 	bl	800392c <HAL_RCC_ClockConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800059e:	f000 f93d 	bl	800081c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80005a2:	2301      	movs	r3, #1
 80005a4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005a6:	2300      	movs	r3, #0
 80005a8:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005aa:	463b      	mov	r3, r7
 80005ac:	4618      	mov	r0, r3
 80005ae:	f003 fbc3 	bl	8003d38 <HAL_RCCEx_PeriphCLKConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80005b8:	f000 f930 	bl	800081c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005bc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005c0:	f002 fce8 	bl	8002f94 <HAL_PWREx_ControlVoltageScaling>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005ca:	f000 f927 	bl	800081c <Error_Handler>
  }
}
 80005ce:	bf00      	nop
 80005d0:	37b8      	adds	r7, #184	; 0xb8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
	...

080005d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI2_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80005dc:	4b1b      	ldr	r3, [pc, #108]	; (800064c <MX_SPI2_Init+0x74>)
 80005de:	4a1c      	ldr	r2, [pc, #112]	; (8000650 <MX_SPI2_Init+0x78>)
 80005e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80005e2:	4b1a      	ldr	r3, [pc, #104]	; (800064c <MX_SPI2_Init+0x74>)
 80005e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80005ea:	4b18      	ldr	r3, [pc, #96]	; (800064c <MX_SPI2_Init+0x74>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80005f0:	4b16      	ldr	r3, [pc, #88]	; (800064c <MX_SPI2_Init+0x74>)
 80005f2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80005f6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005f8:	4b14      	ldr	r3, [pc, #80]	; (800064c <MX_SPI2_Init+0x74>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005fe:	4b13      	ldr	r3, [pc, #76]	; (800064c <MX_SPI2_Init+0x74>)
 8000600:	2200      	movs	r2, #0
 8000602:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_SPI2_Init+0x74>)
 8000606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800060a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_SPI2_Init+0x74>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <MX_SPI2_Init+0x74>)
 8000614:	2200      	movs	r2, #0
 8000616:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <MX_SPI2_Init+0x74>)
 800061a:	2200      	movs	r2, #0
 800061c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800061e:	4b0b      	ldr	r3, [pc, #44]	; (800064c <MX_SPI2_Init+0x74>)
 8000620:	2200      	movs	r2, #0
 8000622:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000624:	4b09      	ldr	r3, [pc, #36]	; (800064c <MX_SPI2_Init+0x74>)
 8000626:	2207      	movs	r2, #7
 8000628:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800062a:	4b08      	ldr	r3, [pc, #32]	; (800064c <MX_SPI2_Init+0x74>)
 800062c:	2200      	movs	r2, #0
 800062e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <MX_SPI2_Init+0x74>)
 8000632:	2208      	movs	r2, #8
 8000634:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000636:	4805      	ldr	r0, [pc, #20]	; (800064c <MX_SPI2_Init+0x74>)
 8000638:	f003 feb6 	bl	80043a8 <HAL_SPI_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000642:	f000 f8eb 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20001950 	.word	0x20001950
 8000650:	40003800 	.word	0x40003800

08000654 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000658:	4b14      	ldr	r3, [pc, #80]	; (80006ac <MX_USART1_UART_Init+0x58>)
 800065a:	4a15      	ldr	r2, [pc, #84]	; (80006b0 <MX_USART1_UART_Init+0x5c>)
 800065c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800065e:	4b13      	ldr	r3, [pc, #76]	; (80006ac <MX_USART1_UART_Init+0x58>)
 8000660:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000664:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_USART1_UART_Init+0x58>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800066c:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <MX_USART1_UART_Init+0x58>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <MX_USART1_UART_Init+0x58>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <MX_USART1_UART_Init+0x58>)
 800067a:	220c      	movs	r2, #12
 800067c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <MX_USART1_UART_Init+0x58>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000684:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_USART1_UART_Init+0x58>)
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <MX_USART1_UART_Init+0x58>)
 800068c:	2200      	movs	r2, #0
 800068e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_USART1_UART_Init+0x58>)
 8000692:	2200      	movs	r2, #0
 8000694:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000696:	4805      	ldr	r0, [pc, #20]	; (80006ac <MX_USART1_UART_Init+0x58>)
 8000698:	f004 f9f8 	bl	8004a8c <HAL_UART_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006a2:	f000 f8bb 	bl	800081c <Error_Handler>
	*/
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20001a44 	.word	0x20001a44
 80006b0:	40013800 	.word	0x40013800

080006b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006ba:	4b10      	ldr	r3, [pc, #64]	; (80006fc <MX_DMA_Init+0x48>)
 80006bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006be:	4a0f      	ldr	r2, [pc, #60]	; (80006fc <MX_DMA_Init+0x48>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6493      	str	r3, [r2, #72]	; 0x48
 80006c6:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <MX_DMA_Init+0x48>)
 80006c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2100      	movs	r1, #0
 80006d6:	200e      	movs	r0, #14
 80006d8:	f001 fd3d 	bl	8002156 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80006dc:	200e      	movs	r0, #14
 80006de:	f001 fd56 	bl	800218e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2100      	movs	r1, #0
 80006e6:	200f      	movs	r0, #15
 80006e8:	f001 fd35 	bl	8002156 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80006ec:	200f      	movs	r0, #15
 80006ee:	f001 fd4e 	bl	800218e <HAL_NVIC_EnableIRQ>

}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40021000 	.word	0x40021000

08000700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b088      	sub	sp, #32
 8000704:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	4b33      	ldr	r3, [pc, #204]	; (80007e4 <MX_GPIO_Init+0xe4>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071a:	4a32      	ldr	r2, [pc, #200]	; (80007e4 <MX_GPIO_Init+0xe4>)
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000722:	4b30      	ldr	r3, [pc, #192]	; (80007e4 <MX_GPIO_Init+0xe4>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000726:	f003 0304 	and.w	r3, r3, #4
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072e:	4b2d      	ldr	r3, [pc, #180]	; (80007e4 <MX_GPIO_Init+0xe4>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000732:	4a2c      	ldr	r2, [pc, #176]	; (80007e4 <MX_GPIO_Init+0xe4>)
 8000734:	f043 0302 	orr.w	r3, r3, #2
 8000738:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073a:	4b2a      	ldr	r3, [pc, #168]	; (80007e4 <MX_GPIO_Init+0xe4>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	f003 0302 	and.w	r3, r3, #2
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	4b27      	ldr	r3, [pc, #156]	; (80007e4 <MX_GPIO_Init+0xe4>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	4a26      	ldr	r2, [pc, #152]	; (80007e4 <MX_GPIO_Init+0xe4>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000752:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <MX_GPIO_Init+0xe4>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000764:	4820      	ldr	r0, [pc, #128]	; (80007e8 <MX_GPIO_Init+0xe8>)
 8000766:	f002 fba1 	bl	8002eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8000770:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000774:	f002 fb9a 	bl	8002eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	2140      	movs	r1, #64	; 0x40
 800077c:	481b      	ldr	r0, [pc, #108]	; (80007ec <MX_GPIO_Init+0xec>)
 800077e:	f002 fb95 	bl	8002eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000782:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000786:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000788:	2301      	movs	r3, #1
 800078a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2300      	movs	r3, #0
 8000792:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	4619      	mov	r1, r3
 800079a:	4813      	ldr	r0, [pc, #76]	; (80007e8 <MX_GPIO_Init+0xe8>)
 800079c:	f002 fa0c 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 80007a0:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80007a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a6:	2301      	movs	r3, #1
 80007a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	4619      	mov	r1, r3
 80007b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007bc:	f002 f9fc 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007c0:	2340      	movs	r3, #64	; 0x40
 80007c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c4:	2301      	movs	r3, #1
 80007c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	4619      	mov	r1, r3
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_GPIO_Init+0xec>)
 80007d8:	f002 f9ee 	bl	8002bb8 <HAL_GPIO_Init>

}
 80007dc:	bf00      	nop
 80007de:	3720      	adds	r7, #32
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40021000 	.word	0x40021000
 80007e8:	48000800 	.word	0x48000800
 80007ec:	48000400 	.word	0x48000400

080007f0 <board_init_set_wkup_src>:


void board_init_set_wkup_src(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	/* Disable all used wakeup sources: PWR_WAKEUP_PIN1 */
	HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);//PWR_WAKEUP_PIN1);
 80007f4:	2001      	movs	r0, #1
 80007f6:	f002 fb91 	bl	8002f1c <HAL_PWR_DisableWakeUpPin>
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80007fa:	4b07      	ldr	r3, [pc, #28]	; (8000818 <board_init_set_wkup_src+0x28>)
 80007fc:	221f      	movs	r2, #31
 80007fe:	619a      	str	r2, [r3, #24]
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1_LOW);
 8000800:	2021      	movs	r0, #33	; 0x21
 8000802:	f002 fb6b 	bl	8002edc <HAL_PWR_EnableWakeUpPin>
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000806:	4b04      	ldr	r3, [pc, #16]	; (8000818 <board_init_set_wkup_src+0x28>)
 8000808:	221f      	movs	r2, #31
 800080a:	619a      	str	r2, [r3, #24]
	__HAL_PWR_CLEAR_FLAG(PWR_WAKEUP_PIN1_LOW);
 800080c:	4b02      	ldr	r3, [pc, #8]	; (8000818 <board_init_set_wkup_src+0x28>)
 800080e:	2202      	movs	r2, #2
 8000810:	619a      	str	r2, [r3, #24]
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40007000 	.word	0x40007000

0800081c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
	...

0800082c <flash_init>:
uint32_t flash_write(uint32_t address, uint64_t *data, uint32_t num_words);
uint32_t flash_get_page(uint32_t addr);


void flash_init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
	uint32_t buf;
	uint32_t start_address = FLASH_ACCESS_STORAGE_ADDR_START;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <flash_init+0x34>)
 8000834:	60fb      	str	r3, [r7, #12]
	uint32_t end_address = FLASH_ACCESS_STORAGE_ADDR_END;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <flash_init+0x38>)
 8000838:	60bb      	str	r3, [r7, #8]
	uint32_t num_pages = FLASH_ACCESS_STORAGE_SIZE / FLASH_PAGE_SIZE;
 800083a:	2307      	movs	r3, #7
 800083c:	607b      	str	r3, [r7, #4]
	flash_read(FLASH_ACCESS_STORAGE_ADDR_START, (uint32_t *)&flash_access_signature_page, sizeof(flash_access_signature_page_t));
 800083e:	2208      	movs	r2, #8
 8000840:	4909      	ldr	r1, [pc, #36]	; (8000868 <flash_init+0x3c>)
 8000842:	4807      	ldr	r0, [pc, #28]	; (8000860 <flash_init+0x34>)
 8000844:	f000 f890 	bl	8000968 <flash_read>
	//flash_read(FLASH_ACCESS_STORAGE_ADDR_START, &buf, 1);
	if (UINT32_MAX == flash_access_signature_page.gt_521fx_enroll_count) // uinitialized
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <flash_init+0x3c>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000850:	d101      	bne.n	8000856 <flash_init+0x2a>
	{
		flash_access_clear_signature_page();
 8000852:	f000 f80b 	bl	800086c <flash_access_clear_signature_page>
	}
}
 8000856:	bf00      	nop
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	0803c000 	.word	0x0803c000
 8000864:	0803ffff 	.word	0x0803ffff
 8000868:	20009acc 	.word	0x20009acc

0800086c <flash_access_clear_signature_page>:


void flash_access_clear_signature_page(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	memset(&flash_access_signature_page, 0, sizeof(flash_access_signature_page_t));
 8000870:	2208      	movs	r2, #8
 8000872:	2100      	movs	r1, #0
 8000874:	4804      	ldr	r0, [pc, #16]	; (8000888 <flash_access_clear_signature_page+0x1c>)
 8000876:	f008 f953 	bl	8008b20 <memset>
	flash_write(FLASH_ACCESS_STORAGE_ADDR_START, (uint64_t *)&flash_access_signature_page, sizeof(flash_access_signature_page_t));
 800087a:	2208      	movs	r2, #8
 800087c:	4902      	ldr	r1, [pc, #8]	; (8000888 <flash_access_clear_signature_page+0x1c>)
 800087e:	4803      	ldr	r0, [pc, #12]	; (800088c <flash_access_clear_signature_page+0x20>)
 8000880:	f000 f892 	bl	80009a8 <flash_write>
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20009acc 	.word	0x20009acc
 800088c:	0803c000 	.word	0x0803c000

08000890 <flash_access_enroll_update>:


void flash_access_enroll_update(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
	uint32_t start_address = FLASH_ACCESS_STORAGE_ADDR_START;
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <flash_access_enroll_update+0x34>)
 8000898:	607b      	str	r3, [r7, #4]
	uint32_t end_address = FLASH_ACCESS_STORAGE_ADDR_END;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <flash_access_enroll_update+0x38>)
 800089c:	603b      	str	r3, [r7, #0]
	flash_access_signature_page.gt_521fx_last_id++;
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <flash_access_enroll_update+0x3c>)
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	3301      	adds	r3, #1
 80008a4:	4a09      	ldr	r2, [pc, #36]	; (80008cc <flash_access_enroll_update+0x3c>)
 80008a6:	6053      	str	r3, [r2, #4]
	flash_access_signature_page.gt_521fx_enroll_count++;
 80008a8:	4b08      	ldr	r3, [pc, #32]	; (80008cc <flash_access_enroll_update+0x3c>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	3301      	adds	r3, #1
 80008ae:	4a07      	ldr	r2, [pc, #28]	; (80008cc <flash_access_enroll_update+0x3c>)
 80008b0:	6013      	str	r3, [r2, #0]
	flash_write(FLASH_ACCESS_STORAGE_ADDR_START, (uint64_t *)&flash_access_signature_page, sizeof(flash_access_signature_page_t));
 80008b2:	2208      	movs	r2, #8
 80008b4:	4905      	ldr	r1, [pc, #20]	; (80008cc <flash_access_enroll_update+0x3c>)
 80008b6:	4803      	ldr	r0, [pc, #12]	; (80008c4 <flash_access_enroll_update+0x34>)
 80008b8:	f000 f876 	bl	80009a8 <flash_write>
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	0803c000 	.word	0x0803c000
 80008c8:	0803ffff 	.word	0x0803ffff
 80008cc:	20009acc 	.word	0x20009acc

080008d0 <flash_access_gt521fx_last_id>:


uint16_t flash_access_gt521fx_last_id(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
	return flash_access_signature_page.gt_521fx_last_id;
 80008d4:	4b03      	ldr	r3, [pc, #12]	; (80008e4 <flash_access_gt521fx_last_id+0x14>)
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	b29b      	uxth	r3, r3
}
 80008da:	4618      	mov	r0, r3
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	20009acc 	.word	0x20009acc

080008e8 <flash_get_page>:
	return flash_access_signature_page.gt_521fx_enroll_count;
}


uint32_t flash_get_page(uint32_t addr)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
	uint32_t page = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]
	if (addr < (FLASH_BASE + FLASH_BANK_SIZE))
 80008f4:	4b19      	ldr	r3, [pc, #100]	; (800095c <flash_get_page+0x74>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008fe:	4293      	cmp	r3, r2
 8000900:	d007      	beq.n	8000912 <flash_get_page+0x2a>
 8000902:	4b16      	ldr	r3, [pc, #88]	; (800095c <flash_get_page+0x74>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	029a      	lsls	r2, r3, #10
 8000908:	4b15      	ldr	r3, [pc, #84]	; (8000960 <flash_get_page+0x78>)
 800090a:	4013      	ands	r3, r2
 800090c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000910:	e000      	b.n	8000914 <flash_get_page+0x2c>
 8000912:	4b14      	ldr	r3, [pc, #80]	; (8000964 <flash_get_page+0x7c>)
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	4293      	cmp	r3, r2
 8000918:	d905      	bls.n	8000926 <flash_get_page+0x3e>
	{
		page = (addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000920:	0adb      	lsrs	r3, r3, #11
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	e013      	b.n	800094e <flash_get_page+0x66>
	}
	else
	{
		page = (addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 8000926:	4b0d      	ldr	r3, [pc, #52]	; (800095c <flash_get_page+0x74>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	b29b      	uxth	r3, r3
 800092c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000930:	4293      	cmp	r3, r2
 8000932:	d007      	beq.n	8000944 <flash_get_page+0x5c>
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <flash_get_page+0x74>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	029a      	lsls	r2, r3, #10
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <flash_get_page+0x78>)
 800093c:	4013      	ands	r3, r2
 800093e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000942:	e000      	b.n	8000946 <flash_get_page+0x5e>
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <flash_get_page+0x7c>)
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	0adb      	lsrs	r3, r3, #11
 800094c:	60fb      	str	r3, [r7, #12]
	}
	return page;
 800094e:	68fb      	ldr	r3, [r7, #12]
}
 8000950:	4618      	mov	r0, r3
 8000952:	3714      	adds	r7, #20
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	1fff75e0 	.word	0x1fff75e0
 8000960:	03fffc00 	.word	0x03fffc00
 8000964:	08040000 	.word	0x08040000

08000968 <flash_read>:


void flash_read(uint32_t address, uint64_t *rx_buf, uint16_t num_words)
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	4613      	mov	r3, r2
 8000974:	80fb      	strh	r3, [r7, #6]
	while(1)
	{
		*rx_buf = *(__IO uint64_t *)address;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800097c:	68b9      	ldr	r1, [r7, #8]
 800097e:	e9c1 2300 	strd	r2, r3, [r1]
		address += 4;
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	3304      	adds	r3, #4
 8000986:	60fb      	str	r3, [r7, #12]
		rx_buf++;
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	3308      	adds	r3, #8
 800098c:	60bb      	str	r3, [r7, #8]
		if (!(num_words--)) break;
 800098e:	88fb      	ldrh	r3, [r7, #6]
 8000990:	1e5a      	subs	r2, r3, #1
 8000992:	80fa      	strh	r2, [r7, #6]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d000      	beq.n	800099a <flash_read+0x32>
		*rx_buf = *(__IO uint64_t *)address;
 8000998:	e7ed      	b.n	8000976 <flash_read+0xe>
		if (!(num_words--)) break;
 800099a:	bf00      	nop
	}
}
 800099c:	bf00      	nop
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <flash_write>:


uint32_t flash_write(uint32_t address, uint64_t *data, uint32_t num_dbls)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b088      	sub	sp, #32
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
	static FLASH_EraseInitTypeDef erase_init_struct;
	uint32_t page_error;

	if ((address + (sizeof(uint64_t) * num_dbls)) > FLASH_ACCESS_STORAGE_ADDR_END)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	00da      	lsls	r2, r3, #3
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	4413      	add	r3, r2
 80009bc:	4a2b      	ldr	r2, [pc, #172]	; (8000a6c <flash_write+0xc4>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d902      	bls.n	80009c8 <flash_write+0x20>
	{
		return -1; // error not enough allocated space
 80009c2:	f04f 33ff 	mov.w	r3, #4294967295
 80009c6:	e04c      	b.n	8000a62 <flash_write+0xba>
	}
	HAL_FLASH_Unlock();
 80009c8:	f001 fede 	bl	8002788 <HAL_FLASH_Unlock>

	uint32_t start_page = flash_get_page(address);
 80009cc:	68f8      	ldr	r0, [r7, #12]
 80009ce:	f7ff ff8b 	bl	80008e8 <flash_get_page>
 80009d2:	61b8      	str	r0, [r7, #24]
	uint32_t end_page = flash_get_page(address + num_dbls * 8);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	00da      	lsls	r2, r3, #3
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	4413      	add	r3, r2
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff ff83 	bl	80008e8 <flash_get_page>
 80009e2:	6178      	str	r0, [r7, #20]

	erase_init_struct.Banks = FLASH_BANK_1;
 80009e4:	4b22      	ldr	r3, [pc, #136]	; (8000a70 <flash_write+0xc8>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	605a      	str	r2, [r3, #4]
	erase_init_struct.TypeErase = FLASH_TYPEERASE_PAGES;
 80009ea:	4b21      	ldr	r3, [pc, #132]	; (8000a70 <flash_write+0xc8>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
	erase_init_struct.Page = start_page;
 80009f0:	4a1f      	ldr	r2, [pc, #124]	; (8000a70 <flash_write+0xc8>)
 80009f2:	69bb      	ldr	r3, [r7, #24]
 80009f4:	6093      	str	r3, [r2, #8]
	erase_init_struct.NbPages = ((end_page - start_page) / FLASH_PAGE_SIZE) + 1;
 80009f6:	697a      	ldr	r2, [r7, #20]
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	1ad3      	subs	r3, r2, r3
 80009fc:	0adb      	lsrs	r3, r3, #11
 80009fe:	3301      	adds	r3, #1
 8000a00:	4a1b      	ldr	r2, [pc, #108]	; (8000a70 <flash_write+0xc8>)
 8000a02:	60d3      	str	r3, [r2, #12]

	if (HAL_OK != HAL_FLASHEx_Erase(&erase_init_struct, &page_error))
 8000a04:	f107 0310 	add.w	r3, r7, #16
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4819      	ldr	r0, [pc, #100]	; (8000a70 <flash_write+0xc8>)
 8000a0c:	f001 ffae 	bl	800296c <HAL_FLASHEx_Erase>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d003      	beq.n	8000a1e <flash_write+0x76>
	{
		return HAL_FLASH_GetError();
 8000a16:	f001 fee9 	bl	80027ec <HAL_FLASH_GetError>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	e021      	b.n	8000a62 <flash_write+0xba>
	}
	for (uint32_t i = 0; i < num_dbls; i++)
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61fb      	str	r3, [r7, #28]
 8000a22:	e017      	b.n	8000a54 <flash_write+0xac>
	{
		//FLASH_TYPEPROGRAM_WORD
		if (HAL_OK == HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data[i]))
 8000a24:	69fb      	ldr	r3, [r7, #28]
 8000a26:	00db      	lsls	r3, r3, #3
 8000a28:	68ba      	ldr	r2, [r7, #8]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a30:	68f9      	ldr	r1, [r7, #12]
 8000a32:	2000      	movs	r0, #0
 8000a34:	f001 fe3c 	bl	80026b0 <HAL_FLASH_Program>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d103      	bne.n	8000a46 <flash_write+0x9e>
		{
			address += 8;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	3308      	adds	r3, #8
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	e003      	b.n	8000a4e <flash_write+0xa6>
		}
		else
		{
			return HAL_FLASH_GetError();
 8000a46:	f001 fed1 	bl	80027ec <HAL_FLASH_GetError>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	e009      	b.n	8000a62 <flash_write+0xba>
	for (uint32_t i = 0; i < num_dbls; i++)
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	3301      	adds	r3, #1
 8000a52:	61fb      	str	r3, [r7, #28]
 8000a54:	69fa      	ldr	r2, [r7, #28]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d3e3      	bcc.n	8000a24 <flash_write+0x7c>
		}
	}
	HAL_FLASH_Lock();
 8000a5c:	f001 feb6 	bl	80027cc <HAL_FLASH_Lock>
	return 0;
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3720      	adds	r7, #32
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	0803ffff 	.word	0x0803ffff
 8000a70:	2000005c 	.word	0x2000005c

08000a74 <gt521fx_nack_flag_set>:
bool g_nack_flag = false;
gt_521fx_error_e g_nack_state = GT521FX_NO_ERROR_ACK;


void gt521fx_nack_flag_set(bool flag)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
	g_nack_flag = flag;
 8000a7e:	4a04      	ldr	r2, [pc, #16]	; (8000a90 <gt521fx_nack_flag_set+0x1c>)
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	7013      	strb	r3, [r2, #0]
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	20000073 	.word	0x20000073

08000a94 <gt521fx_nack_state_set>:


void gt521fx_nack_state_set(gt_521fx_error_e err)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	80fb      	strh	r3, [r7, #6]
	g_nack_state = err;
 8000a9e:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <gt521fx_nack_state_set+0x1c>)
 8000aa0:	88fb      	ldrh	r3, [r7, #6]
 8000aa2:	8013      	strh	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	20000008 	.word	0x20000008

08000ab4 <gt521fx_nack_flag>:


bool gt521fx_nack_flag(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
	return g_nack_flag;
 8000ab8:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <gt521fx_nack_flag+0x14>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	20000073 	.word	0x20000073

08000acc <gt521fx_enrolled_fingerprint_count_set>:
	return g_enrolled_fingerprint_count;
}


void gt521fx_enrolled_fingerprint_count_set(uint16_t count)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	80fb      	strh	r3, [r7, #6]
	g_enrolled_fingerprint_count = count;
 8000ad6:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <gt521fx_enrolled_fingerprint_count_set+0x1c>)
 8000ad8:	88fb      	ldrh	r3, [r7, #6]
 8000ada:	8013      	strh	r3, [r2, #0]
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	2000006c 	.word	0x2000006c

08000aec <gt521fx_finger_is_pressed_set>:
{
	return g_gt521fx_initialized;
}

void gt521fx_finger_is_pressed_set(bool flag)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
	g_finger_is_pressed = flag;
 8000af6:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <gt521fx_finger_is_pressed_set+0x1c>)
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	7013      	strb	r3, [r2, #0]
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	2000006e 	.word	0x2000006e

08000b0c <gt521fx_finger_is_pressed_flag>:


bool gt521fx_finger_is_pressed_flag(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
	return g_finger_is_pressed;
 8000b10:	4b03      	ldr	r3, [pc, #12]	; (8000b20 <gt521fx_finger_is_pressed_flag+0x14>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	2000006e 	.word	0x2000006e

08000b24 <gt521fx_security_lvl_set>:


void gt521fx_security_lvl_set(uint8_t lvl)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]
	g_security_lvl = lvl;
 8000b2e:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <gt521fx_security_lvl_set+0x1c>)
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	7013      	strb	r3, [r2, #0]
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	20000072 	.word	0x20000072

08000b44 <gt521fx_identified_id_set>:


void gt521fx_identified_id_set(uint16_t id)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	80fb      	strh	r3, [r7, #6]
	g_identified_id = id;
 8000b4e:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <gt521fx_identified_id_set+0x1c>)
 8000b50:	88fb      	ldrh	r3, [r7, #6]
 8000b52:	8013      	strh	r3, [r2, #0]
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	20000070 	.word	0x20000070

08000b64 <gt521fx_led_on>:
	return g_identified_id;
}


void gt521fx_led_on(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_CMOS_LED, LED_ON);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2112      	movs	r1, #18
 8000b6c:	4802      	ldr	r0, [pc, #8]	; (8000b78 <gt521fx_led_on+0x14>)
 8000b6e:	f000 f9b5 	bl	8000edc <packet_create_cmd_and_send>
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20009ad4 	.word	0x20009ad4

08000b7c <gt521fx_open>:
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_CMOS_LED, LED_OFF);
}


void gt521fx_open(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_OPEN, 0);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2101      	movs	r1, #1
 8000b84:	4802      	ldr	r0, [pc, #8]	; (8000b90 <gt521fx_open+0x14>)
 8000b86:	f000 f9a9 	bl	8000edc <packet_create_cmd_and_send>
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20009ad4 	.word	0x20009ad4

08000b94 <gt521fx_start_enrollment>:
	else return true;
}


void gt521fx_start_enrollment(uint16_t id)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	80fb      	strh	r3, [r7, #6]
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_ENROLL_START, id);
 8000b9e:	88fb      	ldrh	r3, [r7, #6]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	2122      	movs	r1, #34	; 0x22
 8000ba4:	4803      	ldr	r0, [pc, #12]	; (8000bb4 <gt521fx_start_enrollment+0x20>)
 8000ba6:	f000 f999 	bl	8000edc <packet_create_cmd_and_send>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20009ad4 	.word	0x20009ad4

08000bb8 <gt521fx_enrollment>:


void gt521fx_enrollment(gt_521fx_enrollment_stage_e stage)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
	gt_521fx_cmd_e cmd_stage = GT521FX_CMD_ENROLL_1;
 8000bc2:	2323      	movs	r3, #35	; 0x23
 8000bc4:	73fb      	strb	r3, [r7, #15]
	switch (stage)
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d00c      	beq.n	8000be6 <gt521fx_enrollment+0x2e>
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	dc0d      	bgt.n	8000bec <gt521fx_enrollment+0x34>
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d002      	beq.n	8000bda <gt521fx_enrollment+0x22>
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d003      	beq.n	8000be0 <gt521fx_enrollment+0x28>
 8000bd8:	e008      	b.n	8000bec <gt521fx_enrollment+0x34>
	{
		case GT521FX_ENROLLMENT_STAGE_FIRST: // intentionally fall through
			cmd_stage = GT521FX_CMD_ENROLL_1;
 8000bda:	2323      	movs	r3, #35	; 0x23
 8000bdc:	73fb      	strb	r3, [r7, #15]
		break;
 8000bde:	e006      	b.n	8000bee <gt521fx_enrollment+0x36>
		case GT521FX_ENROLLMENT_STAGE_SECOND: // intentionally fall through
			cmd_stage = GT521FX_CMD_ENROLL_2;
 8000be0:	2324      	movs	r3, #36	; 0x24
 8000be2:	73fb      	strb	r3, [r7, #15]
		break;
 8000be4:	e003      	b.n	8000bee <gt521fx_enrollment+0x36>
		case GT521FX_ENROLLMENT_STAGE_THIRD: // intentionally fall through
			cmd_stage = GT521FX_CMD_ENROLL_3;
 8000be6:	2325      	movs	r3, #37	; 0x25
 8000be8:	73fb      	strb	r3, [r7, #15]
		break;
 8000bea:	e000      	b.n	8000bee <gt521fx_enrollment+0x36>
		default:
			while(1);
 8000bec:	e7fe      	b.n	8000bec <gt521fx_enrollment+0x34>
		break;
	}
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, cmd_stage, 0);
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4803      	ldr	r0, [pc, #12]	; (8000c04 <gt521fx_enrollment+0x4c>)
 8000bf6:	f000 f971 	bl	8000edc <packet_create_cmd_and_send>
}
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20009ad4 	.word	0x20009ad4

08000c08 <gt521fx_finger_is_pressed>:
	else return true;
}
*/

void gt521fx_finger_is_pressed(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_IS_PRESS_FINGER, 0);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2126      	movs	r1, #38	; 0x26
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <gt521fx_finger_is_pressed+0x14>)
 8000c12:	f000 f963 	bl	8000edc <packet_create_cmd_and_send>
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20009ad4 	.word	0x20009ad4

08000c20 <gt521fx_capture_finger>:
	else return true;
}


void gt521fx_capture_finger(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_CAPTURE_FINGER, 0);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2160      	movs	r1, #96	; 0x60
 8000c28:	4802      	ldr	r0, [pc, #8]	; (8000c34 <gt521fx_capture_finger+0x14>)
 8000c2a:	f000 f957 	bl	8000edc <packet_create_cmd_and_send>
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20009ad4 	.word	0x20009ad4

08000c38 <main>:
#include "board_init.h"
#include "task_create.h"
#include "flash_access.h"

int main(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	board_init();
 8000c3c:	f7ff fc60 	bl	8000500 <board_init>
	/* Check and handle if the system was resumed from Standby mode */
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8000c40:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <main+0x40>)
 8000c42:	691b      	ldr	r3, [r3, #16]
 8000c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d003      	beq.n	8000c54 <main+0x1c>
	{
		/* Clear Standby flag */
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8000c4c:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <main+0x40>)
 8000c4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c52:	619a      	str	r2, [r3, #24]
	}
	HAL_Delay(5000);
 8000c54:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c58:	f001 f97e 	bl	8001f58 <HAL_Delay>
	board_init_set_wkup_src();
 8000c5c:	f7ff fdc8 	bl	80007f0 <board_init_set_wkup_src>
	HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE);
 8000c60:	2102      	movs	r1, #2
 8000c62:	2000      	movs	r0, #0
 8000c64:	f002 f970 	bl	8002f48 <HAL_PWR_EnterSTOPMode>
	//HAL_PWR_EnterSTANDBYMode();
	osKernelInitialize();
 8000c68:	f004 ffee 	bl	8005c48 <osKernelInitialize>
	task_create();
 8000c6c:	f000 fee8 	bl	8001a40 <task_create>
	osKernelStart();
 8000c70:	f005 f80e 	bl	8005c90 <osKernelStart>

	while(1); // should never reach this...
 8000c74:	e7fe      	b.n	8000c74 <main+0x3c>
 8000c76:	bf00      	nop
 8000c78:	40007000 	.word	0x40007000

08000c7c <packet_queue_init>:

void packet_rsp_set(void);


void packet_queue_init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
	sensor_rx_queue = osMessageQueueNew(SNS_RX_QUEUE_DEPTH, sizeof( pkt_t ), NULL);
 8000c80:	2200      	movs	r2, #0
 8000c82:	210c      	movs	r1, #12
 8000c84:	2010      	movs	r0, #16
 8000c86:	f005 f8d6 	bl	8005e36 <osMessageQueueNew>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <packet_queue_init+0x28>)
 8000c8e:	6013      	str	r3, [r2, #0]
	sensor_tx_queue = osMessageQueueNew(SNS_TX_QUEUE_DEPTH, sizeof( pkt_t ), NULL);
 8000c90:	2200      	movs	r2, #0
 8000c92:	210c      	movs	r1, #12
 8000c94:	2010      	movs	r0, #16
 8000c96:	f005 f8ce 	bl	8005e36 <osMessageQueueNew>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	4a02      	ldr	r2, [pc, #8]	; (8000ca8 <packet_queue_init+0x2c>)
 8000c9e:	6013      	str	r3, [r2, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20009ae4 	.word	0x20009ae4
 8000ca8:	20009ae0 	.word	0x20009ae0

08000cac <packet_enqueue>:

void packet_enqueue(p_packet_handle_t pkt_handle, pkt_src_dst_t dst)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	460b      	mov	r3, r1
 8000cb6:	70fb      	strb	r3, [r7, #3]
	// todo add blocking w/ parameter
	switch (dst)
 8000cb8:	78fb      	ldrb	r3, [r7, #3]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d002      	beq.n	8000cc4 <packet_enqueue+0x18>
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d00b      	beq.n	8000cda <packet_enqueue+0x2e>
 8000cc2:	e015      	b.n	8000cf0 <packet_enqueue+0x44>
	{
		case PKT_SRC_DST_SNS_TX:
			if (osOK != osMessageQueuePut(sensor_tx_queue, pkt_handle, 0, 0)) while(1);
 8000cc4:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <packet_enqueue+0x54>)
 8000cc6:	6818      	ldr	r0, [r3, #0]
 8000cc8:	2300      	movs	r3, #0
 8000cca:	2200      	movs	r2, #0
 8000ccc:	6879      	ldr	r1, [r7, #4]
 8000cce:	f005 f925 	bl	8005f1c <osMessageQueuePut>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d00c      	beq.n	8000cf2 <packet_enqueue+0x46>
 8000cd8:	e7fe      	b.n	8000cd8 <packet_enqueue+0x2c>
		break;
		case PKT_SRC_DST_SNS_RX:
			if (osOK != osMessageQueuePut(sensor_rx_queue, pkt_handle, 0, 0)) while(1); // queue full?
 8000cda:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <packet_enqueue+0x58>)
 8000cdc:	6818      	ldr	r0, [r3, #0]
 8000cde:	2300      	movs	r3, #0
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	6879      	ldr	r1, [r7, #4]
 8000ce4:	f005 f91a 	bl	8005f1c <osMessageQueuePut>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d003      	beq.n	8000cf6 <packet_enqueue+0x4a>
 8000cee:	e7fe      	b.n	8000cee <packet_enqueue+0x42>
		break;
		default: while(1); // wtf
 8000cf0:	e7fe      	b.n	8000cf0 <packet_enqueue+0x44>
		break;
 8000cf2:	bf00      	nop
 8000cf4:	e000      	b.n	8000cf8 <packet_enqueue+0x4c>
		break;
 8000cf6:	bf00      	nop
		break;
	}
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20009ae0 	.word	0x20009ae0
 8000d04:	20009ae4 	.word	0x20009ae4

08000d08 <packet_dequeue>:


void packet_dequeue(p_packet_handle_t pkt_handle, pkt_src_dst_t src)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	70fb      	strb	r3, [r7, #3]
	switch(src)
 8000d14:	78fb      	ldrb	r3, [r7, #3]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d002      	beq.n	8000d20 <packet_dequeue+0x18>
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d00c      	beq.n	8000d38 <packet_dequeue+0x30>
 8000d1e:	e017      	b.n	8000d50 <packet_dequeue+0x48>
	{
		case PKT_SRC_DST_SNS_TX:
			if (osOK != osMessageQueueGet(sensor_tx_queue, (uint8_t *)pkt_handle, NULL, osWaitForever)) while(1); // wtf
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <packet_dequeue+0x58>)
 8000d22:	6818      	ldr	r0, [r3, #0]
 8000d24:	f04f 33ff 	mov.w	r3, #4294967295
 8000d28:	2200      	movs	r2, #0
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	f005 f956 	bl	8005fdc <osMessageQueueGet>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d00d      	beq.n	8000d52 <packet_dequeue+0x4a>
 8000d36:	e7fe      	b.n	8000d36 <packet_dequeue+0x2e>
		break;
		case PKT_SRC_DST_SNS_RX:
			if (osOK != osMessageQueueGet(sensor_rx_queue, pkt_handle, NULL, osWaitForever)) while(1); // wtf
 8000d38:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <packet_dequeue+0x5c>)
 8000d3a:	6818      	ldr	r0, [r3, #0]
 8000d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d40:	2200      	movs	r2, #0
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	f005 f94a 	bl	8005fdc <osMessageQueueGet>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d003      	beq.n	8000d56 <packet_dequeue+0x4e>
 8000d4e:	e7fe      	b.n	8000d4e <packet_dequeue+0x46>
		break;
		default: while(1); // wtf
 8000d50:	e7fe      	b.n	8000d50 <packet_dequeue+0x48>
		break;
 8000d52:	bf00      	nop
 8000d54:	e000      	b.n	8000d58 <packet_dequeue+0x50>
		break;
 8000d56:	bf00      	nop
		break;
	}
}
 8000d58:	bf00      	nop
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20009ae0 	.word	0x20009ae0
 8000d64:	20009ae4 	.word	0x20009ae4

08000d68 <packet_enqueue_to_sensor_tx>:


void packet_enqueue_to_sensor_tx(p_packet_handle_t pkt_handle)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	packet_enqueue(pkt_handle, PKT_SRC_DST_SNS_TX);
 8000d70:	2100      	movs	r1, #0
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff ff9a 	bl	8000cac <packet_enqueue>
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <packet_dequeue_from_sensor_tx>:


void packet_dequeue_from_sensor_tx(p_packet_handle_t pkt_handle)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
	packet_dequeue(pkt_handle, PKT_SRC_DST_SNS_TX);
 8000d88:	2100      	movs	r1, #0
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff ffbc 	bl	8000d08 <packet_dequeue>
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <packet_enqueue_to_sensor_rx>:


void packet_enqueue_to_sensor_rx(p_packet_handle_t pkt_handle)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	packet_enqueue(pkt_handle, PKT_SRC_DST_SNS_RX);
 8000da0:	2101      	movs	r1, #1
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff ff82 	bl	8000cac <packet_enqueue>
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <packet_dequeue_from_sensor_rx>:


void packet_dequeue_from_sensor_rx(p_packet_handle_t pkt_handle)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	packet_dequeue(pkt_handle, PKT_SRC_DST_SNS_RX);
 8000db8:	2101      	movs	r1, #1
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff ffa4 	bl	8000d08 <packet_dequeue>
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <packet_parse_rsp>:


void packet_parse_rsp(p_packet_handle_t pkt_handle)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
	if (RSP_RSP_ACK == pkt_handle->rsp_rsp)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	891b      	ldrh	r3, [r3, #8]
 8000dd4:	2b30      	cmp	r3, #48	; 0x30
 8000dd6:	d103      	bne.n	8000de0 <packet_parse_rsp+0x18>
	{
		gt521fx_nack_flag_set(false);
 8000dd8:	2000      	movs	r0, #0
 8000dda:	f7ff fe4b 	bl	8000a74 <gt521fx_nack_flag_set>
 8000dde:	e00c      	b.n	8000dfa <packet_parse_rsp+0x32>
	}
	else if (RSP_RSP_NACK == pkt_handle->rsp_rsp)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	891b      	ldrh	r3, [r3, #8]
 8000de4:	2b31      	cmp	r3, #49	; 0x31
 8000de6:	d108      	bne.n	8000dfa <packet_parse_rsp+0x32>
	{
		gt521fx_nack_flag_set(true);
 8000de8:	2001      	movs	r0, #1
 8000dea:	f7ff fe43 	bl	8000a74 <gt521fx_nack_flag_set>
		gt521fx_nack_state_set((gt_521fx_error_e)pkt_handle->rsp_error_code);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fe4d 	bl	8000a94 <gt521fx_nack_state_set>
	}
	switch(cmd_in_flight())
 8000dfa:	f000 f863 	bl	8000ec4 <cmd_in_flight>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2bf1      	cmp	r3, #241	; 0xf1
 8000e02:	d024      	beq.n	8000e4e <packet_parse_rsp+0x86>
 8000e04:	2bf1      	cmp	r3, #241	; 0xf1
 8000e06:	dc29      	bgt.n	8000e5c <packet_parse_rsp+0x94>
 8000e08:	2b51      	cmp	r3, #81	; 0x51
 8000e0a:	d019      	beq.n	8000e40 <packet_parse_rsp+0x78>
 8000e0c:	2b51      	cmp	r3, #81	; 0x51
 8000e0e:	dc25      	bgt.n	8000e5c <packet_parse_rsp+0x94>
 8000e10:	2b20      	cmp	r3, #32
 8000e12:	d002      	beq.n	8000e1a <packet_parse_rsp+0x52>
 8000e14:	2b26      	cmp	r3, #38	; 0x26
 8000e16:	d007      	beq.n	8000e28 <packet_parse_rsp+0x60>
		break;
		case GT521FX_CMD_GET_SECURITY_LEVEL:
			gt521fx_security_lvl_set(pkt_handle->cmd_input_param);
		break;
		default:
		break;
 8000e18:	e020      	b.n	8000e5c <packet_parse_rsp+0x94>
			gt521fx_enrolled_fingerprint_count_set(pkt_handle->cmd_input_param);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff fe53 	bl	8000acc <gt521fx_enrolled_fingerprint_count_set>
		break;
 8000e26:	e01a      	b.n	8000e5e <packet_parse_rsp+0x96>
			if (0 == (pkt_handle->rsp_output_param))
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d103      	bne.n	8000e38 <packet_parse_rsp+0x70>
				gt521fx_finger_is_pressed_set(true);
 8000e30:	2001      	movs	r0, #1
 8000e32:	f7ff fe5b 	bl	8000aec <gt521fx_finger_is_pressed_set>
		break;
 8000e36:	e012      	b.n	8000e5e <packet_parse_rsp+0x96>
			else gt521fx_finger_is_pressed_set(false);
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f7ff fe57 	bl	8000aec <gt521fx_finger_is_pressed_set>
		break;
 8000e3e:	e00e      	b.n	8000e5e <packet_parse_rsp+0x96>
			gt521fx_identified_id_set(pkt_handle->cmd_input_param);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fe7c 	bl	8000b44 <gt521fx_identified_id_set>
		break;
 8000e4c:	e007      	b.n	8000e5e <packet_parse_rsp+0x96>
			gt521fx_security_lvl_set(pkt_handle->cmd_input_param);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff fe65 	bl	8000b24 <gt521fx_security_lvl_set>
		break;
 8000e5a:	e000      	b.n	8000e5e <packet_parse_rsp+0x96>
		break;
 8000e5c:	bf00      	nop
	}
	packet_rsp_set();
 8000e5e:	f000 f811 	bl	8000e84 <packet_rsp_set>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <packet_rsp_clear>:


bool packet_rsp_received = false;

void packet_rsp_clear(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
	packet_rsp_received = false;
 8000e70:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <packet_rsp_clear+0x14>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
}
 8000e76:	bf00      	nop
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	20000074 	.word	0x20000074

08000e84 <packet_rsp_set>:


void packet_rsp_set(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
	packet_rsp_received = true;
 8000e88:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <packet_rsp_set+0x14>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	701a      	strb	r2, [r3, #0]
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	20000074 	.word	0x20000074

08000e9c <packet_rsp_was_received>:


bool packet_rsp_was_received(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
	if (packet_rsp_received)
 8000ea0:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <packet_rsp_was_received+0x24>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d004      	beq.n	8000eb2 <packet_rsp_was_received+0x16>
	{
		packet_rsp_received = false;
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <packet_rsp_was_received+0x24>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	701a      	strb	r2, [r3, #0]
		return true;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e000      	b.n	8000eb4 <packet_rsp_was_received+0x18>
	}
	else
	{
		return false;
 8000eb2:	2300      	movs	r3, #0
	}
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000074 	.word	0x20000074

08000ec4 <cmd_in_flight>:


gt_521fx_cmd_e g_cmd_in_flight = GT521FX_CMD_OPEN;

gt_521fx_cmd_e cmd_in_flight(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
	return g_cmd_in_flight;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <cmd_in_flight+0x14>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	2000000a 	.word	0x2000000a

08000edc <packet_create_cmd_and_send>:

void packet_create_cmd_and_send(p_packet_handle_t pkt_handle, gt_521fx_cmd_e cmd, uint32_t input_param)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	607a      	str	r2, [r7, #4]
 8000ee8:	72fb      	strb	r3, [r7, #11]
	packet_rsp_clear();
 8000eea:	f7ff ffbf 	bl	8000e6c <packet_rsp_clear>
	g_cmd_in_flight = cmd;
 8000eee:	4a10      	ldr	r2, [pc, #64]	; (8000f30 <packet_create_cmd_and_send+0x54>)
 8000ef0:	7afb      	ldrb	r3, [r7, #11]
 8000ef2:	7013      	strb	r3, [r2, #0]
	pkt_handle->start_code[0] = 0x55; // default
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	2255      	movs	r2, #85	; 0x55
 8000ef8:	701a      	strb	r2, [r3, #0]
	pkt_handle->start_code[1] = 0xAA; // default
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	22aa      	movs	r2, #170	; 0xaa
 8000efe:	705a      	strb	r2, [r3, #1]
	pkt_handle->dev_id = 0x0001; // default
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	2201      	movs	r2, #1
 8000f04:	805a      	strh	r2, [r3, #2]
	pkt_handle->cmd_input_param = input_param;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	605a      	str	r2, [r3, #4]
	pkt_handle->cmd_code = cmd;
 8000f0c:	7afb      	ldrb	r3, [r7, #11]
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	811a      	strh	r2, [r3, #8]
	pkt_handle->check_sum = packet_calc_check_sum(pkt_handle);
 8000f14:	68f8      	ldr	r0, [r7, #12]
 8000f16:	f000 f80d 	bl	8000f34 <packet_calc_check_sum>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	815a      	strh	r2, [r3, #10]
	packet_enqueue_to_sensor_tx(pkt_handle);
 8000f22:	68f8      	ldr	r0, [r7, #12]
 8000f24:	f7ff ff20 	bl	8000d68 <packet_enqueue_to_sensor_tx>
}
 8000f28:	bf00      	nop
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	2000000a 	.word	0x2000000a

08000f34 <packet_calc_check_sum>:


uint16_t packet_calc_check_sum(p_packet_handle_t pkt_handle)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	uint16_t check_sum = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	81fb      	strh	r3, [r7, #14]
	check_sum += pkt_handle->start_code[0];
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	89fb      	ldrh	r3, [r7, #14]
 8000f48:	4413      	add	r3, r2
 8000f4a:	81fb      	strh	r3, [r7, #14]
	check_sum += pkt_handle->start_code[1];
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	785b      	ldrb	r3, [r3, #1]
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	89fb      	ldrh	r3, [r7, #14]
 8000f54:	4413      	add	r3, r2
 8000f56:	81fb      	strh	r3, [r7, #14]
	check_sum += pkt_handle->dev_id;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	885a      	ldrh	r2, [r3, #2]
 8000f5c:	89fb      	ldrh	r3, [r7, #14]
 8000f5e:	4413      	add	r3, r2
 8000f60:	81fb      	strh	r3, [r7, #14]
	check_sum += pkt_handle->cmd_input_param;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	89fb      	ldrh	r3, [r7, #14]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	81fb      	strh	r3, [r7, #14]
	check_sum += pkt_handle->cmd_code;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	891a      	ldrh	r2, [r3, #8]
 8000f72:	89fb      	ldrh	r3, [r7, #14]
 8000f74:	4413      	add	r3, r2
 8000f76:	81fb      	strh	r3, [r7, #14]
	return check_sum;
 8000f78:	89fb      	ldrh	r3, [r7, #14]
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3714      	adds	r7, #20
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
	...

08000f88 <USART3_IRQHandler>:

uint16_t g_free_buffer_index = 0;
uint8_t rx_data[sizeof(pkt_t)] = {0};

void USART3_IRQHandler()
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	HAL_UART_RxCpltCallback(&huart1);
 8000f8c:	4802      	ldr	r0, [pc, #8]	; (8000f98 <USART3_IRQHandler+0x10>)
 8000f8e:	f000 f805 	bl	8000f9c <HAL_UART_RxCpltCallback>
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20001a44 	.word	0x20001a44

08000f9c <HAL_UART_RxCpltCallback>:


bool uart_rx_flag = false;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_DMA(&huart1, rx_data, sizeof(pkt_t));
	memcpy(rsp_buffer.flat_data, rx_data, sizeof(pkt_t));
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_UART_RxCpltCallback+0x24>)
 8000fa6:	4a07      	ldr	r2, [pc, #28]	; (8000fc4 <HAL_UART_RxCpltCallback+0x28>)
 8000fa8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000faa:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	uart_rx_flag = true;
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_UART_RxCpltCallback+0x2c>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	701a      	strb	r2, [r3, #0]

}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	20009b44 	.word	0x20009b44
 8000fc4:	20000078 	.word	0x20000078
 8000fc8:	20000084 	.word	0x20000084

08000fcc <task_sensor_tx_entry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_sensor_tx_entry */
void task_sensor_tx_entry(void *argument)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_sensor_tx_entry */
  /* Infinite loop */
  for(;;)
  {
	  packet_dequeue_from_sensor_tx(&sns_tx_pkt);
 8000fd4:	4806      	ldr	r0, [pc, #24]	; (8000ff0 <task_sensor_tx_entry+0x24>)
 8000fd6:	f7ff fed3 	bl	8000d80 <packet_dequeue_from_sensor_tx>
	  HAL_UART_Receive_DMA(&huart1, rx_data, sizeof(pkt_t));
 8000fda:	220c      	movs	r2, #12
 8000fdc:	4905      	ldr	r1, [pc, #20]	; (8000ff4 <task_sensor_tx_entry+0x28>)
 8000fde:	4806      	ldr	r0, [pc, #24]	; (8000ff8 <task_sensor_tx_entry+0x2c>)
 8000fe0:	f003 fe20 	bl	8004c24 <HAL_UART_Receive_DMA>
	  HAL_UART_Transmit_DMA(&huart1, (uint8_t *)&sns_tx_pkt, sizeof(sns_tx_pkt));
 8000fe4:	220c      	movs	r2, #12
 8000fe6:	4902      	ldr	r1, [pc, #8]	; (8000ff0 <task_sensor_tx_entry+0x24>)
 8000fe8:	4803      	ldr	r0, [pc, #12]	; (8000ff8 <task_sensor_tx_entry+0x2c>)
 8000fea:	f003 fd9d 	bl	8004b28 <HAL_UART_Transmit_DMA>
	  packet_dequeue_from_sensor_tx(&sns_tx_pkt);
 8000fee:	e7f1      	b.n	8000fd4 <task_sensor_tx_entry+0x8>
 8000ff0:	20009ae8 	.word	0x20009ae8
 8000ff4:	20000078 	.word	0x20000078
 8000ff8:	20001a44 	.word	0x20001a44

08000ffc <sensor_rx_entry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensor_rx_entry */
void sensor_rx_entry(void *argument)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensor_rx_entry */
  /* Infinite loop */
	do
	{
		if(uart_rx_flag)
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <sensor_rx_entry+0x2c>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d0fb      	beq.n	8001004 <sensor_rx_entry+0x8>
		{
			uart_rx_flag = false;
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <sensor_rx_entry+0x2c>)
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
			packet_enqueue_to_sensor_rx(&rsp_buffer);
 8001012:	4806      	ldr	r0, [pc, #24]	; (800102c <sensor_rx_entry+0x30>)
 8001014:	f7ff fec0 	bl	8000d98 <packet_enqueue_to_sensor_rx>
			packet_dequeue_from_sensor_rx(&sns_rx_pkt);
 8001018:	4805      	ldr	r0, [pc, #20]	; (8001030 <sensor_rx_entry+0x34>)
 800101a:	f7ff fec9 	bl	8000db0 <packet_dequeue_from_sensor_rx>
			packet_parse_rsp(&sns_rx_pkt);
 800101e:	4804      	ldr	r0, [pc, #16]	; (8001030 <sensor_rx_entry+0x34>)
 8001020:	f7ff fed2 	bl	8000dc8 <packet_parse_rsp>
		if(uart_rx_flag)
 8001024:	e7ee      	b.n	8001004 <sensor_rx_entry+0x8>
 8001026:	bf00      	nop
 8001028:	20000084 	.word	0x20000084
 800102c:	20009b44 	.word	0x20009b44
 8001030:	20009ba0 	.word	0x20009ba0

08001034 <ssd1351_spi_byte_write>:
void ssd1351_clear_pin(ssd1351_pins pin);
void ssd1351_reset_pixel_address(void);


static void ssd1351_spi_byte_write(uint8_t val)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = val;
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &data, 1, 10000);
 8001042:	f107 010f 	add.w	r1, r7, #15
 8001046:	f242 7310 	movw	r3, #10000	; 0x2710
 800104a:	2201      	movs	r2, #1
 800104c:	4803      	ldr	r0, [pc, #12]	; (800105c <ssd1351_spi_byte_write+0x28>)
 800104e:	f003 fa4e 	bl	80044ee <HAL_SPI_Transmit>
}
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20001950 	.word	0x20001950

08001060 <ssd1351_spi_block_write>:


static void ssd1351_spi_block_write(uint8_t *data, uint32_t len)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&hspi2, data, len, 10000);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	b29a      	uxth	r2, r3
 800106e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	4803      	ldr	r0, [pc, #12]	; (8001084 <ssd1351_spi_block_write+0x24>)
 8001076:	f003 fa3a 	bl	80044ee <HAL_SPI_Transmit>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20001950 	.word	0x20001950

08001088 <ssd1351_byte_write_data>:


void ssd1351_byte_write_data(uint8_t data)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
	ssd1351_set_pin(SSD1351_PIN_DC); // set DC (data mode)
 8001092:	2001      	movs	r0, #1
 8001094:	f000 f882 	bl	800119c <ssd1351_set_pin>
	ssd1351_clear_pin(SSD1351_PIN_CS); // select chip (active low)
 8001098:	2000      	movs	r0, #0
 800109a:	f000 f851 	bl	8001140 <ssd1351_clear_pin>
	ssd1351_spi_byte_write(data); // byte write
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ffc7 	bl	8001034 <ssd1351_spi_byte_write>
	ssd1351_set_pin(SSD1351_PIN_CS); // deselect chip
 80010a6:	2000      	movs	r0, #0
 80010a8:	f000 f878 	bl	800119c <ssd1351_set_pin>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <ssd1351_block_write_data>:


void ssd1351_block_write_data(uint8_t *data, uint32_t len)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
	ssd1351_set_pin(SSD1351_PIN_DC); // set DC (data mode)
 80010be:	2001      	movs	r0, #1
 80010c0:	f000 f86c 	bl	800119c <ssd1351_set_pin>
	ssd1351_clear_pin(SSD1351_PIN_CS); // select chip (active low)
 80010c4:	2000      	movs	r0, #0
 80010c6:	f000 f83b 	bl	8001140 <ssd1351_clear_pin>
	ssd1351_spi_block_write(data, len); // byte write
 80010ca:	6839      	ldr	r1, [r7, #0]
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ffc7 	bl	8001060 <ssd1351_spi_block_write>
	ssd1351_set_pin(SSD1351_PIN_CS); // deselect chip
 80010d2:	2000      	movs	r0, #0
 80010d4:	f000 f862 	bl	800119c <ssd1351_set_pin>
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <ssd1351_write_cmd>:


void ssd1351_write_cmd(ssd1351_cmd_e cmd)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
	ssd1351_clear_pin(SSD1351_PIN_DC); // clear DC (cmd mode)
 80010ea:	2001      	movs	r0, #1
 80010ec:	f000 f828 	bl	8001140 <ssd1351_clear_pin>
	ssd1351_clear_pin(SSD1351_PIN_CS); // select chip (active low)
 80010f0:	2000      	movs	r0, #0
 80010f2:	f000 f825 	bl	8001140 <ssd1351_clear_pin>
	ssd1351_spi_byte_write(cmd); // send cmd
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff9b 	bl	8001034 <ssd1351_spi_byte_write>
	ssd1351_set_pin(SSD1351_PIN_CS); // deselect chip
 80010fe:	2000      	movs	r0, #0
 8001100:	f000 f84c 	bl	800119c <ssd1351_set_pin>
}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <ssd1351_write_buffer_to_display>:


void ssd1351_write_buffer_to_display(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	ssd1351_write_cmd(SSD1351_CMD_WRITE_RAM);
 8001110:	205c      	movs	r0, #92	; 0x5c
 8001112:	f7ff ffe5 	bl	80010e0 <ssd1351_write_cmd>
	ssd1351_block_write_data(ssd1351_buffer.ssd1351_disp_buffer_uint8, sizeof(ssd1351_buffer.ssd1351_disp_buffer_uint8));
 8001116:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800111a:	4802      	ldr	r0, [pc, #8]	; (8001124 <ssd1351_write_buffer_to_display+0x18>)
 800111c:	f7ff ffca 	bl	80010b4 <ssd1351_block_write_data>
}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20001acc 	.word	0x20001acc

08001128 <ssd1351_delay_ms>:


void ssd1351_delay_ms(uint32_t delay_ms)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay_ms);
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f000 ff11 	bl	8001f58 <HAL_Delay>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <ssd1351_clear_pin>:


void ssd1351_clear_pin(ssd1351_pins pin)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
	GPIO_TypeDef *hal_port;
	uint16_t hal_pin;
	switch(pin)
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	2b02      	cmp	r3, #2
 800114e:	d014      	beq.n	800117a <ssd1351_clear_pin+0x3a>
 8001150:	2b02      	cmp	r3, #2
 8001152:	dc17      	bgt.n	8001184 <ssd1351_clear_pin+0x44>
 8001154:	2b00      	cmp	r3, #0
 8001156:	d002      	beq.n	800115e <ssd1351_clear_pin+0x1e>
 8001158:	2b01      	cmp	r3, #1
 800115a:	d007      	beq.n	800116c <ssd1351_clear_pin+0x2c>
 800115c:	e012      	b.n	8001184 <ssd1351_clear_pin+0x44>
	{
		case SSD1351_PIN_CS:
			hal_port = GPIOA;
 800115e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001162:	60fb      	str	r3, [r7, #12]
			hal_pin = GPIO_PIN_11;
 8001164:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001168:	817b      	strh	r3, [r7, #10]
		break;
 800116a:	e00b      	b.n	8001184 <ssd1351_clear_pin+0x44>
		case SSD1351_PIN_DC:
			hal_port = GPIOA;
 800116c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001170:	60fb      	str	r3, [r7, #12]
			hal_pin = GPIO_PIN_8;
 8001172:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001176:	817b      	strh	r3, [r7, #10]
		break;
 8001178:	e004      	b.n	8001184 <ssd1351_clear_pin+0x44>
		case SSD1351_PIN_RST:
			hal_port = GPIOB;
 800117a:	4b07      	ldr	r3, [pc, #28]	; (8001198 <ssd1351_clear_pin+0x58>)
 800117c:	60fb      	str	r3, [r7, #12]
			hal_pin = GPIO_PIN_6;
 800117e:	2340      	movs	r3, #64	; 0x40
 8001180:	817b      	strh	r3, [r7, #10]
		break;
 8001182:	bf00      	nop
	}
	HAL_GPIO_WritePin(hal_port, hal_pin, GPIO_PIN_RESET);
 8001184:	897b      	ldrh	r3, [r7, #10]
 8001186:	2200      	movs	r2, #0
 8001188:	4619      	mov	r1, r3
 800118a:	68f8      	ldr	r0, [r7, #12]
 800118c:	f001 fe8e 	bl	8002eac <HAL_GPIO_WritePin>
}
 8001190:	bf00      	nop
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	48000400 	.word	0x48000400

0800119c <ssd1351_set_pin>:


void ssd1351_set_pin(ssd1351_pins pin)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
	GPIO_TypeDef *hal_port;
	uint16_t hal_pin;
	switch(pin)
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d014      	beq.n	80011d6 <ssd1351_set_pin+0x3a>
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	dc17      	bgt.n	80011e0 <ssd1351_set_pin+0x44>
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d002      	beq.n	80011ba <ssd1351_set_pin+0x1e>
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d007      	beq.n	80011c8 <ssd1351_set_pin+0x2c>
 80011b8:	e012      	b.n	80011e0 <ssd1351_set_pin+0x44>
	{
		case SSD1351_PIN_CS:
			hal_port = GPIOA;
 80011ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011be:	60fb      	str	r3, [r7, #12]
			hal_pin = GPIO_PIN_11;
 80011c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011c4:	817b      	strh	r3, [r7, #10]
		break;
 80011c6:	e00b      	b.n	80011e0 <ssd1351_set_pin+0x44>
		case SSD1351_PIN_DC:
			hal_port = GPIOA;
 80011c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011cc:	60fb      	str	r3, [r7, #12]
			hal_pin = GPIO_PIN_8;
 80011ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011d2:	817b      	strh	r3, [r7, #10]
		break;
 80011d4:	e004      	b.n	80011e0 <ssd1351_set_pin+0x44>
		case SSD1351_PIN_RST:
			hal_port = GPIOB;
 80011d6:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <ssd1351_set_pin+0x58>)
 80011d8:	60fb      	str	r3, [r7, #12]
			hal_pin = GPIO_PIN_6;
 80011da:	2340      	movs	r3, #64	; 0x40
 80011dc:	817b      	strh	r3, [r7, #10]
		break;
 80011de:	bf00      	nop
	}
	HAL_GPIO_WritePin(hal_port, hal_pin, GPIO_PIN_SET);
 80011e0:	897b      	ldrh	r3, [r7, #10]
 80011e2:	2201      	movs	r2, #1
 80011e4:	4619      	mov	r1, r3
 80011e6:	68f8      	ldr	r0, [r7, #12]
 80011e8:	f001 fe60 	bl	8002eac <HAL_GPIO_WritePin>
}
 80011ec:	bf00      	nop
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	48000400 	.word	0x48000400

080011f8 <ssd1351_init>:


void ssd1351_init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
	ssd1351_set_pin(SSD1351_PIN_RST); // clear DC (cmd mode)
 80011fc:	2002      	movs	r0, #2
 80011fe:	f7ff ffcd 	bl	800119c <ssd1351_set_pin>
	ssd1351_delay_ms(100); // how long to hold reset?
 8001202:	2064      	movs	r0, #100	; 0x64
 8001204:	f7ff ff90 	bl	8001128 <ssd1351_delay_ms>
	ssd1351_clear_pin(SSD1351_PIN_RST); // clear DC (cmd mode)
 8001208:	2002      	movs	r0, #2
 800120a:	f7ff ff99 	bl	8001140 <ssd1351_clear_pin>
	ssd1351_delay_ms(100); // how long to pause after reset?
 800120e:	2064      	movs	r0, #100	; 0x64
 8001210:	f7ff ff8a 	bl	8001128 <ssd1351_delay_ms>
	ssd1351_set_pin(SSD1351_PIN_RST); // clear DC (cmd mode)
 8001214:	2002      	movs	r0, #2
 8001216:	f7ff ffc1 	bl	800119c <ssd1351_set_pin>

	ssd1351_write_cmd(SSD1351_CMD_SET_CMD_LOCK);
 800121a:	20fd      	movs	r0, #253	; 0xfd
 800121c:	f7ff ff60 	bl	80010e0 <ssd1351_write_cmd>
	ssd1351_byte_write_data(SSD1351_CMD_UNLOCK_BYTE);
 8001220:	2012      	movs	r0, #18
 8001222:	f7ff ff31 	bl	8001088 <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_SET_CMD_LOCK);
 8001226:	20fd      	movs	r0, #253	; 0xfd
 8001228:	f7ff ff5a 	bl	80010e0 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0xB1); // WHY?????
 800122c:	20b1      	movs	r0, #177	; 0xb1
 800122e:	f7ff ff2b 	bl	8001088 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_SLEEP_MODE_ON);
 8001232:	20ae      	movs	r0, #174	; 0xae
 8001234:	f7ff ff54 	bl	80010e0 <ssd1351_write_cmd>
	ssd1351_write_cmd(SSD1351_CMD_SET_DISP_MODE_OFF);
 8001238:	20a4      	movs	r0, #164	; 0xa4
 800123a:	f7ff ff51 	bl	80010e0 <ssd1351_write_cmd>

	ssd1351_write_cmd(SSD1351_CMD_SET_COLUMN_ADDRESS);
 800123e:	2015      	movs	r0, #21
 8001240:	f7ff ff4e 	bl	80010e0 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x00);
 8001244:	2000      	movs	r0, #0
 8001246:	f7ff ff1f 	bl	8001088 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0x7F);
 800124a:	207f      	movs	r0, #127	; 0x7f
 800124c:	f7ff ff1c 	bl	8001088 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_ROW_ADDRESS);
 8001250:	2075      	movs	r0, #117	; 0x75
 8001252:	f7ff ff45 	bl	80010e0 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x00);
 8001256:	2000      	movs	r0, #0
 8001258:	f7ff ff16 	bl	8001088 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0x7F);
 800125c:	207f      	movs	r0, #127	; 0x7f
 800125e:	f7ff ff13 	bl	8001088 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_FRONT_CLOCK_DIVIDER);
 8001262:	20b3      	movs	r0, #179	; 0xb3
 8001264:	f7ff ff3c 	bl	80010e0 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0xF1); // highest frequency (div by 1)
 8001268:	20f1      	movs	r0, #241	; 0xf1
 800126a:	f7ff ff0d 	bl	8001088 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_MUX_RATIO);
 800126e:	20ca      	movs	r0, #202	; 0xca
 8001270:	f7ff ff36 	bl	80010e0 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x7F); // 128 MUX (Reset value)
 8001274:	207f      	movs	r0, #127	; 0x7f
 8001276:	f7ff ff07 	bl	8001088 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_REMAP_COLOR_DEPTH);
 800127a:	20a0      	movs	r0, #160	; 0xa0
 800127c:	f7ff ff30 	bl	80010e0 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x74);
 8001280:	2074      	movs	r0, #116	; 0x74
 8001282:	f7ff ff01 	bl	8001088 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_DISP_START_LINE);
 8001286:	20a1      	movs	r0, #161	; 0xa1
 8001288:	f7ff ff2a 	bl	80010e0 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x00);
 800128c:	2000      	movs	r0, #0
 800128e:	f7ff fefb 	bl	8001088 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_DISP_OFFSET);
 8001292:	20a2      	movs	r0, #162	; 0xa2
 8001294:	f7ff ff24 	bl	80010e0 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x00);
 8001298:	2000      	movs	r0, #0
 800129a:	f7ff fef5 	bl	8001088 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_FUNCTION_SELECTION);
 800129e:	20ab      	movs	r0, #171	; 0xab
 80012a0:	f7ff ff1e 	bl	80010e0 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x01);
 80012a4:	2001      	movs	r0, #1
 80012a6:	f7ff feef 	bl	8001088 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_SEGMENT_LOW_VOLTAGE);
 80012aa:	20b4      	movs	r0, #180	; 0xb4
 80012ac:	f7ff ff18 	bl	80010e0 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0xA0);
 80012b0:	20a0      	movs	r0, #160	; 0xa0
 80012b2:	f7ff fee9 	bl	8001088 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0xB5);
 80012b6:	20b5      	movs	r0, #181	; 0xb5
 80012b8:	f7ff fee6 	bl	8001088 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0x55);
 80012bc:	2055      	movs	r0, #85	; 0x55
 80012be:	f7ff fee3 	bl	8001088 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_CONTRAST_CURRENT);
 80012c2:	20c1      	movs	r0, #193	; 0xc1
 80012c4:	f7ff ff0c 	bl	80010e0 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0xC8);
 80012c8:	20c8      	movs	r0, #200	; 0xc8
 80012ca:	f7ff fedd 	bl	8001088 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0x80);
 80012ce:	2080      	movs	r0, #128	; 0x80
 80012d0:	f7ff feda 	bl	8001088 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0xC0);
 80012d4:	20c0      	movs	r0, #192	; 0xc0
 80012d6:	f7ff fed7 	bl	8001088 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_MASTER_CONTRAST_CURRENT_CTRL);
 80012da:	20c7      	movs	r0, #199	; 0xc7
 80012dc:	f7ff ff00 	bl	80010e0 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x0F);
 80012e0:	200f      	movs	r0, #15
 80012e2:	f7ff fed1 	bl	8001088 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_RESET_PRECHARGE_PERIOD);
 80012e6:	20b1      	movs	r0, #177	; 0xb1
 80012e8:	f7ff fefa 	bl	80010e0 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x32);
 80012ec:	2032      	movs	r0, #50	; 0x32
 80012ee:	f7ff fecb 	bl	8001088 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_DISP_ENHANCEMENT);
 80012f2:	20b2      	movs	r0, #178	; 0xb2
 80012f4:	f7ff fef4 	bl	80010e0 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0xA4);
 80012f8:	20a4      	movs	r0, #164	; 0xa4
 80012fa:	f7ff fec5 	bl	8001088 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0x00);
 80012fe:	2000      	movs	r0, #0
 8001300:	f7ff fec2 	bl	8001088 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0x00);
 8001304:	2000      	movs	r0, #0
 8001306:	f7ff febf 	bl	8001088 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_PRECHARGE_VOLTAGE);
 800130a:	20bb      	movs	r0, #187	; 0xbb
 800130c:	f7ff fee8 	bl	80010e0 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x17);
 8001310:	2017      	movs	r0, #23
 8001312:	f7ff feb9 	bl	8001088 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_SECOND_PRECHARGE_PERIOD);
 8001316:	20b6      	movs	r0, #182	; 0xb6
 8001318:	f7ff fee2 	bl	80010e0 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x01);
 800131c:	2001      	movs	r0, #1
 800131e:	f7ff feb3 	bl	8001088 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_VCOMH_VOLTAGE);
 8001322:	20be      	movs	r0, #190	; 0xbe
 8001324:	f7ff fedc 	bl	80010e0 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x05);
 8001328:	2005      	movs	r0, #5
 800132a:	f7ff fead 	bl	8001088 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_DISP_MODE_NORMAL);
 800132e:	20a6      	movs	r0, #166	; 0xa6
 8001330:	f7ff fed6 	bl	80010e0 <ssd1351_write_cmd>

	ssd1351_clear_screen();
 8001334:	f000 f874 	bl	8001420 <ssd1351_clear_screen>
	ssd1351_write_cmd(SSD1351_CMD_SET_SLEEP_MODE_OFF);
 8001338:	20af      	movs	r0, #175	; 0xaf
 800133a:	f7ff fed1 	bl	80010e0 <ssd1351_write_cmd>

	ssd1351_clear_screen();
 800133e:	f000 f86f 	bl	8001420 <ssd1351_clear_screen>
	ssd1351_reset_ram_address();
 8001342:	f000 f865 	bl	8001410 <ssd1351_reset_ram_address>

	ssd1351_clear_screen();
 8001346:	f000 f86b 	bl	8001420 <ssd1351_clear_screen>
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <ssd1351_draw_pixel>:
	ssd1351_write_cmd(SSD1351_CMD_SET_DISP_MODE_OFF);
}


void ssd1351_draw_pixel(uint8_t x, uint8_t y, color_16bit_e color)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
 800135a:	460b      	mov	r3, r1
 800135c:	71bb      	strb	r3, [r7, #6]
 800135e:	4613      	mov	r3, r2
 8001360:	80bb      	strh	r3, [r7, #4]
	if((x >= SSD1351_PIXEL_WIDTH - 1) || (y >= SSD1351_PIXEL_HEIGHT - 1)) return;
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	2b7e      	cmp	r3, #126	; 0x7e
 8001366:	d810      	bhi.n	800138a <ssd1351_draw_pixel+0x3a>
 8001368:	79bb      	ldrb	r3, [r7, #6]
 800136a:	2b7e      	cmp	r3, #126	; 0x7e
 800136c:	d80d      	bhi.n	800138a <ssd1351_draw_pixel+0x3a>
	else if((x < 0) || (y < 0)) return;
	// there are 128 columns and 128 row.  2 bytes stored per pixel
	//uint16_t index = ((SSD1351_PIXEL_WIDTH - 1) - x) + (y * (SSD1351_PIXEL_WIDTH - 1))
	uint16_t index = x + y * 128;
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	b29a      	uxth	r2, r3
 8001372:	79bb      	ldrb	r3, [r7, #6]
 8001374:	b29b      	uxth	r3, r3
 8001376:	01db      	lsls	r3, r3, #7
 8001378:	b29b      	uxth	r3, r3
 800137a:	4413      	add	r3, r2
 800137c:	81fb      	strh	r3, [r7, #14]
	ssd1351_buffer.ssd1351_disp_buffer_uint16[index] = color;
 800137e:	89fb      	ldrh	r3, [r7, #14]
 8001380:	4905      	ldr	r1, [pc, #20]	; (8001398 <ssd1351_draw_pixel+0x48>)
 8001382:	88ba      	ldrh	r2, [r7, #4]
 8001384:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8001388:	e000      	b.n	800138c <ssd1351_draw_pixel+0x3c>
	if((x >= SSD1351_PIXEL_WIDTH - 1) || (y >= SSD1351_PIXEL_HEIGHT - 1)) return;
 800138a:	bf00      	nop
}
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	20001acc 	.word	0x20001acc

0800139c <ssd1351_reset_pixel_address>:
	ssd1351_coordinates.y = row;
}


void ssd1351_reset_pixel_address(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
	ssd1351_coordinates.x = 0;
 80013a0:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <ssd1351_reset_pixel_address+0x1c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]
	ssd1351_coordinates.y = 0;
 80013a6:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <ssd1351_reset_pixel_address+0x1c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	705a      	strb	r2, [r3, #1]
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20001ac8 	.word	0x20001ac8

080013bc <ssd1351_set_ram_address>:


void ssd1351_set_ram_address(uint16_t column, uint16_t row)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	460a      	mov	r2, r1
 80013c6:	80fb      	strh	r3, [r7, #6]
 80013c8:	4613      	mov	r3, r2
 80013ca:	80bb      	strh	r3, [r7, #4]
	ssd1351_write_cmd(SSD1351_CMD_SET_COLUMN_ADDRESS);
 80013cc:	2015      	movs	r0, #21
 80013ce:	f7ff fe87 	bl	80010e0 <ssd1351_write_cmd>
	ssd1351_byte_write_data((column & 0xFF00) >> 8);
 80013d2:	88fb      	ldrh	r3, [r7, #6]
 80013d4:	0a1b      	lsrs	r3, r3, #8
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fe54 	bl	8001088 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(column & 0x00FF);
 80013e0:	88fb      	ldrh	r3, [r7, #6]
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fe4f 	bl	8001088 <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_SET_ROW_ADDRESS);
 80013ea:	2075      	movs	r0, #117	; 0x75
 80013ec:	f7ff fe78 	bl	80010e0 <ssd1351_write_cmd>
	ssd1351_byte_write_data((row & 0xFF00) >> 8);
 80013f0:	88bb      	ldrh	r3, [r7, #4]
 80013f2:	0a1b      	lsrs	r3, r3, #8
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fe45 	bl	8001088 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(row & 0x00FF);
 80013fe:	88bb      	ldrh	r3, [r7, #4]
 8001400:	b2db      	uxtb	r3, r3
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fe40 	bl	8001088 <ssd1351_byte_write_data>
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <ssd1351_reset_ram_address>:


void ssd1351_reset_ram_address(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	ssd1351_set_ram_address(0x007F, 0x007F);
 8001414:	217f      	movs	r1, #127	; 0x7f
 8001416:	207f      	movs	r0, #127	; 0x7f
 8001418:	f7ff ffd0 	bl	80013bc <ssd1351_set_ram_address>
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}

08001420 <ssd1351_clear_screen>:
	ssd1351_write_cmd(SSD1351_CMD_SET_SLEEP_MODE_OFF);
}


void ssd1351_clear_screen(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
	//uint8_t clear_byte[128*128] = {0x00, 0x00};
	ssd1351_reset_ram_address();
 8001424:	f7ff fff4 	bl	8001410 <ssd1351_reset_ram_address>
	ssd1351_write_cmd(SSD1351_CMD_WRITE_RAM);
 8001428:	205c      	movs	r0, #92	; 0x5c
 800142a:	f7ff fe59 	bl	80010e0 <ssd1351_write_cmd>
	memset(ssd1351_buffer.ssd1351_disp_buffer_uint8, 0, sizeof(ssd1351_buffer.ssd1351_disp_buffer_uint8));
 800142e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001432:	2100      	movs	r1, #0
 8001434:	4805      	ldr	r0, [pc, #20]	; (800144c <ssd1351_clear_screen+0x2c>)
 8001436:	f007 fb73 	bl	8008b20 <memset>
	ssd1351_block_write_data(ssd1351_buffer.ssd1351_disp_buffer_uint8, sizeof(ssd1351_buffer));
 800143a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800143e:	4803      	ldr	r0, [pc, #12]	; (800144c <ssd1351_clear_screen+0x2c>)
 8001440:	f7ff fe38 	bl	80010b4 <ssd1351_block_write_data>
	//ssd1351_reset_ram_address();
	ssd1351_reset_pixel_address();
 8001444:	f7ff ffaa 	bl	800139c <ssd1351_reset_pixel_address>
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20001acc 	.word	0x20001acc

08001450 <ssd1351_write_char>:


#define SPECIAL_CHAR_OFFSET 	32
void ssd1351_write_char(color_16bit_e color, font_t font, char c)
{
 8001450:	b590      	push	{r4, r7, lr}
 8001452:	b089      	sub	sp, #36	; 0x24
 8001454:	af00      	add	r7, sp, #0
 8001456:	4604      	mov	r4, r0
 8001458:	1d38      	adds	r0, r7, #4
 800145a:	e880 0006 	stmia.w	r0, {r1, r2}
 800145e:	461a      	mov	r2, r3
 8001460:	4623      	mov	r3, r4
 8001462:	81fb      	strh	r3, [r7, #14]
 8001464:	4613      	mov	r3, r2
 8001466:	737b      	strb	r3, [r7, #13]
	// basic idea for writing a character is as follows:
	// 1x 16-bit value is returned for each row in pixel height.  For example if the pixel height is
	// 10 then 10x 16-bit values make up that character
	uint16_t char_pix_row_data;
	uint16_t char_pix_vert_pos = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	83fb      	strh	r3, [r7, #30]
	uint16_t char_pix_horiz_pos = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	83bb      	strh	r3, [r7, #28]
	uint16_t height = font.height;
 8001470:	797b      	ldrb	r3, [r7, #5]
 8001472:	837b      	strh	r3, [r7, #26]
	uint16_t width = font.width;
 8001474:	793b      	ldrb	r3, [r7, #4]
 8001476:	833b      	strh	r3, [r7, #24]

	if((SSD1351_PIXEL_WIDTH <= ssd1351_coordinates.x + width) || (SSD1351_PIXEL_HEIGHT <= ssd1351_coordinates.y + height))
 8001478:	4b3e      	ldr	r3, [pc, #248]	; (8001574 <ssd1351_write_char+0x124>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	461a      	mov	r2, r3
 800147e:	8b3b      	ldrh	r3, [r7, #24]
 8001480:	4413      	add	r3, r2
 8001482:	2b7f      	cmp	r3, #127	; 0x7f
 8001484:	dc70      	bgt.n	8001568 <ssd1351_write_char+0x118>
 8001486:	4b3b      	ldr	r3, [pc, #236]	; (8001574 <ssd1351_write_char+0x124>)
 8001488:	785b      	ldrb	r3, [r3, #1]
 800148a:	461a      	mov	r2, r3
 800148c:	8b7b      	ldrh	r3, [r7, #26]
 800148e:	4413      	add	r3, r2
 8001490:	2b7f      	cmp	r3, #127	; 0x7f
 8001492:	dc69      	bgt.n	8001568 <ssd1351_write_char+0x118>
	{
		return;
	}
	if (c == '\n') ssd1351_coordinates.x = SSD1351_PIXEL_WIDTH - 1; // if new line simply
 8001494:	7b7b      	ldrb	r3, [r7, #13]
 8001496:	2b0a      	cmp	r3, #10
 8001498:	d134      	bne.n	8001504 <ssd1351_write_char+0xb4>
 800149a:	4b36      	ldr	r3, [pc, #216]	; (8001574 <ssd1351_write_char+0x124>)
 800149c:	227f      	movs	r2, #127	; 0x7f
 800149e:	701a      	strb	r2, [r3, #0]
 80014a0:	e034      	b.n	800150c <ssd1351_write_char+0xbc>
	else
	{
		while(char_pix_vert_pos < height)
		{
			char_pix_row_data = font.data[(c - SPECIAL_CHAR_OFFSET) * height + char_pix_vert_pos]; // "* font.height" to skip over rows and "+ i" to get the 2 byte value for the row
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	7b7b      	ldrb	r3, [r7, #13]
 80014a6:	3b20      	subs	r3, #32
 80014a8:	8b79      	ldrh	r1, [r7, #26]
 80014aa:	fb01 f103 	mul.w	r1, r1, r3
 80014ae:	8bfb      	ldrh	r3, [r7, #30]
 80014b0:	440b      	add	r3, r1
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4413      	add	r3, r2
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	82fb      	strh	r3, [r7, #22]
			while(char_pix_horiz_pos < width)
 80014ba:	e01a      	b.n	80014f2 <ssd1351_write_char+0xa2>
			{
				if ((char_pix_row_data << char_pix_horiz_pos) & 0x8000) // if bit is set then draw
 80014bc:	8afa      	ldrh	r2, [r7, #22]
 80014be:	8bbb      	ldrh	r3, [r7, #28]
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d00f      	beq.n	80014ec <ssd1351_write_char+0x9c>
				{
					ssd1351_draw_pixel(ssd1351_coordinates.x + char_pix_horiz_pos, ssd1351_coordinates.y + char_pix_vert_pos, color);
 80014cc:	4b29      	ldr	r3, [pc, #164]	; (8001574 <ssd1351_write_char+0x124>)
 80014ce:	781a      	ldrb	r2, [r3, #0]
 80014d0:	8bbb      	ldrh	r3, [r7, #28]
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	4413      	add	r3, r2
 80014d6:	b2d8      	uxtb	r0, r3
 80014d8:	4b26      	ldr	r3, [pc, #152]	; (8001574 <ssd1351_write_char+0x124>)
 80014da:	785a      	ldrb	r2, [r3, #1]
 80014dc:	8bfb      	ldrh	r3, [r7, #30]
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	4413      	add	r3, r2
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	89fa      	ldrh	r2, [r7, #14]
 80014e6:	4619      	mov	r1, r3
 80014e8:	f7ff ff32 	bl	8001350 <ssd1351_draw_pixel>
				}
				char_pix_horiz_pos++;
 80014ec:	8bbb      	ldrh	r3, [r7, #28]
 80014ee:	3301      	adds	r3, #1
 80014f0:	83bb      	strh	r3, [r7, #28]
			while(char_pix_horiz_pos < width)
 80014f2:	8bba      	ldrh	r2, [r7, #28]
 80014f4:	8b3b      	ldrh	r3, [r7, #24]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d3e0      	bcc.n	80014bc <ssd1351_write_char+0x6c>
			}
			char_pix_vert_pos++;
 80014fa:	8bfb      	ldrh	r3, [r7, #30]
 80014fc:	3301      	adds	r3, #1
 80014fe:	83fb      	strh	r3, [r7, #30]
			char_pix_horiz_pos = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	83bb      	strh	r3, [r7, #28]
		while(char_pix_vert_pos < height)
 8001504:	8bfa      	ldrh	r2, [r7, #30]
 8001506:	8b7b      	ldrh	r3, [r7, #26]
 8001508:	429a      	cmp	r2, r3
 800150a:	d3ca      	bcc.n	80014a2 <ssd1351_write_char+0x52>
		}

	}
	ssd1351_coordinates.x += width; // we just wrote a char increment x coordinate by font width
 800150c:	4b19      	ldr	r3, [pc, #100]	; (8001574 <ssd1351_write_char+0x124>)
 800150e:	781a      	ldrb	r2, [r3, #0]
 8001510:	8b3b      	ldrh	r3, [r7, #24]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	4413      	add	r3, r2
 8001516:	b2da      	uxtb	r2, r3
 8001518:	4b16      	ldr	r3, [pc, #88]	; (8001574 <ssd1351_write_char+0x124>)
 800151a:	701a      	strb	r2, [r3, #0]
	if ((ssd1351_coordinates.x + width >= 127) & (ssd1351_coordinates.y + height <= 127)) // check if we need to go to new line
 800151c:	4b15      	ldr	r3, [pc, #84]	; (8001574 <ssd1351_write_char+0x124>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	8b3b      	ldrh	r3, [r7, #24]
 8001524:	4413      	add	r3, r2
 8001526:	2b7e      	cmp	r3, #126	; 0x7e
 8001528:	bfcc      	ite	gt
 800152a:	2301      	movgt	r3, #1
 800152c:	2300      	movle	r3, #0
 800152e:	b2da      	uxtb	r2, r3
 8001530:	4b10      	ldr	r3, [pc, #64]	; (8001574 <ssd1351_write_char+0x124>)
 8001532:	785b      	ldrb	r3, [r3, #1]
 8001534:	4619      	mov	r1, r3
 8001536:	8b7b      	ldrh	r3, [r7, #26]
 8001538:	440b      	add	r3, r1
 800153a:	2b7f      	cmp	r3, #127	; 0x7f
 800153c:	bfd4      	ite	le
 800153e:	2301      	movle	r3, #1
 8001540:	2300      	movgt	r3, #0
 8001542:	b2db      	uxtb	r3, r3
 8001544:	4013      	ands	r3, r2
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b00      	cmp	r3, #0
 800154a:	d00f      	beq.n	800156c <ssd1351_write_char+0x11c>
	{
		ssd1351_coordinates.y = ssd1351_coordinates.y + height + 2; // the +2 is simply additional space between lines
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <ssd1351_write_char+0x124>)
 800154e:	785a      	ldrb	r2, [r3, #1]
 8001550:	8b7b      	ldrh	r3, [r7, #26]
 8001552:	b2db      	uxtb	r3, r3
 8001554:	4413      	add	r3, r2
 8001556:	b2db      	uxtb	r3, r3
 8001558:	3302      	adds	r3, #2
 800155a:	b2da      	uxtb	r2, r3
 800155c:	4b05      	ldr	r3, [pc, #20]	; (8001574 <ssd1351_write_char+0x124>)
 800155e:	705a      	strb	r2, [r3, #1]
		ssd1351_coordinates.x = 0; // reset x coordinate to 0 for new line!
 8001560:	4b04      	ldr	r3, [pc, #16]	; (8001574 <ssd1351_write_char+0x124>)
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]
	}
	return;
 8001566:	e001      	b.n	800156c <ssd1351_write_char+0x11c>
		return;
 8001568:	bf00      	nop
 800156a:	e000      	b.n	800156e <ssd1351_write_char+0x11e>
	return;
 800156c:	bf00      	nop
}
 800156e:	3724      	adds	r7, #36	; 0x24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd90      	pop	{r4, r7, pc}
 8001574:	20001ac8 	.word	0x20001ac8

08001578 <ssd1351_printf>:


color_16bit_e g_background_color = COLOR_16BIT_BLACK;
color_16bit_e g_font_color = COLOR_16BIT_RED;
void ssd1351_printf(char *string)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	; 0x28
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	char mem_string[18] = "";
 8001580:	2300      	movs	r3, #0
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	f107 0310 	add.w	r3, r7, #16
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	819a      	strh	r2, [r3, #12]
	uint8_t mem_string_cnt = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t row_num = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	row_num = 0; // careful may be starting on a new row
 800159e:	2300      	movs	r3, #0
 80015a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	bool new_word_flag = true;
 80015a4:	2301      	movs	r3, #1
 80015a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	bool print_flag = false;
 80015aa:	2300      	movs	r3, #0
 80015ac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	// find all spaces first...
	if (NULL == string) return;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 808e 	beq.w	80016d4 <ssd1351_printf+0x15c>
	for(int i = 0; i < strlen(string); i++)
 80015b8:	2300      	movs	r3, #0
 80015ba:	623b      	str	r3, [r7, #32]
 80015bc:	e081      	b.n	80016c2 <ssd1351_printf+0x14a>
	{
		if (new_word_flag)
 80015be:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d00b      	beq.n	80015de <ssd1351_printf+0x66>
		{
			new_word_flag = false;
 80015c6:	2300      	movs	r3, #0
 80015c8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			row_num = i / 19;
 80015cc:	6a3b      	ldr	r3, [r7, #32]
 80015ce:	4a43      	ldr	r2, [pc, #268]	; (80016dc <ssd1351_printf+0x164>)
 80015d0:	fb82 1203 	smull	r1, r2, r2, r3
 80015d4:	10d2      	asrs	r2, r2, #3
 80015d6:	17db      	asrs	r3, r3, #31
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}
		if (strlen(string) - 1 == i) print_flag = true;
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7fe fdf6 	bl	80001d0 <strlen>
 80015e4:	4603      	mov	r3, r0
 80015e6:	1e5a      	subs	r2, r3, #1
 80015e8:	6a3b      	ldr	r3, [r7, #32]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d102      	bne.n	80015f4 <ssd1351_printf+0x7c>
 80015ee:	2301      	movs	r3, #1
 80015f0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		if (string[i] != ' ') mem_string[mem_string_cnt++] = string[i];
 80015f4:	6a3b      	ldr	r3, [r7, #32]
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	4413      	add	r3, r2
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b20      	cmp	r3, #32
 80015fe:	d00e      	beq.n	800161e <ssd1351_printf+0xa6>
 8001600:	6a3b      	ldr	r3, [r7, #32]
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	441a      	add	r2, r3
 8001606:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800160a:	1c59      	adds	r1, r3, #1
 800160c:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 8001610:	7812      	ldrb	r2, [r2, #0]
 8001612:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001616:	440b      	add	r3, r1
 8001618:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800161c:	e002      	b.n	8001624 <ssd1351_printf+0xac>
		else print_flag = true;
 800161e:	2301      	movs	r3, #1
 8001620:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		if(print_flag)
 8001624:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001628:	2b00      	cmp	r3, #0
 800162a:	d047      	beq.n	80016bc <ssd1351_printf+0x144>
		{
			mem_string_cnt = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if ((i / 19) != row_num)
 8001632:	6a3b      	ldr	r3, [r7, #32]
 8001634:	4a29      	ldr	r2, [pc, #164]	; (80016dc <ssd1351_printf+0x164>)
 8001636:	fb82 1203 	smull	r1, r2, r2, r3
 800163a:	10d2      	asrs	r2, r2, #3
 800163c:	17db      	asrs	r3, r3, #31
 800163e:	1ad2      	subs	r2, r2, r3
 8001640:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001644:	429a      	cmp	r2, r3
 8001646:	d017      	beq.n	8001678 <ssd1351_printf+0x100>
			{
				ssd1351_write_char(g_font_color, Font_7x10, '\n');
 8001648:	4b25      	ldr	r3, [pc, #148]	; (80016e0 <ssd1351_printf+0x168>)
 800164a:	8818      	ldrh	r0, [r3, #0]
 800164c:	4a25      	ldr	r2, [pc, #148]	; (80016e4 <ssd1351_printf+0x16c>)
 800164e:	230a      	movs	r3, #10
 8001650:	ca06      	ldmia	r2, {r1, r2}
 8001652:	f7ff fefd 	bl	8001450 <ssd1351_write_char>
			}
			while(mem_string[mem_string_cnt] != 0)
 8001656:	e00f      	b.n	8001678 <ssd1351_printf+0x100>
			{
				ssd1351_write_char(g_font_color, Font_7x10, mem_string[mem_string_cnt++]);
 8001658:	4b21      	ldr	r3, [pc, #132]	; (80016e0 <ssd1351_printf+0x168>)
 800165a:	8818      	ldrh	r0, [r3, #0]
 800165c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001660:	1c5a      	adds	r2, r3, #1
 8001662:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8001666:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800166a:	4413      	add	r3, r2
 800166c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001670:	4a1c      	ldr	r2, [pc, #112]	; (80016e4 <ssd1351_printf+0x16c>)
 8001672:	ca06      	ldmia	r2, {r1, r2}
 8001674:	f7ff feec 	bl	8001450 <ssd1351_write_char>
			while(mem_string[mem_string_cnt] != 0)
 8001678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800167c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001680:	4413      	add	r3, r2
 8001682:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1e6      	bne.n	8001658 <ssd1351_printf+0xe0>
			}
			ssd1351_write_char(g_font_color, Font_7x10, ' ');
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <ssd1351_printf+0x168>)
 800168c:	8818      	ldrh	r0, [r3, #0]
 800168e:	4a15      	ldr	r2, [pc, #84]	; (80016e4 <ssd1351_printf+0x16c>)
 8001690:	2320      	movs	r3, #32
 8001692:	ca06      	ldmia	r2, {r1, r2}
 8001694:	f7ff fedc 	bl	8001450 <ssd1351_write_char>
			ssd1351_write_buffer_to_display();
 8001698:	f7ff fd38 	bl	800110c <ssd1351_write_buffer_to_display>
			memset(mem_string, 0, sizeof(mem_string));
 800169c:	f107 030c 	add.w	r3, r7, #12
 80016a0:	2212      	movs	r2, #18
 80016a2:	2100      	movs	r1, #0
 80016a4:	4618      	mov	r0, r3
 80016a6:	f007 fa3b 	bl	8008b20 <memset>
			mem_string_cnt = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			new_word_flag = true;
 80016b0:	2301      	movs	r3, #1
 80016b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			print_flag = false;
 80016b6:	2300      	movs	r3, #0
 80016b8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	for(int i = 0; i < strlen(string); i++)
 80016bc:	6a3b      	ldr	r3, [r7, #32]
 80016be:	3301      	adds	r3, #1
 80016c0:	623b      	str	r3, [r7, #32]
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7fe fd84 	bl	80001d0 <strlen>
 80016c8:	4602      	mov	r2, r0
 80016ca:	6a3b      	ldr	r3, [r7, #32]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	f63f af76 	bhi.w	80015be <ssd1351_printf+0x46>
 80016d2:	e000      	b.n	80016d6 <ssd1351_printf+0x15e>
	if (NULL == string) return;
 80016d4:	bf00      	nop
		string++;
	}
	*/
	//ssd1351_write_buffer_to_display();

}
 80016d6:	3728      	adds	r7, #40	; 0x28
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	6bca1af3 	.word	0x6bca1af3
 80016e0:	2000000c 	.word	0x2000000c
 80016e4:	20000000 	.word	0x20000000

080016e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ee:	4b11      	ldr	r3, [pc, #68]	; (8001734 <HAL_MspInit+0x4c>)
 80016f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f2:	4a10      	ldr	r2, [pc, #64]	; (8001734 <HAL_MspInit+0x4c>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6613      	str	r3, [r2, #96]	; 0x60
 80016fa:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <HAL_MspInit+0x4c>)
 80016fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001706:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <HAL_MspInit+0x4c>)
 8001708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170a:	4a0a      	ldr	r2, [pc, #40]	; (8001734 <HAL_MspInit+0x4c>)
 800170c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001710:	6593      	str	r3, [r2, #88]	; 0x58
 8001712:	4b08      	ldr	r3, [pc, #32]	; (8001734 <HAL_MspInit+0x4c>)
 8001714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171a:	603b      	str	r3, [r7, #0]
 800171c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800171e:	2200      	movs	r2, #0
 8001720:	210f      	movs	r1, #15
 8001722:	f06f 0001 	mvn.w	r0, #1
 8001726:	f000 fd16 	bl	8002156 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40021000 	.word	0x40021000

08001738 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	; 0x28
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a25      	ldr	r2, [pc, #148]	; (80017ec <HAL_SPI_MspInit+0xb4>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d144      	bne.n	80017e4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800175a:	4b25      	ldr	r3, [pc, #148]	; (80017f0 <HAL_SPI_MspInit+0xb8>)
 800175c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175e:	4a24      	ldr	r2, [pc, #144]	; (80017f0 <HAL_SPI_MspInit+0xb8>)
 8001760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001764:	6593      	str	r3, [r2, #88]	; 0x58
 8001766:	4b22      	ldr	r3, [pc, #136]	; (80017f0 <HAL_SPI_MspInit+0xb8>)
 8001768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001772:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <HAL_SPI_MspInit+0xb8>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001776:	4a1e      	ldr	r2, [pc, #120]	; (80017f0 <HAL_SPI_MspInit+0xb8>)
 8001778:	f043 0304 	orr.w	r3, r3, #4
 800177c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800177e:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <HAL_SPI_MspInit+0xb8>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001782:	f003 0304 	and.w	r3, r3, #4
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800178a:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <HAL_SPI_MspInit+0xb8>)
 800178c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178e:	4a18      	ldr	r2, [pc, #96]	; (80017f0 <HAL_SPI_MspInit+0xb8>)
 8001790:	f043 0302 	orr.w	r3, r3, #2
 8001794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001796:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <HAL_SPI_MspInit+0xb8>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	60bb      	str	r3, [r7, #8]
 80017a0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017a2:	2304      	movs	r3, #4
 80017a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	2302      	movs	r3, #2
 80017a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ae:	2303      	movs	r3, #3
 80017b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017b2:	2305      	movs	r3, #5
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017b6:	f107 0314 	add.w	r3, r7, #20
 80017ba:	4619      	mov	r1, r3
 80017bc:	480d      	ldr	r0, [pc, #52]	; (80017f4 <HAL_SPI_MspInit+0xbc>)
 80017be:	f001 f9fb 	bl	8002bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80017c2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80017c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	2302      	movs	r3, #2
 80017ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d0:	2303      	movs	r3, #3
 80017d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017d4:	2305      	movs	r3, #5
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	4619      	mov	r1, r3
 80017de:	4806      	ldr	r0, [pc, #24]	; (80017f8 <HAL_SPI_MspInit+0xc0>)
 80017e0:	f001 f9ea 	bl	8002bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80017e4:	bf00      	nop
 80017e6:	3728      	adds	r7, #40	; 0x28
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40003800 	.word	0x40003800
 80017f0:	40021000 	.word	0x40021000
 80017f4:	48000800 	.word	0x48000800
 80017f8:	48000400 	.word	0x48000400

080017fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	; 0x28
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a45      	ldr	r2, [pc, #276]	; (8001930 <HAL_UART_MspInit+0x134>)
 800181a:	4293      	cmp	r3, r2
 800181c:	f040 8084 	bne.w	8001928 <HAL_UART_MspInit+0x12c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001820:	4b44      	ldr	r3, [pc, #272]	; (8001934 <HAL_UART_MspInit+0x138>)
 8001822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001824:	4a43      	ldr	r2, [pc, #268]	; (8001934 <HAL_UART_MspInit+0x138>)
 8001826:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800182a:	6613      	str	r3, [r2, #96]	; 0x60
 800182c:	4b41      	ldr	r3, [pc, #260]	; (8001934 <HAL_UART_MspInit+0x138>)
 800182e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001838:	4b3e      	ldr	r3, [pc, #248]	; (8001934 <HAL_UART_MspInit+0x138>)
 800183a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183c:	4a3d      	ldr	r2, [pc, #244]	; (8001934 <HAL_UART_MspInit+0x138>)
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001844:	4b3b      	ldr	r3, [pc, #236]	; (8001934 <HAL_UART_MspInit+0x138>)
 8001846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001850:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001856:	2302      	movs	r3, #2
 8001858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185e:	2303      	movs	r3, #3
 8001860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001862:	2307      	movs	r3, #7
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001866:	f107 0314 	add.w	r3, r7, #20
 800186a:	4619      	mov	r1, r3
 800186c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001870:	f001 f9a2 	bl	8002bb8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001874:	4b30      	ldr	r3, [pc, #192]	; (8001938 <HAL_UART_MspInit+0x13c>)
 8001876:	4a31      	ldr	r2, [pc, #196]	; (800193c <HAL_UART_MspInit+0x140>)
 8001878:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 800187a:	4b2f      	ldr	r3, [pc, #188]	; (8001938 <HAL_UART_MspInit+0x13c>)
 800187c:	2202      	movs	r2, #2
 800187e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001880:	4b2d      	ldr	r3, [pc, #180]	; (8001938 <HAL_UART_MspInit+0x13c>)
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001886:	4b2c      	ldr	r3, [pc, #176]	; (8001938 <HAL_UART_MspInit+0x13c>)
 8001888:	2200      	movs	r2, #0
 800188a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800188c:	4b2a      	ldr	r3, [pc, #168]	; (8001938 <HAL_UART_MspInit+0x13c>)
 800188e:	2280      	movs	r2, #128	; 0x80
 8001890:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001892:	4b29      	ldr	r3, [pc, #164]	; (8001938 <HAL_UART_MspInit+0x13c>)
 8001894:	2200      	movs	r2, #0
 8001896:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001898:	4b27      	ldr	r3, [pc, #156]	; (8001938 <HAL_UART_MspInit+0x13c>)
 800189a:	2200      	movs	r2, #0
 800189c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800189e:	4b26      	ldr	r3, [pc, #152]	; (8001938 <HAL_UART_MspInit+0x13c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018a4:	4b24      	ldr	r3, [pc, #144]	; (8001938 <HAL_UART_MspInit+0x13c>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80018aa:	4823      	ldr	r0, [pc, #140]	; (8001938 <HAL_UART_MspInit+0x13c>)
 80018ac:	f000 fc8a 	bl	80021c4 <HAL_DMA_Init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 80018b6:	f7fe ffb1 	bl	800081c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a1e      	ldr	r2, [pc, #120]	; (8001938 <HAL_UART_MspInit+0x13c>)
 80018be:	671a      	str	r2, [r3, #112]	; 0x70
 80018c0:	4a1d      	ldr	r2, [pc, #116]	; (8001938 <HAL_UART_MspInit+0x13c>)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80018c6:	4b1e      	ldr	r3, [pc, #120]	; (8001940 <HAL_UART_MspInit+0x144>)
 80018c8:	4a1e      	ldr	r2, [pc, #120]	; (8001944 <HAL_UART_MspInit+0x148>)
 80018ca:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 80018cc:	4b1c      	ldr	r3, [pc, #112]	; (8001940 <HAL_UART_MspInit+0x144>)
 80018ce:	2202      	movs	r2, #2
 80018d0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018d2:	4b1b      	ldr	r3, [pc, #108]	; (8001940 <HAL_UART_MspInit+0x144>)
 80018d4:	2210      	movs	r2, #16
 80018d6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018d8:	4b19      	ldr	r3, [pc, #100]	; (8001940 <HAL_UART_MspInit+0x144>)
 80018da:	2200      	movs	r2, #0
 80018dc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018de:	4b18      	ldr	r3, [pc, #96]	; (8001940 <HAL_UART_MspInit+0x144>)
 80018e0:	2280      	movs	r2, #128	; 0x80
 80018e2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018e4:	4b16      	ldr	r3, [pc, #88]	; (8001940 <HAL_UART_MspInit+0x144>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <HAL_UART_MspInit+0x144>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80018f0:	4b13      	ldr	r3, [pc, #76]	; (8001940 <HAL_UART_MspInit+0x144>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018f6:	4b12      	ldr	r3, [pc, #72]	; (8001940 <HAL_UART_MspInit+0x144>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80018fc:	4810      	ldr	r0, [pc, #64]	; (8001940 <HAL_UART_MspInit+0x144>)
 80018fe:	f000 fc61 	bl	80021c4 <HAL_DMA_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8001908:	f7fe ff88 	bl	800081c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a0c      	ldr	r2, [pc, #48]	; (8001940 <HAL_UART_MspInit+0x144>)
 8001910:	66da      	str	r2, [r3, #108]	; 0x6c
 8001912:	4a0b      	ldr	r2, [pc, #44]	; (8001940 <HAL_UART_MspInit+0x144>)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001918:	2200      	movs	r2, #0
 800191a:	2105      	movs	r1, #5
 800191c:	2025      	movs	r0, #37	; 0x25
 800191e:	f000 fc1a 	bl	8002156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001922:	2025      	movs	r0, #37	; 0x25
 8001924:	f000 fc33 	bl	800218e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001928:	bf00      	nop
 800192a:	3728      	adds	r7, #40	; 0x28
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40013800 	.word	0x40013800
 8001934:	40021000 	.word	0x40021000
 8001938:	200019fc 	.word	0x200019fc
 800193c:	40020058 	.word	0x40020058
 8001940:	200019b4 	.word	0x200019b4
 8001944:	40020044 	.word	0x40020044

08001948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800195a:	e7fe      	b.n	800195a <HardFault_Handler+0x4>

0800195c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <MemManage_Handler+0x4>

08001962 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001966:	e7fe      	b.n	8001966 <BusFault_Handler+0x4>

08001968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800196c:	e7fe      	b.n	800196c <UsageFault_Handler+0x4>

0800196e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001980:	f000 faca 	bl	8001f18 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001984:	f006 f834 	bl	80079f0 <xTaskGetSchedulerState>
 8001988:	4603      	mov	r3, r0
 800198a:	2b01      	cmp	r3, #1
 800198c:	d001      	beq.n	8001992 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800198e:	f006 fe1b 	bl	80085c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800199c:	4802      	ldr	r0, [pc, #8]	; (80019a8 <DMA1_Channel4_IRQHandler+0x10>)
 800199e:	f000 fda8 	bl	80024f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	200019b4 	.word	0x200019b4

080019ac <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80019b0:	4802      	ldr	r0, [pc, #8]	; (80019bc <DMA1_Channel5_IRQHandler+0x10>)
 80019b2:	f000 fd9e 	bl	80024f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200019fc 	.word	0x200019fc

080019c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019c4:	4802      	ldr	r0, [pc, #8]	; (80019d0 <USART1_IRQHandler+0x10>)
 80019c6:	f003 f971 	bl	8004cac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20001a44 	.word	0x20001a44

080019d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019d8:	4b17      	ldr	r3, [pc, #92]	; (8001a38 <SystemInit+0x64>)
 80019da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019de:	4a16      	ldr	r2, [pc, #88]	; (8001a38 <SystemInit+0x64>)
 80019e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80019e8:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <SystemInit+0x68>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a13      	ldr	r2, [pc, #76]	; (8001a3c <SystemInit+0x68>)
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80019f4:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <SystemInit+0x68>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80019fa:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <SystemInit+0x68>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a0f      	ldr	r2, [pc, #60]	; (8001a3c <SystemInit+0x68>)
 8001a00:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001a04:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001a08:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <SystemInit+0x68>)
 8001a0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a10:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a12:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <SystemInit+0x68>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a09      	ldr	r2, [pc, #36]	; (8001a3c <SystemInit+0x68>)
 8001a18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a1c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001a1e:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <SystemInit+0x68>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a24:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <SystemInit+0x64>)
 8001a26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a2a:	609a      	str	r2, [r3, #8]
#endif
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000ed00 	.word	0xe000ed00
 8001a3c:	40021000 	.word	0x40021000

08001a40 <task_create>:
  .priority = (osPriority_t) osPriorityNormal,
};


void task_create(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	packet_queue_init();
 8001a44:	f7ff f91a 	bl	8000c7c <packet_queue_init>
	task_sensor_rxHandle = osThreadNew(sensor_rx_entry, NULL, &task_sensor_rx_attributes);
 8001a48:	4a10      	ldr	r2, [pc, #64]	; (8001a8c <task_create+0x4c>)
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	4810      	ldr	r0, [pc, #64]	; (8001a90 <task_create+0x50>)
 8001a4e:	f004 f945 	bl	8005cdc <osThreadNew>
 8001a52:	4603      	mov	r3, r0
 8001a54:	4a0f      	ldr	r2, [pc, #60]	; (8001a94 <task_create+0x54>)
 8001a56:	6013      	str	r3, [r2, #0]
	task_sensor_txHandle = osThreadNew(task_sensor_tx_entry, NULL, &task_sensor_tx_attributes);
 8001a58:	4a0f      	ldr	r2, [pc, #60]	; (8001a98 <task_create+0x58>)
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	480f      	ldr	r0, [pc, #60]	; (8001a9c <task_create+0x5c>)
 8001a5e:	f004 f93d 	bl	8005cdc <osThreadNew>
 8001a62:	4603      	mov	r3, r0
 8001a64:	4a0e      	ldr	r2, [pc, #56]	; (8001aa0 <task_create+0x60>)
 8001a66:	6013      	str	r3, [r2, #0]
	task_sensor_accHandle = osThreadNew(task_sensor_access_entry, NULL, &task_sensor_acc_attributes);
 8001a68:	4a0e      	ldr	r2, [pc, #56]	; (8001aa4 <task_create+0x64>)
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	480e      	ldr	r0, [pc, #56]	; (8001aa8 <task_create+0x68>)
 8001a6e:	f004 f935 	bl	8005cdc <osThreadNew>
 8001a72:	4603      	mov	r3, r0
 8001a74:	4a0d      	ldr	r2, [pc, #52]	; (8001aac <task_create+0x6c>)
 8001a76:	6013      	str	r3, [r2, #0]
	task_display_upHandle = osThreadNew(task_display_update_entry, NULL, &task_display_up_attributes);
 8001a78:	4a0d      	ldr	r2, [pc, #52]	; (8001ab0 <task_create+0x70>)
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	480d      	ldr	r0, [pc, #52]	; (8001ab4 <task_create+0x74>)
 8001a7e:	f004 f92d 	bl	8005cdc <osThreadNew>
 8001a82:	4603      	mov	r3, r0
 8001a84:	4a0c      	ldr	r2, [pc, #48]	; (8001ab8 <task_create+0x78>)
 8001a86:	6013      	str	r3, [r2, #0]
}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	080093b0 	.word	0x080093b0
 8001a90:	08000ffd 	.word	0x08000ffd
 8001a94:	20009e08 	.word	0x20009e08
 8001a98:	080093d4 	.word	0x080093d4
 8001a9c:	08000fcd 	.word	0x08000fcd
 8001aa0:	2000a0c8 	.word	0x2000a0c8
 8001aa4:	080093f8 	.word	0x080093f8
 8001aa8:	08001ad1 	.word	0x08001ad1
 8001aac:	2000a328 	.word	0x2000a328
 8001ab0:	0800941c 	.word	0x0800941c
 8001ab4:	08001abd 	.word	0x08001abd
 8001ab8:	20009e0c 	.word	0x20009e0c

08001abc <task_display_update_entry>:
#include "cmsis_os.h"
#include "task_sensor_access.h"


void task_display_update_entry(void *argument)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_sensor_access_entry */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1000);
 8001ac4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ac8:	f004 f99a 	bl	8005e00 <osDelay>
 8001acc:	e7fa      	b.n	8001ac4 <task_display_update_entry+0x8>
	...

08001ad0 <task_sensor_access_entry>:

gt521fx_state_e gt521fx_state = GT521FX_STATE_ENROLL;


void task_sensor_access_entry(void *argument)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
	bool first_pass = true;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	73fb      	strb	r3, [r7, #15]
	while(1)
	{
		if (first_pass)
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d020      	beq.n	8001b24 <task_sensor_access_entry+0x54>
		{
			gt521fx_open();
 8001ae2:	f7ff f84b 	bl	8000b7c <gt521fx_open>
			while (!packet_rsp_was_received()) osDelay(500);
 8001ae6:	e003      	b.n	8001af0 <task_sensor_access_entry+0x20>
 8001ae8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001aec:	f004 f988 	bl	8005e00 <osDelay>
 8001af0:	f7ff f9d4 	bl	8000e9c <packet_rsp_was_received>
 8001af4:	4603      	mov	r3, r0
 8001af6:	f083 0301 	eor.w	r3, r3, #1
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1f3      	bne.n	8001ae8 <task_sensor_access_entry+0x18>
			gt521fx_led_on();
 8001b00:	f7ff f830 	bl	8000b64 <gt521fx_led_on>
			while (!packet_rsp_was_received()) osDelay(500);
 8001b04:	e003      	b.n	8001b0e <task_sensor_access_entry+0x3e>
 8001b06:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b0a:	f004 f979 	bl	8005e00 <osDelay>
 8001b0e:	f7ff f9c5 	bl	8000e9c <packet_rsp_was_received>
 8001b12:	4603      	mov	r3, r0
 8001b14:	f083 0301 	eor.w	r3, r3, #1
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1f3      	bne.n	8001b06 <task_sensor_access_entry+0x36>
			first_pass = false;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	73fb      	strb	r3, [r7, #15]
 8001b22:	e7db      	b.n	8001adc <task_sensor_access_entry+0xc>
		}
		else
		{ 
			switch(gt521fx_state)
 8001b24:	4bb7      	ldr	r3, [pc, #732]	; (8001e04 <task_sensor_access_entry+0x334>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b05      	cmp	r3, #5
 8001b2a:	d8d7      	bhi.n	8001adc <task_sensor_access_entry+0xc>
 8001b2c:	a201      	add	r2, pc, #4	; (adr r2, 8001b34 <task_sensor_access_entry+0x64>)
 8001b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b32:	bf00      	nop
 8001b34:	08001b4d 	.word	0x08001b4d
 8001b38:	08001add 	.word	0x08001add
 8001b3c:	08001add 	.word	0x08001add
 8001b40:	08001add 	.word	0x08001add
 8001b44:	08001def 	.word	0x08001def
 8001b48:	08001df7 	.word	0x08001df7
			{
				case GT521FX_STATE_ENROLL:
					// this state should only be entered if correct keypad buttons are pressed

					// my thoughts are that enroll state would be entered via button press		
					ssd1351_printf("GT521FX enroll state");
 8001b4c:	48ae      	ldr	r0, [pc, #696]	; (8001e08 <task_sensor_access_entry+0x338>)
 8001b4e:	f7ff fd13 	bl	8001578 <ssd1351_printf>
					
					gt521fx_start_enrollment(flash_access_gt521fx_last_id() + 1);
 8001b52:	f7fe febd 	bl	80008d0 <flash_access_gt521fx_last_id>
 8001b56:	4603      	mov	r3, r0
 8001b58:	3301      	adds	r3, #1
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff f819 	bl	8000b94 <gt521fx_start_enrollment>
					while (!packet_rsp_was_received()) osDelay(500);
 8001b62:	e003      	b.n	8001b6c <task_sensor_access_entry+0x9c>
 8001b64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b68:	f004 f94a 	bl	8005e00 <osDelay>
 8001b6c:	f7ff f996 	bl	8000e9c <packet_rsp_was_received>
 8001b70:	4603      	mov	r3, r0
 8001b72:	f083 0301 	eor.w	r3, r3, #1
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1f3      	bne.n	8001b64 <task_sensor_access_entry+0x94>
					if (gt521fx_nack_flag()) gt521fx_state = GT521FX_STATE_ERROR;
 8001b7c:	f7fe ff9a 	bl	8000ab4 <gt521fx_nack_flag>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d002      	beq.n	8001b8c <task_sensor_access_entry+0xbc>
 8001b86:	4b9f      	ldr	r3, [pc, #636]	; (8001e04 <task_sensor_access_entry+0x334>)
 8001b88:	2204      	movs	r2, #4
 8001b8a:	701a      	strb	r2, [r3, #0]
					
					ssd1351_printf("\nPlace finger on sensor");
 8001b8c:	489f      	ldr	r0, [pc, #636]	; (8001e0c <task_sensor_access_entry+0x33c>)
 8001b8e:	f7ff fcf3 	bl	8001578 <ssd1351_printf>
					while (!gt521fx_finger_is_pressed_flag()) 
 8001b92:	e00e      	b.n	8001bb2 <task_sensor_access_entry+0xe2>
					{
						gt521fx_finger_is_pressed();
 8001b94:	f7ff f838 	bl	8000c08 <gt521fx_finger_is_pressed>
						while (!packet_rsp_was_received()) osDelay(500);
 8001b98:	e003      	b.n	8001ba2 <task_sensor_access_entry+0xd2>
 8001b9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b9e:	f004 f92f 	bl	8005e00 <osDelay>
 8001ba2:	f7ff f97b 	bl	8000e9c <packet_rsp_was_received>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	f083 0301 	eor.w	r3, r3, #1
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f3      	bne.n	8001b9a <task_sensor_access_entry+0xca>
					while (!gt521fx_finger_is_pressed_flag()) 
 8001bb2:	f7fe ffab 	bl	8000b0c <gt521fx_finger_is_pressed_flag>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	f083 0301 	eor.w	r3, r3, #1
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1e8      	bne.n	8001b94 <task_sensor_access_entry+0xc4>
					}
					
					gt521fx_capture_finger();
 8001bc2:	f7ff f82d 	bl	8000c20 <gt521fx_capture_finger>
					while (!packet_rsp_was_received()) osDelay(500);
 8001bc6:	e003      	b.n	8001bd0 <task_sensor_access_entry+0x100>
 8001bc8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bcc:	f004 f918 	bl	8005e00 <osDelay>
 8001bd0:	f7ff f964 	bl	8000e9c <packet_rsp_was_received>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	f083 0301 	eor.w	r3, r3, #1
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1f3      	bne.n	8001bc8 <task_sensor_access_entry+0xf8>
					if (gt521fx_nack_flag()) gt521fx_state = GT521FX_STATE_ERROR;
 8001be0:	f7fe ff68 	bl	8000ab4 <gt521fx_nack_flag>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d002      	beq.n	8001bf0 <task_sensor_access_entry+0x120>
 8001bea:	4b86      	ldr	r3, [pc, #536]	; (8001e04 <task_sensor_access_entry+0x334>)
 8001bec:	2204      	movs	r2, #4
 8001bee:	701a      	strb	r2, [r3, #0]
					
					gt521fx_enrollment(GT521FX_ENROLLMENT_STAGE_FIRST);
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	f7fe ffe1 	bl	8000bb8 <gt521fx_enrollment>
					while (!packet_rsp_was_received()) osDelay(500);
 8001bf6:	e003      	b.n	8001c00 <task_sensor_access_entry+0x130>
 8001bf8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bfc:	f004 f900 	bl	8005e00 <osDelay>
 8001c00:	f7ff f94c 	bl	8000e9c <packet_rsp_was_received>
 8001c04:	4603      	mov	r3, r0
 8001c06:	f083 0301 	eor.w	r3, r3, #1
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1f3      	bne.n	8001bf8 <task_sensor_access_entry+0x128>
					if (gt521fx_nack_flag()) gt521fx_state = GT521FX_STATE_ERROR;
 8001c10:	f7fe ff50 	bl	8000ab4 <gt521fx_nack_flag>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d002      	beq.n	8001c20 <task_sensor_access_entry+0x150>
 8001c1a:	4b7a      	ldr	r3, [pc, #488]	; (8001e04 <task_sensor_access_entry+0x334>)
 8001c1c:	2204      	movs	r2, #4
 8001c1e:	701a      	strb	r2, [r3, #0]
					
					ssd1351_printf("\nRemove finger");
 8001c20:	487b      	ldr	r0, [pc, #492]	; (8001e10 <task_sensor_access_entry+0x340>)
 8001c22:	f7ff fca9 	bl	8001578 <ssd1351_printf>
					while (gt521fx_finger_is_pressed_flag()) 
 8001c26:	e00e      	b.n	8001c46 <task_sensor_access_entry+0x176>
					{
						gt521fx_finger_is_pressed();
 8001c28:	f7fe ffee 	bl	8000c08 <gt521fx_finger_is_pressed>
						while (!packet_rsp_was_received()) osDelay(500);
 8001c2c:	e003      	b.n	8001c36 <task_sensor_access_entry+0x166>
 8001c2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c32:	f004 f8e5 	bl	8005e00 <osDelay>
 8001c36:	f7ff f931 	bl	8000e9c <packet_rsp_was_received>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	f083 0301 	eor.w	r3, r3, #1
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f3      	bne.n	8001c2e <task_sensor_access_entry+0x15e>
					while (gt521fx_finger_is_pressed_flag()) 
 8001c46:	f7fe ff61 	bl	8000b0c <gt521fx_finger_is_pressed_flag>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1eb      	bne.n	8001c28 <task_sensor_access_entry+0x158>
					}
					ssd1351_clear_screen();
 8001c50:	f7ff fbe6 	bl	8001420 <ssd1351_clear_screen>
					ssd1351_printf("\nPlace finger on sensor");
 8001c54:	486d      	ldr	r0, [pc, #436]	; (8001e0c <task_sensor_access_entry+0x33c>)
 8001c56:	f7ff fc8f 	bl	8001578 <ssd1351_printf>
					while (!gt521fx_finger_is_pressed_flag()) 
 8001c5a:	e00e      	b.n	8001c7a <task_sensor_access_entry+0x1aa>
					{
						gt521fx_finger_is_pressed();
 8001c5c:	f7fe ffd4 	bl	8000c08 <gt521fx_finger_is_pressed>
						while (!packet_rsp_was_received()) osDelay(500);
 8001c60:	e003      	b.n	8001c6a <task_sensor_access_entry+0x19a>
 8001c62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c66:	f004 f8cb 	bl	8005e00 <osDelay>
 8001c6a:	f7ff f917 	bl	8000e9c <packet_rsp_was_received>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	f083 0301 	eor.w	r3, r3, #1
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f3      	bne.n	8001c62 <task_sensor_access_entry+0x192>
					while (!gt521fx_finger_is_pressed_flag()) 
 8001c7a:	f7fe ff47 	bl	8000b0c <gt521fx_finger_is_pressed_flag>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	f083 0301 	eor.w	r3, r3, #1
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1e8      	bne.n	8001c5c <task_sensor_access_entry+0x18c>
					}
					
					gt521fx_capture_finger();
 8001c8a:	f7fe ffc9 	bl	8000c20 <gt521fx_capture_finger>
					while (!packet_rsp_was_received()) osDelay(500);
 8001c8e:	e003      	b.n	8001c98 <task_sensor_access_entry+0x1c8>
 8001c90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c94:	f004 f8b4 	bl	8005e00 <osDelay>
 8001c98:	f7ff f900 	bl	8000e9c <packet_rsp_was_received>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	f083 0301 	eor.w	r3, r3, #1
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1f3      	bne.n	8001c90 <task_sensor_access_entry+0x1c0>
					if (gt521fx_nack_flag()) gt521fx_state = GT521FX_STATE_ERROR;
 8001ca8:	f7fe ff04 	bl	8000ab4 <gt521fx_nack_flag>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d002      	beq.n	8001cb8 <task_sensor_access_entry+0x1e8>
 8001cb2:	4b54      	ldr	r3, [pc, #336]	; (8001e04 <task_sensor_access_entry+0x334>)
 8001cb4:	2204      	movs	r2, #4
 8001cb6:	701a      	strb	r2, [r3, #0]
					
					gt521fx_enrollment(GT521FX_ENROLLMENT_STAGE_SECOND);
 8001cb8:	2001      	movs	r0, #1
 8001cba:	f7fe ff7d 	bl	8000bb8 <gt521fx_enrollment>
					while (!packet_rsp_was_received()) osDelay(500);
 8001cbe:	e003      	b.n	8001cc8 <task_sensor_access_entry+0x1f8>
 8001cc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cc4:	f004 f89c 	bl	8005e00 <osDelay>
 8001cc8:	f7ff f8e8 	bl	8000e9c <packet_rsp_was_received>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	f083 0301 	eor.w	r3, r3, #1
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1f3      	bne.n	8001cc0 <task_sensor_access_entry+0x1f0>
					if (gt521fx_nack_flag()) gt521fx_state = GT521FX_STATE_ERROR;
 8001cd8:	f7fe feec 	bl	8000ab4 <gt521fx_nack_flag>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d002      	beq.n	8001ce8 <task_sensor_access_entry+0x218>
 8001ce2:	4b48      	ldr	r3, [pc, #288]	; (8001e04 <task_sensor_access_entry+0x334>)
 8001ce4:	2204      	movs	r2, #4
 8001ce6:	701a      	strb	r2, [r3, #0]
					
					ssd1351_printf("\nRemove finger");
 8001ce8:	4849      	ldr	r0, [pc, #292]	; (8001e10 <task_sensor_access_entry+0x340>)
 8001cea:	f7ff fc45 	bl	8001578 <ssd1351_printf>
					while (gt521fx_finger_is_pressed_flag()) 
 8001cee:	e00e      	b.n	8001d0e <task_sensor_access_entry+0x23e>
					{
						gt521fx_finger_is_pressed();
 8001cf0:	f7fe ff8a 	bl	8000c08 <gt521fx_finger_is_pressed>
						while (!packet_rsp_was_received()) osDelay(500);
 8001cf4:	e003      	b.n	8001cfe <task_sensor_access_entry+0x22e>
 8001cf6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cfa:	f004 f881 	bl	8005e00 <osDelay>
 8001cfe:	f7ff f8cd 	bl	8000e9c <packet_rsp_was_received>
 8001d02:	4603      	mov	r3, r0
 8001d04:	f083 0301 	eor.w	r3, r3, #1
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f3      	bne.n	8001cf6 <task_sensor_access_entry+0x226>
					while (gt521fx_finger_is_pressed_flag()) 
 8001d0e:	f7fe fefd 	bl	8000b0c <gt521fx_finger_is_pressed_flag>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1eb      	bne.n	8001cf0 <task_sensor_access_entry+0x220>
					}
					
					ssd1351_printf("\nPlace finger on sensor");
 8001d18:	483c      	ldr	r0, [pc, #240]	; (8001e0c <task_sensor_access_entry+0x33c>)
 8001d1a:	f7ff fc2d 	bl	8001578 <ssd1351_printf>
					while (!gt521fx_finger_is_pressed_flag()) 
 8001d1e:	e00e      	b.n	8001d3e <task_sensor_access_entry+0x26e>
					{
						gt521fx_finger_is_pressed();
 8001d20:	f7fe ff72 	bl	8000c08 <gt521fx_finger_is_pressed>
						while (!packet_rsp_was_received()) osDelay(500);
 8001d24:	e003      	b.n	8001d2e <task_sensor_access_entry+0x25e>
 8001d26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d2a:	f004 f869 	bl	8005e00 <osDelay>
 8001d2e:	f7ff f8b5 	bl	8000e9c <packet_rsp_was_received>
 8001d32:	4603      	mov	r3, r0
 8001d34:	f083 0301 	eor.w	r3, r3, #1
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f3      	bne.n	8001d26 <task_sensor_access_entry+0x256>
					while (!gt521fx_finger_is_pressed_flag()) 
 8001d3e:	f7fe fee5 	bl	8000b0c <gt521fx_finger_is_pressed_flag>
 8001d42:	4603      	mov	r3, r0
 8001d44:	f083 0301 	eor.w	r3, r3, #1
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1e8      	bne.n	8001d20 <task_sensor_access_entry+0x250>
					}
					
					gt521fx_capture_finger();
 8001d4e:	f7fe ff67 	bl	8000c20 <gt521fx_capture_finger>
					while (!packet_rsp_was_received()) osDelay(500);
 8001d52:	e003      	b.n	8001d5c <task_sensor_access_entry+0x28c>
 8001d54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d58:	f004 f852 	bl	8005e00 <osDelay>
 8001d5c:	f7ff f89e 	bl	8000e9c <packet_rsp_was_received>
 8001d60:	4603      	mov	r3, r0
 8001d62:	f083 0301 	eor.w	r3, r3, #1
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1f3      	bne.n	8001d54 <task_sensor_access_entry+0x284>
					if (gt521fx_nack_flag()) gt521fx_state = GT521FX_STATE_ERROR;
 8001d6c:	f7fe fea2 	bl	8000ab4 <gt521fx_nack_flag>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d002      	beq.n	8001d7c <task_sensor_access_entry+0x2ac>
 8001d76:	4b23      	ldr	r3, [pc, #140]	; (8001e04 <task_sensor_access_entry+0x334>)
 8001d78:	2204      	movs	r2, #4
 8001d7a:	701a      	strb	r2, [r3, #0]
					
					gt521fx_enrollment(GT521FX_ENROLLMENT_STAGE_THIRD);
 8001d7c:	2002      	movs	r0, #2
 8001d7e:	f7fe ff1b 	bl	8000bb8 <gt521fx_enrollment>
					while (!packet_rsp_was_received()) osDelay(500);
 8001d82:	e003      	b.n	8001d8c <task_sensor_access_entry+0x2bc>
 8001d84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d88:	f004 f83a 	bl	8005e00 <osDelay>
 8001d8c:	f7ff f886 	bl	8000e9c <packet_rsp_was_received>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f083 0301 	eor.w	r3, r3, #1
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1f3      	bne.n	8001d84 <task_sensor_access_entry+0x2b4>
					if (gt521fx_nack_flag()) gt521fx_state = GT521FX_STATE_ERROR;
 8001d9c:	f7fe fe8a 	bl	8000ab4 <gt521fx_nack_flag>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d002      	beq.n	8001dac <task_sensor_access_entry+0x2dc>
 8001da6:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <task_sensor_access_entry+0x334>)
 8001da8:	2204      	movs	r2, #4
 8001daa:	701a      	strb	r2, [r3, #0]
					
					ssd1351_printf("\nRemove finger");
 8001dac:	4818      	ldr	r0, [pc, #96]	; (8001e10 <task_sensor_access_entry+0x340>)
 8001dae:	f7ff fbe3 	bl	8001578 <ssd1351_printf>
					while (gt521fx_finger_is_pressed_flag()) 
 8001db2:	e00e      	b.n	8001dd2 <task_sensor_access_entry+0x302>
					{
						gt521fx_finger_is_pressed();
 8001db4:	f7fe ff28 	bl	8000c08 <gt521fx_finger_is_pressed>
						while (!packet_rsp_was_received()) osDelay(500);
 8001db8:	e003      	b.n	8001dc2 <task_sensor_access_entry+0x2f2>
 8001dba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dbe:	f004 f81f 	bl	8005e00 <osDelay>
 8001dc2:	f7ff f86b 	bl	8000e9c <packet_rsp_was_received>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	f083 0301 	eor.w	r3, r3, #1
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f3      	bne.n	8001dba <task_sensor_access_entry+0x2ea>
					while (gt521fx_finger_is_pressed_flag()) 
 8001dd2:	f7fe fe9b 	bl	8000b0c <gt521fx_finger_is_pressed_flag>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1eb      	bne.n	8001db4 <task_sensor_access_entry+0x2e4>
					}
					flash_access_enroll_update();
 8001ddc:	f7fe fd58 	bl	8000890 <flash_access_enroll_update>
					ssd1351_printf("\nEnroll successful");
 8001de0:	480c      	ldr	r0, [pc, #48]	; (8001e14 <task_sensor_access_entry+0x344>)
 8001de2:	f7ff fbc9 	bl	8001578 <ssd1351_printf>
					gt521fx_state = GT521FX_STATE_VERIFY;
 8001de6:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <task_sensor_access_entry+0x334>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	701a      	strb	r2, [r3, #0]
				break;
 8001dec:	e008      	b.n	8001e00 <task_sensor_access_entry+0x330>
				case GT521FX_STATE_VERIFY:
				break;
				case GT521FX_STATE_DELETE:
				break;
				case GT521FX_STATE_ERROR:
					ssd1351_printf("\nERROR");
 8001dee:	480a      	ldr	r0, [pc, #40]	; (8001e18 <task_sensor_access_entry+0x348>)
 8001df0:	f7ff fbc2 	bl	8001578 <ssd1351_printf>
					while(1);
 8001df4:	e7fe      	b.n	8001df4 <task_sensor_access_entry+0x324>
				break;
				case GT521FX_STATE_NOTHING_TO_DO:
					osDelay(1000);
 8001df6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dfa:	f004 f801 	bl	8005e00 <osDelay>
				break;
 8001dfe:	bf00      	nop
		if (first_pass)
 8001e00:	e66c      	b.n	8001adc <task_sensor_access_entry+0xc>
 8001e02:	bf00      	nop
 8001e04:	20000085 	.word	0x20000085
 8001e08:	08008b88 	.word	0x08008b88
 8001e0c:	08008ba0 	.word	0x08008ba0
 8001e10:	08008bb8 	.word	0x08008bb8
 8001e14:	08008bc8 	.word	0x08008bc8
 8001e18:	08008bdc 	.word	0x08008bdc

08001e1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e20:	f7ff fdd8 	bl	80019d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001e24:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001e26:	e003      	b.n	8001e30 <LoopCopyDataInit>

08001e28 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001e28:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001e2a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001e2c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001e2e:	3104      	adds	r1, #4

08001e30 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001e30:	480a      	ldr	r0, [pc, #40]	; (8001e5c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001e32:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001e34:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001e36:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001e38:	d3f6      	bcc.n	8001e28 <CopyDataInit>
	ldr	r2, =_sbss
 8001e3a:	4a0a      	ldr	r2, [pc, #40]	; (8001e64 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001e3c:	e002      	b.n	8001e44 <LoopFillZerobss>

08001e3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001e3e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001e40:	f842 3b04 	str.w	r3, [r2], #4

08001e44 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001e44:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <LoopForever+0x16>)
	cmp	r2, r3
 8001e46:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001e48:	d3f9      	bcc.n	8001e3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e4a:	f006 fe37 	bl	8008abc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e4e:	f7fe fef3 	bl	8000c38 <main>

08001e52 <LoopForever>:

LoopForever:
    b LoopForever
 8001e52:	e7fe      	b.n	8001e52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e54:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001e58:	08009450 	.word	0x08009450
	ldr	r0, =_sdata
 8001e5c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001e60:	20000040 	.word	0x20000040
	ldr	r2, =_sbss
 8001e64:	20000040 	.word	0x20000040
	ldr	r3, = _ebss
 8001e68:	2000a570 	.word	0x2000a570

08001e6c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e6c:	e7fe      	b.n	8001e6c <ADC1_IRQHandler>

08001e6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e74:	2300      	movs	r3, #0
 8001e76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e78:	2003      	movs	r0, #3
 8001e7a:	f000 f961 	bl	8002140 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e7e:	200f      	movs	r0, #15
 8001e80:	f000 f80e 	bl	8001ea0 <HAL_InitTick>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d002      	beq.n	8001e90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	71fb      	strb	r3, [r7, #7]
 8001e8e:	e001      	b.n	8001e94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e90:	f7ff fc2a 	bl	80016e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e94:	79fb      	ldrb	r3, [r7, #7]
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001eac:	4b17      	ldr	r3, [pc, #92]	; (8001f0c <HAL_InitTick+0x6c>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d023      	beq.n	8001efc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001eb4:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <HAL_InitTick+0x70>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4b14      	ldr	r3, [pc, #80]	; (8001f0c <HAL_InitTick+0x6c>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 f96d 	bl	80021aa <HAL_SYSTICK_Config>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10f      	bne.n	8001ef6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b0f      	cmp	r3, #15
 8001eda:	d809      	bhi.n	8001ef0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001edc:	2200      	movs	r2, #0
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee4:	f000 f937 	bl	8002156 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ee8:	4a0a      	ldr	r2, [pc, #40]	; (8001f14 <HAL_InitTick+0x74>)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	e007      	b.n	8001f00 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	73fb      	strb	r3, [r7, #15]
 8001ef4:	e004      	b.n	8001f00 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	73fb      	strb	r3, [r7, #15]
 8001efa:	e001      	b.n	8001f00 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20000018 	.word	0x20000018
 8001f10:	20000010 	.word	0x20000010
 8001f14:	20000014 	.word	0x20000014

08001f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f1c:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <HAL_IncTick+0x20>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	461a      	mov	r2, r3
 8001f22:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <HAL_IncTick+0x24>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4413      	add	r3, r2
 8001f28:	4a04      	ldr	r2, [pc, #16]	; (8001f3c <HAL_IncTick+0x24>)
 8001f2a:	6013      	str	r3, [r2, #0]
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	20000018 	.word	0x20000018
 8001f3c:	2000a52c 	.word	0x2000a52c

08001f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return uwTick;
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <HAL_GetTick+0x14>)
 8001f46:	681b      	ldr	r3, [r3, #0]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	2000a52c 	.word	0x2000a52c

08001f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f60:	f7ff ffee 	bl	8001f40 <HAL_GetTick>
 8001f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f70:	d005      	beq.n	8001f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f72:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <HAL_Delay+0x44>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f7e:	bf00      	nop
 8001f80:	f7ff ffde 	bl	8001f40 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d8f7      	bhi.n	8001f80 <HAL_Delay+0x28>
  {
  }
}
 8001f90:	bf00      	nop
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000018 	.word	0x20000018

08001fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fd2:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	60d3      	str	r3, [r2, #12]
}
 8001fd8:	bf00      	nop
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fec:	4b04      	ldr	r3, [pc, #16]	; (8002000 <__NVIC_GetPriorityGrouping+0x18>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	0a1b      	lsrs	r3, r3, #8
 8001ff2:	f003 0307 	and.w	r3, r3, #7
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	2b00      	cmp	r3, #0
 8002014:	db0b      	blt.n	800202e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	f003 021f 	and.w	r2, r3, #31
 800201c:	4907      	ldr	r1, [pc, #28]	; (800203c <__NVIC_EnableIRQ+0x38>)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	095b      	lsrs	r3, r3, #5
 8002024:	2001      	movs	r0, #1
 8002026:	fa00 f202 	lsl.w	r2, r0, r2
 800202a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	e000e100 	.word	0xe000e100

08002040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	6039      	str	r1, [r7, #0]
 800204a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800204c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002050:	2b00      	cmp	r3, #0
 8002052:	db0a      	blt.n	800206a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	b2da      	uxtb	r2, r3
 8002058:	490c      	ldr	r1, [pc, #48]	; (800208c <__NVIC_SetPriority+0x4c>)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	0112      	lsls	r2, r2, #4
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	440b      	add	r3, r1
 8002064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002068:	e00a      	b.n	8002080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	b2da      	uxtb	r2, r3
 800206e:	4908      	ldr	r1, [pc, #32]	; (8002090 <__NVIC_SetPriority+0x50>)
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	3b04      	subs	r3, #4
 8002078:	0112      	lsls	r2, r2, #4
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	440b      	add	r3, r1
 800207e:	761a      	strb	r2, [r3, #24]
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000e100 	.word	0xe000e100
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002094:	b480      	push	{r7}
 8002096:	b089      	sub	sp, #36	; 0x24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f1c3 0307 	rsb	r3, r3, #7
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	bf28      	it	cs
 80020b2:	2304      	movcs	r3, #4
 80020b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3304      	adds	r3, #4
 80020ba:	2b06      	cmp	r3, #6
 80020bc:	d902      	bls.n	80020c4 <NVIC_EncodePriority+0x30>
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3b03      	subs	r3, #3
 80020c2:	e000      	b.n	80020c6 <NVIC_EncodePriority+0x32>
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c8:	f04f 32ff 	mov.w	r2, #4294967295
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43da      	mvns	r2, r3
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	401a      	ands	r2, r3
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020dc:	f04f 31ff 	mov.w	r1, #4294967295
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	fa01 f303 	lsl.w	r3, r1, r3
 80020e6:	43d9      	mvns	r1, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ec:	4313      	orrs	r3, r2
         );
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3724      	adds	r7, #36	; 0x24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
	...

080020fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3b01      	subs	r3, #1
 8002108:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800210c:	d301      	bcc.n	8002112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800210e:	2301      	movs	r3, #1
 8002110:	e00f      	b.n	8002132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002112:	4a0a      	ldr	r2, [pc, #40]	; (800213c <SysTick_Config+0x40>)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3b01      	subs	r3, #1
 8002118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800211a:	210f      	movs	r1, #15
 800211c:	f04f 30ff 	mov.w	r0, #4294967295
 8002120:	f7ff ff8e 	bl	8002040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002124:	4b05      	ldr	r3, [pc, #20]	; (800213c <SysTick_Config+0x40>)
 8002126:	2200      	movs	r2, #0
 8002128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800212a:	4b04      	ldr	r3, [pc, #16]	; (800213c <SysTick_Config+0x40>)
 800212c:	2207      	movs	r2, #7
 800212e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	e000e010 	.word	0xe000e010

08002140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7ff ff29 	bl	8001fa0 <__NVIC_SetPriorityGrouping>
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b086      	sub	sp, #24
 800215a:	af00      	add	r7, sp, #0
 800215c:	4603      	mov	r3, r0
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	607a      	str	r2, [r7, #4]
 8002162:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002164:	2300      	movs	r3, #0
 8002166:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002168:	f7ff ff3e 	bl	8001fe8 <__NVIC_GetPriorityGrouping>
 800216c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	68b9      	ldr	r1, [r7, #8]
 8002172:	6978      	ldr	r0, [r7, #20]
 8002174:	f7ff ff8e 	bl	8002094 <NVIC_EncodePriority>
 8002178:	4602      	mov	r2, r0
 800217a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800217e:	4611      	mov	r1, r2
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff ff5d 	bl	8002040 <__NVIC_SetPriority>
}
 8002186:	bf00      	nop
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	4603      	mov	r3, r0
 8002196:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff ff31 	bl	8002004 <__NVIC_EnableIRQ>
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff ffa2 	bl	80020fc <SysTick_Config>
 80021b8:	4603      	mov	r3, r0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
	...

080021c4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e098      	b.n	8002308 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	461a      	mov	r2, r3
 80021dc:	4b4d      	ldr	r3, [pc, #308]	; (8002314 <HAL_DMA_Init+0x150>)
 80021de:	429a      	cmp	r2, r3
 80021e0:	d80f      	bhi.n	8002202 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	4b4b      	ldr	r3, [pc, #300]	; (8002318 <HAL_DMA_Init+0x154>)
 80021ea:	4413      	add	r3, r2
 80021ec:	4a4b      	ldr	r2, [pc, #300]	; (800231c <HAL_DMA_Init+0x158>)
 80021ee:	fba2 2303 	umull	r2, r3, r2, r3
 80021f2:	091b      	lsrs	r3, r3, #4
 80021f4:	009a      	lsls	r2, r3, #2
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a48      	ldr	r2, [pc, #288]	; (8002320 <HAL_DMA_Init+0x15c>)
 80021fe:	641a      	str	r2, [r3, #64]	; 0x40
 8002200:	e00e      	b.n	8002220 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	461a      	mov	r2, r3
 8002208:	4b46      	ldr	r3, [pc, #280]	; (8002324 <HAL_DMA_Init+0x160>)
 800220a:	4413      	add	r3, r2
 800220c:	4a43      	ldr	r2, [pc, #268]	; (800231c <HAL_DMA_Init+0x158>)
 800220e:	fba2 2303 	umull	r2, r3, r2, r3
 8002212:	091b      	lsrs	r3, r3, #4
 8002214:	009a      	lsls	r2, r3, #2
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a42      	ldr	r2, [pc, #264]	; (8002328 <HAL_DMA_Init+0x164>)
 800221e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2202      	movs	r2, #2
 8002224:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800223a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002244:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002250:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800225c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	4313      	orrs	r3, r2
 8002268:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800227a:	d039      	beq.n	80022f0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	4a27      	ldr	r2, [pc, #156]	; (8002320 <HAL_DMA_Init+0x15c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d11a      	bne.n	80022bc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002286:	4b29      	ldr	r3, [pc, #164]	; (800232c <HAL_DMA_Init+0x168>)
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228e:	f003 031c 	and.w	r3, r3, #28
 8002292:	210f      	movs	r1, #15
 8002294:	fa01 f303 	lsl.w	r3, r1, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	4924      	ldr	r1, [pc, #144]	; (800232c <HAL_DMA_Init+0x168>)
 800229c:	4013      	ands	r3, r2
 800229e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80022a0:	4b22      	ldr	r3, [pc, #136]	; (800232c <HAL_DMA_Init+0x168>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6859      	ldr	r1, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ac:	f003 031c 	and.w	r3, r3, #28
 80022b0:	fa01 f303 	lsl.w	r3, r1, r3
 80022b4:	491d      	ldr	r1, [pc, #116]	; (800232c <HAL_DMA_Init+0x168>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	600b      	str	r3, [r1, #0]
 80022ba:	e019      	b.n	80022f0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80022bc:	4b1c      	ldr	r3, [pc, #112]	; (8002330 <HAL_DMA_Init+0x16c>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c4:	f003 031c 	and.w	r3, r3, #28
 80022c8:	210f      	movs	r1, #15
 80022ca:	fa01 f303 	lsl.w	r3, r1, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	4917      	ldr	r1, [pc, #92]	; (8002330 <HAL_DMA_Init+0x16c>)
 80022d2:	4013      	ands	r3, r2
 80022d4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80022d6:	4b16      	ldr	r3, [pc, #88]	; (8002330 <HAL_DMA_Init+0x16c>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6859      	ldr	r1, [r3, #4]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	f003 031c 	and.w	r3, r3, #28
 80022e6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ea:	4911      	ldr	r1, [pc, #68]	; (8002330 <HAL_DMA_Init+0x16c>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	40020407 	.word	0x40020407
 8002318:	bffdfff8 	.word	0xbffdfff8
 800231c:	cccccccd 	.word	0xcccccccd
 8002320:	40020000 	.word	0x40020000
 8002324:	bffdfbf8 	.word	0xbffdfbf8
 8002328:	40020400 	.word	0x40020400
 800232c:	400200a8 	.word	0x400200a8
 8002330:	400204a8 	.word	0x400204a8

08002334 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
 8002340:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002342:	2300      	movs	r3, #0
 8002344:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800234c:	2b01      	cmp	r3, #1
 800234e:	d101      	bne.n	8002354 <HAL_DMA_Start_IT+0x20>
 8002350:	2302      	movs	r3, #2
 8002352:	e04b      	b.n	80023ec <HAL_DMA_Start_IT+0xb8>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b01      	cmp	r3, #1
 8002366:	d13a      	bne.n	80023de <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2202      	movs	r2, #2
 800236c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 0201 	bic.w	r2, r2, #1
 8002384:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	68b9      	ldr	r1, [r7, #8]
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f000 f95f 	bl	8002650 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	2b00      	cmp	r3, #0
 8002398:	d008      	beq.n	80023ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f042 020e 	orr.w	r2, r2, #14
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	e00f      	b.n	80023cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 0204 	bic.w	r2, r2, #4
 80023ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f042 020a 	orr.w	r2, r2, #10
 80023ca:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0201 	orr.w	r2, r2, #1
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	e005      	b.n	80023ea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80023e6:	2302      	movs	r3, #2
 80023e8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80023ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3718      	adds	r7, #24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023fc:	2300      	movs	r3, #0
 80023fe:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d008      	beq.n	800241e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2204      	movs	r2, #4
 8002410:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e022      	b.n	8002464 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 020e 	bic.w	r2, r2, #14
 800242c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 0201 	bic.w	r2, r2, #1
 800243c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	f003 021c 	and.w	r2, r3, #28
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	2101      	movs	r1, #1
 800244c:	fa01 f202 	lsl.w	r2, r1, r2
 8002450:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002462:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002464:	4618      	mov	r0, r3
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002478:	2300      	movs	r3, #0
 800247a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d005      	beq.n	8002494 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2204      	movs	r2, #4
 800248c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	73fb      	strb	r3, [r7, #15]
 8002492:	e029      	b.n	80024e8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 020e 	bic.w	r2, r2, #14
 80024a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0201 	bic.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b8:	f003 021c 	and.w	r2, r3, #28
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c0:	2101      	movs	r1, #1
 80024c2:	fa01 f202 	lsl.w	r2, r1, r2
 80024c6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d003      	beq.n	80024e8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	4798      	blx	r3
    }
  }
  return status;
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b084      	sub	sp, #16
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250e:	f003 031c 	and.w	r3, r3, #28
 8002512:	2204      	movs	r2, #4
 8002514:	409a      	lsls	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	4013      	ands	r3, r2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d026      	beq.n	800256c <HAL_DMA_IRQHandler+0x7a>
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b00      	cmp	r3, #0
 8002526:	d021      	beq.n	800256c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0320 	and.w	r3, r3, #32
 8002532:	2b00      	cmp	r3, #0
 8002534:	d107      	bne.n	8002546 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0204 	bic.w	r2, r2, #4
 8002544:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254a:	f003 021c 	and.w	r2, r3, #28
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	2104      	movs	r1, #4
 8002554:	fa01 f202 	lsl.w	r2, r1, r2
 8002558:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	2b00      	cmp	r3, #0
 8002560:	d071      	beq.n	8002646 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800256a:	e06c      	b.n	8002646 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002570:	f003 031c 	and.w	r3, r3, #28
 8002574:	2202      	movs	r2, #2
 8002576:	409a      	lsls	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4013      	ands	r3, r2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d02e      	beq.n	80025de <HAL_DMA_IRQHandler+0xec>
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d029      	beq.n	80025de <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0320 	and.w	r3, r3, #32
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10b      	bne.n	80025b0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 020a 	bic.w	r2, r2, #10
 80025a6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b4:	f003 021c 	and.w	r2, r3, #28
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	2102      	movs	r1, #2
 80025be:	fa01 f202 	lsl.w	r2, r1, r2
 80025c2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d038      	beq.n	8002646 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80025dc:	e033      	b.n	8002646 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	f003 031c 	and.w	r3, r3, #28
 80025e6:	2208      	movs	r2, #8
 80025e8:	409a      	lsls	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	4013      	ands	r3, r2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d02a      	beq.n	8002648 <HAL_DMA_IRQHandler+0x156>
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	f003 0308 	and.w	r3, r3, #8
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d025      	beq.n	8002648 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 020e 	bic.w	r2, r2, #14
 800260a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002610:	f003 021c 	and.w	r2, r3, #28
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002618:	2101      	movs	r1, #1
 800261a:	fa01 f202 	lsl.w	r2, r1, r2
 800261e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800263a:	2b00      	cmp	r3, #0
 800263c:	d004      	beq.n	8002648 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002646:	bf00      	nop
 8002648:	bf00      	nop
}
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
 800265c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002662:	f003 021c 	and.w	r2, r3, #28
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	2101      	movs	r1, #1
 800266c:	fa01 f202 	lsl.w	r2, r1, r2
 8002670:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	2b10      	cmp	r3, #16
 8002680:	d108      	bne.n	8002694 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002692:	e007      	b.n	80026a4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	60da      	str	r2, [r3, #12]
}
 80026a4:	bf00      	nop
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80026be:	2300      	movs	r3, #0
 80026c0:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80026c2:	4b2f      	ldr	r3, [pc, #188]	; (8002780 <HAL_FLASH_Program+0xd0>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d101      	bne.n	80026ce <HAL_FLASH_Program+0x1e>
 80026ca:	2302      	movs	r3, #2
 80026cc:	e053      	b.n	8002776 <HAL_FLASH_Program+0xc6>
 80026ce:	4b2c      	ldr	r3, [pc, #176]	; (8002780 <HAL_FLASH_Program+0xd0>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80026d8:	f000 f894 	bl	8002804 <FLASH_WaitForLastOperation>
 80026dc:	4603      	mov	r3, r0
 80026de:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80026e0:	7dfb      	ldrb	r3, [r7, #23]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d143      	bne.n	800276e <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80026e6:	4b26      	ldr	r3, [pc, #152]	; (8002780 <HAL_FLASH_Program+0xd0>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80026ec:	4b25      	ldr	r3, [pc, #148]	; (8002784 <HAL_FLASH_Program+0xd4>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d009      	beq.n	800270c <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80026f8:	4b22      	ldr	r3, [pc, #136]	; (8002784 <HAL_FLASH_Program+0xd4>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a21      	ldr	r2, [pc, #132]	; (8002784 <HAL_FLASH_Program+0xd4>)
 80026fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002702:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002704:	4b1e      	ldr	r3, [pc, #120]	; (8002780 <HAL_FLASH_Program+0xd0>)
 8002706:	2202      	movs	r2, #2
 8002708:	771a      	strb	r2, [r3, #28]
 800270a:	e002      	b.n	8002712 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800270c:	4b1c      	ldr	r3, [pc, #112]	; (8002780 <HAL_FLASH_Program+0xd0>)
 800270e:	2200      	movs	r2, #0
 8002710:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d107      	bne.n	8002728 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8002718:	e9d7 2300 	ldrd	r2, r3, [r7]
 800271c:	68b8      	ldr	r0, [r7, #8]
 800271e:	f000 f8c9 	bl	80028b4 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8002722:	2301      	movs	r3, #1
 8002724:	613b      	str	r3, [r7, #16]
 8002726:	e010      	b.n	800274a <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d002      	beq.n	8002734 <HAL_FLASH_Program+0x84>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2b02      	cmp	r3, #2
 8002732:	d10a      	bne.n	800274a <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	4619      	mov	r1, r3
 8002738:	68b8      	ldr	r0, [r7, #8]
 800273a:	f000 f8e1 	bl	8002900 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2b02      	cmp	r3, #2
 8002742:	d102      	bne.n	800274a <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8002744:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002748:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800274a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800274e:	f000 f859 	bl	8002804 <FLASH_WaitForLastOperation>
 8002752:	4603      	mov	r3, r0
 8002754:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d006      	beq.n	800276a <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800275c:	4b09      	ldr	r3, [pc, #36]	; (8002784 <HAL_FLASH_Program+0xd4>)
 800275e:	695a      	ldr	r2, [r3, #20]
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	43db      	mvns	r3, r3
 8002764:	4907      	ldr	r1, [pc, #28]	; (8002784 <HAL_FLASH_Program+0xd4>)
 8002766:	4013      	ands	r3, r2
 8002768:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800276a:	f000 f9e1 	bl	8002b30 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800276e:	4b04      	ldr	r3, [pc, #16]	; (8002780 <HAL_FLASH_Program+0xd0>)
 8002770:	2200      	movs	r2, #0
 8002772:	701a      	strb	r2, [r3, #0]

  return status;
 8002774:	7dfb      	ldrb	r3, [r7, #23]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	2000001c 	.word	0x2000001c
 8002784:	40022000 	.word	0x40022000

08002788 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800278e:	2300      	movs	r3, #0
 8002790:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002792:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <HAL_FLASH_Unlock+0x38>)
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	2b00      	cmp	r3, #0
 8002798:	da0b      	bge.n	80027b2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800279a:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <HAL_FLASH_Unlock+0x38>)
 800279c:	4a09      	ldr	r2, [pc, #36]	; (80027c4 <HAL_FLASH_Unlock+0x3c>)
 800279e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80027a0:	4b07      	ldr	r3, [pc, #28]	; (80027c0 <HAL_FLASH_Unlock+0x38>)
 80027a2:	4a09      	ldr	r2, [pc, #36]	; (80027c8 <HAL_FLASH_Unlock+0x40>)
 80027a4:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80027a6:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <HAL_FLASH_Unlock+0x38>)
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	da01      	bge.n	80027b2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80027b2:	79fb      	ldrb	r3, [r7, #7]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	40022000 	.word	0x40022000
 80027c4:	45670123 	.word	0x45670123
 80027c8:	cdef89ab 	.word	0xcdef89ab

080027cc <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80027d0:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <HAL_FLASH_Lock+0x1c>)
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	4a04      	ldr	r2, [pc, #16]	; (80027e8 <HAL_FLASH_Lock+0x1c>)
 80027d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027da:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	40022000 	.word	0x40022000

080027ec <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  *            @arg FLASH_FLAG_PEMPTY : FLASH Boot from not programmed flash (apply only for STM32L43x/STM32L44x devices)
  */
uint32_t HAL_FLASH_GetError(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80027f0:	4b03      	ldr	r3, [pc, #12]	; (8002800 <HAL_FLASH_GetError+0x14>)
 80027f2:	685b      	ldr	r3, [r3, #4]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	2000001c 	.word	0x2000001c

08002804 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800280c:	f7ff fb98 	bl	8001f40 <HAL_GetTick>
 8002810:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002812:	e00d      	b.n	8002830 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281a:	d009      	beq.n	8002830 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 800281c:	f7ff fb90 	bl	8001f40 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	429a      	cmp	r2, r3
 800282a:	d801      	bhi.n	8002830 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e036      	b.n	800289e <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002830:	4b1d      	ldr	r3, [pc, #116]	; (80028a8 <FLASH_WaitForLastOperation+0xa4>)
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1eb      	bne.n	8002814 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800283c:	4b1a      	ldr	r3, [pc, #104]	; (80028a8 <FLASH_WaitForLastOperation+0xa4>)
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	4b1a      	ldr	r3, [pc, #104]	; (80028ac <FLASH_WaitForLastOperation+0xa8>)
 8002842:	4013      	ands	r3, r2
 8002844:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d01e      	beq.n	800288a <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800284c:	4b18      	ldr	r3, [pc, #96]	; (80028b0 <FLASH_WaitForLastOperation+0xac>)
 800284e:	685a      	ldr	r2, [r3, #4]
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	4313      	orrs	r3, r2
 8002854:	4a16      	ldr	r2, [pc, #88]	; (80028b0 <FLASH_WaitForLastOperation+0xac>)
 8002856:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d007      	beq.n	8002872 <FLASH_WaitForLastOperation+0x6e>
 8002862:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <FLASH_WaitForLastOperation+0xa4>)
 8002864:	699a      	ldr	r2, [r3, #24]
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800286c:	490e      	ldr	r1, [pc, #56]	; (80028a8 <FLASH_WaitForLastOperation+0xa4>)
 800286e:	4313      	orrs	r3, r2
 8002870:	618b      	str	r3, [r1, #24]
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d004      	beq.n	8002886 <FLASH_WaitForLastOperation+0x82>
 800287c:	4a0a      	ldr	r2, [pc, #40]	; (80028a8 <FLASH_WaitForLastOperation+0xa4>)
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002884:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e009      	b.n	800289e <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800288a:	4b07      	ldr	r3, [pc, #28]	; (80028a8 <FLASH_WaitForLastOperation+0xa4>)
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d002      	beq.n	800289c <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002896:	4b04      	ldr	r3, [pc, #16]	; (80028a8 <FLASH_WaitForLastOperation+0xa4>)
 8002898:	2201      	movs	r2, #1
 800289a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40022000 	.word	0x40022000
 80028ac:	0002c3fa 	.word	0x0002c3fa
 80028b0:	2000001c 	.word	0x2000001c

080028b4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80028c0:	4b0e      	ldr	r3, [pc, #56]	; (80028fc <FLASH_Program_DoubleWord+0x48>)
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	4a0d      	ldr	r2, [pc, #52]	; (80028fc <FLASH_Program_DoubleWord+0x48>)
 80028c6:	f043 0301 	orr.w	r3, r3, #1
 80028ca:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80028d2:	f3bf 8f6f 	isb	sy
}
 80028d6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 80028d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028dc:	f04f 0200 	mov.w	r2, #0
 80028e0:	f04f 0300 	mov.w	r3, #0
 80028e4:	000a      	movs	r2, r1
 80028e6:	2300      	movs	r3, #0
 80028e8:	68f9      	ldr	r1, [r7, #12]
 80028ea:	3104      	adds	r1, #4
 80028ec:	4613      	mov	r3, r2
 80028ee:	600b      	str	r3, [r1, #0]
}
 80028f0:	bf00      	nop
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	40022000 	.word	0x40022000

08002900 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8002900:	b480      	push	{r7}
 8002902:	b089      	sub	sp, #36	; 0x24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800290a:	2340      	movs	r3, #64	; 0x40
 800290c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8002916:	4b14      	ldr	r3, [pc, #80]	; (8002968 <FLASH_Program_Fast+0x68>)
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	4a13      	ldr	r2, [pc, #76]	; (8002968 <FLASH_Program_Fast+0x68>)
 800291c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002920:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002922:	f3ef 8310 	mrs	r3, PRIMASK
 8002926:	60fb      	str	r3, [r7, #12]
  return(result);
 8002928:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800292a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800292c:	b672      	cpsid	i
}
 800292e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	3304      	adds	r3, #4
 800293c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	3304      	adds	r3, #4
 8002942:	617b      	str	r3, [r7, #20]
    row_index--;
 8002944:	7ffb      	ldrb	r3, [r7, #31]
 8002946:	3b01      	subs	r3, #1
 8002948:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800294a:	7ffb      	ldrb	r3, [r7, #31]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1ef      	bne.n	8002930 <FLASH_Program_Fast+0x30>
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	f383 8810 	msr	PRIMASK, r3
}
 800295a:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800295c:	bf00      	nop
 800295e:	3724      	adds	r7, #36	; 0x24
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	40022000 	.word	0x40022000

0800296c <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002976:	4b4b      	ldr	r3, [pc, #300]	; (8002aa4 <HAL_FLASHEx_Erase+0x138>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d101      	bne.n	8002982 <HAL_FLASHEx_Erase+0x16>
 800297e:	2302      	movs	r3, #2
 8002980:	e08b      	b.n	8002a9a <HAL_FLASHEx_Erase+0x12e>
 8002982:	4b48      	ldr	r3, [pc, #288]	; (8002aa4 <HAL_FLASHEx_Erase+0x138>)
 8002984:	2201      	movs	r2, #1
 8002986:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002988:	f24c 3050 	movw	r0, #50000	; 0xc350
 800298c:	f7ff ff3a 	bl	8002804 <FLASH_WaitForLastOperation>
 8002990:	4603      	mov	r3, r0
 8002992:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002994:	7bfb      	ldrb	r3, [r7, #15]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d17b      	bne.n	8002a92 <HAL_FLASHEx_Erase+0x126>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800299a:	4b42      	ldr	r3, [pc, #264]	; (8002aa4 <HAL_FLASHEx_Erase+0x138>)
 800299c:	2200      	movs	r2, #0
 800299e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80029a0:	4b41      	ldr	r3, [pc, #260]	; (8002aa8 <HAL_FLASHEx_Erase+0x13c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d019      	beq.n	80029e0 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80029ac:	4b3e      	ldr	r3, [pc, #248]	; (8002aa8 <HAL_FLASHEx_Erase+0x13c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a3d      	ldr	r2, [pc, #244]	; (8002aa8 <HAL_FLASHEx_Erase+0x13c>)
 80029b2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029b6:	6013      	str	r3, [r2, #0]

      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80029b8:	4b3b      	ldr	r3, [pc, #236]	; (8002aa8 <HAL_FLASHEx_Erase+0x13c>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d009      	beq.n	80029d8 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80029c4:	4b38      	ldr	r3, [pc, #224]	; (8002aa8 <HAL_FLASHEx_Erase+0x13c>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a37      	ldr	r2, [pc, #220]	; (8002aa8 <HAL_FLASHEx_Erase+0x13c>)
 80029ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029ce:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80029d0:	4b34      	ldr	r3, [pc, #208]	; (8002aa4 <HAL_FLASHEx_Erase+0x138>)
 80029d2:	2203      	movs	r2, #3
 80029d4:	771a      	strb	r2, [r3, #28]
 80029d6:	e016      	b.n	8002a06 <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80029d8:	4b32      	ldr	r3, [pc, #200]	; (8002aa4 <HAL_FLASHEx_Erase+0x138>)
 80029da:	2201      	movs	r2, #1
 80029dc:	771a      	strb	r2, [r3, #28]
 80029de:	e012      	b.n	8002a06 <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80029e0:	4b31      	ldr	r3, [pc, #196]	; (8002aa8 <HAL_FLASHEx_Erase+0x13c>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d009      	beq.n	8002a00 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80029ec:	4b2e      	ldr	r3, [pc, #184]	; (8002aa8 <HAL_FLASHEx_Erase+0x13c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a2d      	ldr	r2, [pc, #180]	; (8002aa8 <HAL_FLASHEx_Erase+0x13c>)
 80029f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029f6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80029f8:	4b2a      	ldr	r3, [pc, #168]	; (8002aa4 <HAL_FLASHEx_Erase+0x138>)
 80029fa:	2202      	movs	r2, #2
 80029fc:	771a      	strb	r2, [r3, #28]
 80029fe:	e002      	b.n	8002a06 <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002a00:	4b28      	ldr	r3, [pc, #160]	; (8002aa4 <HAL_FLASHEx_Erase+0x138>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d111      	bne.n	8002a32 <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 f84a 	bl	8002aac <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a18:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a1c:	f7ff fef2 	bl	8002804 <FLASH_WaitForLastOperation>
 8002a20:	4603      	mov	r3, r0
 8002a22:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8002a24:	4b20      	ldr	r3, [pc, #128]	; (8002aa8 <HAL_FLASHEx_Erase+0x13c>)
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	4a1f      	ldr	r2, [pc, #124]	; (8002aa8 <HAL_FLASHEx_Erase+0x13c>)
 8002a2a:	f023 0304 	bic.w	r3, r3, #4
 8002a2e:	6153      	str	r3, [r2, #20]
 8002a30:	e02d      	b.n	8002a8e <HAL_FLASHEx_Erase+0x122>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	f04f 32ff 	mov.w	r2, #4294967295
 8002a38:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	60bb      	str	r3, [r7, #8]
 8002a40:	e01d      	b.n	8002a7e <HAL_FLASHEx_Erase+0x112>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	4619      	mov	r1, r3
 8002a48:	68b8      	ldr	r0, [r7, #8]
 8002a4a:	f000 f84d 	bl	8002ae8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a4e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a52:	f7ff fed7 	bl	8002804 <FLASH_WaitForLastOperation>
 8002a56:	4603      	mov	r3, r0
 8002a58:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8002a5a:	4b13      	ldr	r3, [pc, #76]	; (8002aa8 <HAL_FLASHEx_Erase+0x13c>)
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	4a12      	ldr	r2, [pc, #72]	; (8002aa8 <HAL_FLASHEx_Erase+0x13c>)
 8002a60:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8002a64:	f023 0302 	bic.w	r3, r3, #2
 8002a68:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8002a6a:	7bfb      	ldrb	r3, [r7, #15]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <HAL_FLASHEx_Erase+0x10c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	601a      	str	r2, [r3, #0]
          break;
 8002a76:	e00a      	b.n	8002a8e <HAL_FLASHEx_Erase+0x122>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	4413      	add	r3, r2
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d3d9      	bcc.n	8002a42 <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002a8e:	f000 f84f 	bl	8002b30 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002a92:	4b04      	ldr	r3, [pc, #16]	; (8002aa4 <HAL_FLASHEx_Erase+0x138>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	701a      	strb	r2, [r3, #0]

  return status;
 8002a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	2000001c 	.word	0x2000001c
 8002aa8:	40022000 	.word	0x40022000

08002aac <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d005      	beq.n	8002aca <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8002abe:	4b09      	ldr	r3, [pc, #36]	; (8002ae4 <FLASH_MassErase+0x38>)
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	4a08      	ldr	r2, [pc, #32]	; (8002ae4 <FLASH_MassErase+0x38>)
 8002ac4:	f043 0304 	orr.w	r3, r3, #4
 8002ac8:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002aca:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <FLASH_MassErase+0x38>)
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	4a05      	ldr	r2, [pc, #20]	; (8002ae4 <FLASH_MassErase+0x38>)
 8002ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad4:	6153      	str	r3, [r2, #20]
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	40022000 	.word	0x40022000

08002ae8 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8002af2:	4b0e      	ldr	r3, [pc, #56]	; (8002b2c <FLASH_PageErase+0x44>)
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8002b02:	490a      	ldr	r1, [pc, #40]	; (8002b2c <FLASH_PageErase+0x44>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002b08:	4b08      	ldr	r3, [pc, #32]	; (8002b2c <FLASH_PageErase+0x44>)
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	4a07      	ldr	r2, [pc, #28]	; (8002b2c <FLASH_PageErase+0x44>)
 8002b0e:	f043 0302 	orr.w	r3, r3, #2
 8002b12:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002b14:	4b05      	ldr	r3, [pc, #20]	; (8002b2c <FLASH_PageErase+0x44>)
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	4a04      	ldr	r2, [pc, #16]	; (8002b2c <FLASH_PageErase+0x44>)
 8002b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b1e:	6153      	str	r3, [r2, #20]
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	40022000 	.word	0x40022000

08002b30 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8002b36:	4b1e      	ldr	r3, [pc, #120]	; (8002bb0 <FLASH_FlushCaches+0x80>)
 8002b38:	7f1b      	ldrb	r3, [r3, #28]
 8002b3a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d002      	beq.n	8002b48 <FLASH_FlushCaches+0x18>
 8002b42:	79fb      	ldrb	r3, [r7, #7]
 8002b44:	2b03      	cmp	r3, #3
 8002b46:	d111      	bne.n	8002b6c <FLASH_FlushCaches+0x3c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002b48:	4b1a      	ldr	r3, [pc, #104]	; (8002bb4 <FLASH_FlushCaches+0x84>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a19      	ldr	r2, [pc, #100]	; (8002bb4 <FLASH_FlushCaches+0x84>)
 8002b4e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b52:	6013      	str	r3, [r2, #0]
 8002b54:	4b17      	ldr	r3, [pc, #92]	; (8002bb4 <FLASH_FlushCaches+0x84>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a16      	ldr	r2, [pc, #88]	; (8002bb4 <FLASH_FlushCaches+0x84>)
 8002b5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b5e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b60:	4b14      	ldr	r3, [pc, #80]	; (8002bb4 <FLASH_FlushCaches+0x84>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a13      	ldr	r2, [pc, #76]	; (8002bb4 <FLASH_FlushCaches+0x84>)
 8002b66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b6a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8002b6c:	79fb      	ldrb	r3, [r7, #7]
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d002      	beq.n	8002b78 <FLASH_FlushCaches+0x48>
 8002b72:	79fb      	ldrb	r3, [r7, #7]
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	d111      	bne.n	8002b9c <FLASH_FlushCaches+0x6c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002b78:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <FLASH_FlushCaches+0x84>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a0d      	ldr	r2, [pc, #52]	; (8002bb4 <FLASH_FlushCaches+0x84>)
 8002b7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b82:	6013      	str	r3, [r2, #0]
 8002b84:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <FLASH_FlushCaches+0x84>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a0a      	ldr	r2, [pc, #40]	; (8002bb4 <FLASH_FlushCaches+0x84>)
 8002b8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b8e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b90:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <FLASH_FlushCaches+0x84>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a07      	ldr	r2, [pc, #28]	; (8002bb4 <FLASH_FlushCaches+0x84>)
 8002b96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b9a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002b9c:	4b04      	ldr	r3, [pc, #16]	; (8002bb0 <FLASH_FlushCaches+0x80>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	771a      	strb	r2, [r3, #28]
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	2000001c 	.word	0x2000001c
 8002bb4:	40022000 	.word	0x40022000

08002bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b087      	sub	sp, #28
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bc6:	e154      	b.n	8002e72 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	2101      	movs	r1, #1
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 8146 	beq.w	8002e6c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d00b      	beq.n	8002c00 <HAL_GPIO_Init+0x48>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d007      	beq.n	8002c00 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bf4:	2b11      	cmp	r3, #17
 8002bf6:	d003      	beq.n	8002c00 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2b12      	cmp	r3, #18
 8002bfe:	d130      	bne.n	8002c62 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	2203      	movs	r2, #3
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	43db      	mvns	r3, r3
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	4013      	ands	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c36:	2201      	movs	r2, #1
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	4013      	ands	r3, r2
 8002c44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	091b      	lsrs	r3, r3, #4
 8002c4c:	f003 0201 	and.w	r2, r3, #1
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	2203      	movs	r2, #3
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	43db      	mvns	r3, r3
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	4013      	ands	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d003      	beq.n	8002ca2 <HAL_GPIO_Init+0xea>
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b12      	cmp	r3, #18
 8002ca0:	d123      	bne.n	8002cea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	08da      	lsrs	r2, r3, #3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	3208      	adds	r2, #8
 8002caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	220f      	movs	r2, #15
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	691a      	ldr	r2, [r3, #16]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	08da      	lsrs	r2, r3, #3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3208      	adds	r2, #8
 8002ce4:	6939      	ldr	r1, [r7, #16]
 8002ce6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	2203      	movs	r2, #3
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f003 0203 	and.w	r2, r3, #3
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 80a0 	beq.w	8002e6c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d2c:	4b58      	ldr	r3, [pc, #352]	; (8002e90 <HAL_GPIO_Init+0x2d8>)
 8002d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d30:	4a57      	ldr	r2, [pc, #348]	; (8002e90 <HAL_GPIO_Init+0x2d8>)
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	6613      	str	r3, [r2, #96]	; 0x60
 8002d38:	4b55      	ldr	r3, [pc, #340]	; (8002e90 <HAL_GPIO_Init+0x2d8>)
 8002d3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	60bb      	str	r3, [r7, #8]
 8002d42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d44:	4a53      	ldr	r2, [pc, #332]	; (8002e94 <HAL_GPIO_Init+0x2dc>)
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	089b      	lsrs	r3, r3, #2
 8002d4a:	3302      	adds	r3, #2
 8002d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f003 0303 	and.w	r3, r3, #3
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	220f      	movs	r2, #15
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	4013      	ands	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d6e:	d019      	beq.n	8002da4 <HAL_GPIO_Init+0x1ec>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a49      	ldr	r2, [pc, #292]	; (8002e98 <HAL_GPIO_Init+0x2e0>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d013      	beq.n	8002da0 <HAL_GPIO_Init+0x1e8>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a48      	ldr	r2, [pc, #288]	; (8002e9c <HAL_GPIO_Init+0x2e4>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d00d      	beq.n	8002d9c <HAL_GPIO_Init+0x1e4>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a47      	ldr	r2, [pc, #284]	; (8002ea0 <HAL_GPIO_Init+0x2e8>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d007      	beq.n	8002d98 <HAL_GPIO_Init+0x1e0>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a46      	ldr	r2, [pc, #280]	; (8002ea4 <HAL_GPIO_Init+0x2ec>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d101      	bne.n	8002d94 <HAL_GPIO_Init+0x1dc>
 8002d90:	2304      	movs	r3, #4
 8002d92:	e008      	b.n	8002da6 <HAL_GPIO_Init+0x1ee>
 8002d94:	2307      	movs	r3, #7
 8002d96:	e006      	b.n	8002da6 <HAL_GPIO_Init+0x1ee>
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e004      	b.n	8002da6 <HAL_GPIO_Init+0x1ee>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e002      	b.n	8002da6 <HAL_GPIO_Init+0x1ee>
 8002da0:	2301      	movs	r3, #1
 8002da2:	e000      	b.n	8002da6 <HAL_GPIO_Init+0x1ee>
 8002da4:	2300      	movs	r3, #0
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	f002 0203 	and.w	r2, r2, #3
 8002dac:	0092      	lsls	r2, r2, #2
 8002dae:	4093      	lsls	r3, r2
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002db6:	4937      	ldr	r1, [pc, #220]	; (8002e94 <HAL_GPIO_Init+0x2dc>)
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	089b      	lsrs	r3, r3, #2
 8002dbc:	3302      	adds	r3, #2
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002dc4:	4b38      	ldr	r3, [pc, #224]	; (8002ea8 <HAL_GPIO_Init+0x2f0>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d003      	beq.n	8002de8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002de8:	4a2f      	ldr	r2, [pc, #188]	; (8002ea8 <HAL_GPIO_Init+0x2f0>)
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002dee:	4b2e      	ldr	r3, [pc, #184]	; (8002ea8 <HAL_GPIO_Init+0x2f0>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	43db      	mvns	r3, r3
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e12:	4a25      	ldr	r2, [pc, #148]	; (8002ea8 <HAL_GPIO_Init+0x2f0>)
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e18:	4b23      	ldr	r3, [pc, #140]	; (8002ea8 <HAL_GPIO_Init+0x2f0>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	43db      	mvns	r3, r3
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	4013      	ands	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e3c:	4a1a      	ldr	r2, [pc, #104]	; (8002ea8 <HAL_GPIO_Init+0x2f0>)
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e42:	4b19      	ldr	r3, [pc, #100]	; (8002ea8 <HAL_GPIO_Init+0x2f0>)
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e66:	4a10      	ldr	r2, [pc, #64]	; (8002ea8 <HAL_GPIO_Init+0x2f0>)
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f47f aea3 	bne.w	8002bc8 <HAL_GPIO_Init+0x10>
  }
}
 8002e82:	bf00      	nop
 8002e84:	bf00      	nop
 8002e86:	371c      	adds	r7, #28
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	40021000 	.word	0x40021000
 8002e94:	40010000 	.word	0x40010000
 8002e98:	48000400 	.word	0x48000400
 8002e9c:	48000800 	.word	0x48000800
 8002ea0:	48000c00 	.word	0x48000c00
 8002ea4:	48001000 	.word	0x48001000
 8002ea8:	40010400 	.word	0x40010400

08002eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	807b      	strh	r3, [r7, #2]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ebc:	787b      	ldrb	r3, [r7, #1]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ec2:	887a      	ldrh	r2, [r7, #2]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ec8:	e002      	b.n	8002ed0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002eca:	887a      	ldrh	r2, [r7, #2]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <HAL_PWR_EnableWakeUpPin>:
  *           @arg @ref PWR_WAKEUP_PIN5_HIGH or PWR_WAKEUP_PIN5_LOW
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 8002ee4:	4b0c      	ldr	r3, [pc, #48]	; (8002f18 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8002ee6:	68da      	ldr	r2, [r3, #12]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f003 031f 	and.w	r3, r3, #31
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	401a      	ands	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	095b      	lsrs	r3, r3, #5
 8002ef6:	4908      	ldr	r1, [pc, #32]	; (8002f18 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	60cb      	str	r3, [r1, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 8002efc:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f003 031f 	and.w	r3, r3, #31
 8002f06:	4904      	ldr	r1, [pc, #16]	; (8002f18 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	608b      	str	r3, [r1, #8]


}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	40007000 	.word	0x40007000

08002f1c <HAL_PWR_DisableWakeUpPin>:
  *         This parameter can be one of the following values:
  *           @arg @ref PWR_WAKEUP_PIN1, PWR_WAKEUP_PIN2, PWR_WAKEUP_PIN3, PWR_WAKEUP_PIN4, PWR_WAKEUP_PIN5
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 8002f24:	4b07      	ldr	r3, [pc, #28]	; (8002f44 <HAL_PWR_DisableWakeUpPin+0x28>)
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f003 031f 	and.w	r3, r3, #31
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	4904      	ldr	r1, [pc, #16]	; (8002f44 <HAL_PWR_DisableWakeUpPin+0x28>)
 8002f32:	4013      	ands	r3, r2
 8002f34:	608b      	str	r3, [r1, #8]
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	40007000 	.word	0x40007000

08002f48 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f5a:	d104      	bne.n	8002f66 <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 8002f5c:	78fb      	ldrb	r3, [r7, #3]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 f898 	bl	8003094 <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 8002f64:	e003      	b.n	8002f6e <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 8002f66:	78fb      	ldrb	r3, [r7, #3]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 f869 	bl	8003040 <HAL_PWREx_EnterSTOP0Mode>
}
 8002f6e:	bf00      	nop
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
	...

08002f78 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f7c:	4b04      	ldr	r3, [pc, #16]	; (8002f90 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	40007000 	.word	0x40007000

08002f94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa2:	d130      	bne.n	8003006 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fa4:	4b23      	ldr	r3, [pc, #140]	; (8003034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fb0:	d038      	beq.n	8003024 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fb2:	4b20      	ldr	r3, [pc, #128]	; (8003034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fba:	4a1e      	ldr	r2, [pc, #120]	; (8003034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fc0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fc2:	4b1d      	ldr	r3, [pc, #116]	; (8003038 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2232      	movs	r2, #50	; 0x32
 8002fc8:	fb02 f303 	mul.w	r3, r2, r3
 8002fcc:	4a1b      	ldr	r2, [pc, #108]	; (800303c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002fce:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd2:	0c9b      	lsrs	r3, r3, #18
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fd8:	e002      	b.n	8002fe0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fe0:	4b14      	ldr	r3, [pc, #80]	; (8003034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fec:	d102      	bne.n	8002ff4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1f2      	bne.n	8002fda <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ff4:	4b0f      	ldr	r3, [pc, #60]	; (8003034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ffc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003000:	d110      	bne.n	8003024 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e00f      	b.n	8003026 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003006:	4b0b      	ldr	r3, [pc, #44]	; (8003034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800300e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003012:	d007      	beq.n	8003024 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003014:	4b07      	ldr	r3, [pc, #28]	; (8003034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800301c:	4a05      	ldr	r2, [pc, #20]	; (8003034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800301e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003022:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40007000 	.word	0x40007000
 8003038:	20000010 	.word	0x20000010
 800303c:	431bde83 	.word	0x431bde83

08003040 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	4603      	mov	r3, r0
 8003048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 800304a:	4b10      	ldr	r3, [pc, #64]	; (800308c <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a0f      	ldr	r2, [pc, #60]	; (800308c <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8003050:	f023 0307 	bic.w	r3, r3, #7
 8003054:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003056:	4b0e      	ldr	r3, [pc, #56]	; (8003090 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	4a0d      	ldr	r2, [pc, #52]	; (8003090 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 800305c:	f043 0304 	orr.w	r3, r3, #4
 8003060:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003062:	79fb      	ldrb	r3, [r7, #7]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d101      	bne.n	800306c <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003068:	bf30      	wfi
 800306a:	e002      	b.n	8003072 <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800306c:	bf40      	sev
    __WFE();
 800306e:	bf20      	wfe
    __WFE();
 8003070:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003072:	4b07      	ldr	r3, [pc, #28]	; (8003090 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	4a06      	ldr	r2, [pc, #24]	; (8003090 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8003078:	f023 0304 	bic.w	r3, r3, #4
 800307c:	6113      	str	r3, [r2, #16]
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40007000 	.word	0x40007000
 8003090:	e000ed00 	.word	0xe000ed00

08003094 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	4603      	mov	r3, r0
 800309c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 800309e:	4b11      	ldr	r3, [pc, #68]	; (80030e4 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f023 0307 	bic.w	r3, r3, #7
 80030a6:	4a0f      	ldr	r2, [pc, #60]	; (80030e4 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80030ae:	4b0e      	ldr	r3, [pc, #56]	; (80030e8 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	4a0d      	ldr	r2, [pc, #52]	; (80030e8 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80030b4:	f043 0304 	orr.w	r3, r3, #4
 80030b8:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80030ba:	79fb      	ldrb	r3, [r7, #7]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d101      	bne.n	80030c4 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80030c0:	bf30      	wfi
 80030c2:	e002      	b.n	80030ca <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80030c4:	bf40      	sev
    __WFE();
 80030c6:	bf20      	wfe
    __WFE();
 80030c8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80030ca:	4b07      	ldr	r3, [pc, #28]	; (80030e8 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	4a06      	ldr	r2, [pc, #24]	; (80030e8 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80030d0:	f023 0304 	bic.w	r3, r3, #4
 80030d4:	6113      	str	r3, [r2, #16]
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	40007000 	.word	0x40007000
 80030e8:	e000ed00 	.word	0xe000ed00

080030ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b088      	sub	sp, #32
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d102      	bne.n	8003100 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	f000 bc11 	b.w	8003922 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003100:	4ba0      	ldr	r3, [pc, #640]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 030c 	and.w	r3, r3, #12
 8003108:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800310a:	4b9e      	ldr	r3, [pc, #632]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0310 	and.w	r3, r3, #16
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 80e4 	beq.w	80032ea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d007      	beq.n	8003138 <HAL_RCC_OscConfig+0x4c>
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	2b0c      	cmp	r3, #12
 800312c:	f040 808b 	bne.w	8003246 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	2b01      	cmp	r3, #1
 8003134:	f040 8087 	bne.w	8003246 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003138:	4b92      	ldr	r3, [pc, #584]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <HAL_RCC_OscConfig+0x64>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d101      	bne.n	8003150 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e3e8      	b.n	8003922 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a1a      	ldr	r2, [r3, #32]
 8003154:	4b8b      	ldr	r3, [pc, #556]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0308 	and.w	r3, r3, #8
 800315c:	2b00      	cmp	r3, #0
 800315e:	d004      	beq.n	800316a <HAL_RCC_OscConfig+0x7e>
 8003160:	4b88      	ldr	r3, [pc, #544]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003168:	e005      	b.n	8003176 <HAL_RCC_OscConfig+0x8a>
 800316a:	4b86      	ldr	r3, [pc, #536]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 800316c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003170:	091b      	lsrs	r3, r3, #4
 8003172:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003176:	4293      	cmp	r3, r2
 8003178:	d223      	bcs.n	80031c2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	4618      	mov	r0, r3
 8003180:	f000 fd7a 	bl	8003c78 <RCC_SetFlashLatencyFromMSIRange>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e3c9      	b.n	8003922 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800318e:	4b7d      	ldr	r3, [pc, #500]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a7c      	ldr	r2, [pc, #496]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 8003194:	f043 0308 	orr.w	r3, r3, #8
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	4b7a      	ldr	r3, [pc, #488]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	4977      	ldr	r1, [pc, #476]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031ac:	4b75      	ldr	r3, [pc, #468]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	021b      	lsls	r3, r3, #8
 80031ba:	4972      	ldr	r1, [pc, #456]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	604b      	str	r3, [r1, #4]
 80031c0:	e025      	b.n	800320e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031c2:	4b70      	ldr	r3, [pc, #448]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a6f      	ldr	r2, [pc, #444]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 80031c8:	f043 0308 	orr.w	r3, r3, #8
 80031cc:	6013      	str	r3, [r2, #0]
 80031ce:	4b6d      	ldr	r3, [pc, #436]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	496a      	ldr	r1, [pc, #424]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031e0:	4b68      	ldr	r3, [pc, #416]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	021b      	lsls	r3, r3, #8
 80031ee:	4965      	ldr	r1, [pc, #404]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d109      	bne.n	800320e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 fd3a 	bl	8003c78 <RCC_SetFlashLatencyFromMSIRange>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e389      	b.n	8003922 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800320e:	f000 fc6f 	bl	8003af0 <HAL_RCC_GetSysClockFreq>
 8003212:	4602      	mov	r2, r0
 8003214:	4b5b      	ldr	r3, [pc, #364]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	091b      	lsrs	r3, r3, #4
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	495a      	ldr	r1, [pc, #360]	; (8003388 <HAL_RCC_OscConfig+0x29c>)
 8003220:	5ccb      	ldrb	r3, [r1, r3]
 8003222:	f003 031f 	and.w	r3, r3, #31
 8003226:	fa22 f303 	lsr.w	r3, r2, r3
 800322a:	4a58      	ldr	r2, [pc, #352]	; (800338c <HAL_RCC_OscConfig+0x2a0>)
 800322c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800322e:	4b58      	ldr	r3, [pc, #352]	; (8003390 <HAL_RCC_OscConfig+0x2a4>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f7fe fe34 	bl	8001ea0 <HAL_InitTick>
 8003238:	4603      	mov	r3, r0
 800323a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800323c:	7bfb      	ldrb	r3, [r7, #15]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d052      	beq.n	80032e8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003242:	7bfb      	ldrb	r3, [r7, #15]
 8003244:	e36d      	b.n	8003922 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d032      	beq.n	80032b4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800324e:	4b4d      	ldr	r3, [pc, #308]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a4c      	ldr	r2, [pc, #304]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 8003254:	f043 0301 	orr.w	r3, r3, #1
 8003258:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800325a:	f7fe fe71 	bl	8001f40 <HAL_GetTick>
 800325e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003260:	e008      	b.n	8003274 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003262:	f7fe fe6d 	bl	8001f40 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e356      	b.n	8003922 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003274:	4b43      	ldr	r3, [pc, #268]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0f0      	beq.n	8003262 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003280:	4b40      	ldr	r3, [pc, #256]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a3f      	ldr	r2, [pc, #252]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 8003286:	f043 0308 	orr.w	r3, r3, #8
 800328a:	6013      	str	r3, [r2, #0]
 800328c:	4b3d      	ldr	r3, [pc, #244]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	493a      	ldr	r1, [pc, #232]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 800329a:	4313      	orrs	r3, r2
 800329c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800329e:	4b39      	ldr	r3, [pc, #228]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	021b      	lsls	r3, r3, #8
 80032ac:	4935      	ldr	r1, [pc, #212]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	604b      	str	r3, [r1, #4]
 80032b2:	e01a      	b.n	80032ea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032b4:	4b33      	ldr	r3, [pc, #204]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a32      	ldr	r2, [pc, #200]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 80032ba:	f023 0301 	bic.w	r3, r3, #1
 80032be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032c0:	f7fe fe3e 	bl	8001f40 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032c8:	f7fe fe3a 	bl	8001f40 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e323      	b.n	8003922 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032da:	4b2a      	ldr	r3, [pc, #168]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_OscConfig+0x1dc>
 80032e6:	e000      	b.n	80032ea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d073      	beq.n	80033de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d005      	beq.n	8003308 <HAL_RCC_OscConfig+0x21c>
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	2b0c      	cmp	r3, #12
 8003300:	d10e      	bne.n	8003320 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	2b03      	cmp	r3, #3
 8003306:	d10b      	bne.n	8003320 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003308:	4b1e      	ldr	r3, [pc, #120]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d063      	beq.n	80033dc <HAL_RCC_OscConfig+0x2f0>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d15f      	bne.n	80033dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e300      	b.n	8003922 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003328:	d106      	bne.n	8003338 <HAL_RCC_OscConfig+0x24c>
 800332a:	4b16      	ldr	r3, [pc, #88]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a15      	ldr	r2, [pc, #84]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 8003330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	e01d      	b.n	8003374 <HAL_RCC_OscConfig+0x288>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003340:	d10c      	bne.n	800335c <HAL_RCC_OscConfig+0x270>
 8003342:	4b10      	ldr	r3, [pc, #64]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a0f      	ldr	r2, [pc, #60]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 8003348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	4b0d      	ldr	r3, [pc, #52]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a0c      	ldr	r2, [pc, #48]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 8003354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	e00b      	b.n	8003374 <HAL_RCC_OscConfig+0x288>
 800335c:	4b09      	ldr	r3, [pc, #36]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a08      	ldr	r2, [pc, #32]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 8003362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003366:	6013      	str	r3, [r2, #0]
 8003368:	4b06      	ldr	r3, [pc, #24]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a05      	ldr	r2, [pc, #20]	; (8003384 <HAL_RCC_OscConfig+0x298>)
 800336e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d01b      	beq.n	80033b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337c:	f7fe fde0 	bl	8001f40 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003382:	e010      	b.n	80033a6 <HAL_RCC_OscConfig+0x2ba>
 8003384:	40021000 	.word	0x40021000
 8003388:	08009368 	.word	0x08009368
 800338c:	20000010 	.word	0x20000010
 8003390:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003394:	f7fe fdd4 	bl	8001f40 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b64      	cmp	r3, #100	; 0x64
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e2bd      	b.n	8003922 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033a6:	4baf      	ldr	r3, [pc, #700]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0f0      	beq.n	8003394 <HAL_RCC_OscConfig+0x2a8>
 80033b2:	e014      	b.n	80033de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b4:	f7fe fdc4 	bl	8001f40 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033bc:	f7fe fdc0 	bl	8001f40 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b64      	cmp	r3, #100	; 0x64
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e2a9      	b.n	8003922 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033ce:	4ba5      	ldr	r3, [pc, #660]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1f0      	bne.n	80033bc <HAL_RCC_OscConfig+0x2d0>
 80033da:	e000      	b.n	80033de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d060      	beq.n	80034ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	2b04      	cmp	r3, #4
 80033ee:	d005      	beq.n	80033fc <HAL_RCC_OscConfig+0x310>
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	2b0c      	cmp	r3, #12
 80033f4:	d119      	bne.n	800342a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d116      	bne.n	800342a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033fc:	4b99      	ldr	r3, [pc, #612]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003404:	2b00      	cmp	r3, #0
 8003406:	d005      	beq.n	8003414 <HAL_RCC_OscConfig+0x328>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e286      	b.n	8003922 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003414:	4b93      	ldr	r3, [pc, #588]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	061b      	lsls	r3, r3, #24
 8003422:	4990      	ldr	r1, [pc, #576]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 8003424:	4313      	orrs	r3, r2
 8003426:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003428:	e040      	b.n	80034ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d023      	beq.n	800347a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003432:	4b8c      	ldr	r3, [pc, #560]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a8b      	ldr	r2, [pc, #556]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 8003438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800343c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343e:	f7fe fd7f 	bl	8001f40 <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003444:	e008      	b.n	8003458 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003446:	f7fe fd7b 	bl	8001f40 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e264      	b.n	8003922 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003458:	4b82      	ldr	r3, [pc, #520]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0f0      	beq.n	8003446 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003464:	4b7f      	ldr	r3, [pc, #508]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	061b      	lsls	r3, r3, #24
 8003472:	497c      	ldr	r1, [pc, #496]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 8003474:	4313      	orrs	r3, r2
 8003476:	604b      	str	r3, [r1, #4]
 8003478:	e018      	b.n	80034ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800347a:	4b7a      	ldr	r3, [pc, #488]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a79      	ldr	r2, [pc, #484]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 8003480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003486:	f7fe fd5b 	bl	8001f40 <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800348e:	f7fe fd57 	bl	8001f40 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e240      	b.n	8003922 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034a0:	4b70      	ldr	r3, [pc, #448]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1f0      	bne.n	800348e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0308 	and.w	r3, r3, #8
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d03c      	beq.n	8003532 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d01c      	beq.n	80034fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034c0:	4b68      	ldr	r3, [pc, #416]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 80034c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034c6:	4a67      	ldr	r2, [pc, #412]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d0:	f7fe fd36 	bl	8001f40 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034d8:	f7fe fd32 	bl	8001f40 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e21b      	b.n	8003922 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034ea:	4b5e      	ldr	r3, [pc, #376]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 80034ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0ef      	beq.n	80034d8 <HAL_RCC_OscConfig+0x3ec>
 80034f8:	e01b      	b.n	8003532 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034fa:	4b5a      	ldr	r3, [pc, #360]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 80034fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003500:	4a58      	ldr	r2, [pc, #352]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 8003502:	f023 0301 	bic.w	r3, r3, #1
 8003506:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800350a:	f7fe fd19 	bl	8001f40 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003512:	f7fe fd15 	bl	8001f40 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e1fe      	b.n	8003922 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003524:	4b4f      	ldr	r3, [pc, #316]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 8003526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1ef      	bne.n	8003512 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0304 	and.w	r3, r3, #4
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 80a6 	beq.w	800368c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003540:	2300      	movs	r3, #0
 8003542:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003544:	4b47      	ldr	r3, [pc, #284]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 8003546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10d      	bne.n	800356c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003550:	4b44      	ldr	r3, [pc, #272]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 8003552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003554:	4a43      	ldr	r2, [pc, #268]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 8003556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800355a:	6593      	str	r3, [r2, #88]	; 0x58
 800355c:	4b41      	ldr	r3, [pc, #260]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 800355e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003568:	2301      	movs	r3, #1
 800356a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800356c:	4b3e      	ldr	r3, [pc, #248]	; (8003668 <HAL_RCC_OscConfig+0x57c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003574:	2b00      	cmp	r3, #0
 8003576:	d118      	bne.n	80035aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003578:	4b3b      	ldr	r3, [pc, #236]	; (8003668 <HAL_RCC_OscConfig+0x57c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a3a      	ldr	r2, [pc, #232]	; (8003668 <HAL_RCC_OscConfig+0x57c>)
 800357e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003582:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003584:	f7fe fcdc 	bl	8001f40 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800358c:	f7fe fcd8 	bl	8001f40 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e1c1      	b.n	8003922 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800359e:	4b32      	ldr	r3, [pc, #200]	; (8003668 <HAL_RCC_OscConfig+0x57c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0f0      	beq.n	800358c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d108      	bne.n	80035c4 <HAL_RCC_OscConfig+0x4d8>
 80035b2:	4b2c      	ldr	r3, [pc, #176]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 80035b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b8:	4a2a      	ldr	r2, [pc, #168]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 80035ba:	f043 0301 	orr.w	r3, r3, #1
 80035be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035c2:	e024      	b.n	800360e <HAL_RCC_OscConfig+0x522>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	2b05      	cmp	r3, #5
 80035ca:	d110      	bne.n	80035ee <HAL_RCC_OscConfig+0x502>
 80035cc:	4b25      	ldr	r3, [pc, #148]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 80035ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d2:	4a24      	ldr	r2, [pc, #144]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 80035d4:	f043 0304 	orr.w	r3, r3, #4
 80035d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035dc:	4b21      	ldr	r3, [pc, #132]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 80035de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e2:	4a20      	ldr	r2, [pc, #128]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 80035e4:	f043 0301 	orr.w	r3, r3, #1
 80035e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035ec:	e00f      	b.n	800360e <HAL_RCC_OscConfig+0x522>
 80035ee:	4b1d      	ldr	r3, [pc, #116]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 80035f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f4:	4a1b      	ldr	r2, [pc, #108]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 80035f6:	f023 0301 	bic.w	r3, r3, #1
 80035fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035fe:	4b19      	ldr	r3, [pc, #100]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 8003600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003604:	4a17      	ldr	r2, [pc, #92]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 8003606:	f023 0304 	bic.w	r3, r3, #4
 800360a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d016      	beq.n	8003644 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003616:	f7fe fc93 	bl	8001f40 <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800361c:	e00a      	b.n	8003634 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800361e:	f7fe fc8f 	bl	8001f40 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	f241 3288 	movw	r2, #5000	; 0x1388
 800362c:	4293      	cmp	r3, r2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e176      	b.n	8003922 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003634:	4b0b      	ldr	r3, [pc, #44]	; (8003664 <HAL_RCC_OscConfig+0x578>)
 8003636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0ed      	beq.n	800361e <HAL_RCC_OscConfig+0x532>
 8003642:	e01a      	b.n	800367a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003644:	f7fe fc7c 	bl	8001f40 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800364a:	e00f      	b.n	800366c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800364c:	f7fe fc78 	bl	8001f40 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	f241 3288 	movw	r2, #5000	; 0x1388
 800365a:	4293      	cmp	r3, r2
 800365c:	d906      	bls.n	800366c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e15f      	b.n	8003922 <HAL_RCC_OscConfig+0x836>
 8003662:	bf00      	nop
 8003664:	40021000 	.word	0x40021000
 8003668:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800366c:	4baa      	ldr	r3, [pc, #680]	; (8003918 <HAL_RCC_OscConfig+0x82c>)
 800366e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1e8      	bne.n	800364c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800367a:	7ffb      	ldrb	r3, [r7, #31]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d105      	bne.n	800368c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003680:	4ba5      	ldr	r3, [pc, #660]	; (8003918 <HAL_RCC_OscConfig+0x82c>)
 8003682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003684:	4aa4      	ldr	r2, [pc, #656]	; (8003918 <HAL_RCC_OscConfig+0x82c>)
 8003686:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800368a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0320 	and.w	r3, r3, #32
 8003694:	2b00      	cmp	r3, #0
 8003696:	d03c      	beq.n	8003712 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	2b00      	cmp	r3, #0
 800369e:	d01c      	beq.n	80036da <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80036a0:	4b9d      	ldr	r3, [pc, #628]	; (8003918 <HAL_RCC_OscConfig+0x82c>)
 80036a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036a6:	4a9c      	ldr	r2, [pc, #624]	; (8003918 <HAL_RCC_OscConfig+0x82c>)
 80036a8:	f043 0301 	orr.w	r3, r3, #1
 80036ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b0:	f7fe fc46 	bl	8001f40 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036b8:	f7fe fc42 	bl	8001f40 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e12b      	b.n	8003922 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036ca:	4b93      	ldr	r3, [pc, #588]	; (8003918 <HAL_RCC_OscConfig+0x82c>)
 80036cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0ef      	beq.n	80036b8 <HAL_RCC_OscConfig+0x5cc>
 80036d8:	e01b      	b.n	8003712 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036da:	4b8f      	ldr	r3, [pc, #572]	; (8003918 <HAL_RCC_OscConfig+0x82c>)
 80036dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036e0:	4a8d      	ldr	r2, [pc, #564]	; (8003918 <HAL_RCC_OscConfig+0x82c>)
 80036e2:	f023 0301 	bic.w	r3, r3, #1
 80036e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ea:	f7fe fc29 	bl	8001f40 <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036f0:	e008      	b.n	8003704 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036f2:	f7fe fc25 	bl	8001f40 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e10e      	b.n	8003922 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003704:	4b84      	ldr	r3, [pc, #528]	; (8003918 <HAL_RCC_OscConfig+0x82c>)
 8003706:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1ef      	bne.n	80036f2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 8102 	beq.w	8003920 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003720:	2b02      	cmp	r3, #2
 8003722:	f040 80c5 	bne.w	80038b0 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003726:	4b7c      	ldr	r3, [pc, #496]	; (8003918 <HAL_RCC_OscConfig+0x82c>)
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f003 0203 	and.w	r2, r3, #3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003736:	429a      	cmp	r2, r3
 8003738:	d12c      	bne.n	8003794 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003744:	3b01      	subs	r3, #1
 8003746:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003748:	429a      	cmp	r2, r3
 800374a:	d123      	bne.n	8003794 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003756:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003758:	429a      	cmp	r2, r3
 800375a:	d11b      	bne.n	8003794 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003766:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003768:	429a      	cmp	r2, r3
 800376a:	d113      	bne.n	8003794 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003776:	085b      	lsrs	r3, r3, #1
 8003778:	3b01      	subs	r3, #1
 800377a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800377c:	429a      	cmp	r2, r3
 800377e:	d109      	bne.n	8003794 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	085b      	lsrs	r3, r3, #1
 800378c:	3b01      	subs	r3, #1
 800378e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003790:	429a      	cmp	r2, r3
 8003792:	d067      	beq.n	8003864 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	2b0c      	cmp	r3, #12
 8003798:	d062      	beq.n	8003860 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800379a:	4b5f      	ldr	r3, [pc, #380]	; (8003918 <HAL_RCC_OscConfig+0x82c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e0bb      	b.n	8003922 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80037aa:	4b5b      	ldr	r3, [pc, #364]	; (8003918 <HAL_RCC_OscConfig+0x82c>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a5a      	ldr	r2, [pc, #360]	; (8003918 <HAL_RCC_OscConfig+0x82c>)
 80037b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037b4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037b6:	f7fe fbc3 	bl	8001f40 <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037be:	f7fe fbbf 	bl	8001f40 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e0a8      	b.n	8003922 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037d0:	4b51      	ldr	r3, [pc, #324]	; (8003918 <HAL_RCC_OscConfig+0x82c>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1f0      	bne.n	80037be <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037dc:	4b4e      	ldr	r3, [pc, #312]	; (8003918 <HAL_RCC_OscConfig+0x82c>)
 80037de:	68da      	ldr	r2, [r3, #12]
 80037e0:	4b4e      	ldr	r3, [pc, #312]	; (800391c <HAL_RCC_OscConfig+0x830>)
 80037e2:	4013      	ands	r3, r2
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80037ec:	3a01      	subs	r2, #1
 80037ee:	0112      	lsls	r2, r2, #4
 80037f0:	4311      	orrs	r1, r2
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037f6:	0212      	lsls	r2, r2, #8
 80037f8:	4311      	orrs	r1, r2
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80037fe:	0852      	lsrs	r2, r2, #1
 8003800:	3a01      	subs	r2, #1
 8003802:	0552      	lsls	r2, r2, #21
 8003804:	4311      	orrs	r1, r2
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800380a:	0852      	lsrs	r2, r2, #1
 800380c:	3a01      	subs	r2, #1
 800380e:	0652      	lsls	r2, r2, #25
 8003810:	4311      	orrs	r1, r2
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003816:	06d2      	lsls	r2, r2, #27
 8003818:	430a      	orrs	r2, r1
 800381a:	493f      	ldr	r1, [pc, #252]	; (8003918 <HAL_RCC_OscConfig+0x82c>)
 800381c:	4313      	orrs	r3, r2
 800381e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003820:	4b3d      	ldr	r3, [pc, #244]	; (8003918 <HAL_RCC_OscConfig+0x82c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a3c      	ldr	r2, [pc, #240]	; (8003918 <HAL_RCC_OscConfig+0x82c>)
 8003826:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800382a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800382c:	4b3a      	ldr	r3, [pc, #232]	; (8003918 <HAL_RCC_OscConfig+0x82c>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	4a39      	ldr	r2, [pc, #228]	; (8003918 <HAL_RCC_OscConfig+0x82c>)
 8003832:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003836:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003838:	f7fe fb82 	bl	8001f40 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003840:	f7fe fb7e 	bl	8001f40 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e067      	b.n	8003922 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003852:	4b31      	ldr	r3, [pc, #196]	; (8003918 <HAL_RCC_OscConfig+0x82c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0f0      	beq.n	8003840 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800385e:	e05f      	b.n	8003920 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e05e      	b.n	8003922 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003864:	4b2c      	ldr	r3, [pc, #176]	; (8003918 <HAL_RCC_OscConfig+0x82c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d157      	bne.n	8003920 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003870:	4b29      	ldr	r3, [pc, #164]	; (8003918 <HAL_RCC_OscConfig+0x82c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a28      	ldr	r2, [pc, #160]	; (8003918 <HAL_RCC_OscConfig+0x82c>)
 8003876:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800387a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800387c:	4b26      	ldr	r3, [pc, #152]	; (8003918 <HAL_RCC_OscConfig+0x82c>)
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	4a25      	ldr	r2, [pc, #148]	; (8003918 <HAL_RCC_OscConfig+0x82c>)
 8003882:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003886:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003888:	f7fe fb5a 	bl	8001f40 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003890:	f7fe fb56 	bl	8001f40 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e03f      	b.n	8003922 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038a2:	4b1d      	ldr	r3, [pc, #116]	; (8003918 <HAL_RCC_OscConfig+0x82c>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d0f0      	beq.n	8003890 <HAL_RCC_OscConfig+0x7a4>
 80038ae:	e037      	b.n	8003920 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	2b0c      	cmp	r3, #12
 80038b4:	d02d      	beq.n	8003912 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b6:	4b18      	ldr	r3, [pc, #96]	; (8003918 <HAL_RCC_OscConfig+0x82c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a17      	ldr	r2, [pc, #92]	; (8003918 <HAL_RCC_OscConfig+0x82c>)
 80038bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038c0:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038c2:	4b15      	ldr	r3, [pc, #84]	; (8003918 <HAL_RCC_OscConfig+0x82c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d105      	bne.n	80038da <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80038ce:	4b12      	ldr	r3, [pc, #72]	; (8003918 <HAL_RCC_OscConfig+0x82c>)
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	4a11      	ldr	r2, [pc, #68]	; (8003918 <HAL_RCC_OscConfig+0x82c>)
 80038d4:	f023 0303 	bic.w	r3, r3, #3
 80038d8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80038da:	4b0f      	ldr	r3, [pc, #60]	; (8003918 <HAL_RCC_OscConfig+0x82c>)
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	4a0e      	ldr	r2, [pc, #56]	; (8003918 <HAL_RCC_OscConfig+0x82c>)
 80038e0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80038e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038e8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ea:	f7fe fb29 	bl	8001f40 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038f2:	f7fe fb25 	bl	8001f40 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e00e      	b.n	8003922 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003904:	4b04      	ldr	r3, [pc, #16]	; (8003918 <HAL_RCC_OscConfig+0x82c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1f0      	bne.n	80038f2 <HAL_RCC_OscConfig+0x806>
 8003910:	e006      	b.n	8003920 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e005      	b.n	8003922 <HAL_RCC_OscConfig+0x836>
 8003916:	bf00      	nop
 8003918:	40021000 	.word	0x40021000
 800391c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3720      	adds	r7, #32
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop

0800392c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d101      	bne.n	8003940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e0c8      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003940:	4b66      	ldr	r3, [pc, #408]	; (8003adc <HAL_RCC_ClockConfig+0x1b0>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	429a      	cmp	r2, r3
 800394c:	d910      	bls.n	8003970 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394e:	4b63      	ldr	r3, [pc, #396]	; (8003adc <HAL_RCC_ClockConfig+0x1b0>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f023 0207 	bic.w	r2, r3, #7
 8003956:	4961      	ldr	r1, [pc, #388]	; (8003adc <HAL_RCC_ClockConfig+0x1b0>)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	4313      	orrs	r3, r2
 800395c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800395e:	4b5f      	ldr	r3, [pc, #380]	; (8003adc <HAL_RCC_ClockConfig+0x1b0>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0307 	and.w	r3, r3, #7
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	429a      	cmp	r2, r3
 800396a:	d001      	beq.n	8003970 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e0b0      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b00      	cmp	r3, #0
 800397a:	d04c      	beq.n	8003a16 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b03      	cmp	r3, #3
 8003982:	d107      	bne.n	8003994 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003984:	4b56      	ldr	r3, [pc, #344]	; (8003ae0 <HAL_RCC_ClockConfig+0x1b4>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d121      	bne.n	80039d4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e09e      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	2b02      	cmp	r3, #2
 800399a:	d107      	bne.n	80039ac <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800399c:	4b50      	ldr	r3, [pc, #320]	; (8003ae0 <HAL_RCC_ClockConfig+0x1b4>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d115      	bne.n	80039d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e092      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d107      	bne.n	80039c4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039b4:	4b4a      	ldr	r3, [pc, #296]	; (8003ae0 <HAL_RCC_ClockConfig+0x1b4>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d109      	bne.n	80039d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e086      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039c4:	4b46      	ldr	r3, [pc, #280]	; (8003ae0 <HAL_RCC_ClockConfig+0x1b4>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d101      	bne.n	80039d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e07e      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039d4:	4b42      	ldr	r3, [pc, #264]	; (8003ae0 <HAL_RCC_ClockConfig+0x1b4>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f023 0203 	bic.w	r2, r3, #3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	493f      	ldr	r1, [pc, #252]	; (8003ae0 <HAL_RCC_ClockConfig+0x1b4>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039e6:	f7fe faab 	bl	8001f40 <HAL_GetTick>
 80039ea:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ec:	e00a      	b.n	8003a04 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ee:	f7fe faa7 	bl	8001f40 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e066      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a04:	4b36      	ldr	r3, [pc, #216]	; (8003ae0 <HAL_RCC_ClockConfig+0x1b4>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f003 020c 	and.w	r2, r3, #12
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d1eb      	bne.n	80039ee <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d008      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a22:	4b2f      	ldr	r3, [pc, #188]	; (8003ae0 <HAL_RCC_ClockConfig+0x1b4>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	492c      	ldr	r1, [pc, #176]	; (8003ae0 <HAL_RCC_ClockConfig+0x1b4>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a34:	4b29      	ldr	r3, [pc, #164]	; (8003adc <HAL_RCC_ClockConfig+0x1b0>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d210      	bcs.n	8003a64 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a42:	4b26      	ldr	r3, [pc, #152]	; (8003adc <HAL_RCC_ClockConfig+0x1b0>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f023 0207 	bic.w	r2, r3, #7
 8003a4a:	4924      	ldr	r1, [pc, #144]	; (8003adc <HAL_RCC_ClockConfig+0x1b0>)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a52:	4b22      	ldr	r3, [pc, #136]	; (8003adc <HAL_RCC_ClockConfig+0x1b0>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0307 	and.w	r3, r3, #7
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d001      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e036      	b.n	8003ad2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d008      	beq.n	8003a82 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a70:	4b1b      	ldr	r3, [pc, #108]	; (8003ae0 <HAL_RCC_ClockConfig+0x1b4>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	4918      	ldr	r1, [pc, #96]	; (8003ae0 <HAL_RCC_ClockConfig+0x1b4>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0308 	and.w	r3, r3, #8
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d009      	beq.n	8003aa2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a8e:	4b14      	ldr	r3, [pc, #80]	; (8003ae0 <HAL_RCC_ClockConfig+0x1b4>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	4910      	ldr	r1, [pc, #64]	; (8003ae0 <HAL_RCC_ClockConfig+0x1b4>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003aa2:	f000 f825 	bl	8003af0 <HAL_RCC_GetSysClockFreq>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	4b0d      	ldr	r3, [pc, #52]	; (8003ae0 <HAL_RCC_ClockConfig+0x1b4>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	091b      	lsrs	r3, r3, #4
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	490c      	ldr	r1, [pc, #48]	; (8003ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab4:	5ccb      	ldrb	r3, [r1, r3]
 8003ab6:	f003 031f 	and.w	r3, r3, #31
 8003aba:	fa22 f303 	lsr.w	r3, r2, r3
 8003abe:	4a0a      	ldr	r2, [pc, #40]	; (8003ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ac2:	4b0a      	ldr	r3, [pc, #40]	; (8003aec <HAL_RCC_ClockConfig+0x1c0>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fe f9ea 	bl	8001ea0 <HAL_InitTick>
 8003acc:	4603      	mov	r3, r0
 8003ace:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ad0:	7afb      	ldrb	r3, [r7, #11]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	40022000 	.word	0x40022000
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	08009368 	.word	0x08009368
 8003ae8:	20000010 	.word	0x20000010
 8003aec:	20000014 	.word	0x20000014

08003af0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b089      	sub	sp, #36	; 0x24
 8003af4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	61fb      	str	r3, [r7, #28]
 8003afa:	2300      	movs	r3, #0
 8003afc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003afe:	4b3e      	ldr	r3, [pc, #248]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 030c 	and.w	r3, r3, #12
 8003b06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b08:	4b3b      	ldr	r3, [pc, #236]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f003 0303 	and.w	r3, r3, #3
 8003b10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d005      	beq.n	8003b24 <HAL_RCC_GetSysClockFreq+0x34>
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	2b0c      	cmp	r3, #12
 8003b1c:	d121      	bne.n	8003b62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d11e      	bne.n	8003b62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b24:	4b34      	ldr	r3, [pc, #208]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d107      	bne.n	8003b40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b30:	4b31      	ldr	r3, [pc, #196]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b36:	0a1b      	lsrs	r3, r3, #8
 8003b38:	f003 030f 	and.w	r3, r3, #15
 8003b3c:	61fb      	str	r3, [r7, #28]
 8003b3e:	e005      	b.n	8003b4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b40:	4b2d      	ldr	r3, [pc, #180]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	091b      	lsrs	r3, r3, #4
 8003b46:	f003 030f 	and.w	r3, r3, #15
 8003b4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b4c:	4a2b      	ldr	r2, [pc, #172]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10d      	bne.n	8003b78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b60:	e00a      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d102      	bne.n	8003b6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b68:	4b25      	ldr	r3, [pc, #148]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b6a:	61bb      	str	r3, [r7, #24]
 8003b6c:	e004      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	2b08      	cmp	r3, #8
 8003b72:	d101      	bne.n	8003b78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b74:	4b23      	ldr	r3, [pc, #140]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	2b0c      	cmp	r3, #12
 8003b7c:	d134      	bne.n	8003be8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b7e:	4b1e      	ldr	r3, [pc, #120]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d003      	beq.n	8003b96 <HAL_RCC_GetSysClockFreq+0xa6>
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	2b03      	cmp	r3, #3
 8003b92:	d003      	beq.n	8003b9c <HAL_RCC_GetSysClockFreq+0xac>
 8003b94:	e005      	b.n	8003ba2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b96:	4b1a      	ldr	r3, [pc, #104]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b98:	617b      	str	r3, [r7, #20]
      break;
 8003b9a:	e005      	b.n	8003ba8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b9c:	4b19      	ldr	r3, [pc, #100]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b9e:	617b      	str	r3, [r7, #20]
      break;
 8003ba0:	e002      	b.n	8003ba8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	617b      	str	r3, [r7, #20]
      break;
 8003ba6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ba8:	4b13      	ldr	r3, [pc, #76]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	091b      	lsrs	r3, r3, #4
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003bb6:	4b10      	ldr	r3, [pc, #64]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	0a1b      	lsrs	r3, r3, #8
 8003bbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	fb02 f203 	mul.w	r2, r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bcc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bce:	4b0a      	ldr	r3, [pc, #40]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	0e5b      	lsrs	r3, r3, #25
 8003bd4:	f003 0303 	and.w	r3, r3, #3
 8003bd8:	3301      	adds	r3, #1
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003be8:	69bb      	ldr	r3, [r7, #24]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3724      	adds	r7, #36	; 0x24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	08009380 	.word	0x08009380
 8003c00:	00f42400 	.word	0x00f42400
 8003c04:	007a1200 	.word	0x007a1200

08003c08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c0c:	4b03      	ldr	r3, [pc, #12]	; (8003c1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	20000010 	.word	0x20000010

08003c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c24:	f7ff fff0 	bl	8003c08 <HAL_RCC_GetHCLKFreq>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	4b06      	ldr	r3, [pc, #24]	; (8003c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	0a1b      	lsrs	r3, r3, #8
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	4904      	ldr	r1, [pc, #16]	; (8003c48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c36:	5ccb      	ldrb	r3, [r1, r3]
 8003c38:	f003 031f 	and.w	r3, r3, #31
 8003c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40021000 	.word	0x40021000
 8003c48:	08009378 	.word	0x08009378

08003c4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c50:	f7ff ffda 	bl	8003c08 <HAL_RCC_GetHCLKFreq>
 8003c54:	4602      	mov	r2, r0
 8003c56:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	0adb      	lsrs	r3, r3, #11
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	4904      	ldr	r1, [pc, #16]	; (8003c74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c62:	5ccb      	ldrb	r3, [r1, r3]
 8003c64:	f003 031f 	and.w	r3, r3, #31
 8003c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40021000 	.word	0x40021000
 8003c74:	08009378 	.word	0x08009378

08003c78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c80:	2300      	movs	r3, #0
 8003c82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c84:	4b2a      	ldr	r3, [pc, #168]	; (8003d30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d003      	beq.n	8003c98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c90:	f7ff f972 	bl	8002f78 <HAL_PWREx_GetVoltageRange>
 8003c94:	6178      	str	r0, [r7, #20]
 8003c96:	e014      	b.n	8003cc2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c98:	4b25      	ldr	r3, [pc, #148]	; (8003d30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9c:	4a24      	ldr	r2, [pc, #144]	; (8003d30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ca2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ca4:	4b22      	ldr	r3, [pc, #136]	; (8003d30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cac:	60fb      	str	r3, [r7, #12]
 8003cae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003cb0:	f7ff f962 	bl	8002f78 <HAL_PWREx_GetVoltageRange>
 8003cb4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003cb6:	4b1e      	ldr	r3, [pc, #120]	; (8003d30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cba:	4a1d      	ldr	r2, [pc, #116]	; (8003d30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cc0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cc8:	d10b      	bne.n	8003ce2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b80      	cmp	r3, #128	; 0x80
 8003cce:	d919      	bls.n	8003d04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2ba0      	cmp	r3, #160	; 0xa0
 8003cd4:	d902      	bls.n	8003cdc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	613b      	str	r3, [r7, #16]
 8003cda:	e013      	b.n	8003d04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cdc:	2301      	movs	r3, #1
 8003cde:	613b      	str	r3, [r7, #16]
 8003ce0:	e010      	b.n	8003d04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b80      	cmp	r3, #128	; 0x80
 8003ce6:	d902      	bls.n	8003cee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ce8:	2303      	movs	r3, #3
 8003cea:	613b      	str	r3, [r7, #16]
 8003cec:	e00a      	b.n	8003d04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b80      	cmp	r3, #128	; 0x80
 8003cf2:	d102      	bne.n	8003cfa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	613b      	str	r3, [r7, #16]
 8003cf8:	e004      	b.n	8003d04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b70      	cmp	r3, #112	; 0x70
 8003cfe:	d101      	bne.n	8003d04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d00:	2301      	movs	r3, #1
 8003d02:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d04:	4b0b      	ldr	r3, [pc, #44]	; (8003d34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f023 0207 	bic.w	r2, r3, #7
 8003d0c:	4909      	ldr	r1, [pc, #36]	; (8003d34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d14:	4b07      	ldr	r3, [pc, #28]	; (8003d34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d001      	beq.n	8003d26 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e000      	b.n	8003d28 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3718      	adds	r7, #24
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	40021000 	.word	0x40021000
 8003d34:	40022000 	.word	0x40022000

08003d38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d40:	2300      	movs	r3, #0
 8003d42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d44:	2300      	movs	r3, #0
 8003d46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d031      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d58:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d5c:	d01a      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003d5e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d62:	d814      	bhi.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d009      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003d68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d6c:	d10f      	bne.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003d6e:	4b5d      	ldr	r3, [pc, #372]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	4a5c      	ldr	r2, [pc, #368]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d78:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d7a:	e00c      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3304      	adds	r3, #4
 8003d80:	2100      	movs	r1, #0
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 fa1e 	bl	80041c4 <RCCEx_PLLSAI1_Config>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d8c:	e003      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	74fb      	strb	r3, [r7, #19]
      break;
 8003d92:	e000      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003d94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d96:	7cfb      	ldrb	r3, [r7, #19]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10b      	bne.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d9c:	4b51      	ldr	r3, [pc, #324]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003daa:	494e      	ldr	r1, [pc, #312]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003db2:	e001      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db4:	7cfb      	ldrb	r3, [r7, #19]
 8003db6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 809e 	beq.w	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003dca:	4b46      	ldr	r3, [pc, #280]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e000      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003dda:	2300      	movs	r3, #0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00d      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003de0:	4b40      	ldr	r3, [pc, #256]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de4:	4a3f      	ldr	r2, [pc, #252]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003de6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dea:	6593      	str	r3, [r2, #88]	; 0x58
 8003dec:	4b3d      	ldr	r3, [pc, #244]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df4:	60bb      	str	r3, [r7, #8]
 8003df6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dfc:	4b3a      	ldr	r3, [pc, #232]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a39      	ldr	r2, [pc, #228]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e08:	f7fe f89a 	bl	8001f40 <HAL_GetTick>
 8003e0c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e0e:	e009      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e10:	f7fe f896 	bl	8001f40 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d902      	bls.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	74fb      	strb	r3, [r7, #19]
        break;
 8003e22:	e005      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e24:	4b30      	ldr	r3, [pc, #192]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0ef      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003e30:	7cfb      	ldrb	r3, [r7, #19]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d15a      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e36:	4b2b      	ldr	r3, [pc, #172]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e40:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d01e      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d019      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e52:	4b24      	ldr	r3, [pc, #144]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e5c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e5e:	4b21      	ldr	r3, [pc, #132]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e64:	4a1f      	ldr	r2, [pc, #124]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e6e:	4b1d      	ldr	r3, [pc, #116]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e74:	4a1b      	ldr	r2, [pc, #108]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e7e:	4a19      	ldr	r2, [pc, #100]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d016      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e90:	f7fe f856 	bl	8001f40 <HAL_GetTick>
 8003e94:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e96:	e00b      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e98:	f7fe f852 	bl	8001f40 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d902      	bls.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	74fb      	strb	r3, [r7, #19]
            break;
 8003eae:	e006      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eb0:	4b0c      	ldr	r3, [pc, #48]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d0ec      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003ebe:	7cfb      	ldrb	r3, [r7, #19]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10b      	bne.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ec4:	4b07      	ldr	r3, [pc, #28]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed2:	4904      	ldr	r1, [pc, #16]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003eda:	e009      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003edc:	7cfb      	ldrb	r3, [r7, #19]
 8003ede:	74bb      	strb	r3, [r7, #18]
 8003ee0:	e006      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003ee2:	bf00      	nop
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eec:	7cfb      	ldrb	r3, [r7, #19]
 8003eee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ef0:	7c7b      	ldrb	r3, [r7, #17]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d105      	bne.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ef6:	4bb2      	ldr	r3, [pc, #712]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003efa:	4ab1      	ldr	r2, [pc, #708]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003efc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f00:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00a      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f0e:	4bac      	ldr	r3, [pc, #688]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f14:	f023 0203 	bic.w	r2, r3, #3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	49a8      	ldr	r1, [pc, #672]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00a      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f30:	4ba3      	ldr	r3, [pc, #652]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f36:	f023 020c 	bic.w	r2, r3, #12
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	49a0      	ldr	r1, [pc, #640]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0304 	and.w	r3, r3, #4
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00a      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f52:	4b9b      	ldr	r3, [pc, #620]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f58:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f60:	4997      	ldr	r1, [pc, #604]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0320 	and.w	r3, r3, #32
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00a      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f74:	4b92      	ldr	r3, [pc, #584]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f82:	498f      	ldr	r1, [pc, #572]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00a      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f96:	4b8a      	ldr	r3, [pc, #552]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa4:	4986      	ldr	r1, [pc, #536]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00a      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fb8:	4b81      	ldr	r3, [pc, #516]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	497e      	ldr	r1, [pc, #504]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00a      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fda:	4b79      	ldr	r3, [pc, #484]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe8:	4975      	ldr	r1, [pc, #468]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00a      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ffc:	4b70      	ldr	r3, [pc, #448]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004002:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800400a:	496d      	ldr	r1, [pc, #436]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800400c:	4313      	orrs	r3, r2
 800400e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00a      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800401e:	4b68      	ldr	r3, [pc, #416]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004024:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402c:	4964      	ldr	r1, [pc, #400]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800402e:	4313      	orrs	r3, r2
 8004030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d028      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004040:	4b5f      	ldr	r3, [pc, #380]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004046:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800404e:	495c      	ldr	r1, [pc, #368]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004050:	4313      	orrs	r3, r2
 8004052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800405a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800405e:	d106      	bne.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004060:	4b57      	ldr	r3, [pc, #348]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	4a56      	ldr	r2, [pc, #344]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004066:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800406a:	60d3      	str	r3, [r2, #12]
 800406c:	e011      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004072:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004076:	d10c      	bne.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	3304      	adds	r3, #4
 800407c:	2101      	movs	r1, #1
 800407e:	4618      	mov	r0, r3
 8004080:	f000 f8a0 	bl	80041c4 <RCCEx_PLLSAI1_Config>
 8004084:	4603      	mov	r3, r0
 8004086:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004088:	7cfb      	ldrb	r3, [r7, #19]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 800408e:	7cfb      	ldrb	r3, [r7, #19]
 8004090:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d028      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800409e:	4b48      	ldr	r3, [pc, #288]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ac:	4944      	ldr	r1, [pc, #272]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040bc:	d106      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040be:	4b40      	ldr	r3, [pc, #256]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	4a3f      	ldr	r2, [pc, #252]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040c8:	60d3      	str	r3, [r2, #12]
 80040ca:	e011      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040d4:	d10c      	bne.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	3304      	adds	r3, #4
 80040da:	2101      	movs	r1, #1
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 f871 	bl	80041c4 <RCCEx_PLLSAI1_Config>
 80040e2:	4603      	mov	r3, r0
 80040e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040e6:	7cfb      	ldrb	r3, [r7, #19]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80040ec:	7cfb      	ldrb	r3, [r7, #19]
 80040ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d028      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040fc:	4b30      	ldr	r3, [pc, #192]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004102:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800410a:	492d      	ldr	r1, [pc, #180]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800410c:	4313      	orrs	r3, r2
 800410e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004116:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800411a:	d106      	bne.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800411c:	4b28      	ldr	r3, [pc, #160]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	4a27      	ldr	r2, [pc, #156]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004122:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004126:	60d3      	str	r3, [r2, #12]
 8004128:	e011      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x416>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800412e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004132:	d10c      	bne.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x416>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	3304      	adds	r3, #4
 8004138:	2101      	movs	r1, #1
 800413a:	4618      	mov	r0, r3
 800413c:	f000 f842 	bl	80041c4 <RCCEx_PLLSAI1_Config>
 8004140:	4603      	mov	r3, r0
 8004142:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004144:	7cfb      	ldrb	r3, [r7, #19]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x416>
      {
        /* set overall return value */
        status = ret;
 800414a:	7cfb      	ldrb	r3, [r7, #19]
 800414c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d01c      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800415a:	4b19      	ldr	r3, [pc, #100]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800415c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004160:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004168:	4915      	ldr	r1, [pc, #84]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004174:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004178:	d10c      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	3304      	adds	r3, #4
 800417e:	2102      	movs	r1, #2
 8004180:	4618      	mov	r0, r3
 8004182:	f000 f81f 	bl	80041c4 <RCCEx_PLLSAI1_Config>
 8004186:	4603      	mov	r3, r0
 8004188:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800418a:	7cfb      	ldrb	r3, [r7, #19]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d001      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 8004190:	7cfb      	ldrb	r3, [r7, #19]
 8004192:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00a      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041a0:	4b07      	ldr	r3, [pc, #28]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ae:	4904      	ldr	r1, [pc, #16]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80041b6:	7cbb      	ldrb	r3, [r7, #18]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3718      	adds	r7, #24
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	40021000 	.word	0x40021000

080041c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041d2:	4b74      	ldr	r3, [pc, #464]	; (80043a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	f003 0303 	and.w	r3, r3, #3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d018      	beq.n	8004210 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80041de:	4b71      	ldr	r3, [pc, #452]	; (80043a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f003 0203 	and.w	r2, r3, #3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d10d      	bne.n	800420a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
       ||
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d009      	beq.n	800420a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80041f6:	4b6b      	ldr	r3, [pc, #428]	; (80043a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	091b      	lsrs	r3, r3, #4
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	1c5a      	adds	r2, r3, #1
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
       ||
 8004206:	429a      	cmp	r2, r3
 8004208:	d047      	beq.n	800429a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	73fb      	strb	r3, [r7, #15]
 800420e:	e044      	b.n	800429a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b03      	cmp	r3, #3
 8004216:	d018      	beq.n	800424a <RCCEx_PLLSAI1_Config+0x86>
 8004218:	2b03      	cmp	r3, #3
 800421a:	d825      	bhi.n	8004268 <RCCEx_PLLSAI1_Config+0xa4>
 800421c:	2b01      	cmp	r3, #1
 800421e:	d002      	beq.n	8004226 <RCCEx_PLLSAI1_Config+0x62>
 8004220:	2b02      	cmp	r3, #2
 8004222:	d009      	beq.n	8004238 <RCCEx_PLLSAI1_Config+0x74>
 8004224:	e020      	b.n	8004268 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004226:	4b5f      	ldr	r3, [pc, #380]	; (80043a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d11d      	bne.n	800426e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004236:	e01a      	b.n	800426e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004238:	4b5a      	ldr	r3, [pc, #360]	; (80043a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004240:	2b00      	cmp	r3, #0
 8004242:	d116      	bne.n	8004272 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004248:	e013      	b.n	8004272 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800424a:	4b56      	ldr	r3, [pc, #344]	; (80043a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10f      	bne.n	8004276 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004256:	4b53      	ldr	r3, [pc, #332]	; (80043a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d109      	bne.n	8004276 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004266:	e006      	b.n	8004276 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	73fb      	strb	r3, [r7, #15]
      break;
 800426c:	e004      	b.n	8004278 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800426e:	bf00      	nop
 8004270:	e002      	b.n	8004278 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004272:	bf00      	nop
 8004274:	e000      	b.n	8004278 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004276:	bf00      	nop
    }

    if(status == HAL_OK)
 8004278:	7bfb      	ldrb	r3, [r7, #15]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10d      	bne.n	800429a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800427e:	4b49      	ldr	r3, [pc, #292]	; (80043a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6819      	ldr	r1, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	3b01      	subs	r3, #1
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	430b      	orrs	r3, r1
 8004294:	4943      	ldr	r1, [pc, #268]	; (80043a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004296:	4313      	orrs	r3, r2
 8004298:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800429a:	7bfb      	ldrb	r3, [r7, #15]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d17c      	bne.n	800439a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80042a0:	4b40      	ldr	r3, [pc, #256]	; (80043a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a3f      	ldr	r2, [pc, #252]	; (80043a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042ac:	f7fd fe48 	bl	8001f40 <HAL_GetTick>
 80042b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042b2:	e009      	b.n	80042c8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042b4:	f7fd fe44 	bl	8001f40 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d902      	bls.n	80042c8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	73fb      	strb	r3, [r7, #15]
        break;
 80042c6:	e005      	b.n	80042d4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042c8:	4b36      	ldr	r3, [pc, #216]	; (80043a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1ef      	bne.n	80042b4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80042d4:	7bfb      	ldrb	r3, [r7, #15]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d15f      	bne.n	800439a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d110      	bne.n	8004302 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042e0:	4b30      	ldr	r3, [pc, #192]	; (80043a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80042e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6892      	ldr	r2, [r2, #8]
 80042f0:	0211      	lsls	r1, r2, #8
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	68d2      	ldr	r2, [r2, #12]
 80042f6:	06d2      	lsls	r2, r2, #27
 80042f8:	430a      	orrs	r2, r1
 80042fa:	492a      	ldr	r1, [pc, #168]	; (80043a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	610b      	str	r3, [r1, #16]
 8004300:	e027      	b.n	8004352 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d112      	bne.n	800432e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004308:	4b26      	ldr	r3, [pc, #152]	; (80043a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004310:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6892      	ldr	r2, [r2, #8]
 8004318:	0211      	lsls	r1, r2, #8
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6912      	ldr	r2, [r2, #16]
 800431e:	0852      	lsrs	r2, r2, #1
 8004320:	3a01      	subs	r2, #1
 8004322:	0552      	lsls	r2, r2, #21
 8004324:	430a      	orrs	r2, r1
 8004326:	491f      	ldr	r1, [pc, #124]	; (80043a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004328:	4313      	orrs	r3, r2
 800432a:	610b      	str	r3, [r1, #16]
 800432c:	e011      	b.n	8004352 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800432e:	4b1d      	ldr	r3, [pc, #116]	; (80043a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004336:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	6892      	ldr	r2, [r2, #8]
 800433e:	0211      	lsls	r1, r2, #8
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	6952      	ldr	r2, [r2, #20]
 8004344:	0852      	lsrs	r2, r2, #1
 8004346:	3a01      	subs	r2, #1
 8004348:	0652      	lsls	r2, r2, #25
 800434a:	430a      	orrs	r2, r1
 800434c:	4915      	ldr	r1, [pc, #84]	; (80043a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800434e:	4313      	orrs	r3, r2
 8004350:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004352:	4b14      	ldr	r3, [pc, #80]	; (80043a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a13      	ldr	r2, [pc, #76]	; (80043a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004358:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800435c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800435e:	f7fd fdef 	bl	8001f40 <HAL_GetTick>
 8004362:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004364:	e009      	b.n	800437a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004366:	f7fd fdeb 	bl	8001f40 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d902      	bls.n	800437a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	73fb      	strb	r3, [r7, #15]
          break;
 8004378:	e005      	b.n	8004386 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800437a:	4b0a      	ldr	r3, [pc, #40]	; (80043a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0ef      	beq.n	8004366 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004386:	7bfb      	ldrb	r3, [r7, #15]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d106      	bne.n	800439a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800438c:	4b05      	ldr	r3, [pc, #20]	; (80043a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800438e:	691a      	ldr	r2, [r3, #16]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	4903      	ldr	r1, [pc, #12]	; (80043a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004396:	4313      	orrs	r3, r2
 8004398:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800439a:	7bfb      	ldrb	r3, [r7, #15]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	40021000 	.word	0x40021000

080043a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e095      	b.n	80044e6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d108      	bne.n	80043d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043ca:	d009      	beq.n	80043e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	61da      	str	r2, [r3, #28]
 80043d2:	e005      	b.n	80043e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d106      	bne.n	8004400 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7fd f99c 	bl	8001738 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004416:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004420:	d902      	bls.n	8004428 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004422:	2300      	movs	r3, #0
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	e002      	b.n	800442e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004428:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800442c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004436:	d007      	beq.n	8004448 <HAL_SPI_Init+0xa0>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004440:	d002      	beq.n	8004448 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004458:	431a      	orrs	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	431a      	orrs	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004476:	431a      	orrs	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004480:	431a      	orrs	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800448a:	ea42 0103 	orr.w	r1, r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004492:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	0c1b      	lsrs	r3, r3, #16
 80044a4:	f003 0204 	and.w	r2, r3, #4
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	f003 0310 	and.w	r3, r3, #16
 80044b0:	431a      	orrs	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b6:	f003 0308 	and.w	r3, r3, #8
 80044ba:	431a      	orrs	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80044c4:	ea42 0103 	orr.w	r1, r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b088      	sub	sp, #32
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	60f8      	str	r0, [r7, #12]
 80044f6:	60b9      	str	r1, [r7, #8]
 80044f8:	603b      	str	r3, [r7, #0]
 80044fa:	4613      	mov	r3, r2
 80044fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044fe:	2300      	movs	r3, #0
 8004500:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004508:	2b01      	cmp	r3, #1
 800450a:	d101      	bne.n	8004510 <HAL_SPI_Transmit+0x22>
 800450c:	2302      	movs	r3, #2
 800450e:	e158      	b.n	80047c2 <HAL_SPI_Transmit+0x2d4>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004518:	f7fd fd12 	bl	8001f40 <HAL_GetTick>
 800451c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800451e:	88fb      	ldrh	r3, [r7, #6]
 8004520:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b01      	cmp	r3, #1
 800452c:	d002      	beq.n	8004534 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800452e:	2302      	movs	r3, #2
 8004530:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004532:	e13d      	b.n	80047b0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d002      	beq.n	8004540 <HAL_SPI_Transmit+0x52>
 800453a:	88fb      	ldrh	r3, [r7, #6]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d102      	bne.n	8004546 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004544:	e134      	b.n	80047b0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2203      	movs	r2, #3
 800454a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	88fa      	ldrh	r2, [r7, #6]
 800455e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	88fa      	ldrh	r2, [r7, #6]
 8004564:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004590:	d10f      	bne.n	80045b2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045bc:	2b40      	cmp	r3, #64	; 0x40
 80045be:	d007      	beq.n	80045d0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045d8:	d94b      	bls.n	8004672 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d002      	beq.n	80045e8 <HAL_SPI_Transmit+0xfa>
 80045e2:	8afb      	ldrh	r3, [r7, #22]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d13e      	bne.n	8004666 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ec:	881a      	ldrh	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f8:	1c9a      	adds	r2, r3, #2
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004602:	b29b      	uxth	r3, r3
 8004604:	3b01      	subs	r3, #1
 8004606:	b29a      	uxth	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800460c:	e02b      	b.n	8004666 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b02      	cmp	r3, #2
 800461a:	d112      	bne.n	8004642 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004620:	881a      	ldrh	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462c:	1c9a      	adds	r2, r3, #2
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004636:	b29b      	uxth	r3, r3
 8004638:	3b01      	subs	r3, #1
 800463a:	b29a      	uxth	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004640:	e011      	b.n	8004666 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004642:	f7fd fc7d 	bl	8001f40 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	429a      	cmp	r2, r3
 8004650:	d803      	bhi.n	800465a <HAL_SPI_Transmit+0x16c>
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004658:	d102      	bne.n	8004660 <HAL_SPI_Transmit+0x172>
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d102      	bne.n	8004666 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004664:	e0a4      	b.n	80047b0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800466a:	b29b      	uxth	r3, r3
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1ce      	bne.n	800460e <HAL_SPI_Transmit+0x120>
 8004670:	e07c      	b.n	800476c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d002      	beq.n	8004680 <HAL_SPI_Transmit+0x192>
 800467a:	8afb      	ldrh	r3, [r7, #22]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d170      	bne.n	8004762 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004684:	b29b      	uxth	r3, r3
 8004686:	2b01      	cmp	r3, #1
 8004688:	d912      	bls.n	80046b0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468e:	881a      	ldrh	r2, [r3, #0]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469a:	1c9a      	adds	r2, r3, #2
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	3b02      	subs	r3, #2
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046ae:	e058      	b.n	8004762 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	330c      	adds	r3, #12
 80046ba:	7812      	ldrb	r2, [r2, #0]
 80046bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c2:	1c5a      	adds	r2, r3, #1
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	3b01      	subs	r3, #1
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80046d6:	e044      	b.n	8004762 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d12b      	bne.n	800473e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d912      	bls.n	8004716 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f4:	881a      	ldrh	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004700:	1c9a      	adds	r2, r3, #2
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800470a:	b29b      	uxth	r3, r3
 800470c:	3b02      	subs	r3, #2
 800470e:	b29a      	uxth	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004714:	e025      	b.n	8004762 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	330c      	adds	r3, #12
 8004720:	7812      	ldrb	r2, [r2, #0]
 8004722:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004728:	1c5a      	adds	r2, r3, #1
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004732:	b29b      	uxth	r3, r3
 8004734:	3b01      	subs	r3, #1
 8004736:	b29a      	uxth	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800473c:	e011      	b.n	8004762 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800473e:	f7fd fbff 	bl	8001f40 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	429a      	cmp	r2, r3
 800474c:	d803      	bhi.n	8004756 <HAL_SPI_Transmit+0x268>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004754:	d102      	bne.n	800475c <HAL_SPI_Transmit+0x26e>
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d102      	bne.n	8004762 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004760:	e026      	b.n	80047b0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004766:	b29b      	uxth	r3, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1b5      	bne.n	80046d8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	6839      	ldr	r1, [r7, #0]
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f000 f945 	bl	8004a00 <SPI_EndRxTxTransaction>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2220      	movs	r2, #32
 8004780:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10a      	bne.n	80047a0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800478a:	2300      	movs	r3, #0
 800478c:	613b      	str	r3, [r7, #16]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	613b      	str	r3, [r7, #16]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	613b      	str	r3, [r7, #16]
 800479e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d002      	beq.n	80047ae <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	77fb      	strb	r3, [r7, #31]
 80047ac:	e000      	b.n	80047b0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80047ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80047c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3720      	adds	r7, #32
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
	...

080047cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b088      	sub	sp, #32
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	603b      	str	r3, [r7, #0]
 80047d8:	4613      	mov	r3, r2
 80047da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80047dc:	f7fd fbb0 	bl	8001f40 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e4:	1a9b      	subs	r3, r3, r2
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	4413      	add	r3, r2
 80047ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80047ec:	f7fd fba8 	bl	8001f40 <HAL_GetTick>
 80047f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80047f2:	4b39      	ldr	r3, [pc, #228]	; (80048d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	015b      	lsls	r3, r3, #5
 80047f8:	0d1b      	lsrs	r3, r3, #20
 80047fa:	69fa      	ldr	r2, [r7, #28]
 80047fc:	fb02 f303 	mul.w	r3, r2, r3
 8004800:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004802:	e054      	b.n	80048ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480a:	d050      	beq.n	80048ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800480c:	f7fd fb98 	bl	8001f40 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	69fa      	ldr	r2, [r7, #28]
 8004818:	429a      	cmp	r2, r3
 800481a:	d902      	bls.n	8004822 <SPI_WaitFlagStateUntilTimeout+0x56>
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d13d      	bne.n	800489e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004830:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800483a:	d111      	bne.n	8004860 <SPI_WaitFlagStateUntilTimeout+0x94>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004844:	d004      	beq.n	8004850 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800484e:	d107      	bne.n	8004860 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800485e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004864:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004868:	d10f      	bne.n	800488a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004888:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e017      	b.n	80048ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	3b01      	subs	r3, #1
 80048ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	4013      	ands	r3, r2
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	bf0c      	ite	eq
 80048be:	2301      	moveq	r3, #1
 80048c0:	2300      	movne	r3, #0
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	461a      	mov	r2, r3
 80048c6:	79fb      	ldrb	r3, [r7, #7]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d19b      	bne.n	8004804 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3720      	adds	r7, #32
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	20000010 	.word	0x20000010

080048dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b088      	sub	sp, #32
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
 80048e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80048ea:	f7fd fb29 	bl	8001f40 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f2:	1a9b      	subs	r3, r3, r2
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	4413      	add	r3, r2
 80048f8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80048fa:	f7fd fb21 	bl	8001f40 <HAL_GetTick>
 80048fe:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004900:	4b3e      	ldr	r3, [pc, #248]	; (80049fc <SPI_WaitFifoStateUntilTimeout+0x120>)
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	4613      	mov	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	00da      	lsls	r2, r3, #3
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	0d1b      	lsrs	r3, r3, #20
 8004910:	69fa      	ldr	r2, [r7, #28]
 8004912:	fb02 f303 	mul.w	r3, r2, r3
 8004916:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8004918:	e062      	b.n	80049e0 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004920:	d109      	bne.n	8004936 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d106      	bne.n	8004936 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	330c      	adds	r3, #12
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	b2db      	uxtb	r3, r3
 8004932:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8004934:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493c:	d050      	beq.n	80049e0 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800493e:	f7fd faff 	bl	8001f40 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	69fa      	ldr	r2, [r7, #28]
 800494a:	429a      	cmp	r2, r3
 800494c:	d902      	bls.n	8004954 <SPI_WaitFifoStateUntilTimeout+0x78>
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d13d      	bne.n	80049d0 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004962:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800496c:	d111      	bne.n	8004992 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004976:	d004      	beq.n	8004982 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004980:	d107      	bne.n	8004992 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004990:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004996:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800499a:	d10f      	bne.n	80049bc <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049aa:	601a      	str	r2, [r3, #0]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e010      	b.n	80049f2 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	3b01      	subs	r3, #1
 80049de:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689a      	ldr	r2, [r3, #8]
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	4013      	ands	r3, r2
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d194      	bne.n	800491a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3720      	adds	r7, #32
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	20000010 	.word	0x20000010

08004a00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af02      	add	r7, sp, #8
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f7ff ff5f 	bl	80048dc <SPI_WaitFifoStateUntilTimeout>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d007      	beq.n	8004a34 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a28:	f043 0220 	orr.w	r2, r3, #32
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e027      	b.n	8004a84 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	9300      	str	r3, [sp, #0]
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	2180      	movs	r1, #128	; 0x80
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f7ff fec4 	bl	80047cc <SPI_WaitFlagStateUntilTimeout>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d007      	beq.n	8004a5a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a4e:	f043 0220 	orr.w	r2, r3, #32
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e014      	b.n	8004a84 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f7ff ff38 	bl	80048dc <SPI_WaitFifoStateUntilTimeout>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d007      	beq.n	8004a82 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a76:	f043 0220 	orr.w	r2, r3, #32
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e000      	b.n	8004a84 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e040      	b.n	8004b20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d106      	bne.n	8004ab4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7fc fea4 	bl	80017fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2224      	movs	r2, #36	; 0x24
 8004ab8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 0201 	bic.w	r2, r2, #1
 8004ac8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 fb24 	bl	8005118 <UART_SetConfig>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d101      	bne.n	8004ada <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e022      	b.n	8004b20 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d002      	beq.n	8004ae8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 fd4c 	bl	8005580 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004af6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689a      	ldr	r2, [r3, #8]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f042 0201 	orr.w	r2, r2, #1
 8004b16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 fdd3 	bl	80056c4 <UART_CheckIdleState>
 8004b1e:	4603      	mov	r3, r0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	4613      	mov	r3, r2
 8004b34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b3a:	2b20      	cmp	r3, #32
 8004b3c:	d166      	bne.n	8004c0c <HAL_UART_Transmit_DMA+0xe4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d002      	beq.n	8004b4a <HAL_UART_Transmit_DMA+0x22>
 8004b44:	88fb      	ldrh	r3, [r7, #6]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e05f      	b.n	8004c0e <HAL_UART_Transmit_DMA+0xe6>
    }

    __HAL_LOCK(huart);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d101      	bne.n	8004b5c <HAL_UART_Transmit_DMA+0x34>
 8004b58:	2302      	movs	r3, #2
 8004b5a:	e058      	b.n	8004c0e <HAL_UART_Transmit_DMA+0xe6>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	88fa      	ldrh	r2, [r7, #6]
 8004b6e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	88fa      	ldrh	r2, [r7, #6]
 8004b76:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2221      	movs	r2, #33	; 0x21
 8004b86:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d02b      	beq.n	8004be8 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b94:	4a20      	ldr	r2, [pc, #128]	; (8004c18 <HAL_UART_Transmit_DMA+0xf0>)
 8004b96:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b9c:	4a1f      	ldr	r2, [pc, #124]	; (8004c1c <HAL_UART_Transmit_DMA+0xf4>)
 8004b9e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ba4:	4a1e      	ldr	r2, [pc, #120]	; (8004c20 <HAL_UART_Transmit_DMA+0xf8>)
 8004ba6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bac:	2200      	movs	r2, #0
 8004bae:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bb8:	4619      	mov	r1, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	3328      	adds	r3, #40	; 0x28
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	88fb      	ldrh	r3, [r7, #6]
 8004bc4:	f7fd fbb6 	bl	8002334 <HAL_DMA_Start_IT>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00c      	beq.n	8004be8 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2210      	movs	r2, #16
 8004bd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2220      	movs	r2, #32
 8004be2:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e012      	b.n	8004c0e <HAL_UART_Transmit_DMA+0xe6>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2240      	movs	r2, #64	; 0x40
 8004bee:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689a      	ldr	r2, [r3, #8]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c06:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	e000      	b.n	8004c0e <HAL_UART_Transmit_DMA+0xe6>
  }
  else
  {
    return HAL_BUSY;
 8004c0c:	2302      	movs	r3, #2
  }
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	080059b1 	.word	0x080059b1
 8004c1c:	08005a05 	.word	0x08005a05
 8004c20:	08005af1 	.word	0x08005af1

08004c24 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c36:	2b20      	cmp	r3, #32
 8004c38:	d131      	bne.n	8004c9e <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d002      	beq.n	8004c46 <HAL_UART_Receive_DMA+0x22>
 8004c40:	88fb      	ldrh	r3, [r7, #6]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e02a      	b.n	8004ca0 <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d101      	bne.n	8004c58 <HAL_UART_Receive_DMA+0x34>
 8004c54:	2302      	movs	r3, #2
 8004c56:	e023      	b.n	8004ca0 <HAL_UART_Receive_DMA+0x7c>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a0f      	ldr	r2, [pc, #60]	; (8004ca8 <HAL_UART_Receive_DMA+0x84>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d00e      	beq.n	8004c8e <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d007      	beq.n	8004c8e <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004c8c:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8004c8e:	88fb      	ldrh	r3, [r7, #6]
 8004c90:	461a      	mov	r2, r3
 8004c92:	68b9      	ldr	r1, [r7, #8]
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f000 fddb 	bl	8005850 <UART_Start_Receive_DMA>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	e000      	b.n	8004ca0 <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8004c9e:	2302      	movs	r3, #2
  }
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	40008000 	.word	0x40008000

08004cac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b088      	sub	sp, #32
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004ccc:	69fa      	ldr	r2, [r7, #28]
 8004cce:	f640 030f 	movw	r3, #2063	; 0x80f
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d113      	bne.n	8004d04 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	f003 0320 	and.w	r3, r3, #32
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00e      	beq.n	8004d04 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	f003 0320 	and.w	r3, r3, #32
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d009      	beq.n	8004d04 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 81ce 	beq.w	8005096 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	4798      	blx	r3
      }
      return;
 8004d02:	e1c8      	b.n	8005096 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 80e3 	beq.w	8004ed2 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d105      	bne.n	8004d22 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004d16:	69ba      	ldr	r2, [r7, #24]
 8004d18:	4ba6      	ldr	r3, [pc, #664]	; (8004fb4 <HAL_UART_IRQHandler+0x308>)
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 80d8 	beq.w	8004ed2 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d010      	beq.n	8004d4e <HAL_UART_IRQHandler+0xa2>
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00b      	beq.n	8004d4e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d44:	f043 0201 	orr.w	r2, r3, #1
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d010      	beq.n	8004d7a <HAL_UART_IRQHandler+0xce>
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00b      	beq.n	8004d7a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2202      	movs	r2, #2
 8004d68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d70:	f043 0204 	orr.w	r2, r3, #4
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	f003 0304 	and.w	r3, r3, #4
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d010      	beq.n	8004da6 <HAL_UART_IRQHandler+0xfa>
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00b      	beq.n	8004da6 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2204      	movs	r2, #4
 8004d94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d9c:	f043 0202 	orr.w	r2, r3, #2
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	f003 0308 	and.w	r3, r3, #8
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d015      	beq.n	8004ddc <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	f003 0320 	and.w	r3, r3, #32
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d104      	bne.n	8004dc4 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00b      	beq.n	8004ddc <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2208      	movs	r2, #8
 8004dca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dd2:	f043 0208 	orr.w	r2, r3, #8
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d011      	beq.n	8004e0a <HAL_UART_IRQHandler+0x15e>
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00c      	beq.n	8004e0a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004df8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e00:	f043 0220 	orr.w	r2, r3, #32
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f000 8142 	beq.w	800509a <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	f003 0320 	and.w	r3, r3, #32
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00c      	beq.n	8004e3a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	f003 0320 	and.w	r3, r3, #32
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d007      	beq.n	8004e3a <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d003      	beq.n	8004e3a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e40:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4c:	2b40      	cmp	r3, #64	; 0x40
 8004e4e:	d004      	beq.n	8004e5a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d031      	beq.n	8004ebe <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 fd79 	bl	8005952 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e6a:	2b40      	cmp	r3, #64	; 0x40
 8004e6c:	d123      	bne.n	8004eb6 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e7c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d013      	beq.n	8004eae <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8a:	4a4b      	ldr	r2, [pc, #300]	; (8004fb8 <HAL_UART_IRQHandler+0x30c>)
 8004e8c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7fd faec 	bl	8002470 <HAL_DMA_Abort_IT>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d017      	beq.n	8004ece <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004ea8:	4610      	mov	r0, r2
 8004eaa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eac:	e00f      	b.n	8004ece <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f91c 	bl	80050ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eb4:	e00b      	b.n	8004ece <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f918 	bl	80050ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ebc:	e007      	b.n	8004ece <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f914 	bl	80050ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004ecc:	e0e5      	b.n	800509a <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ece:	bf00      	nop
    return;
 8004ed0:	e0e3      	b.n	800509a <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	f040 80a9 	bne.w	800502e <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	f003 0310 	and.w	r3, r3, #16
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f000 80a3 	beq.w	800502e <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	f003 0310 	and.w	r3, r3, #16
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f000 809d 	beq.w	800502e <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2210      	movs	r2, #16
 8004efa:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f06:	2b40      	cmp	r3, #64	; 0x40
 8004f08:	d158      	bne.n	8004fbc <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8004f14:	893b      	ldrh	r3, [r7, #8]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f000 80c1 	beq.w	800509e <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004f22:	893a      	ldrh	r2, [r7, #8]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	f080 80ba 	bcs.w	800509e <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	893a      	ldrh	r2, [r7, #8]
 8004f2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0320 	and.w	r3, r3, #32
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d12a      	bne.n	8004f98 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f50:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 0201 	bic.w	r2, r2, #1
 8004f60:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f70:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2220      	movs	r2, #32
 8004f76:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 0210 	bic.w	r2, r2, #16
 8004f8c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fd fa2e 	bl	80023f4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	4619      	mov	r1, r3
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 f8a7 	bl	8005100 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004fb2:	e074      	b.n	800509e <HAL_UART_IRQHandler+0x3f2>
 8004fb4:	04000120 	.word	0x04000120
 8004fb8:	08005b6d 	.word	0x08005b6d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d063      	beq.n	80050a2 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8004fda:	897b      	ldrh	r3, [r7, #10]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d060      	beq.n	80050a2 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004fee:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689a      	ldr	r2, [r3, #8]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f022 0201 	bic.w	r2, r2, #1
 8004ffe:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2220      	movs	r2, #32
 8005004:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 0210 	bic.w	r2, r2, #16
 8005020:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005022:	897b      	ldrh	r3, [r7, #10]
 8005024:	4619      	mov	r1, r3
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f86a 	bl	8005100 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800502c:	e039      	b.n	80050a2 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00d      	beq.n	8005054 <HAL_UART_IRQHandler+0x3a8>
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d008      	beq.n	8005054 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800504a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 fdbc 	bl	8005bca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005052:	e029      	b.n	80050a8 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00d      	beq.n	800507a <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005064:	2b00      	cmp	r3, #0
 8005066:	d008      	beq.n	800507a <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800506c:	2b00      	cmp	r3, #0
 800506e:	d01a      	beq.n	80050a6 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	4798      	blx	r3
    }
    return;
 8005078:	e015      	b.n	80050a6 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005080:	2b00      	cmp	r3, #0
 8005082:	d011      	beq.n	80050a8 <HAL_UART_IRQHandler+0x3fc>
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00c      	beq.n	80050a8 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 fd82 	bl	8005b98 <UART_EndTransmit_IT>
    return;
 8005094:	e008      	b.n	80050a8 <HAL_UART_IRQHandler+0x3fc>
      return;
 8005096:	bf00      	nop
 8005098:	e006      	b.n	80050a8 <HAL_UART_IRQHandler+0x3fc>
    return;
 800509a:	bf00      	nop
 800509c:	e004      	b.n	80050a8 <HAL_UART_IRQHandler+0x3fc>
      return;
 800509e:	bf00      	nop
 80050a0:	e002      	b.n	80050a8 <HAL_UART_IRQHandler+0x3fc>
      return;
 80050a2:	bf00      	nop
 80050a4:	e000      	b.n	80050a8 <HAL_UART_IRQHandler+0x3fc>
    return;
 80050a6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80050a8:	3720      	adds	r7, #32
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop

080050b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	460b      	mov	r3, r1
 800510a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005118:	b5b0      	push	{r4, r5, r7, lr}
 800511a:	b088      	sub	sp, #32
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005120:	2300      	movs	r3, #0
 8005122:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689a      	ldr	r2, [r3, #8]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	431a      	orrs	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	431a      	orrs	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	69db      	ldr	r3, [r3, #28]
 8005138:	4313      	orrs	r3, r2
 800513a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	4baa      	ldr	r3, [pc, #680]	; (80053ec <UART_SetConfig+0x2d4>)
 8005144:	4013      	ands	r3, r2
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	6812      	ldr	r2, [r2, #0]
 800514a:	69f9      	ldr	r1, [r7, #28]
 800514c:	430b      	orrs	r3, r1
 800514e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68da      	ldr	r2, [r3, #12]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a9f      	ldr	r2, [pc, #636]	; (80053f0 <UART_SetConfig+0x2d8>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d004      	beq.n	8005180 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	69fa      	ldr	r2, [r7, #28]
 800517c:	4313      	orrs	r3, r2
 800517e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	69fa      	ldr	r2, [r7, #28]
 8005190:	430a      	orrs	r2, r1
 8005192:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a96      	ldr	r2, [pc, #600]	; (80053f4 <UART_SetConfig+0x2dc>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d121      	bne.n	80051e2 <UART_SetConfig+0xca>
 800519e:	4b96      	ldr	r3, [pc, #600]	; (80053f8 <UART_SetConfig+0x2e0>)
 80051a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a4:	f003 0303 	and.w	r3, r3, #3
 80051a8:	2b03      	cmp	r3, #3
 80051aa:	d817      	bhi.n	80051dc <UART_SetConfig+0xc4>
 80051ac:	a201      	add	r2, pc, #4	; (adr r2, 80051b4 <UART_SetConfig+0x9c>)
 80051ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b2:	bf00      	nop
 80051b4:	080051c5 	.word	0x080051c5
 80051b8:	080051d1 	.word	0x080051d1
 80051bc:	080051cb 	.word	0x080051cb
 80051c0:	080051d7 	.word	0x080051d7
 80051c4:	2301      	movs	r3, #1
 80051c6:	76fb      	strb	r3, [r7, #27]
 80051c8:	e096      	b.n	80052f8 <UART_SetConfig+0x1e0>
 80051ca:	2302      	movs	r3, #2
 80051cc:	76fb      	strb	r3, [r7, #27]
 80051ce:	e093      	b.n	80052f8 <UART_SetConfig+0x1e0>
 80051d0:	2304      	movs	r3, #4
 80051d2:	76fb      	strb	r3, [r7, #27]
 80051d4:	e090      	b.n	80052f8 <UART_SetConfig+0x1e0>
 80051d6:	2308      	movs	r3, #8
 80051d8:	76fb      	strb	r3, [r7, #27]
 80051da:	e08d      	b.n	80052f8 <UART_SetConfig+0x1e0>
 80051dc:	2310      	movs	r3, #16
 80051de:	76fb      	strb	r3, [r7, #27]
 80051e0:	e08a      	b.n	80052f8 <UART_SetConfig+0x1e0>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a85      	ldr	r2, [pc, #532]	; (80053fc <UART_SetConfig+0x2e4>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d132      	bne.n	8005252 <UART_SetConfig+0x13a>
 80051ec:	4b82      	ldr	r3, [pc, #520]	; (80053f8 <UART_SetConfig+0x2e0>)
 80051ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f2:	f003 030c 	and.w	r3, r3, #12
 80051f6:	2b0c      	cmp	r3, #12
 80051f8:	d828      	bhi.n	800524c <UART_SetConfig+0x134>
 80051fa:	a201      	add	r2, pc, #4	; (adr r2, 8005200 <UART_SetConfig+0xe8>)
 80051fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005200:	08005235 	.word	0x08005235
 8005204:	0800524d 	.word	0x0800524d
 8005208:	0800524d 	.word	0x0800524d
 800520c:	0800524d 	.word	0x0800524d
 8005210:	08005241 	.word	0x08005241
 8005214:	0800524d 	.word	0x0800524d
 8005218:	0800524d 	.word	0x0800524d
 800521c:	0800524d 	.word	0x0800524d
 8005220:	0800523b 	.word	0x0800523b
 8005224:	0800524d 	.word	0x0800524d
 8005228:	0800524d 	.word	0x0800524d
 800522c:	0800524d 	.word	0x0800524d
 8005230:	08005247 	.word	0x08005247
 8005234:	2300      	movs	r3, #0
 8005236:	76fb      	strb	r3, [r7, #27]
 8005238:	e05e      	b.n	80052f8 <UART_SetConfig+0x1e0>
 800523a:	2302      	movs	r3, #2
 800523c:	76fb      	strb	r3, [r7, #27]
 800523e:	e05b      	b.n	80052f8 <UART_SetConfig+0x1e0>
 8005240:	2304      	movs	r3, #4
 8005242:	76fb      	strb	r3, [r7, #27]
 8005244:	e058      	b.n	80052f8 <UART_SetConfig+0x1e0>
 8005246:	2308      	movs	r3, #8
 8005248:	76fb      	strb	r3, [r7, #27]
 800524a:	e055      	b.n	80052f8 <UART_SetConfig+0x1e0>
 800524c:	2310      	movs	r3, #16
 800524e:	76fb      	strb	r3, [r7, #27]
 8005250:	e052      	b.n	80052f8 <UART_SetConfig+0x1e0>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a6a      	ldr	r2, [pc, #424]	; (8005400 <UART_SetConfig+0x2e8>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d120      	bne.n	800529e <UART_SetConfig+0x186>
 800525c:	4b66      	ldr	r3, [pc, #408]	; (80053f8 <UART_SetConfig+0x2e0>)
 800525e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005262:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005266:	2b30      	cmp	r3, #48	; 0x30
 8005268:	d013      	beq.n	8005292 <UART_SetConfig+0x17a>
 800526a:	2b30      	cmp	r3, #48	; 0x30
 800526c:	d814      	bhi.n	8005298 <UART_SetConfig+0x180>
 800526e:	2b20      	cmp	r3, #32
 8005270:	d009      	beq.n	8005286 <UART_SetConfig+0x16e>
 8005272:	2b20      	cmp	r3, #32
 8005274:	d810      	bhi.n	8005298 <UART_SetConfig+0x180>
 8005276:	2b00      	cmp	r3, #0
 8005278:	d002      	beq.n	8005280 <UART_SetConfig+0x168>
 800527a:	2b10      	cmp	r3, #16
 800527c:	d006      	beq.n	800528c <UART_SetConfig+0x174>
 800527e:	e00b      	b.n	8005298 <UART_SetConfig+0x180>
 8005280:	2300      	movs	r3, #0
 8005282:	76fb      	strb	r3, [r7, #27]
 8005284:	e038      	b.n	80052f8 <UART_SetConfig+0x1e0>
 8005286:	2302      	movs	r3, #2
 8005288:	76fb      	strb	r3, [r7, #27]
 800528a:	e035      	b.n	80052f8 <UART_SetConfig+0x1e0>
 800528c:	2304      	movs	r3, #4
 800528e:	76fb      	strb	r3, [r7, #27]
 8005290:	e032      	b.n	80052f8 <UART_SetConfig+0x1e0>
 8005292:	2308      	movs	r3, #8
 8005294:	76fb      	strb	r3, [r7, #27]
 8005296:	e02f      	b.n	80052f8 <UART_SetConfig+0x1e0>
 8005298:	2310      	movs	r3, #16
 800529a:	76fb      	strb	r3, [r7, #27]
 800529c:	e02c      	b.n	80052f8 <UART_SetConfig+0x1e0>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a53      	ldr	r2, [pc, #332]	; (80053f0 <UART_SetConfig+0x2d8>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d125      	bne.n	80052f4 <UART_SetConfig+0x1dc>
 80052a8:	4b53      	ldr	r3, [pc, #332]	; (80053f8 <UART_SetConfig+0x2e0>)
 80052aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80052b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052b6:	d017      	beq.n	80052e8 <UART_SetConfig+0x1d0>
 80052b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052bc:	d817      	bhi.n	80052ee <UART_SetConfig+0x1d6>
 80052be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052c2:	d00b      	beq.n	80052dc <UART_SetConfig+0x1c4>
 80052c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052c8:	d811      	bhi.n	80052ee <UART_SetConfig+0x1d6>
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <UART_SetConfig+0x1be>
 80052ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052d2:	d006      	beq.n	80052e2 <UART_SetConfig+0x1ca>
 80052d4:	e00b      	b.n	80052ee <UART_SetConfig+0x1d6>
 80052d6:	2300      	movs	r3, #0
 80052d8:	76fb      	strb	r3, [r7, #27]
 80052da:	e00d      	b.n	80052f8 <UART_SetConfig+0x1e0>
 80052dc:	2302      	movs	r3, #2
 80052de:	76fb      	strb	r3, [r7, #27]
 80052e0:	e00a      	b.n	80052f8 <UART_SetConfig+0x1e0>
 80052e2:	2304      	movs	r3, #4
 80052e4:	76fb      	strb	r3, [r7, #27]
 80052e6:	e007      	b.n	80052f8 <UART_SetConfig+0x1e0>
 80052e8:	2308      	movs	r3, #8
 80052ea:	76fb      	strb	r3, [r7, #27]
 80052ec:	e004      	b.n	80052f8 <UART_SetConfig+0x1e0>
 80052ee:	2310      	movs	r3, #16
 80052f0:	76fb      	strb	r3, [r7, #27]
 80052f2:	e001      	b.n	80052f8 <UART_SetConfig+0x1e0>
 80052f4:	2310      	movs	r3, #16
 80052f6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a3c      	ldr	r2, [pc, #240]	; (80053f0 <UART_SetConfig+0x2d8>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	f040 8082 	bne.w	8005408 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005304:	7efb      	ldrb	r3, [r7, #27]
 8005306:	2b08      	cmp	r3, #8
 8005308:	d823      	bhi.n	8005352 <UART_SetConfig+0x23a>
 800530a:	a201      	add	r2, pc, #4	; (adr r2, 8005310 <UART_SetConfig+0x1f8>)
 800530c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005310:	08005335 	.word	0x08005335
 8005314:	08005353 	.word	0x08005353
 8005318:	0800533d 	.word	0x0800533d
 800531c:	08005353 	.word	0x08005353
 8005320:	08005343 	.word	0x08005343
 8005324:	08005353 	.word	0x08005353
 8005328:	08005353 	.word	0x08005353
 800532c:	08005353 	.word	0x08005353
 8005330:	0800534b 	.word	0x0800534b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005334:	f7fe fc74 	bl	8003c20 <HAL_RCC_GetPCLK1Freq>
 8005338:	6178      	str	r0, [r7, #20]
        break;
 800533a:	e00f      	b.n	800535c <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800533c:	4b31      	ldr	r3, [pc, #196]	; (8005404 <UART_SetConfig+0x2ec>)
 800533e:	617b      	str	r3, [r7, #20]
        break;
 8005340:	e00c      	b.n	800535c <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005342:	f7fe fbd5 	bl	8003af0 <HAL_RCC_GetSysClockFreq>
 8005346:	6178      	str	r0, [r7, #20]
        break;
 8005348:	e008      	b.n	800535c <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800534a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800534e:	617b      	str	r3, [r7, #20]
        break;
 8005350:	e004      	b.n	800535c <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 8005352:	2300      	movs	r3, #0
 8005354:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	76bb      	strb	r3, [r7, #26]
        break;
 800535a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	2b00      	cmp	r3, #0
 8005360:	f000 8100 	beq.w	8005564 <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	4613      	mov	r3, r2
 800536a:	005b      	lsls	r3, r3, #1
 800536c:	4413      	add	r3, r2
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	429a      	cmp	r2, r3
 8005372:	d305      	bcc.n	8005380 <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	429a      	cmp	r2, r3
 800537e:	d902      	bls.n	8005386 <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	76bb      	strb	r3, [r7, #26]
 8005384:	e0ee      	b.n	8005564 <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	4618      	mov	r0, r3
 800538a:	f04f 0100 	mov.w	r1, #0
 800538e:	f04f 0200 	mov.w	r2, #0
 8005392:	f04f 0300 	mov.w	r3, #0
 8005396:	020b      	lsls	r3, r1, #8
 8005398:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800539c:	0202      	lsls	r2, r0, #8
 800539e:	6879      	ldr	r1, [r7, #4]
 80053a0:	6849      	ldr	r1, [r1, #4]
 80053a2:	0849      	lsrs	r1, r1, #1
 80053a4:	4608      	mov	r0, r1
 80053a6:	f04f 0100 	mov.w	r1, #0
 80053aa:	1814      	adds	r4, r2, r0
 80053ac:	eb43 0501 	adc.w	r5, r3, r1
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	461a      	mov	r2, r3
 80053b6:	f04f 0300 	mov.w	r3, #0
 80053ba:	4620      	mov	r0, r4
 80053bc:	4629      	mov	r1, r5
 80053be:	f7fa ff0f 	bl	80001e0 <__aeabi_uldivmod>
 80053c2:	4602      	mov	r2, r0
 80053c4:	460b      	mov	r3, r1
 80053c6:	4613      	mov	r3, r2
 80053c8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053d0:	d308      	bcc.n	80053e4 <UART_SetConfig+0x2cc>
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053d8:	d204      	bcs.n	80053e4 <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	60da      	str	r2, [r3, #12]
 80053e2:	e0bf      	b.n	8005564 <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	76bb      	strb	r3, [r7, #26]
 80053e8:	e0bc      	b.n	8005564 <UART_SetConfig+0x44c>
 80053ea:	bf00      	nop
 80053ec:	efff69f3 	.word	0xefff69f3
 80053f0:	40008000 	.word	0x40008000
 80053f4:	40013800 	.word	0x40013800
 80053f8:	40021000 	.word	0x40021000
 80053fc:	40004400 	.word	0x40004400
 8005400:	40004800 	.word	0x40004800
 8005404:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005410:	d15c      	bne.n	80054cc <UART_SetConfig+0x3b4>
  {
    switch (clocksource)
 8005412:	7efb      	ldrb	r3, [r7, #27]
 8005414:	2b08      	cmp	r3, #8
 8005416:	d828      	bhi.n	800546a <UART_SetConfig+0x352>
 8005418:	a201      	add	r2, pc, #4	; (adr r2, 8005420 <UART_SetConfig+0x308>)
 800541a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541e:	bf00      	nop
 8005420:	08005445 	.word	0x08005445
 8005424:	0800544d 	.word	0x0800544d
 8005428:	08005455 	.word	0x08005455
 800542c:	0800546b 	.word	0x0800546b
 8005430:	0800545b 	.word	0x0800545b
 8005434:	0800546b 	.word	0x0800546b
 8005438:	0800546b 	.word	0x0800546b
 800543c:	0800546b 	.word	0x0800546b
 8005440:	08005463 	.word	0x08005463
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005444:	f7fe fbec 	bl	8003c20 <HAL_RCC_GetPCLK1Freq>
 8005448:	6178      	str	r0, [r7, #20]
        break;
 800544a:	e013      	b.n	8005474 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800544c:	f7fe fbfe 	bl	8003c4c <HAL_RCC_GetPCLK2Freq>
 8005450:	6178      	str	r0, [r7, #20]
        break;
 8005452:	e00f      	b.n	8005474 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005454:	4b49      	ldr	r3, [pc, #292]	; (800557c <UART_SetConfig+0x464>)
 8005456:	617b      	str	r3, [r7, #20]
        break;
 8005458:	e00c      	b.n	8005474 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800545a:	f7fe fb49 	bl	8003af0 <HAL_RCC_GetSysClockFreq>
 800545e:	6178      	str	r0, [r7, #20]
        break;
 8005460:	e008      	b.n	8005474 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005466:	617b      	str	r3, [r7, #20]
        break;
 8005468:	e004      	b.n	8005474 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 800546a:	2300      	movs	r3, #0
 800546c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	76bb      	strb	r3, [r7, #26]
        break;
 8005472:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d074      	beq.n	8005564 <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	005a      	lsls	r2, r3, #1
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	085b      	lsrs	r3, r3, #1
 8005484:	441a      	add	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	fbb2 f3f3 	udiv	r3, r2, r3
 800548e:	b29b      	uxth	r3, r3
 8005490:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	2b0f      	cmp	r3, #15
 8005496:	d916      	bls.n	80054c6 <UART_SetConfig+0x3ae>
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800549e:	d212      	bcs.n	80054c6 <UART_SetConfig+0x3ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	f023 030f 	bic.w	r3, r3, #15
 80054a8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	085b      	lsrs	r3, r3, #1
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	f003 0307 	and.w	r3, r3, #7
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	89fb      	ldrh	r3, [r7, #14]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	89fa      	ldrh	r2, [r7, #14]
 80054c2:	60da      	str	r2, [r3, #12]
 80054c4:	e04e      	b.n	8005564 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	76bb      	strb	r3, [r7, #26]
 80054ca:	e04b      	b.n	8005564 <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054cc:	7efb      	ldrb	r3, [r7, #27]
 80054ce:	2b08      	cmp	r3, #8
 80054d0:	d827      	bhi.n	8005522 <UART_SetConfig+0x40a>
 80054d2:	a201      	add	r2, pc, #4	; (adr r2, 80054d8 <UART_SetConfig+0x3c0>)
 80054d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d8:	080054fd 	.word	0x080054fd
 80054dc:	08005505 	.word	0x08005505
 80054e0:	0800550d 	.word	0x0800550d
 80054e4:	08005523 	.word	0x08005523
 80054e8:	08005513 	.word	0x08005513
 80054ec:	08005523 	.word	0x08005523
 80054f0:	08005523 	.word	0x08005523
 80054f4:	08005523 	.word	0x08005523
 80054f8:	0800551b 	.word	0x0800551b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054fc:	f7fe fb90 	bl	8003c20 <HAL_RCC_GetPCLK1Freq>
 8005500:	6178      	str	r0, [r7, #20]
        break;
 8005502:	e013      	b.n	800552c <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005504:	f7fe fba2 	bl	8003c4c <HAL_RCC_GetPCLK2Freq>
 8005508:	6178      	str	r0, [r7, #20]
        break;
 800550a:	e00f      	b.n	800552c <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800550c:	4b1b      	ldr	r3, [pc, #108]	; (800557c <UART_SetConfig+0x464>)
 800550e:	617b      	str	r3, [r7, #20]
        break;
 8005510:	e00c      	b.n	800552c <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005512:	f7fe faed 	bl	8003af0 <HAL_RCC_GetSysClockFreq>
 8005516:	6178      	str	r0, [r7, #20]
        break;
 8005518:	e008      	b.n	800552c <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800551a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800551e:	617b      	str	r3, [r7, #20]
        break;
 8005520:	e004      	b.n	800552c <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 8005522:	2300      	movs	r3, #0
 8005524:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	76bb      	strb	r3, [r7, #26]
        break;
 800552a:	bf00      	nop
    }

    if (pclk != 0U)
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d018      	beq.n	8005564 <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	085a      	lsrs	r2, r3, #1
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	441a      	add	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	fbb2 f3f3 	udiv	r3, r2, r3
 8005544:	b29b      	uxth	r3, r3
 8005546:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	2b0f      	cmp	r3, #15
 800554c:	d908      	bls.n	8005560 <UART_SetConfig+0x448>
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005554:	d204      	bcs.n	8005560 <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = usartdiv;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	60da      	str	r2, [r3, #12]
 800555e:	e001      	b.n	8005564 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005570:	7ebb      	ldrb	r3, [r7, #26]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3720      	adds	r7, #32
 8005576:	46bd      	mov	sp, r7
 8005578:	bdb0      	pop	{r4, r5, r7, pc}
 800557a:	bf00      	nop
 800557c:	00f42400 	.word	0x00f42400

08005580 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00a      	beq.n	80055aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	f003 0302 	and.w	r3, r3, #2
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00a      	beq.n	80055cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	f003 0304 	and.w	r3, r3, #4
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00a      	beq.n	80055ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f2:	f003 0308 	and.w	r3, r3, #8
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00a      	beq.n	8005610 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	430a      	orrs	r2, r1
 800560e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	f003 0310 	and.w	r3, r3, #16
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00a      	beq.n	8005632 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005636:	f003 0320 	and.w	r3, r3, #32
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00a      	beq.n	8005654 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	430a      	orrs	r2, r1
 8005652:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800565c:	2b00      	cmp	r3, #0
 800565e:	d01a      	beq.n	8005696 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	430a      	orrs	r2, r1
 8005674:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800567e:	d10a      	bne.n	8005696 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	430a      	orrs	r2, r1
 8005694:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00a      	beq.n	80056b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	430a      	orrs	r2, r1
 80056b6:	605a      	str	r2, [r3, #4]
  }
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b086      	sub	sp, #24
 80056c8:	af02      	add	r7, sp, #8
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056d4:	f7fc fc34 	bl	8001f40 <HAL_GetTick>
 80056d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0308 	and.w	r3, r3, #8
 80056e4:	2b08      	cmp	r3, #8
 80056e6:	d10e      	bne.n	8005706 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056ec:	9300      	str	r3, [sp, #0]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f82d 	bl	8005756 <UART_WaitOnFlagUntilTimeout>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e023      	b.n	800574e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0304 	and.w	r3, r3, #4
 8005710:	2b04      	cmp	r3, #4
 8005712:	d10e      	bne.n	8005732 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005714:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005718:	9300      	str	r3, [sp, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f817 	bl	8005756 <UART_WaitOnFlagUntilTimeout>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e00d      	b.n	800574e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2220      	movs	r2, #32
 8005736:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2220      	movs	r2, #32
 800573c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b084      	sub	sp, #16
 800575a:	af00      	add	r7, sp, #0
 800575c:	60f8      	str	r0, [r7, #12]
 800575e:	60b9      	str	r1, [r7, #8]
 8005760:	603b      	str	r3, [r7, #0]
 8005762:	4613      	mov	r3, r2
 8005764:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005766:	e05e      	b.n	8005826 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576e:	d05a      	beq.n	8005826 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005770:	f7fc fbe6 	bl	8001f40 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	69ba      	ldr	r2, [r7, #24]
 800577c:	429a      	cmp	r2, r3
 800577e:	d302      	bcc.n	8005786 <UART_WaitOnFlagUntilTimeout+0x30>
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d11b      	bne.n	80057be <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005794:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0201 	bic.w	r2, r2, #1
 80057a4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2220      	movs	r2, #32
 80057aa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2220      	movs	r2, #32
 80057b0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e043      	b.n	8005846 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0304 	and.w	r3, r3, #4
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d02c      	beq.n	8005826 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057da:	d124      	bne.n	8005826 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057e4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80057f4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	689a      	ldr	r2, [r3, #8]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f022 0201 	bic.w	r2, r2, #1
 8005804:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2220      	movs	r2, #32
 800580a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2220      	movs	r2, #32
 8005810:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2220      	movs	r2, #32
 8005816:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e00f      	b.n	8005846 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	69da      	ldr	r2, [r3, #28]
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	4013      	ands	r3, r2
 8005830:	68ba      	ldr	r2, [r7, #8]
 8005832:	429a      	cmp	r2, r3
 8005834:	bf0c      	ite	eq
 8005836:	2301      	moveq	r3, #1
 8005838:	2300      	movne	r3, #0
 800583a:	b2db      	uxtb	r3, r3
 800583c:	461a      	mov	r2, r3
 800583e:	79fb      	ldrb	r3, [r7, #7]
 8005840:	429a      	cmp	r2, r3
 8005842:	d091      	beq.n	8005768 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
	...

08005850 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	4613      	mov	r3, r2
 800585c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	88fa      	ldrh	r2, [r7, #6]
 8005868:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2222      	movs	r2, #34	; 0x22
 8005878:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587e:	2b00      	cmp	r3, #0
 8005880:	d02b      	beq.n	80058da <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005886:	4a25      	ldr	r2, [pc, #148]	; (800591c <UART_Start_Receive_DMA+0xcc>)
 8005888:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800588e:	4a24      	ldr	r2, [pc, #144]	; (8005920 <UART_Start_Receive_DMA+0xd0>)
 8005890:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005896:	4a23      	ldr	r2, [pc, #140]	; (8005924 <UART_Start_Receive_DMA+0xd4>)
 8005898:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800589e:	2200      	movs	r2, #0
 80058a0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	3324      	adds	r3, #36	; 0x24
 80058ac:	4619      	mov	r1, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b2:	461a      	mov	r2, r3
 80058b4:	88fb      	ldrh	r3, [r7, #6]
 80058b6:	f7fc fd3d 	bl	8002334 <HAL_DMA_Start_IT>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00c      	beq.n	80058da <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2210      	movs	r2, #16
 80058c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2220      	movs	r2, #32
 80058d4:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e01c      	b.n	8005914 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058f0:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	689a      	ldr	r2, [r3, #8]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f042 0201 	orr.w	r2, r2, #1
 8005900:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	689a      	ldr	r2, [r3, #8]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005910:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	08005a21 	.word	0x08005a21
 8005920:	08005ab9 	.word	0x08005ab9
 8005924:	08005af1 	.word	0x08005af1

08005928 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800593e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2220      	movs	r2, #32
 8005944:	679a      	str	r2, [r3, #120]	; 0x78
}
 8005946:	bf00      	nop
 8005948:	370c      	adds	r7, #12
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr

08005952 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005952:	b480      	push	{r7}
 8005954:	b083      	sub	sp, #12
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005968:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	689a      	ldr	r2, [r3, #8]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 0201 	bic.w	r2, r2, #1
 8005978:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800597e:	2b01      	cmp	r3, #1
 8005980:	d107      	bne.n	8005992 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 0210 	bic.w	r2, r2, #16
 8005990:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2220      	movs	r2, #32
 8005996:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	665a      	str	r2, [r3, #100]	; 0x64
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059bc:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0320 	and.w	r3, r3, #32
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d114      	bne.n	80059f6 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	689a      	ldr	r2, [r3, #8]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059e2:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059f2:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80059f4:	e002      	b.n	80059fc <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f7ff fb5a 	bl	80050b0 <HAL_UART_TxCpltCallback>
}
 80059fc:	bf00      	nop
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a10:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f7ff fb56 	bl	80050c4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a18:	bf00      	nop
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0320 	and.w	r3, r3, #32
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d12a      	bne.n	8005a92 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a52:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689a      	ldr	r2, [r3, #8]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 0201 	bic.w	r2, r2, #1
 8005a62:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689a      	ldr	r2, [r3, #8]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a72:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2220      	movs	r2, #32
 8005a78:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d107      	bne.n	8005a92 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 0210 	bic.w	r2, r2, #16
 8005a90:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d107      	bne.n	8005aaa <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f7ff fb2c 	bl	8005100 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005aa8:	e002      	b.n	8005ab0 <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f7fb fa76 	bl	8000f9c <HAL_UART_RxCpltCallback>
}
 8005ab0:	bf00      	nop
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d109      	bne.n	8005ae2 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005ad4:	085b      	lsrs	r3, r3, #1
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	4619      	mov	r1, r3
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f7ff fb10 	bl	8005100 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ae0:	e002      	b.n	8005ae8 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f7ff faf8 	bl	80050d8 <HAL_UART_RxHalfCpltCallback>
}
 8005ae8:	bf00      	nop
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b02:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b08:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b14:	2b80      	cmp	r3, #128	; 0x80
 8005b16:	d109      	bne.n	8005b2c <UART_DMAError+0x3c>
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	2b21      	cmp	r3, #33	; 0x21
 8005b1c:	d106      	bne.n	8005b2c <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005b26:	6978      	ldr	r0, [r7, #20]
 8005b28:	f7ff fefe 	bl	8005928 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b36:	2b40      	cmp	r3, #64	; 0x40
 8005b38:	d109      	bne.n	8005b4e <UART_DMAError+0x5e>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2b22      	cmp	r3, #34	; 0x22
 8005b3e:	d106      	bne.n	8005b4e <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005b48:	6978      	ldr	r0, [r7, #20]
 8005b4a:	f7ff ff02 	bl	8005952 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b54:	f043 0210 	orr.w	r2, r3, #16
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b5e:	6978      	ldr	r0, [r7, #20]
 8005b60:	f7ff fac4 	bl	80050ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b64:	bf00      	nop
 8005b66:	3718      	adds	r7, #24
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f7ff faae 	bl	80050ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b90:	bf00      	nop
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bae:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f7ff fa77 	bl	80050b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bc2:	bf00      	nop
 8005bc4:	3708      	adds	r7, #8
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b083      	sub	sp, #12
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005bd2:	bf00      	nop
 8005bd4:	370c      	adds	r7, #12
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
	...

08005be0 <__NVIC_SetPriority>:
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	4603      	mov	r3, r0
 8005be8:	6039      	str	r1, [r7, #0]
 8005bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	db0a      	blt.n	8005c0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	b2da      	uxtb	r2, r3
 8005bf8:	490c      	ldr	r1, [pc, #48]	; (8005c2c <__NVIC_SetPriority+0x4c>)
 8005bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bfe:	0112      	lsls	r2, r2, #4
 8005c00:	b2d2      	uxtb	r2, r2
 8005c02:	440b      	add	r3, r1
 8005c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005c08:	e00a      	b.n	8005c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	b2da      	uxtb	r2, r3
 8005c0e:	4908      	ldr	r1, [pc, #32]	; (8005c30 <__NVIC_SetPriority+0x50>)
 8005c10:	79fb      	ldrb	r3, [r7, #7]
 8005c12:	f003 030f 	and.w	r3, r3, #15
 8005c16:	3b04      	subs	r3, #4
 8005c18:	0112      	lsls	r2, r2, #4
 8005c1a:	b2d2      	uxtb	r2, r2
 8005c1c:	440b      	add	r3, r1
 8005c1e:	761a      	strb	r2, [r3, #24]
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	e000e100 	.word	0xe000e100
 8005c30:	e000ed00 	.word	0xe000ed00

08005c34 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005c34:	b580      	push	{r7, lr}
 8005c36:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005c38:	2100      	movs	r1, #0
 8005c3a:	f06f 0004 	mvn.w	r0, #4
 8005c3e:	f7ff ffcf 	bl	8005be0 <__NVIC_SetPriority>
#endif
}
 8005c42:	bf00      	nop
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c4e:	f3ef 8305 	mrs	r3, IPSR
 8005c52:	603b      	str	r3, [r7, #0]
  return(result);
 8005c54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005c5a:	f06f 0305 	mvn.w	r3, #5
 8005c5e:	607b      	str	r3, [r7, #4]
 8005c60:	e00c      	b.n	8005c7c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005c62:	4b0a      	ldr	r3, [pc, #40]	; (8005c8c <osKernelInitialize+0x44>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d105      	bne.n	8005c76 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005c6a:	4b08      	ldr	r3, [pc, #32]	; (8005c8c <osKernelInitialize+0x44>)
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005c70:	2300      	movs	r3, #0
 8005c72:	607b      	str	r3, [r7, #4]
 8005c74:	e002      	b.n	8005c7c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005c76:	f04f 33ff 	mov.w	r3, #4294967295
 8005c7a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005c7c:	687b      	ldr	r3, [r7, #4]
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	20000088 	.word	0x20000088

08005c90 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c96:	f3ef 8305 	mrs	r3, IPSR
 8005c9a:	603b      	str	r3, [r7, #0]
  return(result);
 8005c9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d003      	beq.n	8005caa <osKernelStart+0x1a>
    stat = osErrorISR;
 8005ca2:	f06f 0305 	mvn.w	r3, #5
 8005ca6:	607b      	str	r3, [r7, #4]
 8005ca8:	e010      	b.n	8005ccc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005caa:	4b0b      	ldr	r3, [pc, #44]	; (8005cd8 <osKernelStart+0x48>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d109      	bne.n	8005cc6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005cb2:	f7ff ffbf 	bl	8005c34 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005cb6:	4b08      	ldr	r3, [pc, #32]	; (8005cd8 <osKernelStart+0x48>)
 8005cb8:	2202      	movs	r2, #2
 8005cba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005cbc:	f001 fa50 	bl	8007160 <vTaskStartScheduler>
      stat = osOK;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	607b      	str	r3, [r7, #4]
 8005cc4:	e002      	b.n	8005ccc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8005cca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005ccc:	687b      	ldr	r3, [r7, #4]
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3708      	adds	r7, #8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	20000088 	.word	0x20000088

08005cdc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b08e      	sub	sp, #56	; 0x38
 8005ce0:	af04      	add	r7, sp, #16
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cec:	f3ef 8305 	mrs	r3, IPSR
 8005cf0:	617b      	str	r3, [r7, #20]
  return(result);
 8005cf2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d17e      	bne.n	8005df6 <osThreadNew+0x11a>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d07b      	beq.n	8005df6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005cfe:	2380      	movs	r3, #128	; 0x80
 8005d00:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005d02:	2318      	movs	r3, #24
 8005d04:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005d06:	2300      	movs	r3, #0
 8005d08:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d0e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d045      	beq.n	8005da2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d002      	beq.n	8005d24 <osThreadNew+0x48>
        name = attr->name;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d002      	beq.n	8005d32 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d008      	beq.n	8005d4a <osThreadNew+0x6e>
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	2b38      	cmp	r3, #56	; 0x38
 8005d3c:	d805      	bhi.n	8005d4a <osThreadNew+0x6e>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <osThreadNew+0x72>
        return (NULL);
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	e054      	b.n	8005df8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d003      	beq.n	8005d5e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	089b      	lsrs	r3, r3, #2
 8005d5c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00e      	beq.n	8005d84 <osThreadNew+0xa8>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	2b5b      	cmp	r3, #91	; 0x5b
 8005d6c:	d90a      	bls.n	8005d84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d006      	beq.n	8005d84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d002      	beq.n	8005d84 <osThreadNew+0xa8>
        mem = 1;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	61bb      	str	r3, [r7, #24]
 8005d82:	e010      	b.n	8005da6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10c      	bne.n	8005da6 <osThreadNew+0xca>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d108      	bne.n	8005da6 <osThreadNew+0xca>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d104      	bne.n	8005da6 <osThreadNew+0xca>
          mem = 0;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	61bb      	str	r3, [r7, #24]
 8005da0:	e001      	b.n	8005da6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005da2:	2300      	movs	r3, #0
 8005da4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d110      	bne.n	8005dce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005db4:	9202      	str	r2, [sp, #8]
 8005db6:	9301      	str	r3, [sp, #4]
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	6a3a      	ldr	r2, [r7, #32]
 8005dc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f000 fff6 	bl	8006db4 <xTaskCreateStatic>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	613b      	str	r3, [r7, #16]
 8005dcc:	e013      	b.n	8005df6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d110      	bne.n	8005df6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005dd4:	6a3b      	ldr	r3, [r7, #32]
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	f107 0310 	add.w	r3, r7, #16
 8005ddc:	9301      	str	r3, [sp, #4]
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	9300      	str	r3, [sp, #0]
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f001 f841 	bl	8006e6e <xTaskCreate>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d001      	beq.n	8005df6 <osThreadNew+0x11a>
            hTask = NULL;
 8005df2:	2300      	movs	r3, #0
 8005df4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005df6:	693b      	ldr	r3, [r7, #16]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3728      	adds	r7, #40	; 0x28
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e08:	f3ef 8305 	mrs	r3, IPSR
 8005e0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e0e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d003      	beq.n	8005e1c <osDelay+0x1c>
    stat = osErrorISR;
 8005e14:	f06f 0305 	mvn.w	r3, #5
 8005e18:	60fb      	str	r3, [r7, #12]
 8005e1a:	e007      	b.n	8005e2c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d002      	beq.n	8005e2c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f001 f966 	bl	80070f8 <vTaskDelay>
    }
  }

  return (stat);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b08a      	sub	sp, #40	; 0x28
 8005e3a:	af02      	add	r7, sp, #8
 8005e3c:	60f8      	str	r0, [r7, #12]
 8005e3e:	60b9      	str	r1, [r7, #8]
 8005e40:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005e42:	2300      	movs	r3, #0
 8005e44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e46:	f3ef 8305 	mrs	r3, IPSR
 8005e4a:	613b      	str	r3, [r7, #16]
  return(result);
 8005e4c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d15f      	bne.n	8005f12 <osMessageQueueNew+0xdc>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d05c      	beq.n	8005f12 <osMessageQueueNew+0xdc>
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d059      	beq.n	8005f12 <osMessageQueueNew+0xdc>
    mem = -1;
 8005e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e62:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d029      	beq.n	8005ebe <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d012      	beq.n	8005e98 <osMessageQueueNew+0x62>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	2b4f      	cmp	r3, #79	; 0x4f
 8005e78:	d90e      	bls.n	8005e98 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00a      	beq.n	8005e98 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	695a      	ldr	r2, [r3, #20]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	68b9      	ldr	r1, [r7, #8]
 8005e8a:	fb01 f303 	mul.w	r3, r1, r3
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d302      	bcc.n	8005e98 <osMessageQueueNew+0x62>
        mem = 1;
 8005e92:	2301      	movs	r3, #1
 8005e94:	61bb      	str	r3, [r7, #24]
 8005e96:	e014      	b.n	8005ec2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d110      	bne.n	8005ec2 <osMessageQueueNew+0x8c>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10c      	bne.n	8005ec2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d108      	bne.n	8005ec2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d104      	bne.n	8005ec2 <osMessageQueueNew+0x8c>
          mem = 0;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	61bb      	str	r3, [r7, #24]
 8005ebc:	e001      	b.n	8005ec2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d10b      	bne.n	8005ee0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	691a      	ldr	r2, [r3, #16]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	2100      	movs	r1, #0
 8005ed2:	9100      	str	r1, [sp, #0]
 8005ed4:	68b9      	ldr	r1, [r7, #8]
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f000 fa2e 	bl	8006338 <xQueueGenericCreateStatic>
 8005edc:	61f8      	str	r0, [r7, #28]
 8005ede:	e008      	b.n	8005ef2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d105      	bne.n	8005ef2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	68b9      	ldr	r1, [r7, #8]
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f000 fa9c 	bl	8006428 <xQueueGenericCreate>
 8005ef0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00c      	beq.n	8005f12 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d003      	beq.n	8005f06 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	617b      	str	r3, [r7, #20]
 8005f04:	e001      	b.n	8005f0a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005f06:	2300      	movs	r3, #0
 8005f08:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005f0a:	6979      	ldr	r1, [r7, #20]
 8005f0c:	69f8      	ldr	r0, [r7, #28]
 8005f0e:	f000 fef3 	bl	8006cf8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005f12:	69fb      	ldr	r3, [r7, #28]
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3720      	adds	r7, #32
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b088      	sub	sp, #32
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	603b      	str	r3, [r7, #0]
 8005f28:	4613      	mov	r3, r2
 8005f2a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005f30:	2300      	movs	r3, #0
 8005f32:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f34:	f3ef 8305 	mrs	r3, IPSR
 8005f38:	617b      	str	r3, [r7, #20]
  return(result);
 8005f3a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d028      	beq.n	8005f92 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d005      	beq.n	8005f52 <osMessageQueuePut+0x36>
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <osMessageQueuePut+0x36>
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005f52:	f06f 0303 	mvn.w	r3, #3
 8005f56:	61fb      	str	r3, [r7, #28]
 8005f58:	e038      	b.n	8005fcc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005f5e:	f107 0210 	add.w	r2, r7, #16
 8005f62:	2300      	movs	r3, #0
 8005f64:	68b9      	ldr	r1, [r7, #8]
 8005f66:	69b8      	ldr	r0, [r7, #24]
 8005f68:	f000 fbba 	bl	80066e0 <xQueueGenericSendFromISR>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d003      	beq.n	8005f7a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005f72:	f06f 0302 	mvn.w	r3, #2
 8005f76:	61fb      	str	r3, [r7, #28]
 8005f78:	e028      	b.n	8005fcc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d025      	beq.n	8005fcc <osMessageQueuePut+0xb0>
 8005f80:	4b15      	ldr	r3, [pc, #84]	; (8005fd8 <osMessageQueuePut+0xbc>)
 8005f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f86:	601a      	str	r2, [r3, #0]
 8005f88:	f3bf 8f4f 	dsb	sy
 8005f8c:	f3bf 8f6f 	isb	sy
 8005f90:	e01c      	b.n	8005fcc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d002      	beq.n	8005f9e <osMessageQueuePut+0x82>
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d103      	bne.n	8005fa6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005f9e:	f06f 0303 	mvn.w	r3, #3
 8005fa2:	61fb      	str	r3, [r7, #28]
 8005fa4:	e012      	b.n	8005fcc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	683a      	ldr	r2, [r7, #0]
 8005faa:	68b9      	ldr	r1, [r7, #8]
 8005fac:	69b8      	ldr	r0, [r7, #24]
 8005fae:	f000 fa99 	bl	80064e4 <xQueueGenericSend>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d009      	beq.n	8005fcc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d003      	beq.n	8005fc6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005fbe:	f06f 0301 	mvn.w	r3, #1
 8005fc2:	61fb      	str	r3, [r7, #28]
 8005fc4:	e002      	b.n	8005fcc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005fc6:	f06f 0302 	mvn.w	r3, #2
 8005fca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005fcc:	69fb      	ldr	r3, [r7, #28]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3720      	adds	r7, #32
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	e000ed04 	.word	0xe000ed04

08005fdc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b088      	sub	sp, #32
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
 8005fe8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ff2:	f3ef 8305 	mrs	r3, IPSR
 8005ff6:	617b      	str	r3, [r7, #20]
  return(result);
 8005ff8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d028      	beq.n	8006050 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d005      	beq.n	8006010 <osMessageQueueGet+0x34>
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d002      	beq.n	8006010 <osMessageQueueGet+0x34>
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d003      	beq.n	8006018 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006010:	f06f 0303 	mvn.w	r3, #3
 8006014:	61fb      	str	r3, [r7, #28]
 8006016:	e037      	b.n	8006088 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006018:	2300      	movs	r3, #0
 800601a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800601c:	f107 0310 	add.w	r3, r7, #16
 8006020:	461a      	mov	r2, r3
 8006022:	68b9      	ldr	r1, [r7, #8]
 8006024:	69b8      	ldr	r0, [r7, #24]
 8006026:	f000 fcd7 	bl	80069d8 <xQueueReceiveFromISR>
 800602a:	4603      	mov	r3, r0
 800602c:	2b01      	cmp	r3, #1
 800602e:	d003      	beq.n	8006038 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006030:	f06f 0302 	mvn.w	r3, #2
 8006034:	61fb      	str	r3, [r7, #28]
 8006036:	e027      	b.n	8006088 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d024      	beq.n	8006088 <osMessageQueueGet+0xac>
 800603e:	4b15      	ldr	r3, [pc, #84]	; (8006094 <osMessageQueueGet+0xb8>)
 8006040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006044:	601a      	str	r2, [r3, #0]
 8006046:	f3bf 8f4f 	dsb	sy
 800604a:	f3bf 8f6f 	isb	sy
 800604e:	e01b      	b.n	8006088 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d002      	beq.n	800605c <osMessageQueueGet+0x80>
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d103      	bne.n	8006064 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800605c:	f06f 0303 	mvn.w	r3, #3
 8006060:	61fb      	str	r3, [r7, #28]
 8006062:	e011      	b.n	8006088 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006064:	683a      	ldr	r2, [r7, #0]
 8006066:	68b9      	ldr	r1, [r7, #8]
 8006068:	69b8      	ldr	r0, [r7, #24]
 800606a:	f000 fbd5 	bl	8006818 <xQueueReceive>
 800606e:	4603      	mov	r3, r0
 8006070:	2b01      	cmp	r3, #1
 8006072:	d009      	beq.n	8006088 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d003      	beq.n	8006082 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800607a:	f06f 0301 	mvn.w	r3, #1
 800607e:	61fb      	str	r3, [r7, #28]
 8006080:	e002      	b.n	8006088 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006082:	f06f 0302 	mvn.w	r3, #2
 8006086:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006088:	69fb      	ldr	r3, [r7, #28]
}
 800608a:	4618      	mov	r0, r3
 800608c:	3720      	adds	r7, #32
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	e000ed04 	.word	0xe000ed04

08006098 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	4a07      	ldr	r2, [pc, #28]	; (80060c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80060a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	4a06      	ldr	r2, [pc, #24]	; (80060c8 <vApplicationGetIdleTaskMemory+0x30>)
 80060ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2280      	movs	r2, #128	; 0x80
 80060b4:	601a      	str	r2, [r3, #0]
}
 80060b6:	bf00      	nop
 80060b8:	3714      	adds	r7, #20
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	2000008c 	.word	0x2000008c
 80060c8:	200000e8 	.word	0x200000e8

080060cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	4a07      	ldr	r2, [pc, #28]	; (80060f8 <vApplicationGetTimerTaskMemory+0x2c>)
 80060dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	4a06      	ldr	r2, [pc, #24]	; (80060fc <vApplicationGetTimerTaskMemory+0x30>)
 80060e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060ea:	601a      	str	r2, [r3, #0]
}
 80060ec:	bf00      	nop
 80060ee:	3714      	adds	r7, #20
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr
 80060f8:	200002e8 	.word	0x200002e8
 80060fc:	20000344 	.word	0x20000344

08006100 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f103 0208 	add.w	r2, r3, #8
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f04f 32ff 	mov.w	r2, #4294967295
 8006118:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f103 0208 	add.w	r2, r3, #8
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f103 0208 	add.w	r2, r3, #8
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006134:	bf00      	nop
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800614e:	bf00      	nop
 8006150:	370c      	adds	r7, #12
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800615a:	b480      	push	{r7}
 800615c:	b085      	sub	sp, #20
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
 8006162:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	689a      	ldr	r2, [r3, #8]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	683a      	ldr	r2, [r7, #0]
 800617e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	1c5a      	adds	r2, r3, #1
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	601a      	str	r2, [r3, #0]
}
 8006196:	bf00      	nop
 8006198:	3714      	adds	r7, #20
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80061a2:	b480      	push	{r7}
 80061a4:	b085      	sub	sp, #20
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
 80061aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b8:	d103      	bne.n	80061c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	60fb      	str	r3, [r7, #12]
 80061c0:	e00c      	b.n	80061dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	3308      	adds	r3, #8
 80061c6:	60fb      	str	r3, [r7, #12]
 80061c8:	e002      	b.n	80061d0 <vListInsert+0x2e>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	60fb      	str	r3, [r7, #12]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d2f6      	bcs.n	80061ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	685a      	ldr	r2, [r3, #4]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	683a      	ldr	r2, [r7, #0]
 80061ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	683a      	ldr	r2, [r7, #0]
 80061f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	1c5a      	adds	r2, r3, #1
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	601a      	str	r2, [r3, #0]
}
 8006208:	bf00      	nop
 800620a:	3714      	adds	r7, #20
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	6892      	ldr	r2, [r2, #8]
 800622a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	6852      	ldr	r2, [r2, #4]
 8006234:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	429a      	cmp	r2, r3
 800623e:	d103      	bne.n	8006248 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	689a      	ldr	r2, [r3, #8]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	1e5a      	subs	r2, r3, #1
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
}
 800625c:	4618      	mov	r0, r3
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d10a      	bne.n	8006292 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800627c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006280:	f383 8811 	msr	BASEPRI, r3
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800628e:	bf00      	nop
 8006290:	e7fe      	b.n	8006290 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006292:	f002 f907 	bl	80084a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800629e:	68f9      	ldr	r1, [r7, #12]
 80062a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80062a2:	fb01 f303 	mul.w	r3, r1, r3
 80062a6:	441a      	add	r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062c2:	3b01      	subs	r3, #1
 80062c4:	68f9      	ldr	r1, [r7, #12]
 80062c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80062c8:	fb01 f303 	mul.w	r3, r1, r3
 80062cc:	441a      	add	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	22ff      	movs	r2, #255	; 0xff
 80062d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	22ff      	movs	r2, #255	; 0xff
 80062de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d114      	bne.n	8006312 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d01a      	beq.n	8006326 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	3310      	adds	r3, #16
 80062f4:	4618      	mov	r0, r3
 80062f6:	f001 f9bd 	bl	8007674 <xTaskRemoveFromEventList>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d012      	beq.n	8006326 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006300:	4b0c      	ldr	r3, [pc, #48]	; (8006334 <xQueueGenericReset+0xcc>)
 8006302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006306:	601a      	str	r2, [r3, #0]
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	f3bf 8f6f 	isb	sy
 8006310:	e009      	b.n	8006326 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	3310      	adds	r3, #16
 8006316:	4618      	mov	r0, r3
 8006318:	f7ff fef2 	bl	8006100 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	3324      	adds	r3, #36	; 0x24
 8006320:	4618      	mov	r0, r3
 8006322:	f7ff feed 	bl	8006100 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006326:	f002 f8ed 	bl	8008504 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800632a:	2301      	movs	r3, #1
}
 800632c:	4618      	mov	r0, r3
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	e000ed04 	.word	0xe000ed04

08006338 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006338:	b580      	push	{r7, lr}
 800633a:	b08e      	sub	sp, #56	; 0x38
 800633c:	af02      	add	r7, sp, #8
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
 8006344:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d10a      	bne.n	8006362 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800634c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006350:	f383 8811 	msr	BASEPRI, r3
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800635e:	bf00      	nop
 8006360:	e7fe      	b.n	8006360 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10a      	bne.n	800637e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636c:	f383 8811 	msr	BASEPRI, r3
 8006370:	f3bf 8f6f 	isb	sy
 8006374:	f3bf 8f4f 	dsb	sy
 8006378:	627b      	str	r3, [r7, #36]	; 0x24
}
 800637a:	bf00      	nop
 800637c:	e7fe      	b.n	800637c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d002      	beq.n	800638a <xQueueGenericCreateStatic+0x52>
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <xQueueGenericCreateStatic+0x56>
 800638a:	2301      	movs	r3, #1
 800638c:	e000      	b.n	8006390 <xQueueGenericCreateStatic+0x58>
 800638e:	2300      	movs	r3, #0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d10a      	bne.n	80063aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006398:	f383 8811 	msr	BASEPRI, r3
 800639c:	f3bf 8f6f 	isb	sy
 80063a0:	f3bf 8f4f 	dsb	sy
 80063a4:	623b      	str	r3, [r7, #32]
}
 80063a6:	bf00      	nop
 80063a8:	e7fe      	b.n	80063a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d102      	bne.n	80063b6 <xQueueGenericCreateStatic+0x7e>
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d101      	bne.n	80063ba <xQueueGenericCreateStatic+0x82>
 80063b6:	2301      	movs	r3, #1
 80063b8:	e000      	b.n	80063bc <xQueueGenericCreateStatic+0x84>
 80063ba:	2300      	movs	r3, #0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10a      	bne.n	80063d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80063c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c4:	f383 8811 	msr	BASEPRI, r3
 80063c8:	f3bf 8f6f 	isb	sy
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	61fb      	str	r3, [r7, #28]
}
 80063d2:	bf00      	nop
 80063d4:	e7fe      	b.n	80063d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80063d6:	2350      	movs	r3, #80	; 0x50
 80063d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	2b50      	cmp	r3, #80	; 0x50
 80063de:	d00a      	beq.n	80063f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80063e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	61bb      	str	r3, [r7, #24]
}
 80063f2:	bf00      	nop
 80063f4:	e7fe      	b.n	80063f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80063f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80063fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00d      	beq.n	800641e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006404:	2201      	movs	r2, #1
 8006406:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800640a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800640e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006410:	9300      	str	r3, [sp, #0]
 8006412:	4613      	mov	r3, r2
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	68b9      	ldr	r1, [r7, #8]
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f000 f83f 	bl	800649c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800641e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006420:	4618      	mov	r0, r3
 8006422:	3730      	adds	r7, #48	; 0x30
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006428:	b580      	push	{r7, lr}
 800642a:	b08a      	sub	sp, #40	; 0x28
 800642c:	af02      	add	r7, sp, #8
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	4613      	mov	r3, r2
 8006434:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d10a      	bne.n	8006452 <xQueueGenericCreate+0x2a>
	__asm volatile
 800643c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006440:	f383 8811 	msr	BASEPRI, r3
 8006444:	f3bf 8f6f 	isb	sy
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	613b      	str	r3, [r7, #16]
}
 800644e:	bf00      	nop
 8006450:	e7fe      	b.n	8006450 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	fb02 f303 	mul.w	r3, r2, r3
 800645a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	3350      	adds	r3, #80	; 0x50
 8006460:	4618      	mov	r0, r3
 8006462:	f002 f941 	bl	80086e8 <pvPortMalloc>
 8006466:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d011      	beq.n	8006492 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	3350      	adds	r3, #80	; 0x50
 8006476:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006480:	79fa      	ldrb	r2, [r7, #7]
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	9300      	str	r3, [sp, #0]
 8006486:	4613      	mov	r3, r2
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	68b9      	ldr	r1, [r7, #8]
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f000 f805 	bl	800649c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006492:	69bb      	ldr	r3, [r7, #24]
	}
 8006494:	4618      	mov	r0, r3
 8006496:	3720      	adds	r7, #32
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
 80064a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d103      	bne.n	80064b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	69ba      	ldr	r2, [r7, #24]
 80064b4:	601a      	str	r2, [r3, #0]
 80064b6:	e002      	b.n	80064be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80064ca:	2101      	movs	r1, #1
 80064cc:	69b8      	ldr	r0, [r7, #24]
 80064ce:	f7ff fecb 	bl	8006268 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	78fa      	ldrb	r2, [r7, #3]
 80064d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80064da:	bf00      	nop
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
	...

080064e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b08e      	sub	sp, #56	; 0x38
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	607a      	str	r2, [r7, #4]
 80064f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80064f2:	2300      	movs	r3, #0
 80064f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80064fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d10a      	bne.n	8006516 <xQueueGenericSend+0x32>
	__asm volatile
 8006500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006504:	f383 8811 	msr	BASEPRI, r3
 8006508:	f3bf 8f6f 	isb	sy
 800650c:	f3bf 8f4f 	dsb	sy
 8006510:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006512:	bf00      	nop
 8006514:	e7fe      	b.n	8006514 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d103      	bne.n	8006524 <xQueueGenericSend+0x40>
 800651c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006520:	2b00      	cmp	r3, #0
 8006522:	d101      	bne.n	8006528 <xQueueGenericSend+0x44>
 8006524:	2301      	movs	r3, #1
 8006526:	e000      	b.n	800652a <xQueueGenericSend+0x46>
 8006528:	2300      	movs	r3, #0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10a      	bne.n	8006544 <xQueueGenericSend+0x60>
	__asm volatile
 800652e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006532:	f383 8811 	msr	BASEPRI, r3
 8006536:	f3bf 8f6f 	isb	sy
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006540:	bf00      	nop
 8006542:	e7fe      	b.n	8006542 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	2b02      	cmp	r3, #2
 8006548:	d103      	bne.n	8006552 <xQueueGenericSend+0x6e>
 800654a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800654e:	2b01      	cmp	r3, #1
 8006550:	d101      	bne.n	8006556 <xQueueGenericSend+0x72>
 8006552:	2301      	movs	r3, #1
 8006554:	e000      	b.n	8006558 <xQueueGenericSend+0x74>
 8006556:	2300      	movs	r3, #0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10a      	bne.n	8006572 <xQueueGenericSend+0x8e>
	__asm volatile
 800655c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006560:	f383 8811 	msr	BASEPRI, r3
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	623b      	str	r3, [r7, #32]
}
 800656e:	bf00      	nop
 8006570:	e7fe      	b.n	8006570 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006572:	f001 fa3d 	bl	80079f0 <xTaskGetSchedulerState>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d102      	bne.n	8006582 <xQueueGenericSend+0x9e>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d101      	bne.n	8006586 <xQueueGenericSend+0xa2>
 8006582:	2301      	movs	r3, #1
 8006584:	e000      	b.n	8006588 <xQueueGenericSend+0xa4>
 8006586:	2300      	movs	r3, #0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10a      	bne.n	80065a2 <xQueueGenericSend+0xbe>
	__asm volatile
 800658c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006590:	f383 8811 	msr	BASEPRI, r3
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	61fb      	str	r3, [r7, #28]
}
 800659e:	bf00      	nop
 80065a0:	e7fe      	b.n	80065a0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065a2:	f001 ff7f 	bl	80084a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d302      	bcc.n	80065b8 <xQueueGenericSend+0xd4>
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d129      	bne.n	800660c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065b8:	683a      	ldr	r2, [r7, #0]
 80065ba:	68b9      	ldr	r1, [r7, #8]
 80065bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065be:	f000 fa8b 	bl	8006ad8 <prvCopyDataToQueue>
 80065c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d010      	beq.n	80065ee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ce:	3324      	adds	r3, #36	; 0x24
 80065d0:	4618      	mov	r0, r3
 80065d2:	f001 f84f 	bl	8007674 <xTaskRemoveFromEventList>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d013      	beq.n	8006604 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80065dc:	4b3f      	ldr	r3, [pc, #252]	; (80066dc <xQueueGenericSend+0x1f8>)
 80065de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065e2:	601a      	str	r2, [r3, #0]
 80065e4:	f3bf 8f4f 	dsb	sy
 80065e8:	f3bf 8f6f 	isb	sy
 80065ec:	e00a      	b.n	8006604 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80065ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d007      	beq.n	8006604 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80065f4:	4b39      	ldr	r3, [pc, #228]	; (80066dc <xQueueGenericSend+0x1f8>)
 80065f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065fa:	601a      	str	r2, [r3, #0]
 80065fc:	f3bf 8f4f 	dsb	sy
 8006600:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006604:	f001 ff7e 	bl	8008504 <vPortExitCritical>
				return pdPASS;
 8006608:	2301      	movs	r3, #1
 800660a:	e063      	b.n	80066d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d103      	bne.n	800661a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006612:	f001 ff77 	bl	8008504 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006616:	2300      	movs	r3, #0
 8006618:	e05c      	b.n	80066d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800661a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800661c:	2b00      	cmp	r3, #0
 800661e:	d106      	bne.n	800662e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006620:	f107 0314 	add.w	r3, r7, #20
 8006624:	4618      	mov	r0, r3
 8006626:	f001 f889 	bl	800773c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800662a:	2301      	movs	r3, #1
 800662c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800662e:	f001 ff69 	bl	8008504 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006632:	f000 fdfb 	bl	800722c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006636:	f001 ff35 	bl	80084a4 <vPortEnterCritical>
 800663a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006640:	b25b      	sxtb	r3, r3
 8006642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006646:	d103      	bne.n	8006650 <xQueueGenericSend+0x16c>
 8006648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664a:	2200      	movs	r2, #0
 800664c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006652:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006656:	b25b      	sxtb	r3, r3
 8006658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800665c:	d103      	bne.n	8006666 <xQueueGenericSend+0x182>
 800665e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006660:	2200      	movs	r2, #0
 8006662:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006666:	f001 ff4d 	bl	8008504 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800666a:	1d3a      	adds	r2, r7, #4
 800666c:	f107 0314 	add.w	r3, r7, #20
 8006670:	4611      	mov	r1, r2
 8006672:	4618      	mov	r0, r3
 8006674:	f001 f878 	bl	8007768 <xTaskCheckForTimeOut>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d124      	bne.n	80066c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800667e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006680:	f000 fb22 	bl	8006cc8 <prvIsQueueFull>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d018      	beq.n	80066bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800668a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668c:	3310      	adds	r3, #16
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	4611      	mov	r1, r2
 8006692:	4618      	mov	r0, r3
 8006694:	f000 ff9e 	bl	80075d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006698:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800669a:	f000 faad 	bl	8006bf8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800669e:	f000 fdd3 	bl	8007248 <xTaskResumeAll>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f47f af7c 	bne.w	80065a2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80066aa:	4b0c      	ldr	r3, [pc, #48]	; (80066dc <xQueueGenericSend+0x1f8>)
 80066ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066b0:	601a      	str	r2, [r3, #0]
 80066b2:	f3bf 8f4f 	dsb	sy
 80066b6:	f3bf 8f6f 	isb	sy
 80066ba:	e772      	b.n	80065a2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80066bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066be:	f000 fa9b 	bl	8006bf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066c2:	f000 fdc1 	bl	8007248 <xTaskResumeAll>
 80066c6:	e76c      	b.n	80065a2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80066c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066ca:	f000 fa95 	bl	8006bf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066ce:	f000 fdbb 	bl	8007248 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80066d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3738      	adds	r7, #56	; 0x38
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	e000ed04 	.word	0xe000ed04

080066e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b090      	sub	sp, #64	; 0x40
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
 80066ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80066f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d10a      	bne.n	800670e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80066f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fc:	f383 8811 	msr	BASEPRI, r3
 8006700:	f3bf 8f6f 	isb	sy
 8006704:	f3bf 8f4f 	dsb	sy
 8006708:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800670a:	bf00      	nop
 800670c:	e7fe      	b.n	800670c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d103      	bne.n	800671c <xQueueGenericSendFromISR+0x3c>
 8006714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006718:	2b00      	cmp	r3, #0
 800671a:	d101      	bne.n	8006720 <xQueueGenericSendFromISR+0x40>
 800671c:	2301      	movs	r3, #1
 800671e:	e000      	b.n	8006722 <xQueueGenericSendFromISR+0x42>
 8006720:	2300      	movs	r3, #0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10a      	bne.n	800673c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672a:	f383 8811 	msr	BASEPRI, r3
 800672e:	f3bf 8f6f 	isb	sy
 8006732:	f3bf 8f4f 	dsb	sy
 8006736:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006738:	bf00      	nop
 800673a:	e7fe      	b.n	800673a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	2b02      	cmp	r3, #2
 8006740:	d103      	bne.n	800674a <xQueueGenericSendFromISR+0x6a>
 8006742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006746:	2b01      	cmp	r3, #1
 8006748:	d101      	bne.n	800674e <xQueueGenericSendFromISR+0x6e>
 800674a:	2301      	movs	r3, #1
 800674c:	e000      	b.n	8006750 <xQueueGenericSendFromISR+0x70>
 800674e:	2300      	movs	r3, #0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d10a      	bne.n	800676a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006758:	f383 8811 	msr	BASEPRI, r3
 800675c:	f3bf 8f6f 	isb	sy
 8006760:	f3bf 8f4f 	dsb	sy
 8006764:	623b      	str	r3, [r7, #32]
}
 8006766:	bf00      	nop
 8006768:	e7fe      	b.n	8006768 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800676a:	f001 ff7d 	bl	8008668 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800676e:	f3ef 8211 	mrs	r2, BASEPRI
 8006772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006776:	f383 8811 	msr	BASEPRI, r3
 800677a:	f3bf 8f6f 	isb	sy
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	61fa      	str	r2, [r7, #28]
 8006784:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006786:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006788:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800678a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800678c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800678e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006792:	429a      	cmp	r2, r3
 8006794:	d302      	bcc.n	800679c <xQueueGenericSendFromISR+0xbc>
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	2b02      	cmp	r3, #2
 800679a:	d12f      	bne.n	80067fc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800679c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067aa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067ac:	683a      	ldr	r2, [r7, #0]
 80067ae:	68b9      	ldr	r1, [r7, #8]
 80067b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80067b2:	f000 f991 	bl	8006ad8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80067b6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80067ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067be:	d112      	bne.n	80067e6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d016      	beq.n	80067f6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ca:	3324      	adds	r3, #36	; 0x24
 80067cc:	4618      	mov	r0, r3
 80067ce:	f000 ff51 	bl	8007674 <xTaskRemoveFromEventList>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00e      	beq.n	80067f6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00b      	beq.n	80067f6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	601a      	str	r2, [r3, #0]
 80067e4:	e007      	b.n	80067f6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80067e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80067ea:	3301      	adds	r3, #1
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	b25a      	sxtb	r2, r3
 80067f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80067f6:	2301      	movs	r3, #1
 80067f8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80067fa:	e001      	b.n	8006800 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80067fc:	2300      	movs	r3, #0
 80067fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006802:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800680a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800680c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800680e:	4618      	mov	r0, r3
 8006810:	3740      	adds	r7, #64	; 0x40
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
	...

08006818 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b08c      	sub	sp, #48	; 0x30
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006824:	2300      	movs	r3, #0
 8006826:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800682c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10a      	bne.n	8006848 <xQueueReceive+0x30>
	__asm volatile
 8006832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006836:	f383 8811 	msr	BASEPRI, r3
 800683a:	f3bf 8f6f 	isb	sy
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	623b      	str	r3, [r7, #32]
}
 8006844:	bf00      	nop
 8006846:	e7fe      	b.n	8006846 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d103      	bne.n	8006856 <xQueueReceive+0x3e>
 800684e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <xQueueReceive+0x42>
 8006856:	2301      	movs	r3, #1
 8006858:	e000      	b.n	800685c <xQueueReceive+0x44>
 800685a:	2300      	movs	r3, #0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d10a      	bne.n	8006876 <xQueueReceive+0x5e>
	__asm volatile
 8006860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006864:	f383 8811 	msr	BASEPRI, r3
 8006868:	f3bf 8f6f 	isb	sy
 800686c:	f3bf 8f4f 	dsb	sy
 8006870:	61fb      	str	r3, [r7, #28]
}
 8006872:	bf00      	nop
 8006874:	e7fe      	b.n	8006874 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006876:	f001 f8bb 	bl	80079f0 <xTaskGetSchedulerState>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d102      	bne.n	8006886 <xQueueReceive+0x6e>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d101      	bne.n	800688a <xQueueReceive+0x72>
 8006886:	2301      	movs	r3, #1
 8006888:	e000      	b.n	800688c <xQueueReceive+0x74>
 800688a:	2300      	movs	r3, #0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10a      	bne.n	80068a6 <xQueueReceive+0x8e>
	__asm volatile
 8006890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006894:	f383 8811 	msr	BASEPRI, r3
 8006898:	f3bf 8f6f 	isb	sy
 800689c:	f3bf 8f4f 	dsb	sy
 80068a0:	61bb      	str	r3, [r7, #24]
}
 80068a2:	bf00      	nop
 80068a4:	e7fe      	b.n	80068a4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068a6:	f001 fdfd 	bl	80084a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d01f      	beq.n	80068f6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80068b6:	68b9      	ldr	r1, [r7, #8]
 80068b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068ba:	f000 f977 	bl	8006bac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80068be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c0:	1e5a      	subs	r2, r3, #1
 80068c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00f      	beq.n	80068ee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d0:	3310      	adds	r3, #16
 80068d2:	4618      	mov	r0, r3
 80068d4:	f000 fece 	bl	8007674 <xTaskRemoveFromEventList>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d007      	beq.n	80068ee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80068de:	4b3d      	ldr	r3, [pc, #244]	; (80069d4 <xQueueReceive+0x1bc>)
 80068e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068e4:	601a      	str	r2, [r3, #0]
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80068ee:	f001 fe09 	bl	8008504 <vPortExitCritical>
				return pdPASS;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e069      	b.n	80069ca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d103      	bne.n	8006904 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80068fc:	f001 fe02 	bl	8008504 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006900:	2300      	movs	r3, #0
 8006902:	e062      	b.n	80069ca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006906:	2b00      	cmp	r3, #0
 8006908:	d106      	bne.n	8006918 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800690a:	f107 0310 	add.w	r3, r7, #16
 800690e:	4618      	mov	r0, r3
 8006910:	f000 ff14 	bl	800773c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006914:	2301      	movs	r3, #1
 8006916:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006918:	f001 fdf4 	bl	8008504 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800691c:	f000 fc86 	bl	800722c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006920:	f001 fdc0 	bl	80084a4 <vPortEnterCritical>
 8006924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006926:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800692a:	b25b      	sxtb	r3, r3
 800692c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006930:	d103      	bne.n	800693a <xQueueReceive+0x122>
 8006932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006934:	2200      	movs	r2, #0
 8006936:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800693a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006940:	b25b      	sxtb	r3, r3
 8006942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006946:	d103      	bne.n	8006950 <xQueueReceive+0x138>
 8006948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694a:	2200      	movs	r2, #0
 800694c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006950:	f001 fdd8 	bl	8008504 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006954:	1d3a      	adds	r2, r7, #4
 8006956:	f107 0310 	add.w	r3, r7, #16
 800695a:	4611      	mov	r1, r2
 800695c:	4618      	mov	r0, r3
 800695e:	f000 ff03 	bl	8007768 <xTaskCheckForTimeOut>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d123      	bne.n	80069b0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800696a:	f000 f997 	bl	8006c9c <prvIsQueueEmpty>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d017      	beq.n	80069a4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006976:	3324      	adds	r3, #36	; 0x24
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	4611      	mov	r1, r2
 800697c:	4618      	mov	r0, r3
 800697e:	f000 fe29 	bl	80075d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006982:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006984:	f000 f938 	bl	8006bf8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006988:	f000 fc5e 	bl	8007248 <xTaskResumeAll>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d189      	bne.n	80068a6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006992:	4b10      	ldr	r3, [pc, #64]	; (80069d4 <xQueueReceive+0x1bc>)
 8006994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006998:	601a      	str	r2, [r3, #0]
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	f3bf 8f6f 	isb	sy
 80069a2:	e780      	b.n	80068a6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80069a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069a6:	f000 f927 	bl	8006bf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069aa:	f000 fc4d 	bl	8007248 <xTaskResumeAll>
 80069ae:	e77a      	b.n	80068a6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80069b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069b2:	f000 f921 	bl	8006bf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069b6:	f000 fc47 	bl	8007248 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069bc:	f000 f96e 	bl	8006c9c <prvIsQueueEmpty>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f43f af6f 	beq.w	80068a6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80069c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3730      	adds	r7, #48	; 0x30
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	e000ed04 	.word	0xe000ed04

080069d8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b08e      	sub	sp, #56	; 0x38
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80069e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d10a      	bne.n	8006a04 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80069ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	623b      	str	r3, [r7, #32]
}
 8006a00:	bf00      	nop
 8006a02:	e7fe      	b.n	8006a02 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d103      	bne.n	8006a12 <xQueueReceiveFromISR+0x3a>
 8006a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d101      	bne.n	8006a16 <xQueueReceiveFromISR+0x3e>
 8006a12:	2301      	movs	r3, #1
 8006a14:	e000      	b.n	8006a18 <xQueueReceiveFromISR+0x40>
 8006a16:	2300      	movs	r3, #0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d10a      	bne.n	8006a32 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a20:	f383 8811 	msr	BASEPRI, r3
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	61fb      	str	r3, [r7, #28]
}
 8006a2e:	bf00      	nop
 8006a30:	e7fe      	b.n	8006a30 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a32:	f001 fe19 	bl	8008668 <vPortValidateInterruptPriority>
	__asm volatile
 8006a36:	f3ef 8211 	mrs	r2, BASEPRI
 8006a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3e:	f383 8811 	msr	BASEPRI, r3
 8006a42:	f3bf 8f6f 	isb	sy
 8006a46:	f3bf 8f4f 	dsb	sy
 8006a4a:	61ba      	str	r2, [r7, #24]
 8006a4c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006a4e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a50:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a56:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d02f      	beq.n	8006abe <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a68:	68b9      	ldr	r1, [r7, #8]
 8006a6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a6c:	f000 f89e 	bl	8006bac <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a72:	1e5a      	subs	r2, r3, #1
 8006a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a76:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006a78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a80:	d112      	bne.n	8006aa8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d016      	beq.n	8006ab8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8c:	3310      	adds	r3, #16
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f000 fdf0 	bl	8007674 <xTaskRemoveFromEventList>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00e      	beq.n	8006ab8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00b      	beq.n	8006ab8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	601a      	str	r2, [r3, #0]
 8006aa6:	e007      	b.n	8006ab8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006aac:	3301      	adds	r3, #1
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	b25a      	sxtb	r2, r3
 8006ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	637b      	str	r3, [r7, #52]	; 0x34
 8006abc:	e001      	b.n	8006ac2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	f383 8811 	msr	BASEPRI, r3
}
 8006acc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3738      	adds	r7, #56	; 0x38
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10d      	bne.n	8006b12 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d14d      	bne.n	8006b9a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	4618      	mov	r0, r3
 8006b04:	f000 ff92 	bl	8007a2c <xTaskPriorityDisinherit>
 8006b08:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	609a      	str	r2, [r3, #8]
 8006b10:	e043      	b.n	8006b9a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d119      	bne.n	8006b4c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6858      	ldr	r0, [r3, #4]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b20:	461a      	mov	r2, r3
 8006b22:	68b9      	ldr	r1, [r7, #8]
 8006b24:	f001 ffee 	bl	8008b04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b30:	441a      	add	r2, r3
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	685a      	ldr	r2, [r3, #4]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d32b      	bcc.n	8006b9a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	605a      	str	r2, [r3, #4]
 8006b4a:	e026      	b.n	8006b9a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	68d8      	ldr	r0, [r3, #12]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b54:	461a      	mov	r2, r3
 8006b56:	68b9      	ldr	r1, [r7, #8]
 8006b58:	f001 ffd4 	bl	8008b04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	68da      	ldr	r2, [r3, #12]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b64:	425b      	negs	r3, r3
 8006b66:	441a      	add	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	68da      	ldr	r2, [r3, #12]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d207      	bcs.n	8006b88 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	689a      	ldr	r2, [r3, #8]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b80:	425b      	negs	r3, r3
 8006b82:	441a      	add	r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d105      	bne.n	8006b9a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d002      	beq.n	8006b9a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	3b01      	subs	r3, #1
 8006b98:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	1c5a      	adds	r2, r3, #1
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006ba2:	697b      	ldr	r3, [r7, #20]
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3718      	adds	r7, #24
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d018      	beq.n	8006bf0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68da      	ldr	r2, [r3, #12]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc6:	441a      	add	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	68da      	ldr	r2, [r3, #12]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d303      	bcc.n	8006be0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	68d9      	ldr	r1, [r3, #12]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be8:	461a      	mov	r2, r3
 8006bea:	6838      	ldr	r0, [r7, #0]
 8006bec:	f001 ff8a 	bl	8008b04 <memcpy>
	}
}
 8006bf0:	bf00      	nop
 8006bf2:	3708      	adds	r7, #8
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006c00:	f001 fc50 	bl	80084a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c0a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c0c:	e011      	b.n	8006c32 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d012      	beq.n	8006c3c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	3324      	adds	r3, #36	; 0x24
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f000 fd2a 	bl	8007674 <xTaskRemoveFromEventList>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d001      	beq.n	8006c2a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006c26:	f000 fe01 	bl	800782c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006c2a:	7bfb      	ldrb	r3, [r7, #15]
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	dce9      	bgt.n	8006c0e <prvUnlockQueue+0x16>
 8006c3a:	e000      	b.n	8006c3e <prvUnlockQueue+0x46>
					break;
 8006c3c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	22ff      	movs	r2, #255	; 0xff
 8006c42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006c46:	f001 fc5d 	bl	8008504 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006c4a:	f001 fc2b 	bl	80084a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c54:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c56:	e011      	b.n	8006c7c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d012      	beq.n	8006c86 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	3310      	adds	r3, #16
 8006c64:	4618      	mov	r0, r3
 8006c66:	f000 fd05 	bl	8007674 <xTaskRemoveFromEventList>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d001      	beq.n	8006c74 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006c70:	f000 fddc 	bl	800782c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006c74:	7bbb      	ldrb	r3, [r7, #14]
 8006c76:	3b01      	subs	r3, #1
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	dce9      	bgt.n	8006c58 <prvUnlockQueue+0x60>
 8006c84:	e000      	b.n	8006c88 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006c86:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	22ff      	movs	r2, #255	; 0xff
 8006c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006c90:	f001 fc38 	bl	8008504 <vPortExitCritical>
}
 8006c94:	bf00      	nop
 8006c96:	3710      	adds	r7, #16
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ca4:	f001 fbfe 	bl	80084a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d102      	bne.n	8006cb6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	60fb      	str	r3, [r7, #12]
 8006cb4:	e001      	b.n	8006cba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006cba:	f001 fc23 	bl	8008504 <vPortExitCritical>

	return xReturn;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006cd0:	f001 fbe8 	bl	80084a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d102      	bne.n	8006ce6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	60fb      	str	r3, [r7, #12]
 8006ce4:	e001      	b.n	8006cea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006cea:	f001 fc0b 	bl	8008504 <vPortExitCritical>

	return xReturn;
 8006cee:	68fb      	ldr	r3, [r7, #12]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d02:	2300      	movs	r3, #0
 8006d04:	60fb      	str	r3, [r7, #12]
 8006d06:	e014      	b.n	8006d32 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006d08:	4a0f      	ldr	r2, [pc, #60]	; (8006d48 <vQueueAddToRegistry+0x50>)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d10b      	bne.n	8006d2c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006d14:	490c      	ldr	r1, [pc, #48]	; (8006d48 <vQueueAddToRegistry+0x50>)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	683a      	ldr	r2, [r7, #0]
 8006d1a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006d1e:	4a0a      	ldr	r2, [pc, #40]	; (8006d48 <vQueueAddToRegistry+0x50>)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	00db      	lsls	r3, r3, #3
 8006d24:	4413      	add	r3, r2
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006d2a:	e006      	b.n	8006d3a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	60fb      	str	r3, [r7, #12]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2b07      	cmp	r3, #7
 8006d36:	d9e7      	bls.n	8006d08 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006d38:	bf00      	nop
 8006d3a:	bf00      	nop
 8006d3c:	3714      	adds	r7, #20
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	2000a530 	.word	0x2000a530

08006d4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b086      	sub	sp, #24
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006d5c:	f001 fba2 	bl	80084a4 <vPortEnterCritical>
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d66:	b25b      	sxtb	r3, r3
 8006d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6c:	d103      	bne.n	8006d76 <vQueueWaitForMessageRestricted+0x2a>
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d7c:	b25b      	sxtb	r3, r3
 8006d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d82:	d103      	bne.n	8006d8c <vQueueWaitForMessageRestricted+0x40>
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d8c:	f001 fbba 	bl	8008504 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d106      	bne.n	8006da6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	3324      	adds	r3, #36	; 0x24
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	68b9      	ldr	r1, [r7, #8]
 8006da0:	4618      	mov	r0, r3
 8006da2:	f000 fc3b 	bl	800761c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006da6:	6978      	ldr	r0, [r7, #20]
 8006da8:	f7ff ff26 	bl	8006bf8 <prvUnlockQueue>
	}
 8006dac:	bf00      	nop
 8006dae:	3718      	adds	r7, #24
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b08e      	sub	sp, #56	; 0x38
 8006db8:	af04      	add	r7, sp, #16
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	607a      	str	r2, [r7, #4]
 8006dc0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d10a      	bne.n	8006dde <xTaskCreateStatic+0x2a>
	__asm volatile
 8006dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dcc:	f383 8811 	msr	BASEPRI, r3
 8006dd0:	f3bf 8f6f 	isb	sy
 8006dd4:	f3bf 8f4f 	dsb	sy
 8006dd8:	623b      	str	r3, [r7, #32]
}
 8006dda:	bf00      	nop
 8006ddc:	e7fe      	b.n	8006ddc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10a      	bne.n	8006dfa <xTaskCreateStatic+0x46>
	__asm volatile
 8006de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de8:	f383 8811 	msr	BASEPRI, r3
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	61fb      	str	r3, [r7, #28]
}
 8006df6:	bf00      	nop
 8006df8:	e7fe      	b.n	8006df8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006dfa:	235c      	movs	r3, #92	; 0x5c
 8006dfc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	2b5c      	cmp	r3, #92	; 0x5c
 8006e02:	d00a      	beq.n	8006e1a <xTaskCreateStatic+0x66>
	__asm volatile
 8006e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e08:	f383 8811 	msr	BASEPRI, r3
 8006e0c:	f3bf 8f6f 	isb	sy
 8006e10:	f3bf 8f4f 	dsb	sy
 8006e14:	61bb      	str	r3, [r7, #24]
}
 8006e16:	bf00      	nop
 8006e18:	e7fe      	b.n	8006e18 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006e1a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d01e      	beq.n	8006e60 <xTaskCreateStatic+0xac>
 8006e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d01b      	beq.n	8006e60 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e30:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e34:	2202      	movs	r2, #2
 8006e36:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	9303      	str	r3, [sp, #12]
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e40:	9302      	str	r3, [sp, #8]
 8006e42:	f107 0314 	add.w	r3, r7, #20
 8006e46:	9301      	str	r3, [sp, #4]
 8006e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4a:	9300      	str	r3, [sp, #0]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	68b9      	ldr	r1, [r7, #8]
 8006e52:	68f8      	ldr	r0, [r7, #12]
 8006e54:	f000 f850 	bl	8006ef8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e5a:	f000 f8dd 	bl	8007018 <prvAddNewTaskToReadyList>
 8006e5e:	e001      	b.n	8006e64 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006e60:	2300      	movs	r3, #0
 8006e62:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006e64:	697b      	ldr	r3, [r7, #20]
	}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3728      	adds	r7, #40	; 0x28
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b08c      	sub	sp, #48	; 0x30
 8006e72:	af04      	add	r7, sp, #16
 8006e74:	60f8      	str	r0, [r7, #12]
 8006e76:	60b9      	str	r1, [r7, #8]
 8006e78:	603b      	str	r3, [r7, #0]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006e7e:	88fb      	ldrh	r3, [r7, #6]
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4618      	mov	r0, r3
 8006e84:	f001 fc30 	bl	80086e8 <pvPortMalloc>
 8006e88:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00e      	beq.n	8006eae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006e90:	205c      	movs	r0, #92	; 0x5c
 8006e92:	f001 fc29 	bl	80086e8 <pvPortMalloc>
 8006e96:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d003      	beq.n	8006ea6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	697a      	ldr	r2, [r7, #20]
 8006ea2:	631a      	str	r2, [r3, #48]	; 0x30
 8006ea4:	e005      	b.n	8006eb2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006ea6:	6978      	ldr	r0, [r7, #20]
 8006ea8:	f001 fcea 	bl	8008880 <vPortFree>
 8006eac:	e001      	b.n	8006eb2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d017      	beq.n	8006ee8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006ec0:	88fa      	ldrh	r2, [r7, #6]
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	9303      	str	r3, [sp, #12]
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	9302      	str	r3, [sp, #8]
 8006eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ecc:	9301      	str	r3, [sp, #4]
 8006ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed0:	9300      	str	r3, [sp, #0]
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	68b9      	ldr	r1, [r7, #8]
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f000 f80e 	bl	8006ef8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006edc:	69f8      	ldr	r0, [r7, #28]
 8006ede:	f000 f89b 	bl	8007018 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	61bb      	str	r3, [r7, #24]
 8006ee6:	e002      	b.n	8006eee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8006eec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006eee:	69bb      	ldr	r3, [r7, #24]
	}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3720      	adds	r7, #32
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b088      	sub	sp, #32
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]
 8006f04:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f08:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	461a      	mov	r2, r3
 8006f10:	21a5      	movs	r1, #165	; 0xa5
 8006f12:	f001 fe05 	bl	8008b20 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006f20:	3b01      	subs	r3, #1
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	4413      	add	r3, r2
 8006f26:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	f023 0307 	bic.w	r3, r3, #7
 8006f2e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	f003 0307 	and.w	r3, r3, #7
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00a      	beq.n	8006f50 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3e:	f383 8811 	msr	BASEPRI, r3
 8006f42:	f3bf 8f6f 	isb	sy
 8006f46:	f3bf 8f4f 	dsb	sy
 8006f4a:	617b      	str	r3, [r7, #20]
}
 8006f4c:	bf00      	nop
 8006f4e:	e7fe      	b.n	8006f4e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d01f      	beq.n	8006f96 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f56:	2300      	movs	r3, #0
 8006f58:	61fb      	str	r3, [r7, #28]
 8006f5a:	e012      	b.n	8006f82 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006f5c:	68ba      	ldr	r2, [r7, #8]
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	4413      	add	r3, r2
 8006f62:	7819      	ldrb	r1, [r3, #0]
 8006f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	4413      	add	r3, r2
 8006f6a:	3334      	adds	r3, #52	; 0x34
 8006f6c:	460a      	mov	r2, r1
 8006f6e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006f70:	68ba      	ldr	r2, [r7, #8]
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	4413      	add	r3, r2
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d006      	beq.n	8006f8a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	61fb      	str	r3, [r7, #28]
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	2b0f      	cmp	r3, #15
 8006f86:	d9e9      	bls.n	8006f5c <prvInitialiseNewTask+0x64>
 8006f88:	e000      	b.n	8006f8c <prvInitialiseNewTask+0x94>
			{
				break;
 8006f8a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f94:	e003      	b.n	8006f9e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa0:	2b37      	cmp	r3, #55	; 0x37
 8006fa2:	d901      	bls.n	8006fa8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006fa4:	2337      	movs	r3, #55	; 0x37
 8006fa6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006faa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fb2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fbc:	3304      	adds	r3, #4
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7ff f8be 	bl	8006140 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc6:	3318      	adds	r3, #24
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f7ff f8b9 	bl	8006140 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fd2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fdc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fe2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006ff2:	683a      	ldr	r2, [r7, #0]
 8006ff4:	68f9      	ldr	r1, [r7, #12]
 8006ff6:	69b8      	ldr	r0, [r7, #24]
 8006ff8:	f001 f928 	bl	800824c <pxPortInitialiseStack>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007000:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007004:	2b00      	cmp	r3, #0
 8007006:	d002      	beq.n	800700e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800700c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800700e:	bf00      	nop
 8007010:	3720      	adds	r7, #32
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
	...

08007018 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007020:	f001 fa40 	bl	80084a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007024:	4b2d      	ldr	r3, [pc, #180]	; (80070dc <prvAddNewTaskToReadyList+0xc4>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	3301      	adds	r3, #1
 800702a:	4a2c      	ldr	r2, [pc, #176]	; (80070dc <prvAddNewTaskToReadyList+0xc4>)
 800702c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800702e:	4b2c      	ldr	r3, [pc, #176]	; (80070e0 <prvAddNewTaskToReadyList+0xc8>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d109      	bne.n	800704a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007036:	4a2a      	ldr	r2, [pc, #168]	; (80070e0 <prvAddNewTaskToReadyList+0xc8>)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800703c:	4b27      	ldr	r3, [pc, #156]	; (80070dc <prvAddNewTaskToReadyList+0xc4>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2b01      	cmp	r3, #1
 8007042:	d110      	bne.n	8007066 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007044:	f000 fc16 	bl	8007874 <prvInitialiseTaskLists>
 8007048:	e00d      	b.n	8007066 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800704a:	4b26      	ldr	r3, [pc, #152]	; (80070e4 <prvAddNewTaskToReadyList+0xcc>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d109      	bne.n	8007066 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007052:	4b23      	ldr	r3, [pc, #140]	; (80070e0 <prvAddNewTaskToReadyList+0xc8>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705c:	429a      	cmp	r2, r3
 800705e:	d802      	bhi.n	8007066 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007060:	4a1f      	ldr	r2, [pc, #124]	; (80070e0 <prvAddNewTaskToReadyList+0xc8>)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007066:	4b20      	ldr	r3, [pc, #128]	; (80070e8 <prvAddNewTaskToReadyList+0xd0>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	3301      	adds	r3, #1
 800706c:	4a1e      	ldr	r2, [pc, #120]	; (80070e8 <prvAddNewTaskToReadyList+0xd0>)
 800706e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007070:	4b1d      	ldr	r3, [pc, #116]	; (80070e8 <prvAddNewTaskToReadyList+0xd0>)
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800707c:	4b1b      	ldr	r3, [pc, #108]	; (80070ec <prvAddNewTaskToReadyList+0xd4>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	429a      	cmp	r2, r3
 8007082:	d903      	bls.n	800708c <prvAddNewTaskToReadyList+0x74>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007088:	4a18      	ldr	r2, [pc, #96]	; (80070ec <prvAddNewTaskToReadyList+0xd4>)
 800708a:	6013      	str	r3, [r2, #0]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007090:	4613      	mov	r3, r2
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	4413      	add	r3, r2
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	4a15      	ldr	r2, [pc, #84]	; (80070f0 <prvAddNewTaskToReadyList+0xd8>)
 800709a:	441a      	add	r2, r3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	3304      	adds	r3, #4
 80070a0:	4619      	mov	r1, r3
 80070a2:	4610      	mov	r0, r2
 80070a4:	f7ff f859 	bl	800615a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80070a8:	f001 fa2c 	bl	8008504 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80070ac:	4b0d      	ldr	r3, [pc, #52]	; (80070e4 <prvAddNewTaskToReadyList+0xcc>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00e      	beq.n	80070d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80070b4:	4b0a      	ldr	r3, [pc, #40]	; (80070e0 <prvAddNewTaskToReadyList+0xc8>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070be:	429a      	cmp	r2, r3
 80070c0:	d207      	bcs.n	80070d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80070c2:	4b0c      	ldr	r3, [pc, #48]	; (80070f4 <prvAddNewTaskToReadyList+0xdc>)
 80070c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070c8:	601a      	str	r2, [r3, #0]
 80070ca:	f3bf 8f4f 	dsb	sy
 80070ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070d2:	bf00      	nop
 80070d4:	3708      	adds	r7, #8
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	20000c18 	.word	0x20000c18
 80070e0:	20000744 	.word	0x20000744
 80070e4:	20000c24 	.word	0x20000c24
 80070e8:	20000c34 	.word	0x20000c34
 80070ec:	20000c20 	.word	0x20000c20
 80070f0:	20000748 	.word	0x20000748
 80070f4:	e000ed04 	.word	0xe000ed04

080070f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007100:	2300      	movs	r3, #0
 8007102:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d017      	beq.n	800713a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800710a:	4b13      	ldr	r3, [pc, #76]	; (8007158 <vTaskDelay+0x60>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00a      	beq.n	8007128 <vTaskDelay+0x30>
	__asm volatile
 8007112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007116:	f383 8811 	msr	BASEPRI, r3
 800711a:	f3bf 8f6f 	isb	sy
 800711e:	f3bf 8f4f 	dsb	sy
 8007122:	60bb      	str	r3, [r7, #8]
}
 8007124:	bf00      	nop
 8007126:	e7fe      	b.n	8007126 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007128:	f000 f880 	bl	800722c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800712c:	2100      	movs	r1, #0
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 fcea 	bl	8007b08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007134:	f000 f888 	bl	8007248 <xTaskResumeAll>
 8007138:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d107      	bne.n	8007150 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007140:	4b06      	ldr	r3, [pc, #24]	; (800715c <vTaskDelay+0x64>)
 8007142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007146:	601a      	str	r2, [r3, #0]
 8007148:	f3bf 8f4f 	dsb	sy
 800714c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007150:	bf00      	nop
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	20000c40 	.word	0x20000c40
 800715c:	e000ed04 	.word	0xe000ed04

08007160 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b08a      	sub	sp, #40	; 0x28
 8007164:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007166:	2300      	movs	r3, #0
 8007168:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800716a:	2300      	movs	r3, #0
 800716c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800716e:	463a      	mov	r2, r7
 8007170:	1d39      	adds	r1, r7, #4
 8007172:	f107 0308 	add.w	r3, r7, #8
 8007176:	4618      	mov	r0, r3
 8007178:	f7fe ff8e 	bl	8006098 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800717c:	6839      	ldr	r1, [r7, #0]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	68ba      	ldr	r2, [r7, #8]
 8007182:	9202      	str	r2, [sp, #8]
 8007184:	9301      	str	r3, [sp, #4]
 8007186:	2300      	movs	r3, #0
 8007188:	9300      	str	r3, [sp, #0]
 800718a:	2300      	movs	r3, #0
 800718c:	460a      	mov	r2, r1
 800718e:	4921      	ldr	r1, [pc, #132]	; (8007214 <vTaskStartScheduler+0xb4>)
 8007190:	4821      	ldr	r0, [pc, #132]	; (8007218 <vTaskStartScheduler+0xb8>)
 8007192:	f7ff fe0f 	bl	8006db4 <xTaskCreateStatic>
 8007196:	4603      	mov	r3, r0
 8007198:	4a20      	ldr	r2, [pc, #128]	; (800721c <vTaskStartScheduler+0xbc>)
 800719a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800719c:	4b1f      	ldr	r3, [pc, #124]	; (800721c <vTaskStartScheduler+0xbc>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d002      	beq.n	80071aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80071a4:	2301      	movs	r3, #1
 80071a6:	617b      	str	r3, [r7, #20]
 80071a8:	e001      	b.n	80071ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80071aa:	2300      	movs	r3, #0
 80071ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d102      	bne.n	80071ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80071b4:	f000 fcfc 	bl	8007bb0 <xTimerCreateTimerTask>
 80071b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d116      	bne.n	80071ee <vTaskStartScheduler+0x8e>
	__asm volatile
 80071c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c4:	f383 8811 	msr	BASEPRI, r3
 80071c8:	f3bf 8f6f 	isb	sy
 80071cc:	f3bf 8f4f 	dsb	sy
 80071d0:	613b      	str	r3, [r7, #16]
}
 80071d2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80071d4:	4b12      	ldr	r3, [pc, #72]	; (8007220 <vTaskStartScheduler+0xc0>)
 80071d6:	f04f 32ff 	mov.w	r2, #4294967295
 80071da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80071dc:	4b11      	ldr	r3, [pc, #68]	; (8007224 <vTaskStartScheduler+0xc4>)
 80071de:	2201      	movs	r2, #1
 80071e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80071e2:	4b11      	ldr	r3, [pc, #68]	; (8007228 <vTaskStartScheduler+0xc8>)
 80071e4:	2200      	movs	r2, #0
 80071e6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80071e8:	f001 f8ba 	bl	8008360 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80071ec:	e00e      	b.n	800720c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f4:	d10a      	bne.n	800720c <vTaskStartScheduler+0xac>
	__asm volatile
 80071f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fa:	f383 8811 	msr	BASEPRI, r3
 80071fe:	f3bf 8f6f 	isb	sy
 8007202:	f3bf 8f4f 	dsb	sy
 8007206:	60fb      	str	r3, [r7, #12]
}
 8007208:	bf00      	nop
 800720a:	e7fe      	b.n	800720a <vTaskStartScheduler+0xaa>
}
 800720c:	bf00      	nop
 800720e:	3718      	adds	r7, #24
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	08008be4 	.word	0x08008be4
 8007218:	08007845 	.word	0x08007845
 800721c:	20000c3c 	.word	0x20000c3c
 8007220:	20000c38 	.word	0x20000c38
 8007224:	20000c24 	.word	0x20000c24
 8007228:	20000c1c 	.word	0x20000c1c

0800722c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800722c:	b480      	push	{r7}
 800722e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007230:	4b04      	ldr	r3, [pc, #16]	; (8007244 <vTaskSuspendAll+0x18>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	3301      	adds	r3, #1
 8007236:	4a03      	ldr	r2, [pc, #12]	; (8007244 <vTaskSuspendAll+0x18>)
 8007238:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800723a:	bf00      	nop
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr
 8007244:	20000c40 	.word	0x20000c40

08007248 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800724e:	2300      	movs	r3, #0
 8007250:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007252:	2300      	movs	r3, #0
 8007254:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007256:	4b42      	ldr	r3, [pc, #264]	; (8007360 <xTaskResumeAll+0x118>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d10a      	bne.n	8007274 <xTaskResumeAll+0x2c>
	__asm volatile
 800725e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007262:	f383 8811 	msr	BASEPRI, r3
 8007266:	f3bf 8f6f 	isb	sy
 800726a:	f3bf 8f4f 	dsb	sy
 800726e:	603b      	str	r3, [r7, #0]
}
 8007270:	bf00      	nop
 8007272:	e7fe      	b.n	8007272 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007274:	f001 f916 	bl	80084a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007278:	4b39      	ldr	r3, [pc, #228]	; (8007360 <xTaskResumeAll+0x118>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	3b01      	subs	r3, #1
 800727e:	4a38      	ldr	r2, [pc, #224]	; (8007360 <xTaskResumeAll+0x118>)
 8007280:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007282:	4b37      	ldr	r3, [pc, #220]	; (8007360 <xTaskResumeAll+0x118>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d162      	bne.n	8007350 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800728a:	4b36      	ldr	r3, [pc, #216]	; (8007364 <xTaskResumeAll+0x11c>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d05e      	beq.n	8007350 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007292:	e02f      	b.n	80072f4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007294:	4b34      	ldr	r3, [pc, #208]	; (8007368 <xTaskResumeAll+0x120>)
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	3318      	adds	r3, #24
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7fe ffb7 	bl	8006214 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	3304      	adds	r3, #4
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7fe ffb2 	bl	8006214 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072b4:	4b2d      	ldr	r3, [pc, #180]	; (800736c <xTaskResumeAll+0x124>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d903      	bls.n	80072c4 <xTaskResumeAll+0x7c>
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c0:	4a2a      	ldr	r2, [pc, #168]	; (800736c <xTaskResumeAll+0x124>)
 80072c2:	6013      	str	r3, [r2, #0]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c8:	4613      	mov	r3, r2
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	4413      	add	r3, r2
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4a27      	ldr	r2, [pc, #156]	; (8007370 <xTaskResumeAll+0x128>)
 80072d2:	441a      	add	r2, r3
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	3304      	adds	r3, #4
 80072d8:	4619      	mov	r1, r3
 80072da:	4610      	mov	r0, r2
 80072dc:	f7fe ff3d 	bl	800615a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072e4:	4b23      	ldr	r3, [pc, #140]	; (8007374 <xTaskResumeAll+0x12c>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d302      	bcc.n	80072f4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80072ee:	4b22      	ldr	r3, [pc, #136]	; (8007378 <xTaskResumeAll+0x130>)
 80072f0:	2201      	movs	r2, #1
 80072f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80072f4:	4b1c      	ldr	r3, [pc, #112]	; (8007368 <xTaskResumeAll+0x120>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d1cb      	bne.n	8007294 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d001      	beq.n	8007306 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007302:	f000 fb55 	bl	80079b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007306:	4b1d      	ldr	r3, [pc, #116]	; (800737c <xTaskResumeAll+0x134>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d010      	beq.n	8007334 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007312:	f000 f847 	bl	80073a4 <xTaskIncrementTick>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d002      	beq.n	8007322 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800731c:	4b16      	ldr	r3, [pc, #88]	; (8007378 <xTaskResumeAll+0x130>)
 800731e:	2201      	movs	r2, #1
 8007320:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	3b01      	subs	r3, #1
 8007326:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1f1      	bne.n	8007312 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800732e:	4b13      	ldr	r3, [pc, #76]	; (800737c <xTaskResumeAll+0x134>)
 8007330:	2200      	movs	r2, #0
 8007332:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007334:	4b10      	ldr	r3, [pc, #64]	; (8007378 <xTaskResumeAll+0x130>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d009      	beq.n	8007350 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800733c:	2301      	movs	r3, #1
 800733e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007340:	4b0f      	ldr	r3, [pc, #60]	; (8007380 <xTaskResumeAll+0x138>)
 8007342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007346:	601a      	str	r2, [r3, #0]
 8007348:	f3bf 8f4f 	dsb	sy
 800734c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007350:	f001 f8d8 	bl	8008504 <vPortExitCritical>

	return xAlreadyYielded;
 8007354:	68bb      	ldr	r3, [r7, #8]
}
 8007356:	4618      	mov	r0, r3
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	20000c40 	.word	0x20000c40
 8007364:	20000c18 	.word	0x20000c18
 8007368:	20000bd8 	.word	0x20000bd8
 800736c:	20000c20 	.word	0x20000c20
 8007370:	20000748 	.word	0x20000748
 8007374:	20000744 	.word	0x20000744
 8007378:	20000c2c 	.word	0x20000c2c
 800737c:	20000c28 	.word	0x20000c28
 8007380:	e000ed04 	.word	0xe000ed04

08007384 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800738a:	4b05      	ldr	r3, [pc, #20]	; (80073a0 <xTaskGetTickCount+0x1c>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007390:	687b      	ldr	r3, [r7, #4]
}
 8007392:	4618      	mov	r0, r3
 8007394:	370c      	adds	r7, #12
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	20000c1c 	.word	0x20000c1c

080073a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80073aa:	2300      	movs	r3, #0
 80073ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073ae:	4b4f      	ldr	r3, [pc, #316]	; (80074ec <xTaskIncrementTick+0x148>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	f040 808f 	bne.w	80074d6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80073b8:	4b4d      	ldr	r3, [pc, #308]	; (80074f0 <xTaskIncrementTick+0x14c>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	3301      	adds	r3, #1
 80073be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80073c0:	4a4b      	ldr	r2, [pc, #300]	; (80074f0 <xTaskIncrementTick+0x14c>)
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d120      	bne.n	800740e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80073cc:	4b49      	ldr	r3, [pc, #292]	; (80074f4 <xTaskIncrementTick+0x150>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00a      	beq.n	80073ec <xTaskIncrementTick+0x48>
	__asm volatile
 80073d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073da:	f383 8811 	msr	BASEPRI, r3
 80073de:	f3bf 8f6f 	isb	sy
 80073e2:	f3bf 8f4f 	dsb	sy
 80073e6:	603b      	str	r3, [r7, #0]
}
 80073e8:	bf00      	nop
 80073ea:	e7fe      	b.n	80073ea <xTaskIncrementTick+0x46>
 80073ec:	4b41      	ldr	r3, [pc, #260]	; (80074f4 <xTaskIncrementTick+0x150>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	60fb      	str	r3, [r7, #12]
 80073f2:	4b41      	ldr	r3, [pc, #260]	; (80074f8 <xTaskIncrementTick+0x154>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a3f      	ldr	r2, [pc, #252]	; (80074f4 <xTaskIncrementTick+0x150>)
 80073f8:	6013      	str	r3, [r2, #0]
 80073fa:	4a3f      	ldr	r2, [pc, #252]	; (80074f8 <xTaskIncrementTick+0x154>)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6013      	str	r3, [r2, #0]
 8007400:	4b3e      	ldr	r3, [pc, #248]	; (80074fc <xTaskIncrementTick+0x158>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	3301      	adds	r3, #1
 8007406:	4a3d      	ldr	r2, [pc, #244]	; (80074fc <xTaskIncrementTick+0x158>)
 8007408:	6013      	str	r3, [r2, #0]
 800740a:	f000 fad1 	bl	80079b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800740e:	4b3c      	ldr	r3, [pc, #240]	; (8007500 <xTaskIncrementTick+0x15c>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	693a      	ldr	r2, [r7, #16]
 8007414:	429a      	cmp	r2, r3
 8007416:	d349      	bcc.n	80074ac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007418:	4b36      	ldr	r3, [pc, #216]	; (80074f4 <xTaskIncrementTick+0x150>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d104      	bne.n	800742c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007422:	4b37      	ldr	r3, [pc, #220]	; (8007500 <xTaskIncrementTick+0x15c>)
 8007424:	f04f 32ff 	mov.w	r2, #4294967295
 8007428:	601a      	str	r2, [r3, #0]
					break;
 800742a:	e03f      	b.n	80074ac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800742c:	4b31      	ldr	r3, [pc, #196]	; (80074f4 <xTaskIncrementTick+0x150>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800743c:	693a      	ldr	r2, [r7, #16]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	429a      	cmp	r2, r3
 8007442:	d203      	bcs.n	800744c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007444:	4a2e      	ldr	r2, [pc, #184]	; (8007500 <xTaskIncrementTick+0x15c>)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800744a:	e02f      	b.n	80074ac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	3304      	adds	r3, #4
 8007450:	4618      	mov	r0, r3
 8007452:	f7fe fedf 	bl	8006214 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800745a:	2b00      	cmp	r3, #0
 800745c:	d004      	beq.n	8007468 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	3318      	adds	r3, #24
 8007462:	4618      	mov	r0, r3
 8007464:	f7fe fed6 	bl	8006214 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800746c:	4b25      	ldr	r3, [pc, #148]	; (8007504 <xTaskIncrementTick+0x160>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	429a      	cmp	r2, r3
 8007472:	d903      	bls.n	800747c <xTaskIncrementTick+0xd8>
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007478:	4a22      	ldr	r2, [pc, #136]	; (8007504 <xTaskIncrementTick+0x160>)
 800747a:	6013      	str	r3, [r2, #0]
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007480:	4613      	mov	r3, r2
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4413      	add	r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	4a1f      	ldr	r2, [pc, #124]	; (8007508 <xTaskIncrementTick+0x164>)
 800748a:	441a      	add	r2, r3
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	3304      	adds	r3, #4
 8007490:	4619      	mov	r1, r3
 8007492:	4610      	mov	r0, r2
 8007494:	f7fe fe61 	bl	800615a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800749c:	4b1b      	ldr	r3, [pc, #108]	; (800750c <xTaskIncrementTick+0x168>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d3b8      	bcc.n	8007418 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80074a6:	2301      	movs	r3, #1
 80074a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074aa:	e7b5      	b.n	8007418 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80074ac:	4b17      	ldr	r3, [pc, #92]	; (800750c <xTaskIncrementTick+0x168>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074b2:	4915      	ldr	r1, [pc, #84]	; (8007508 <xTaskIncrementTick+0x164>)
 80074b4:	4613      	mov	r3, r2
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	4413      	add	r3, r2
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	440b      	add	r3, r1
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d901      	bls.n	80074c8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80074c4:	2301      	movs	r3, #1
 80074c6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80074c8:	4b11      	ldr	r3, [pc, #68]	; (8007510 <xTaskIncrementTick+0x16c>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d007      	beq.n	80074e0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80074d0:	2301      	movs	r3, #1
 80074d2:	617b      	str	r3, [r7, #20]
 80074d4:	e004      	b.n	80074e0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80074d6:	4b0f      	ldr	r3, [pc, #60]	; (8007514 <xTaskIncrementTick+0x170>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	3301      	adds	r3, #1
 80074dc:	4a0d      	ldr	r2, [pc, #52]	; (8007514 <xTaskIncrementTick+0x170>)
 80074de:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80074e0:	697b      	ldr	r3, [r7, #20]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3718      	adds	r7, #24
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	20000c40 	.word	0x20000c40
 80074f0:	20000c1c 	.word	0x20000c1c
 80074f4:	20000bd0 	.word	0x20000bd0
 80074f8:	20000bd4 	.word	0x20000bd4
 80074fc:	20000c30 	.word	0x20000c30
 8007500:	20000c38 	.word	0x20000c38
 8007504:	20000c20 	.word	0x20000c20
 8007508:	20000748 	.word	0x20000748
 800750c:	20000744 	.word	0x20000744
 8007510:	20000c2c 	.word	0x20000c2c
 8007514:	20000c28 	.word	0x20000c28

08007518 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800751e:	4b28      	ldr	r3, [pc, #160]	; (80075c0 <vTaskSwitchContext+0xa8>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d003      	beq.n	800752e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007526:	4b27      	ldr	r3, [pc, #156]	; (80075c4 <vTaskSwitchContext+0xac>)
 8007528:	2201      	movs	r2, #1
 800752a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800752c:	e041      	b.n	80075b2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800752e:	4b25      	ldr	r3, [pc, #148]	; (80075c4 <vTaskSwitchContext+0xac>)
 8007530:	2200      	movs	r2, #0
 8007532:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007534:	4b24      	ldr	r3, [pc, #144]	; (80075c8 <vTaskSwitchContext+0xb0>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	60fb      	str	r3, [r7, #12]
 800753a:	e010      	b.n	800755e <vTaskSwitchContext+0x46>
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d10a      	bne.n	8007558 <vTaskSwitchContext+0x40>
	__asm volatile
 8007542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007546:	f383 8811 	msr	BASEPRI, r3
 800754a:	f3bf 8f6f 	isb	sy
 800754e:	f3bf 8f4f 	dsb	sy
 8007552:	607b      	str	r3, [r7, #4]
}
 8007554:	bf00      	nop
 8007556:	e7fe      	b.n	8007556 <vTaskSwitchContext+0x3e>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	3b01      	subs	r3, #1
 800755c:	60fb      	str	r3, [r7, #12]
 800755e:	491b      	ldr	r1, [pc, #108]	; (80075cc <vTaskSwitchContext+0xb4>)
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	4613      	mov	r3, r2
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	4413      	add	r3, r2
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	440b      	add	r3, r1
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d0e4      	beq.n	800753c <vTaskSwitchContext+0x24>
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	4613      	mov	r3, r2
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	4413      	add	r3, r2
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	4a13      	ldr	r2, [pc, #76]	; (80075cc <vTaskSwitchContext+0xb4>)
 800757e:	4413      	add	r3, r2
 8007580:	60bb      	str	r3, [r7, #8]
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	685a      	ldr	r2, [r3, #4]
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	605a      	str	r2, [r3, #4]
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	685a      	ldr	r2, [r3, #4]
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	3308      	adds	r3, #8
 8007594:	429a      	cmp	r2, r3
 8007596:	d104      	bne.n	80075a2 <vTaskSwitchContext+0x8a>
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	685a      	ldr	r2, [r3, #4]
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	605a      	str	r2, [r3, #4]
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	4a09      	ldr	r2, [pc, #36]	; (80075d0 <vTaskSwitchContext+0xb8>)
 80075aa:	6013      	str	r3, [r2, #0]
 80075ac:	4a06      	ldr	r2, [pc, #24]	; (80075c8 <vTaskSwitchContext+0xb0>)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6013      	str	r3, [r2, #0]
}
 80075b2:	bf00      	nop
 80075b4:	3714      	adds	r7, #20
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	20000c40 	.word	0x20000c40
 80075c4:	20000c2c 	.word	0x20000c2c
 80075c8:	20000c20 	.word	0x20000c20
 80075cc:	20000748 	.word	0x20000748
 80075d0:	20000744 	.word	0x20000744

080075d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d10a      	bne.n	80075fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80075e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e8:	f383 8811 	msr	BASEPRI, r3
 80075ec:	f3bf 8f6f 	isb	sy
 80075f0:	f3bf 8f4f 	dsb	sy
 80075f4:	60fb      	str	r3, [r7, #12]
}
 80075f6:	bf00      	nop
 80075f8:	e7fe      	b.n	80075f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80075fa:	4b07      	ldr	r3, [pc, #28]	; (8007618 <vTaskPlaceOnEventList+0x44>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	3318      	adds	r3, #24
 8007600:	4619      	mov	r1, r3
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f7fe fdcd 	bl	80061a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007608:	2101      	movs	r1, #1
 800760a:	6838      	ldr	r0, [r7, #0]
 800760c:	f000 fa7c 	bl	8007b08 <prvAddCurrentTaskToDelayedList>
}
 8007610:	bf00      	nop
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	20000744 	.word	0x20000744

0800761c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800761c:	b580      	push	{r7, lr}
 800761e:	b086      	sub	sp, #24
 8007620:	af00      	add	r7, sp, #0
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d10a      	bne.n	8007644 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800762e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007632:	f383 8811 	msr	BASEPRI, r3
 8007636:	f3bf 8f6f 	isb	sy
 800763a:	f3bf 8f4f 	dsb	sy
 800763e:	617b      	str	r3, [r7, #20]
}
 8007640:	bf00      	nop
 8007642:	e7fe      	b.n	8007642 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007644:	4b0a      	ldr	r3, [pc, #40]	; (8007670 <vTaskPlaceOnEventListRestricted+0x54>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	3318      	adds	r3, #24
 800764a:	4619      	mov	r1, r3
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f7fe fd84 	bl	800615a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d002      	beq.n	800765e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007658:	f04f 33ff 	mov.w	r3, #4294967295
 800765c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800765e:	6879      	ldr	r1, [r7, #4]
 8007660:	68b8      	ldr	r0, [r7, #8]
 8007662:	f000 fa51 	bl	8007b08 <prvAddCurrentTaskToDelayedList>
	}
 8007666:	bf00      	nop
 8007668:	3718      	adds	r7, #24
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	20000744 	.word	0x20000744

08007674 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b086      	sub	sp, #24
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10a      	bne.n	80076a0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800768a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768e:	f383 8811 	msr	BASEPRI, r3
 8007692:	f3bf 8f6f 	isb	sy
 8007696:	f3bf 8f4f 	dsb	sy
 800769a:	60fb      	str	r3, [r7, #12]
}
 800769c:	bf00      	nop
 800769e:	e7fe      	b.n	800769e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	3318      	adds	r3, #24
 80076a4:	4618      	mov	r0, r3
 80076a6:	f7fe fdb5 	bl	8006214 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076aa:	4b1e      	ldr	r3, [pc, #120]	; (8007724 <xTaskRemoveFromEventList+0xb0>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d11d      	bne.n	80076ee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	3304      	adds	r3, #4
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7fe fdac 	bl	8006214 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076c0:	4b19      	ldr	r3, [pc, #100]	; (8007728 <xTaskRemoveFromEventList+0xb4>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d903      	bls.n	80076d0 <xTaskRemoveFromEventList+0x5c>
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076cc:	4a16      	ldr	r2, [pc, #88]	; (8007728 <xTaskRemoveFromEventList+0xb4>)
 80076ce:	6013      	str	r3, [r2, #0]
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076d4:	4613      	mov	r3, r2
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	4413      	add	r3, r2
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4a13      	ldr	r2, [pc, #76]	; (800772c <xTaskRemoveFromEventList+0xb8>)
 80076de:	441a      	add	r2, r3
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	3304      	adds	r3, #4
 80076e4:	4619      	mov	r1, r3
 80076e6:	4610      	mov	r0, r2
 80076e8:	f7fe fd37 	bl	800615a <vListInsertEnd>
 80076ec:	e005      	b.n	80076fa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	3318      	adds	r3, #24
 80076f2:	4619      	mov	r1, r3
 80076f4:	480e      	ldr	r0, [pc, #56]	; (8007730 <xTaskRemoveFromEventList+0xbc>)
 80076f6:	f7fe fd30 	bl	800615a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076fe:	4b0d      	ldr	r3, [pc, #52]	; (8007734 <xTaskRemoveFromEventList+0xc0>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007704:	429a      	cmp	r2, r3
 8007706:	d905      	bls.n	8007714 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007708:	2301      	movs	r3, #1
 800770a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800770c:	4b0a      	ldr	r3, [pc, #40]	; (8007738 <xTaskRemoveFromEventList+0xc4>)
 800770e:	2201      	movs	r2, #1
 8007710:	601a      	str	r2, [r3, #0]
 8007712:	e001      	b.n	8007718 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007714:	2300      	movs	r3, #0
 8007716:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007718:	697b      	ldr	r3, [r7, #20]
}
 800771a:	4618      	mov	r0, r3
 800771c:	3718      	adds	r7, #24
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	20000c40 	.word	0x20000c40
 8007728:	20000c20 	.word	0x20000c20
 800772c:	20000748 	.word	0x20000748
 8007730:	20000bd8 	.word	0x20000bd8
 8007734:	20000744 	.word	0x20000744
 8007738:	20000c2c 	.word	0x20000c2c

0800773c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007744:	4b06      	ldr	r3, [pc, #24]	; (8007760 <vTaskInternalSetTimeOutState+0x24>)
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800774c:	4b05      	ldr	r3, [pc, #20]	; (8007764 <vTaskInternalSetTimeOutState+0x28>)
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	605a      	str	r2, [r3, #4]
}
 8007754:	bf00      	nop
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr
 8007760:	20000c30 	.word	0x20000c30
 8007764:	20000c1c 	.word	0x20000c1c

08007768 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b088      	sub	sp, #32
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d10a      	bne.n	800778e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777c:	f383 8811 	msr	BASEPRI, r3
 8007780:	f3bf 8f6f 	isb	sy
 8007784:	f3bf 8f4f 	dsb	sy
 8007788:	613b      	str	r3, [r7, #16]
}
 800778a:	bf00      	nop
 800778c:	e7fe      	b.n	800778c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d10a      	bne.n	80077aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007798:	f383 8811 	msr	BASEPRI, r3
 800779c:	f3bf 8f6f 	isb	sy
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	60fb      	str	r3, [r7, #12]
}
 80077a6:	bf00      	nop
 80077a8:	e7fe      	b.n	80077a8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80077aa:	f000 fe7b 	bl	80084a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80077ae:	4b1d      	ldr	r3, [pc, #116]	; (8007824 <xTaskCheckForTimeOut+0xbc>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	69ba      	ldr	r2, [r7, #24]
 80077ba:	1ad3      	subs	r3, r2, r3
 80077bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c6:	d102      	bne.n	80077ce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80077c8:	2300      	movs	r3, #0
 80077ca:	61fb      	str	r3, [r7, #28]
 80077cc:	e023      	b.n	8007816 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	4b15      	ldr	r3, [pc, #84]	; (8007828 <xTaskCheckForTimeOut+0xc0>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d007      	beq.n	80077ea <xTaskCheckForTimeOut+0x82>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	69ba      	ldr	r2, [r7, #24]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d302      	bcc.n	80077ea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80077e4:	2301      	movs	r3, #1
 80077e6:	61fb      	str	r3, [r7, #28]
 80077e8:	e015      	b.n	8007816 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	697a      	ldr	r2, [r7, #20]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d20b      	bcs.n	800780c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	1ad2      	subs	r2, r2, r3
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f7ff ff9b 	bl	800773c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007806:	2300      	movs	r3, #0
 8007808:	61fb      	str	r3, [r7, #28]
 800780a:	e004      	b.n	8007816 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	2200      	movs	r2, #0
 8007810:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007812:	2301      	movs	r3, #1
 8007814:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007816:	f000 fe75 	bl	8008504 <vPortExitCritical>

	return xReturn;
 800781a:	69fb      	ldr	r3, [r7, #28]
}
 800781c:	4618      	mov	r0, r3
 800781e:	3720      	adds	r7, #32
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	20000c1c 	.word	0x20000c1c
 8007828:	20000c30 	.word	0x20000c30

0800782c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800782c:	b480      	push	{r7}
 800782e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007830:	4b03      	ldr	r3, [pc, #12]	; (8007840 <vTaskMissedYield+0x14>)
 8007832:	2201      	movs	r2, #1
 8007834:	601a      	str	r2, [r3, #0]
}
 8007836:	bf00      	nop
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr
 8007840:	20000c2c 	.word	0x20000c2c

08007844 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800784c:	f000 f852 	bl	80078f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007850:	4b06      	ldr	r3, [pc, #24]	; (800786c <prvIdleTask+0x28>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	2b01      	cmp	r3, #1
 8007856:	d9f9      	bls.n	800784c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007858:	4b05      	ldr	r3, [pc, #20]	; (8007870 <prvIdleTask+0x2c>)
 800785a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800785e:	601a      	str	r2, [r3, #0]
 8007860:	f3bf 8f4f 	dsb	sy
 8007864:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007868:	e7f0      	b.n	800784c <prvIdleTask+0x8>
 800786a:	bf00      	nop
 800786c:	20000748 	.word	0x20000748
 8007870:	e000ed04 	.word	0xe000ed04

08007874 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800787a:	2300      	movs	r3, #0
 800787c:	607b      	str	r3, [r7, #4]
 800787e:	e00c      	b.n	800789a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	4613      	mov	r3, r2
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	4413      	add	r3, r2
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	4a12      	ldr	r2, [pc, #72]	; (80078d4 <prvInitialiseTaskLists+0x60>)
 800788c:	4413      	add	r3, r2
 800788e:	4618      	mov	r0, r3
 8007890:	f7fe fc36 	bl	8006100 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	3301      	adds	r3, #1
 8007898:	607b      	str	r3, [r7, #4]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2b37      	cmp	r3, #55	; 0x37
 800789e:	d9ef      	bls.n	8007880 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80078a0:	480d      	ldr	r0, [pc, #52]	; (80078d8 <prvInitialiseTaskLists+0x64>)
 80078a2:	f7fe fc2d 	bl	8006100 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80078a6:	480d      	ldr	r0, [pc, #52]	; (80078dc <prvInitialiseTaskLists+0x68>)
 80078a8:	f7fe fc2a 	bl	8006100 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80078ac:	480c      	ldr	r0, [pc, #48]	; (80078e0 <prvInitialiseTaskLists+0x6c>)
 80078ae:	f7fe fc27 	bl	8006100 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80078b2:	480c      	ldr	r0, [pc, #48]	; (80078e4 <prvInitialiseTaskLists+0x70>)
 80078b4:	f7fe fc24 	bl	8006100 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80078b8:	480b      	ldr	r0, [pc, #44]	; (80078e8 <prvInitialiseTaskLists+0x74>)
 80078ba:	f7fe fc21 	bl	8006100 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80078be:	4b0b      	ldr	r3, [pc, #44]	; (80078ec <prvInitialiseTaskLists+0x78>)
 80078c0:	4a05      	ldr	r2, [pc, #20]	; (80078d8 <prvInitialiseTaskLists+0x64>)
 80078c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80078c4:	4b0a      	ldr	r3, [pc, #40]	; (80078f0 <prvInitialiseTaskLists+0x7c>)
 80078c6:	4a05      	ldr	r2, [pc, #20]	; (80078dc <prvInitialiseTaskLists+0x68>)
 80078c8:	601a      	str	r2, [r3, #0]
}
 80078ca:	bf00      	nop
 80078cc:	3708      	adds	r7, #8
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	20000748 	.word	0x20000748
 80078d8:	20000ba8 	.word	0x20000ba8
 80078dc:	20000bbc 	.word	0x20000bbc
 80078e0:	20000bd8 	.word	0x20000bd8
 80078e4:	20000bec 	.word	0x20000bec
 80078e8:	20000c04 	.word	0x20000c04
 80078ec:	20000bd0 	.word	0x20000bd0
 80078f0:	20000bd4 	.word	0x20000bd4

080078f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80078fa:	e019      	b.n	8007930 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80078fc:	f000 fdd2 	bl	80084a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007900:	4b10      	ldr	r3, [pc, #64]	; (8007944 <prvCheckTasksWaitingTermination+0x50>)
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	3304      	adds	r3, #4
 800790c:	4618      	mov	r0, r3
 800790e:	f7fe fc81 	bl	8006214 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007912:	4b0d      	ldr	r3, [pc, #52]	; (8007948 <prvCheckTasksWaitingTermination+0x54>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	3b01      	subs	r3, #1
 8007918:	4a0b      	ldr	r2, [pc, #44]	; (8007948 <prvCheckTasksWaitingTermination+0x54>)
 800791a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800791c:	4b0b      	ldr	r3, [pc, #44]	; (800794c <prvCheckTasksWaitingTermination+0x58>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	3b01      	subs	r3, #1
 8007922:	4a0a      	ldr	r2, [pc, #40]	; (800794c <prvCheckTasksWaitingTermination+0x58>)
 8007924:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007926:	f000 fded 	bl	8008504 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 f810 	bl	8007950 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007930:	4b06      	ldr	r3, [pc, #24]	; (800794c <prvCheckTasksWaitingTermination+0x58>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d1e1      	bne.n	80078fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007938:	bf00      	nop
 800793a:	bf00      	nop
 800793c:	3708      	adds	r7, #8
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	20000bec 	.word	0x20000bec
 8007948:	20000c18 	.word	0x20000c18
 800794c:	20000c00 	.word	0x20000c00

08007950 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800795e:	2b00      	cmp	r3, #0
 8007960:	d108      	bne.n	8007974 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007966:	4618      	mov	r0, r3
 8007968:	f000 ff8a 	bl	8008880 <vPortFree>
				vPortFree( pxTCB );
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 ff87 	bl	8008880 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007972:	e018      	b.n	80079a6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800797a:	2b01      	cmp	r3, #1
 800797c:	d103      	bne.n	8007986 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 ff7e 	bl	8008880 <vPortFree>
	}
 8007984:	e00f      	b.n	80079a6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800798c:	2b02      	cmp	r3, #2
 800798e:	d00a      	beq.n	80079a6 <prvDeleteTCB+0x56>
	__asm volatile
 8007990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007994:	f383 8811 	msr	BASEPRI, r3
 8007998:	f3bf 8f6f 	isb	sy
 800799c:	f3bf 8f4f 	dsb	sy
 80079a0:	60fb      	str	r3, [r7, #12]
}
 80079a2:	bf00      	nop
 80079a4:	e7fe      	b.n	80079a4 <prvDeleteTCB+0x54>
	}
 80079a6:	bf00      	nop
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
	...

080079b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079b6:	4b0c      	ldr	r3, [pc, #48]	; (80079e8 <prvResetNextTaskUnblockTime+0x38>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d104      	bne.n	80079ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80079c0:	4b0a      	ldr	r3, [pc, #40]	; (80079ec <prvResetNextTaskUnblockTime+0x3c>)
 80079c2:	f04f 32ff 	mov.w	r2, #4294967295
 80079c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80079c8:	e008      	b.n	80079dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079ca:	4b07      	ldr	r3, [pc, #28]	; (80079e8 <prvResetNextTaskUnblockTime+0x38>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	4a04      	ldr	r2, [pc, #16]	; (80079ec <prvResetNextTaskUnblockTime+0x3c>)
 80079da:	6013      	str	r3, [r2, #0]
}
 80079dc:	bf00      	nop
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr
 80079e8:	20000bd0 	.word	0x20000bd0
 80079ec:	20000c38 	.word	0x20000c38

080079f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80079f6:	4b0b      	ldr	r3, [pc, #44]	; (8007a24 <xTaskGetSchedulerState+0x34>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d102      	bne.n	8007a04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80079fe:	2301      	movs	r3, #1
 8007a00:	607b      	str	r3, [r7, #4]
 8007a02:	e008      	b.n	8007a16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a04:	4b08      	ldr	r3, [pc, #32]	; (8007a28 <xTaskGetSchedulerState+0x38>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d102      	bne.n	8007a12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007a0c:	2302      	movs	r3, #2
 8007a0e:	607b      	str	r3, [r7, #4]
 8007a10:	e001      	b.n	8007a16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007a12:	2300      	movs	r3, #0
 8007a14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007a16:	687b      	ldr	r3, [r7, #4]
	}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr
 8007a24:	20000c24 	.word	0x20000c24
 8007a28:	20000c40 	.word	0x20000c40

08007a2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b086      	sub	sp, #24
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d056      	beq.n	8007af0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007a42:	4b2e      	ldr	r3, [pc, #184]	; (8007afc <xTaskPriorityDisinherit+0xd0>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	693a      	ldr	r2, [r7, #16]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d00a      	beq.n	8007a62 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a50:	f383 8811 	msr	BASEPRI, r3
 8007a54:	f3bf 8f6f 	isb	sy
 8007a58:	f3bf 8f4f 	dsb	sy
 8007a5c:	60fb      	str	r3, [r7, #12]
}
 8007a5e:	bf00      	nop
 8007a60:	e7fe      	b.n	8007a60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d10a      	bne.n	8007a80 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6e:	f383 8811 	msr	BASEPRI, r3
 8007a72:	f3bf 8f6f 	isb	sy
 8007a76:	f3bf 8f4f 	dsb	sy
 8007a7a:	60bb      	str	r3, [r7, #8]
}
 8007a7c:	bf00      	nop
 8007a7e:	e7fe      	b.n	8007a7e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a84:	1e5a      	subs	r2, r3, #1
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d02c      	beq.n	8007af0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d128      	bne.n	8007af0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	3304      	adds	r3, #4
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7fe fbb6 	bl	8006214 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ac0:	4b0f      	ldr	r3, [pc, #60]	; (8007b00 <xTaskPriorityDisinherit+0xd4>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d903      	bls.n	8007ad0 <xTaskPriorityDisinherit+0xa4>
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007acc:	4a0c      	ldr	r2, [pc, #48]	; (8007b00 <xTaskPriorityDisinherit+0xd4>)
 8007ace:	6013      	str	r3, [r2, #0]
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	4413      	add	r3, r2
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	4a09      	ldr	r2, [pc, #36]	; (8007b04 <xTaskPriorityDisinherit+0xd8>)
 8007ade:	441a      	add	r2, r3
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	3304      	adds	r3, #4
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	4610      	mov	r0, r2
 8007ae8:	f7fe fb37 	bl	800615a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007aec:	2301      	movs	r3, #1
 8007aee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007af0:	697b      	ldr	r3, [r7, #20]
	}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3718      	adds	r7, #24
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	20000744 	.word	0x20000744
 8007b00:	20000c20 	.word	0x20000c20
 8007b04:	20000748 	.word	0x20000748

08007b08 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007b12:	4b21      	ldr	r3, [pc, #132]	; (8007b98 <prvAddCurrentTaskToDelayedList+0x90>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b18:	4b20      	ldr	r3, [pc, #128]	; (8007b9c <prvAddCurrentTaskToDelayedList+0x94>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	3304      	adds	r3, #4
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7fe fb78 	bl	8006214 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b2a:	d10a      	bne.n	8007b42 <prvAddCurrentTaskToDelayedList+0x3a>
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d007      	beq.n	8007b42 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b32:	4b1a      	ldr	r3, [pc, #104]	; (8007b9c <prvAddCurrentTaskToDelayedList+0x94>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	3304      	adds	r3, #4
 8007b38:	4619      	mov	r1, r3
 8007b3a:	4819      	ldr	r0, [pc, #100]	; (8007ba0 <prvAddCurrentTaskToDelayedList+0x98>)
 8007b3c:	f7fe fb0d 	bl	800615a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007b40:	e026      	b.n	8007b90 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	4413      	add	r3, r2
 8007b48:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007b4a:	4b14      	ldr	r3, [pc, #80]	; (8007b9c <prvAddCurrentTaskToDelayedList+0x94>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68ba      	ldr	r2, [r7, #8]
 8007b50:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007b52:	68ba      	ldr	r2, [r7, #8]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d209      	bcs.n	8007b6e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b5a:	4b12      	ldr	r3, [pc, #72]	; (8007ba4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	4b0f      	ldr	r3, [pc, #60]	; (8007b9c <prvAddCurrentTaskToDelayedList+0x94>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	3304      	adds	r3, #4
 8007b64:	4619      	mov	r1, r3
 8007b66:	4610      	mov	r0, r2
 8007b68:	f7fe fb1b 	bl	80061a2 <vListInsert>
}
 8007b6c:	e010      	b.n	8007b90 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b6e:	4b0e      	ldr	r3, [pc, #56]	; (8007ba8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	4b0a      	ldr	r3, [pc, #40]	; (8007b9c <prvAddCurrentTaskToDelayedList+0x94>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	3304      	adds	r3, #4
 8007b78:	4619      	mov	r1, r3
 8007b7a:	4610      	mov	r0, r2
 8007b7c:	f7fe fb11 	bl	80061a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007b80:	4b0a      	ldr	r3, [pc, #40]	; (8007bac <prvAddCurrentTaskToDelayedList+0xa4>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68ba      	ldr	r2, [r7, #8]
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d202      	bcs.n	8007b90 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007b8a:	4a08      	ldr	r2, [pc, #32]	; (8007bac <prvAddCurrentTaskToDelayedList+0xa4>)
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	6013      	str	r3, [r2, #0]
}
 8007b90:	bf00      	nop
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	20000c1c 	.word	0x20000c1c
 8007b9c:	20000744 	.word	0x20000744
 8007ba0:	20000c04 	.word	0x20000c04
 8007ba4:	20000bd4 	.word	0x20000bd4
 8007ba8:	20000bd0 	.word	0x20000bd0
 8007bac:	20000c38 	.word	0x20000c38

08007bb0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b08a      	sub	sp, #40	; 0x28
 8007bb4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007bba:	f000 fb07 	bl	80081cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007bbe:	4b1c      	ldr	r3, [pc, #112]	; (8007c30 <xTimerCreateTimerTask+0x80>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d021      	beq.n	8007c0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007bce:	1d3a      	adds	r2, r7, #4
 8007bd0:	f107 0108 	add.w	r1, r7, #8
 8007bd4:	f107 030c 	add.w	r3, r7, #12
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f7fe fa77 	bl	80060cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007bde:	6879      	ldr	r1, [r7, #4]
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	9202      	str	r2, [sp, #8]
 8007be6:	9301      	str	r3, [sp, #4]
 8007be8:	2302      	movs	r3, #2
 8007bea:	9300      	str	r3, [sp, #0]
 8007bec:	2300      	movs	r3, #0
 8007bee:	460a      	mov	r2, r1
 8007bf0:	4910      	ldr	r1, [pc, #64]	; (8007c34 <xTimerCreateTimerTask+0x84>)
 8007bf2:	4811      	ldr	r0, [pc, #68]	; (8007c38 <xTimerCreateTimerTask+0x88>)
 8007bf4:	f7ff f8de 	bl	8006db4 <xTaskCreateStatic>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	4a10      	ldr	r2, [pc, #64]	; (8007c3c <xTimerCreateTimerTask+0x8c>)
 8007bfc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007bfe:	4b0f      	ldr	r3, [pc, #60]	; (8007c3c <xTimerCreateTimerTask+0x8c>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d001      	beq.n	8007c0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007c06:	2301      	movs	r3, #1
 8007c08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d10a      	bne.n	8007c26 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c14:	f383 8811 	msr	BASEPRI, r3
 8007c18:	f3bf 8f6f 	isb	sy
 8007c1c:	f3bf 8f4f 	dsb	sy
 8007c20:	613b      	str	r3, [r7, #16]
}
 8007c22:	bf00      	nop
 8007c24:	e7fe      	b.n	8007c24 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007c26:	697b      	ldr	r3, [r7, #20]
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3718      	adds	r7, #24
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}
 8007c30:	20000c74 	.word	0x20000c74
 8007c34:	08008bec 	.word	0x08008bec
 8007c38:	08007d75 	.word	0x08007d75
 8007c3c:	20000c78 	.word	0x20000c78

08007c40 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b08a      	sub	sp, #40	; 0x28
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	607a      	str	r2, [r7, #4]
 8007c4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d10a      	bne.n	8007c6e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5c:	f383 8811 	msr	BASEPRI, r3
 8007c60:	f3bf 8f6f 	isb	sy
 8007c64:	f3bf 8f4f 	dsb	sy
 8007c68:	623b      	str	r3, [r7, #32]
}
 8007c6a:	bf00      	nop
 8007c6c:	e7fe      	b.n	8007c6c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007c6e:	4b1a      	ldr	r3, [pc, #104]	; (8007cd8 <xTimerGenericCommand+0x98>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d02a      	beq.n	8007ccc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	2b05      	cmp	r3, #5
 8007c86:	dc18      	bgt.n	8007cba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007c88:	f7ff feb2 	bl	80079f0 <xTaskGetSchedulerState>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b02      	cmp	r3, #2
 8007c90:	d109      	bne.n	8007ca6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007c92:	4b11      	ldr	r3, [pc, #68]	; (8007cd8 <xTimerGenericCommand+0x98>)
 8007c94:	6818      	ldr	r0, [r3, #0]
 8007c96:	f107 0110 	add.w	r1, r7, #16
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c9e:	f7fe fc21 	bl	80064e4 <xQueueGenericSend>
 8007ca2:	6278      	str	r0, [r7, #36]	; 0x24
 8007ca4:	e012      	b.n	8007ccc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007ca6:	4b0c      	ldr	r3, [pc, #48]	; (8007cd8 <xTimerGenericCommand+0x98>)
 8007ca8:	6818      	ldr	r0, [r3, #0]
 8007caa:	f107 0110 	add.w	r1, r7, #16
 8007cae:	2300      	movs	r3, #0
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f7fe fc17 	bl	80064e4 <xQueueGenericSend>
 8007cb6:	6278      	str	r0, [r7, #36]	; 0x24
 8007cb8:	e008      	b.n	8007ccc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007cba:	4b07      	ldr	r3, [pc, #28]	; (8007cd8 <xTimerGenericCommand+0x98>)
 8007cbc:	6818      	ldr	r0, [r3, #0]
 8007cbe:	f107 0110 	add.w	r1, r7, #16
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	683a      	ldr	r2, [r7, #0]
 8007cc6:	f7fe fd0b 	bl	80066e0 <xQueueGenericSendFromISR>
 8007cca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3728      	adds	r7, #40	; 0x28
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	20000c74 	.word	0x20000c74

08007cdc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b088      	sub	sp, #32
 8007ce0:	af02      	add	r7, sp, #8
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ce6:	4b22      	ldr	r3, [pc, #136]	; (8007d70 <prvProcessExpiredTimer+0x94>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	68db      	ldr	r3, [r3, #12]
 8007cee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	3304      	adds	r3, #4
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7fe fa8d 	bl	8006214 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d00:	f003 0304 	and.w	r3, r3, #4
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d022      	beq.n	8007d4e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	699a      	ldr	r2, [r3, #24]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	18d1      	adds	r1, r2, r3
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	683a      	ldr	r2, [r7, #0]
 8007d14:	6978      	ldr	r0, [r7, #20]
 8007d16:	f000 f8d1 	bl	8007ebc <prvInsertTimerInActiveList>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d01f      	beq.n	8007d60 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d20:	2300      	movs	r3, #0
 8007d22:	9300      	str	r3, [sp, #0]
 8007d24:	2300      	movs	r3, #0
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	2100      	movs	r1, #0
 8007d2a:	6978      	ldr	r0, [r7, #20]
 8007d2c:	f7ff ff88 	bl	8007c40 <xTimerGenericCommand>
 8007d30:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d113      	bne.n	8007d60 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d3c:	f383 8811 	msr	BASEPRI, r3
 8007d40:	f3bf 8f6f 	isb	sy
 8007d44:	f3bf 8f4f 	dsb	sy
 8007d48:	60fb      	str	r3, [r7, #12]
}
 8007d4a:	bf00      	nop
 8007d4c:	e7fe      	b.n	8007d4c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d54:	f023 0301 	bic.w	r3, r3, #1
 8007d58:	b2da      	uxtb	r2, r3
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	6a1b      	ldr	r3, [r3, #32]
 8007d64:	6978      	ldr	r0, [r7, #20]
 8007d66:	4798      	blx	r3
}
 8007d68:	bf00      	nop
 8007d6a:	3718      	adds	r7, #24
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	20000c6c 	.word	0x20000c6c

08007d74 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d7c:	f107 0308 	add.w	r3, r7, #8
 8007d80:	4618      	mov	r0, r3
 8007d82:	f000 f857 	bl	8007e34 <prvGetNextExpireTime>
 8007d86:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f000 f803 	bl	8007d98 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007d92:	f000 f8d5 	bl	8007f40 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d96:	e7f1      	b.n	8007d7c <prvTimerTask+0x8>

08007d98 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007da2:	f7ff fa43 	bl	800722c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007da6:	f107 0308 	add.w	r3, r7, #8
 8007daa:	4618      	mov	r0, r3
 8007dac:	f000 f866 	bl	8007e7c <prvSampleTimeNow>
 8007db0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d130      	bne.n	8007e1a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d10a      	bne.n	8007dd4 <prvProcessTimerOrBlockTask+0x3c>
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d806      	bhi.n	8007dd4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007dc6:	f7ff fa3f 	bl	8007248 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007dca:	68f9      	ldr	r1, [r7, #12]
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f7ff ff85 	bl	8007cdc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007dd2:	e024      	b.n	8007e1e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d008      	beq.n	8007dec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007dda:	4b13      	ldr	r3, [pc, #76]	; (8007e28 <prvProcessTimerOrBlockTask+0x90>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d101      	bne.n	8007de8 <prvProcessTimerOrBlockTask+0x50>
 8007de4:	2301      	movs	r3, #1
 8007de6:	e000      	b.n	8007dea <prvProcessTimerOrBlockTask+0x52>
 8007de8:	2300      	movs	r3, #0
 8007dea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007dec:	4b0f      	ldr	r3, [pc, #60]	; (8007e2c <prvProcessTimerOrBlockTask+0x94>)
 8007dee:	6818      	ldr	r0, [r3, #0]
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	683a      	ldr	r2, [r7, #0]
 8007df8:	4619      	mov	r1, r3
 8007dfa:	f7fe ffa7 	bl	8006d4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007dfe:	f7ff fa23 	bl	8007248 <xTaskResumeAll>
 8007e02:	4603      	mov	r3, r0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d10a      	bne.n	8007e1e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007e08:	4b09      	ldr	r3, [pc, #36]	; (8007e30 <prvProcessTimerOrBlockTask+0x98>)
 8007e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e0e:	601a      	str	r2, [r3, #0]
 8007e10:	f3bf 8f4f 	dsb	sy
 8007e14:	f3bf 8f6f 	isb	sy
}
 8007e18:	e001      	b.n	8007e1e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007e1a:	f7ff fa15 	bl	8007248 <xTaskResumeAll>
}
 8007e1e:	bf00      	nop
 8007e20:	3710      	adds	r7, #16
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	20000c70 	.word	0x20000c70
 8007e2c:	20000c74 	.word	0x20000c74
 8007e30:	e000ed04 	.word	0xe000ed04

08007e34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007e34:	b480      	push	{r7}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007e3c:	4b0e      	ldr	r3, [pc, #56]	; (8007e78 <prvGetNextExpireTime+0x44>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d101      	bne.n	8007e4a <prvGetNextExpireTime+0x16>
 8007e46:	2201      	movs	r2, #1
 8007e48:	e000      	b.n	8007e4c <prvGetNextExpireTime+0x18>
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d105      	bne.n	8007e64 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e58:	4b07      	ldr	r3, [pc, #28]	; (8007e78 <prvGetNextExpireTime+0x44>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	60fb      	str	r3, [r7, #12]
 8007e62:	e001      	b.n	8007e68 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007e64:	2300      	movs	r3, #0
 8007e66:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007e68:	68fb      	ldr	r3, [r7, #12]
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3714      	adds	r7, #20
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	20000c6c 	.word	0x20000c6c

08007e7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007e84:	f7ff fa7e 	bl	8007384 <xTaskGetTickCount>
 8007e88:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007e8a:	4b0b      	ldr	r3, [pc, #44]	; (8007eb8 <prvSampleTimeNow+0x3c>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d205      	bcs.n	8007ea0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007e94:	f000 f936 	bl	8008104 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	601a      	str	r2, [r3, #0]
 8007e9e:	e002      	b.n	8007ea6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007ea6:	4a04      	ldr	r2, [pc, #16]	; (8007eb8 <prvSampleTimeNow+0x3c>)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007eac:	68fb      	ldr	r3, [r7, #12]
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3710      	adds	r7, #16
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	20000c7c 	.word	0x20000c7c

08007ebc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b086      	sub	sp, #24
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	607a      	str	r2, [r7, #4]
 8007ec8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	68ba      	ldr	r2, [r7, #8]
 8007ed2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007eda:	68ba      	ldr	r2, [r7, #8]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d812      	bhi.n	8007f08 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	1ad2      	subs	r2, r2, r3
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	699b      	ldr	r3, [r3, #24]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d302      	bcc.n	8007ef6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	617b      	str	r3, [r7, #20]
 8007ef4:	e01b      	b.n	8007f2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007ef6:	4b10      	ldr	r3, [pc, #64]	; (8007f38 <prvInsertTimerInActiveList+0x7c>)
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	3304      	adds	r3, #4
 8007efe:	4619      	mov	r1, r3
 8007f00:	4610      	mov	r0, r2
 8007f02:	f7fe f94e 	bl	80061a2 <vListInsert>
 8007f06:	e012      	b.n	8007f2e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d206      	bcs.n	8007f1e <prvInsertTimerInActiveList+0x62>
 8007f10:	68ba      	ldr	r2, [r7, #8]
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d302      	bcc.n	8007f1e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	617b      	str	r3, [r7, #20]
 8007f1c:	e007      	b.n	8007f2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f1e:	4b07      	ldr	r3, [pc, #28]	; (8007f3c <prvInsertTimerInActiveList+0x80>)
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	3304      	adds	r3, #4
 8007f26:	4619      	mov	r1, r3
 8007f28:	4610      	mov	r0, r2
 8007f2a:	f7fe f93a 	bl	80061a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007f2e:	697b      	ldr	r3, [r7, #20]
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3718      	adds	r7, #24
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	20000c70 	.word	0x20000c70
 8007f3c:	20000c6c 	.word	0x20000c6c

08007f40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b08e      	sub	sp, #56	; 0x38
 8007f44:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f46:	e0ca      	b.n	80080de <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	da18      	bge.n	8007f80 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007f4e:	1d3b      	adds	r3, r7, #4
 8007f50:	3304      	adds	r3, #4
 8007f52:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d10a      	bne.n	8007f70 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5e:	f383 8811 	msr	BASEPRI, r3
 8007f62:	f3bf 8f6f 	isb	sy
 8007f66:	f3bf 8f4f 	dsb	sy
 8007f6a:	61fb      	str	r3, [r7, #28]
}
 8007f6c:	bf00      	nop
 8007f6e:	e7fe      	b.n	8007f6e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f76:	6850      	ldr	r0, [r2, #4]
 8007f78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f7a:	6892      	ldr	r2, [r2, #8]
 8007f7c:	4611      	mov	r1, r2
 8007f7e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	f2c0 80aa 	blt.w	80080dc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8e:	695b      	ldr	r3, [r3, #20]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d004      	beq.n	8007f9e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f96:	3304      	adds	r3, #4
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f7fe f93b 	bl	8006214 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f9e:	463b      	mov	r3, r7
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7ff ff6b 	bl	8007e7c <prvSampleTimeNow>
 8007fa6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2b09      	cmp	r3, #9
 8007fac:	f200 8097 	bhi.w	80080de <prvProcessReceivedCommands+0x19e>
 8007fb0:	a201      	add	r2, pc, #4	; (adr r2, 8007fb8 <prvProcessReceivedCommands+0x78>)
 8007fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb6:	bf00      	nop
 8007fb8:	08007fe1 	.word	0x08007fe1
 8007fbc:	08007fe1 	.word	0x08007fe1
 8007fc0:	08007fe1 	.word	0x08007fe1
 8007fc4:	08008055 	.word	0x08008055
 8007fc8:	08008069 	.word	0x08008069
 8007fcc:	080080b3 	.word	0x080080b3
 8007fd0:	08007fe1 	.word	0x08007fe1
 8007fd4:	08007fe1 	.word	0x08007fe1
 8007fd8:	08008055 	.word	0x08008055
 8007fdc:	08008069 	.word	0x08008069
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fe6:	f043 0301 	orr.w	r3, r3, #1
 8007fea:	b2da      	uxtb	r2, r3
 8007fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007ff2:	68ba      	ldr	r2, [r7, #8]
 8007ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff6:	699b      	ldr	r3, [r3, #24]
 8007ff8:	18d1      	adds	r1, r2, r3
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ffe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008000:	f7ff ff5c 	bl	8007ebc <prvInsertTimerInActiveList>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d069      	beq.n	80080de <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800800a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800c:	6a1b      	ldr	r3, [r3, #32]
 800800e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008010:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008014:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008018:	f003 0304 	and.w	r3, r3, #4
 800801c:	2b00      	cmp	r3, #0
 800801e:	d05e      	beq.n	80080de <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008020:	68ba      	ldr	r2, [r7, #8]
 8008022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008024:	699b      	ldr	r3, [r3, #24]
 8008026:	441a      	add	r2, r3
 8008028:	2300      	movs	r3, #0
 800802a:	9300      	str	r3, [sp, #0]
 800802c:	2300      	movs	r3, #0
 800802e:	2100      	movs	r1, #0
 8008030:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008032:	f7ff fe05 	bl	8007c40 <xTimerGenericCommand>
 8008036:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008038:	6a3b      	ldr	r3, [r7, #32]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d14f      	bne.n	80080de <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800803e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008042:	f383 8811 	msr	BASEPRI, r3
 8008046:	f3bf 8f6f 	isb	sy
 800804a:	f3bf 8f4f 	dsb	sy
 800804e:	61bb      	str	r3, [r7, #24]
}
 8008050:	bf00      	nop
 8008052:	e7fe      	b.n	8008052 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008056:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800805a:	f023 0301 	bic.w	r3, r3, #1
 800805e:	b2da      	uxtb	r2, r3
 8008060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008062:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008066:	e03a      	b.n	80080de <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800806a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800806e:	f043 0301 	orr.w	r3, r3, #1
 8008072:	b2da      	uxtb	r2, r3
 8008074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008076:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800807a:	68ba      	ldr	r2, [r7, #8]
 800807c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008082:	699b      	ldr	r3, [r3, #24]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d10a      	bne.n	800809e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808c:	f383 8811 	msr	BASEPRI, r3
 8008090:	f3bf 8f6f 	isb	sy
 8008094:	f3bf 8f4f 	dsb	sy
 8008098:	617b      	str	r3, [r7, #20]
}
 800809a:	bf00      	nop
 800809c:	e7fe      	b.n	800809c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800809e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a0:	699a      	ldr	r2, [r3, #24]
 80080a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a4:	18d1      	adds	r1, r2, r3
 80080a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080ac:	f7ff ff06 	bl	8007ebc <prvInsertTimerInActiveList>
					break;
 80080b0:	e015      	b.n	80080de <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80080b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080b8:	f003 0302 	and.w	r3, r3, #2
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d103      	bne.n	80080c8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80080c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080c2:	f000 fbdd 	bl	8008880 <vPortFree>
 80080c6:	e00a      	b.n	80080de <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80080c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080ce:	f023 0301 	bic.w	r3, r3, #1
 80080d2:	b2da      	uxtb	r2, r3
 80080d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80080da:	e000      	b.n	80080de <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80080dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80080de:	4b08      	ldr	r3, [pc, #32]	; (8008100 <prvProcessReceivedCommands+0x1c0>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	1d39      	adds	r1, r7, #4
 80080e4:	2200      	movs	r2, #0
 80080e6:	4618      	mov	r0, r3
 80080e8:	f7fe fb96 	bl	8006818 <xQueueReceive>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f47f af2a 	bne.w	8007f48 <prvProcessReceivedCommands+0x8>
	}
}
 80080f4:	bf00      	nop
 80080f6:	bf00      	nop
 80080f8:	3730      	adds	r7, #48	; 0x30
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	20000c74 	.word	0x20000c74

08008104 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b088      	sub	sp, #32
 8008108:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800810a:	e048      	b.n	800819e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800810c:	4b2d      	ldr	r3, [pc, #180]	; (80081c4 <prvSwitchTimerLists+0xc0>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008116:	4b2b      	ldr	r3, [pc, #172]	; (80081c4 <prvSwitchTimerLists+0xc0>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	3304      	adds	r3, #4
 8008124:	4618      	mov	r0, r3
 8008126:	f7fe f875 	bl	8006214 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6a1b      	ldr	r3, [r3, #32]
 800812e:	68f8      	ldr	r0, [r7, #12]
 8008130:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008138:	f003 0304 	and.w	r3, r3, #4
 800813c:	2b00      	cmp	r3, #0
 800813e:	d02e      	beq.n	800819e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	699b      	ldr	r3, [r3, #24]
 8008144:	693a      	ldr	r2, [r7, #16]
 8008146:	4413      	add	r3, r2
 8008148:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800814a:	68ba      	ldr	r2, [r7, #8]
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	429a      	cmp	r2, r3
 8008150:	d90e      	bls.n	8008170 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	68ba      	ldr	r2, [r7, #8]
 8008156:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	68fa      	ldr	r2, [r7, #12]
 800815c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800815e:	4b19      	ldr	r3, [pc, #100]	; (80081c4 <prvSwitchTimerLists+0xc0>)
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	3304      	adds	r3, #4
 8008166:	4619      	mov	r1, r3
 8008168:	4610      	mov	r0, r2
 800816a:	f7fe f81a 	bl	80061a2 <vListInsert>
 800816e:	e016      	b.n	800819e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008170:	2300      	movs	r3, #0
 8008172:	9300      	str	r3, [sp, #0]
 8008174:	2300      	movs	r3, #0
 8008176:	693a      	ldr	r2, [r7, #16]
 8008178:	2100      	movs	r1, #0
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f7ff fd60 	bl	8007c40 <xTimerGenericCommand>
 8008180:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d10a      	bne.n	800819e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818c:	f383 8811 	msr	BASEPRI, r3
 8008190:	f3bf 8f6f 	isb	sy
 8008194:	f3bf 8f4f 	dsb	sy
 8008198:	603b      	str	r3, [r7, #0]
}
 800819a:	bf00      	nop
 800819c:	e7fe      	b.n	800819c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800819e:	4b09      	ldr	r3, [pc, #36]	; (80081c4 <prvSwitchTimerLists+0xc0>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d1b1      	bne.n	800810c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80081a8:	4b06      	ldr	r3, [pc, #24]	; (80081c4 <prvSwitchTimerLists+0xc0>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80081ae:	4b06      	ldr	r3, [pc, #24]	; (80081c8 <prvSwitchTimerLists+0xc4>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a04      	ldr	r2, [pc, #16]	; (80081c4 <prvSwitchTimerLists+0xc0>)
 80081b4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80081b6:	4a04      	ldr	r2, [pc, #16]	; (80081c8 <prvSwitchTimerLists+0xc4>)
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	6013      	str	r3, [r2, #0]
}
 80081bc:	bf00      	nop
 80081be:	3718      	adds	r7, #24
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	20000c6c 	.word	0x20000c6c
 80081c8:	20000c70 	.word	0x20000c70

080081cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80081d2:	f000 f967 	bl	80084a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80081d6:	4b15      	ldr	r3, [pc, #84]	; (800822c <prvCheckForValidListAndQueue+0x60>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d120      	bne.n	8008220 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80081de:	4814      	ldr	r0, [pc, #80]	; (8008230 <prvCheckForValidListAndQueue+0x64>)
 80081e0:	f7fd ff8e 	bl	8006100 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80081e4:	4813      	ldr	r0, [pc, #76]	; (8008234 <prvCheckForValidListAndQueue+0x68>)
 80081e6:	f7fd ff8b 	bl	8006100 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80081ea:	4b13      	ldr	r3, [pc, #76]	; (8008238 <prvCheckForValidListAndQueue+0x6c>)
 80081ec:	4a10      	ldr	r2, [pc, #64]	; (8008230 <prvCheckForValidListAndQueue+0x64>)
 80081ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80081f0:	4b12      	ldr	r3, [pc, #72]	; (800823c <prvCheckForValidListAndQueue+0x70>)
 80081f2:	4a10      	ldr	r2, [pc, #64]	; (8008234 <prvCheckForValidListAndQueue+0x68>)
 80081f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80081f6:	2300      	movs	r3, #0
 80081f8:	9300      	str	r3, [sp, #0]
 80081fa:	4b11      	ldr	r3, [pc, #68]	; (8008240 <prvCheckForValidListAndQueue+0x74>)
 80081fc:	4a11      	ldr	r2, [pc, #68]	; (8008244 <prvCheckForValidListAndQueue+0x78>)
 80081fe:	2110      	movs	r1, #16
 8008200:	200a      	movs	r0, #10
 8008202:	f7fe f899 	bl	8006338 <xQueueGenericCreateStatic>
 8008206:	4603      	mov	r3, r0
 8008208:	4a08      	ldr	r2, [pc, #32]	; (800822c <prvCheckForValidListAndQueue+0x60>)
 800820a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800820c:	4b07      	ldr	r3, [pc, #28]	; (800822c <prvCheckForValidListAndQueue+0x60>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d005      	beq.n	8008220 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008214:	4b05      	ldr	r3, [pc, #20]	; (800822c <prvCheckForValidListAndQueue+0x60>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	490b      	ldr	r1, [pc, #44]	; (8008248 <prvCheckForValidListAndQueue+0x7c>)
 800821a:	4618      	mov	r0, r3
 800821c:	f7fe fd6c 	bl	8006cf8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008220:	f000 f970 	bl	8008504 <vPortExitCritical>
}
 8008224:	bf00      	nop
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	20000c74 	.word	0x20000c74
 8008230:	20000c44 	.word	0x20000c44
 8008234:	20000c58 	.word	0x20000c58
 8008238:	20000c6c 	.word	0x20000c6c
 800823c:	20000c70 	.word	0x20000c70
 8008240:	20000d20 	.word	0x20000d20
 8008244:	20000c80 	.word	0x20000c80
 8008248:	08008bf4 	.word	0x08008bf4

0800824c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800824c:	b480      	push	{r7}
 800824e:	b085      	sub	sp, #20
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	3b04      	subs	r3, #4
 800825c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008264:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	3b04      	subs	r3, #4
 800826a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	f023 0201 	bic.w	r2, r3, #1
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	3b04      	subs	r3, #4
 800827a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800827c:	4a0c      	ldr	r2, [pc, #48]	; (80082b0 <pxPortInitialiseStack+0x64>)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	3b14      	subs	r3, #20
 8008286:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	3b04      	subs	r3, #4
 8008292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f06f 0202 	mvn.w	r2, #2
 800829a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	3b20      	subs	r3, #32
 80082a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80082a2:	68fb      	ldr	r3, [r7, #12]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3714      	adds	r7, #20
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr
 80082b0:	080082b5 	.word	0x080082b5

080082b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80082b4:	b480      	push	{r7}
 80082b6:	b085      	sub	sp, #20
 80082b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80082ba:	2300      	movs	r3, #0
 80082bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80082be:	4b12      	ldr	r3, [pc, #72]	; (8008308 <prvTaskExitError+0x54>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c6:	d00a      	beq.n	80082de <prvTaskExitError+0x2a>
	__asm volatile
 80082c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082cc:	f383 8811 	msr	BASEPRI, r3
 80082d0:	f3bf 8f6f 	isb	sy
 80082d4:	f3bf 8f4f 	dsb	sy
 80082d8:	60fb      	str	r3, [r7, #12]
}
 80082da:	bf00      	nop
 80082dc:	e7fe      	b.n	80082dc <prvTaskExitError+0x28>
	__asm volatile
 80082de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e2:	f383 8811 	msr	BASEPRI, r3
 80082e6:	f3bf 8f6f 	isb	sy
 80082ea:	f3bf 8f4f 	dsb	sy
 80082ee:	60bb      	str	r3, [r7, #8]
}
 80082f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80082f2:	bf00      	nop
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d0fc      	beq.n	80082f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80082fa:	bf00      	nop
 80082fc:	bf00      	nop
 80082fe:	3714      	adds	r7, #20
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr
 8008308:	2000003c 	.word	0x2000003c
 800830c:	00000000 	.word	0x00000000

08008310 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008310:	4b07      	ldr	r3, [pc, #28]	; (8008330 <pxCurrentTCBConst2>)
 8008312:	6819      	ldr	r1, [r3, #0]
 8008314:	6808      	ldr	r0, [r1, #0]
 8008316:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800831a:	f380 8809 	msr	PSP, r0
 800831e:	f3bf 8f6f 	isb	sy
 8008322:	f04f 0000 	mov.w	r0, #0
 8008326:	f380 8811 	msr	BASEPRI, r0
 800832a:	4770      	bx	lr
 800832c:	f3af 8000 	nop.w

08008330 <pxCurrentTCBConst2>:
 8008330:	20000744 	.word	0x20000744
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008334:	bf00      	nop
 8008336:	bf00      	nop

08008338 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008338:	4808      	ldr	r0, [pc, #32]	; (800835c <prvPortStartFirstTask+0x24>)
 800833a:	6800      	ldr	r0, [r0, #0]
 800833c:	6800      	ldr	r0, [r0, #0]
 800833e:	f380 8808 	msr	MSP, r0
 8008342:	f04f 0000 	mov.w	r0, #0
 8008346:	f380 8814 	msr	CONTROL, r0
 800834a:	b662      	cpsie	i
 800834c:	b661      	cpsie	f
 800834e:	f3bf 8f4f 	dsb	sy
 8008352:	f3bf 8f6f 	isb	sy
 8008356:	df00      	svc	0
 8008358:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800835a:	bf00      	nop
 800835c:	e000ed08 	.word	0xe000ed08

08008360 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b086      	sub	sp, #24
 8008364:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008366:	4b46      	ldr	r3, [pc, #280]	; (8008480 <xPortStartScheduler+0x120>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a46      	ldr	r2, [pc, #280]	; (8008484 <xPortStartScheduler+0x124>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d10a      	bne.n	8008386 <xPortStartScheduler+0x26>
	__asm volatile
 8008370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008374:	f383 8811 	msr	BASEPRI, r3
 8008378:	f3bf 8f6f 	isb	sy
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	613b      	str	r3, [r7, #16]
}
 8008382:	bf00      	nop
 8008384:	e7fe      	b.n	8008384 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008386:	4b3e      	ldr	r3, [pc, #248]	; (8008480 <xPortStartScheduler+0x120>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a3f      	ldr	r2, [pc, #252]	; (8008488 <xPortStartScheduler+0x128>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d10a      	bne.n	80083a6 <xPortStartScheduler+0x46>
	__asm volatile
 8008390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008394:	f383 8811 	msr	BASEPRI, r3
 8008398:	f3bf 8f6f 	isb	sy
 800839c:	f3bf 8f4f 	dsb	sy
 80083a0:	60fb      	str	r3, [r7, #12]
}
 80083a2:	bf00      	nop
 80083a4:	e7fe      	b.n	80083a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80083a6:	4b39      	ldr	r3, [pc, #228]	; (800848c <xPortStartScheduler+0x12c>)
 80083a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	22ff      	movs	r2, #255	; 0xff
 80083b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80083c0:	78fb      	ldrb	r3, [r7, #3]
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80083c8:	b2da      	uxtb	r2, r3
 80083ca:	4b31      	ldr	r3, [pc, #196]	; (8008490 <xPortStartScheduler+0x130>)
 80083cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80083ce:	4b31      	ldr	r3, [pc, #196]	; (8008494 <xPortStartScheduler+0x134>)
 80083d0:	2207      	movs	r2, #7
 80083d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80083d4:	e009      	b.n	80083ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80083d6:	4b2f      	ldr	r3, [pc, #188]	; (8008494 <xPortStartScheduler+0x134>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	3b01      	subs	r3, #1
 80083dc:	4a2d      	ldr	r2, [pc, #180]	; (8008494 <xPortStartScheduler+0x134>)
 80083de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80083e0:	78fb      	ldrb	r3, [r7, #3]
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	005b      	lsls	r3, r3, #1
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80083ea:	78fb      	ldrb	r3, [r7, #3]
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083f2:	2b80      	cmp	r3, #128	; 0x80
 80083f4:	d0ef      	beq.n	80083d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80083f6:	4b27      	ldr	r3, [pc, #156]	; (8008494 <xPortStartScheduler+0x134>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f1c3 0307 	rsb	r3, r3, #7
 80083fe:	2b04      	cmp	r3, #4
 8008400:	d00a      	beq.n	8008418 <xPortStartScheduler+0xb8>
	__asm volatile
 8008402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008406:	f383 8811 	msr	BASEPRI, r3
 800840a:	f3bf 8f6f 	isb	sy
 800840e:	f3bf 8f4f 	dsb	sy
 8008412:	60bb      	str	r3, [r7, #8]
}
 8008414:	bf00      	nop
 8008416:	e7fe      	b.n	8008416 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008418:	4b1e      	ldr	r3, [pc, #120]	; (8008494 <xPortStartScheduler+0x134>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	021b      	lsls	r3, r3, #8
 800841e:	4a1d      	ldr	r2, [pc, #116]	; (8008494 <xPortStartScheduler+0x134>)
 8008420:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008422:	4b1c      	ldr	r3, [pc, #112]	; (8008494 <xPortStartScheduler+0x134>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800842a:	4a1a      	ldr	r2, [pc, #104]	; (8008494 <xPortStartScheduler+0x134>)
 800842c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	b2da      	uxtb	r2, r3
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008436:	4b18      	ldr	r3, [pc, #96]	; (8008498 <xPortStartScheduler+0x138>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a17      	ldr	r2, [pc, #92]	; (8008498 <xPortStartScheduler+0x138>)
 800843c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008440:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008442:	4b15      	ldr	r3, [pc, #84]	; (8008498 <xPortStartScheduler+0x138>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a14      	ldr	r2, [pc, #80]	; (8008498 <xPortStartScheduler+0x138>)
 8008448:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800844c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800844e:	f000 f8dd 	bl	800860c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008452:	4b12      	ldr	r3, [pc, #72]	; (800849c <xPortStartScheduler+0x13c>)
 8008454:	2200      	movs	r2, #0
 8008456:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008458:	f000 f8fc 	bl	8008654 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800845c:	4b10      	ldr	r3, [pc, #64]	; (80084a0 <xPortStartScheduler+0x140>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a0f      	ldr	r2, [pc, #60]	; (80084a0 <xPortStartScheduler+0x140>)
 8008462:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008466:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008468:	f7ff ff66 	bl	8008338 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800846c:	f7ff f854 	bl	8007518 <vTaskSwitchContext>
	prvTaskExitError();
 8008470:	f7ff ff20 	bl	80082b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008474:	2300      	movs	r3, #0
}
 8008476:	4618      	mov	r0, r3
 8008478:	3718      	adds	r7, #24
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	e000ed00 	.word	0xe000ed00
 8008484:	410fc271 	.word	0x410fc271
 8008488:	410fc270 	.word	0x410fc270
 800848c:	e000e400 	.word	0xe000e400
 8008490:	20000d70 	.word	0x20000d70
 8008494:	20000d74 	.word	0x20000d74
 8008498:	e000ed20 	.word	0xe000ed20
 800849c:	2000003c 	.word	0x2000003c
 80084a0:	e000ef34 	.word	0xe000ef34

080084a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
	__asm volatile
 80084aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ae:	f383 8811 	msr	BASEPRI, r3
 80084b2:	f3bf 8f6f 	isb	sy
 80084b6:	f3bf 8f4f 	dsb	sy
 80084ba:	607b      	str	r3, [r7, #4]
}
 80084bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80084be:	4b0f      	ldr	r3, [pc, #60]	; (80084fc <vPortEnterCritical+0x58>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	3301      	adds	r3, #1
 80084c4:	4a0d      	ldr	r2, [pc, #52]	; (80084fc <vPortEnterCritical+0x58>)
 80084c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80084c8:	4b0c      	ldr	r3, [pc, #48]	; (80084fc <vPortEnterCritical+0x58>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d10f      	bne.n	80084f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80084d0:	4b0b      	ldr	r3, [pc, #44]	; (8008500 <vPortEnterCritical+0x5c>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00a      	beq.n	80084f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80084da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084de:	f383 8811 	msr	BASEPRI, r3
 80084e2:	f3bf 8f6f 	isb	sy
 80084e6:	f3bf 8f4f 	dsb	sy
 80084ea:	603b      	str	r3, [r7, #0]
}
 80084ec:	bf00      	nop
 80084ee:	e7fe      	b.n	80084ee <vPortEnterCritical+0x4a>
	}
}
 80084f0:	bf00      	nop
 80084f2:	370c      	adds	r7, #12
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr
 80084fc:	2000003c 	.word	0x2000003c
 8008500:	e000ed04 	.word	0xe000ed04

08008504 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800850a:	4b12      	ldr	r3, [pc, #72]	; (8008554 <vPortExitCritical+0x50>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d10a      	bne.n	8008528 <vPortExitCritical+0x24>
	__asm volatile
 8008512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008516:	f383 8811 	msr	BASEPRI, r3
 800851a:	f3bf 8f6f 	isb	sy
 800851e:	f3bf 8f4f 	dsb	sy
 8008522:	607b      	str	r3, [r7, #4]
}
 8008524:	bf00      	nop
 8008526:	e7fe      	b.n	8008526 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008528:	4b0a      	ldr	r3, [pc, #40]	; (8008554 <vPortExitCritical+0x50>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	3b01      	subs	r3, #1
 800852e:	4a09      	ldr	r2, [pc, #36]	; (8008554 <vPortExitCritical+0x50>)
 8008530:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008532:	4b08      	ldr	r3, [pc, #32]	; (8008554 <vPortExitCritical+0x50>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d105      	bne.n	8008546 <vPortExitCritical+0x42>
 800853a:	2300      	movs	r3, #0
 800853c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	f383 8811 	msr	BASEPRI, r3
}
 8008544:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008546:	bf00      	nop
 8008548:	370c      	adds	r7, #12
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop
 8008554:	2000003c 	.word	0x2000003c
	...

08008560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008560:	f3ef 8009 	mrs	r0, PSP
 8008564:	f3bf 8f6f 	isb	sy
 8008568:	4b15      	ldr	r3, [pc, #84]	; (80085c0 <pxCurrentTCBConst>)
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	f01e 0f10 	tst.w	lr, #16
 8008570:	bf08      	it	eq
 8008572:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008576:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800857a:	6010      	str	r0, [r2, #0]
 800857c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008580:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008584:	f380 8811 	msr	BASEPRI, r0
 8008588:	f3bf 8f4f 	dsb	sy
 800858c:	f3bf 8f6f 	isb	sy
 8008590:	f7fe ffc2 	bl	8007518 <vTaskSwitchContext>
 8008594:	f04f 0000 	mov.w	r0, #0
 8008598:	f380 8811 	msr	BASEPRI, r0
 800859c:	bc09      	pop	{r0, r3}
 800859e:	6819      	ldr	r1, [r3, #0]
 80085a0:	6808      	ldr	r0, [r1, #0]
 80085a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a6:	f01e 0f10 	tst.w	lr, #16
 80085aa:	bf08      	it	eq
 80085ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80085b0:	f380 8809 	msr	PSP, r0
 80085b4:	f3bf 8f6f 	isb	sy
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop
 80085bc:	f3af 8000 	nop.w

080085c0 <pxCurrentTCBConst>:
 80085c0:	20000744 	.word	0x20000744
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80085c4:	bf00      	nop
 80085c6:	bf00      	nop

080085c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
	__asm volatile
 80085ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d2:	f383 8811 	msr	BASEPRI, r3
 80085d6:	f3bf 8f6f 	isb	sy
 80085da:	f3bf 8f4f 	dsb	sy
 80085de:	607b      	str	r3, [r7, #4]
}
 80085e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80085e2:	f7fe fedf 	bl	80073a4 <xTaskIncrementTick>
 80085e6:	4603      	mov	r3, r0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d003      	beq.n	80085f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80085ec:	4b06      	ldr	r3, [pc, #24]	; (8008608 <xPortSysTickHandler+0x40>)
 80085ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085f2:	601a      	str	r2, [r3, #0]
 80085f4:	2300      	movs	r3, #0
 80085f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	f383 8811 	msr	BASEPRI, r3
}
 80085fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008600:	bf00      	nop
 8008602:	3708      	adds	r7, #8
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}
 8008608:	e000ed04 	.word	0xe000ed04

0800860c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800860c:	b480      	push	{r7}
 800860e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008610:	4b0b      	ldr	r3, [pc, #44]	; (8008640 <vPortSetupTimerInterrupt+0x34>)
 8008612:	2200      	movs	r2, #0
 8008614:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008616:	4b0b      	ldr	r3, [pc, #44]	; (8008644 <vPortSetupTimerInterrupt+0x38>)
 8008618:	2200      	movs	r2, #0
 800861a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800861c:	4b0a      	ldr	r3, [pc, #40]	; (8008648 <vPortSetupTimerInterrupt+0x3c>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a0a      	ldr	r2, [pc, #40]	; (800864c <vPortSetupTimerInterrupt+0x40>)
 8008622:	fba2 2303 	umull	r2, r3, r2, r3
 8008626:	099b      	lsrs	r3, r3, #6
 8008628:	4a09      	ldr	r2, [pc, #36]	; (8008650 <vPortSetupTimerInterrupt+0x44>)
 800862a:	3b01      	subs	r3, #1
 800862c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800862e:	4b04      	ldr	r3, [pc, #16]	; (8008640 <vPortSetupTimerInterrupt+0x34>)
 8008630:	2207      	movs	r2, #7
 8008632:	601a      	str	r2, [r3, #0]
}
 8008634:	bf00      	nop
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr
 800863e:	bf00      	nop
 8008640:	e000e010 	.word	0xe000e010
 8008644:	e000e018 	.word	0xe000e018
 8008648:	20000010 	.word	0x20000010
 800864c:	10624dd3 	.word	0x10624dd3
 8008650:	e000e014 	.word	0xe000e014

08008654 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008654:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008664 <vPortEnableVFP+0x10>
 8008658:	6801      	ldr	r1, [r0, #0]
 800865a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800865e:	6001      	str	r1, [r0, #0]
 8008660:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008662:	bf00      	nop
 8008664:	e000ed88 	.word	0xe000ed88

08008668 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008668:	b480      	push	{r7}
 800866a:	b085      	sub	sp, #20
 800866c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800866e:	f3ef 8305 	mrs	r3, IPSR
 8008672:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2b0f      	cmp	r3, #15
 8008678:	d914      	bls.n	80086a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800867a:	4a17      	ldr	r2, [pc, #92]	; (80086d8 <vPortValidateInterruptPriority+0x70>)
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	4413      	add	r3, r2
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008684:	4b15      	ldr	r3, [pc, #84]	; (80086dc <vPortValidateInterruptPriority+0x74>)
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	7afa      	ldrb	r2, [r7, #11]
 800868a:	429a      	cmp	r2, r3
 800868c:	d20a      	bcs.n	80086a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800868e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008692:	f383 8811 	msr	BASEPRI, r3
 8008696:	f3bf 8f6f 	isb	sy
 800869a:	f3bf 8f4f 	dsb	sy
 800869e:	607b      	str	r3, [r7, #4]
}
 80086a0:	bf00      	nop
 80086a2:	e7fe      	b.n	80086a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80086a4:	4b0e      	ldr	r3, [pc, #56]	; (80086e0 <vPortValidateInterruptPriority+0x78>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80086ac:	4b0d      	ldr	r3, [pc, #52]	; (80086e4 <vPortValidateInterruptPriority+0x7c>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d90a      	bls.n	80086ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80086b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b8:	f383 8811 	msr	BASEPRI, r3
 80086bc:	f3bf 8f6f 	isb	sy
 80086c0:	f3bf 8f4f 	dsb	sy
 80086c4:	603b      	str	r3, [r7, #0]
}
 80086c6:	bf00      	nop
 80086c8:	e7fe      	b.n	80086c8 <vPortValidateInterruptPriority+0x60>
	}
 80086ca:	bf00      	nop
 80086cc:	3714      	adds	r7, #20
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop
 80086d8:	e000e3f0 	.word	0xe000e3f0
 80086dc:	20000d70 	.word	0x20000d70
 80086e0:	e000ed0c 	.word	0xe000ed0c
 80086e4:	20000d74 	.word	0x20000d74

080086e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b08a      	sub	sp, #40	; 0x28
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80086f0:	2300      	movs	r3, #0
 80086f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80086f4:	f7fe fd9a 	bl	800722c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80086f8:	4b5b      	ldr	r3, [pc, #364]	; (8008868 <pvPortMalloc+0x180>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d101      	bne.n	8008704 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008700:	f000 f920 	bl	8008944 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008704:	4b59      	ldr	r3, [pc, #356]	; (800886c <pvPortMalloc+0x184>)
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4013      	ands	r3, r2
 800870c:	2b00      	cmp	r3, #0
 800870e:	f040 8093 	bne.w	8008838 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d01d      	beq.n	8008754 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008718:	2208      	movs	r2, #8
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4413      	add	r3, r2
 800871e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f003 0307 	and.w	r3, r3, #7
 8008726:	2b00      	cmp	r3, #0
 8008728:	d014      	beq.n	8008754 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f023 0307 	bic.w	r3, r3, #7
 8008730:	3308      	adds	r3, #8
 8008732:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f003 0307 	and.w	r3, r3, #7
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00a      	beq.n	8008754 <pvPortMalloc+0x6c>
	__asm volatile
 800873e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008742:	f383 8811 	msr	BASEPRI, r3
 8008746:	f3bf 8f6f 	isb	sy
 800874a:	f3bf 8f4f 	dsb	sy
 800874e:	617b      	str	r3, [r7, #20]
}
 8008750:	bf00      	nop
 8008752:	e7fe      	b.n	8008752 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d06e      	beq.n	8008838 <pvPortMalloc+0x150>
 800875a:	4b45      	ldr	r3, [pc, #276]	; (8008870 <pvPortMalloc+0x188>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	429a      	cmp	r2, r3
 8008762:	d869      	bhi.n	8008838 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008764:	4b43      	ldr	r3, [pc, #268]	; (8008874 <pvPortMalloc+0x18c>)
 8008766:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008768:	4b42      	ldr	r3, [pc, #264]	; (8008874 <pvPortMalloc+0x18c>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800876e:	e004      	b.n	800877a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008772:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800877a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	429a      	cmp	r2, r3
 8008782:	d903      	bls.n	800878c <pvPortMalloc+0xa4>
 8008784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d1f1      	bne.n	8008770 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800878c:	4b36      	ldr	r3, [pc, #216]	; (8008868 <pvPortMalloc+0x180>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008792:	429a      	cmp	r2, r3
 8008794:	d050      	beq.n	8008838 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008796:	6a3b      	ldr	r3, [r7, #32]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	2208      	movs	r2, #8
 800879c:	4413      	add	r3, r2
 800879e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80087a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	6a3b      	ldr	r3, [r7, #32]
 80087a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80087a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087aa:	685a      	ldr	r2, [r3, #4]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	1ad2      	subs	r2, r2, r3
 80087b0:	2308      	movs	r3, #8
 80087b2:	005b      	lsls	r3, r3, #1
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d91f      	bls.n	80087f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80087b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4413      	add	r3, r2
 80087be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80087c0:	69bb      	ldr	r3, [r7, #24]
 80087c2:	f003 0307 	and.w	r3, r3, #7
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00a      	beq.n	80087e0 <pvPortMalloc+0xf8>
	__asm volatile
 80087ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ce:	f383 8811 	msr	BASEPRI, r3
 80087d2:	f3bf 8f6f 	isb	sy
 80087d6:	f3bf 8f4f 	dsb	sy
 80087da:	613b      	str	r3, [r7, #16]
}
 80087dc:	bf00      	nop
 80087de:	e7fe      	b.n	80087de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80087e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e2:	685a      	ldr	r2, [r3, #4]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	1ad2      	subs	r2, r2, r3
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80087ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80087f2:	69b8      	ldr	r0, [r7, #24]
 80087f4:	f000 f908 	bl	8008a08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80087f8:	4b1d      	ldr	r3, [pc, #116]	; (8008870 <pvPortMalloc+0x188>)
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	4a1b      	ldr	r2, [pc, #108]	; (8008870 <pvPortMalloc+0x188>)
 8008804:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008806:	4b1a      	ldr	r3, [pc, #104]	; (8008870 <pvPortMalloc+0x188>)
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	4b1b      	ldr	r3, [pc, #108]	; (8008878 <pvPortMalloc+0x190>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	429a      	cmp	r2, r3
 8008810:	d203      	bcs.n	800881a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008812:	4b17      	ldr	r3, [pc, #92]	; (8008870 <pvPortMalloc+0x188>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a18      	ldr	r2, [pc, #96]	; (8008878 <pvPortMalloc+0x190>)
 8008818:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800881a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881c:	685a      	ldr	r2, [r3, #4]
 800881e:	4b13      	ldr	r3, [pc, #76]	; (800886c <pvPortMalloc+0x184>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	431a      	orrs	r2, r3
 8008824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008826:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882a:	2200      	movs	r2, #0
 800882c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800882e:	4b13      	ldr	r3, [pc, #76]	; (800887c <pvPortMalloc+0x194>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	3301      	adds	r3, #1
 8008834:	4a11      	ldr	r2, [pc, #68]	; (800887c <pvPortMalloc+0x194>)
 8008836:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008838:	f7fe fd06 	bl	8007248 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	f003 0307 	and.w	r3, r3, #7
 8008842:	2b00      	cmp	r3, #0
 8008844:	d00a      	beq.n	800885c <pvPortMalloc+0x174>
	__asm volatile
 8008846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884a:	f383 8811 	msr	BASEPRI, r3
 800884e:	f3bf 8f6f 	isb	sy
 8008852:	f3bf 8f4f 	dsb	sy
 8008856:	60fb      	str	r3, [r7, #12]
}
 8008858:	bf00      	nop
 800885a:	e7fe      	b.n	800885a <pvPortMalloc+0x172>
	return pvReturn;
 800885c:	69fb      	ldr	r3, [r7, #28]
}
 800885e:	4618      	mov	r0, r3
 8008860:	3728      	adds	r7, #40	; 0x28
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop
 8008868:	20001938 	.word	0x20001938
 800886c:	2000194c 	.word	0x2000194c
 8008870:	2000193c 	.word	0x2000193c
 8008874:	20001930 	.word	0x20001930
 8008878:	20001940 	.word	0x20001940
 800887c:	20001944 	.word	0x20001944

08008880 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b086      	sub	sp, #24
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d04d      	beq.n	800892e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008892:	2308      	movs	r3, #8
 8008894:	425b      	negs	r3, r3
 8008896:	697a      	ldr	r2, [r7, #20]
 8008898:	4413      	add	r3, r2
 800889a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	685a      	ldr	r2, [r3, #4]
 80088a4:	4b24      	ldr	r3, [pc, #144]	; (8008938 <vPortFree+0xb8>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4013      	ands	r3, r2
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d10a      	bne.n	80088c4 <vPortFree+0x44>
	__asm volatile
 80088ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b2:	f383 8811 	msr	BASEPRI, r3
 80088b6:	f3bf 8f6f 	isb	sy
 80088ba:	f3bf 8f4f 	dsb	sy
 80088be:	60fb      	str	r3, [r7, #12]
}
 80088c0:	bf00      	nop
 80088c2:	e7fe      	b.n	80088c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d00a      	beq.n	80088e2 <vPortFree+0x62>
	__asm volatile
 80088cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d0:	f383 8811 	msr	BASEPRI, r3
 80088d4:	f3bf 8f6f 	isb	sy
 80088d8:	f3bf 8f4f 	dsb	sy
 80088dc:	60bb      	str	r3, [r7, #8]
}
 80088de:	bf00      	nop
 80088e0:	e7fe      	b.n	80088e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	685a      	ldr	r2, [r3, #4]
 80088e6:	4b14      	ldr	r3, [pc, #80]	; (8008938 <vPortFree+0xb8>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4013      	ands	r3, r2
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d01e      	beq.n	800892e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d11a      	bne.n	800892e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	685a      	ldr	r2, [r3, #4]
 80088fc:	4b0e      	ldr	r3, [pc, #56]	; (8008938 <vPortFree+0xb8>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	43db      	mvns	r3, r3
 8008902:	401a      	ands	r2, r3
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008908:	f7fe fc90 	bl	800722c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	685a      	ldr	r2, [r3, #4]
 8008910:	4b0a      	ldr	r3, [pc, #40]	; (800893c <vPortFree+0xbc>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4413      	add	r3, r2
 8008916:	4a09      	ldr	r2, [pc, #36]	; (800893c <vPortFree+0xbc>)
 8008918:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800891a:	6938      	ldr	r0, [r7, #16]
 800891c:	f000 f874 	bl	8008a08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008920:	4b07      	ldr	r3, [pc, #28]	; (8008940 <vPortFree+0xc0>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	3301      	adds	r3, #1
 8008926:	4a06      	ldr	r2, [pc, #24]	; (8008940 <vPortFree+0xc0>)
 8008928:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800892a:	f7fe fc8d 	bl	8007248 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800892e:	bf00      	nop
 8008930:	3718      	adds	r7, #24
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	2000194c 	.word	0x2000194c
 800893c:	2000193c 	.word	0x2000193c
 8008940:	20001948 	.word	0x20001948

08008944 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008944:	b480      	push	{r7}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800894a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800894e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008950:	4b27      	ldr	r3, [pc, #156]	; (80089f0 <prvHeapInit+0xac>)
 8008952:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f003 0307 	and.w	r3, r3, #7
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00c      	beq.n	8008978 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	3307      	adds	r3, #7
 8008962:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f023 0307 	bic.w	r3, r3, #7
 800896a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800896c:	68ba      	ldr	r2, [r7, #8]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	1ad3      	subs	r3, r2, r3
 8008972:	4a1f      	ldr	r2, [pc, #124]	; (80089f0 <prvHeapInit+0xac>)
 8008974:	4413      	add	r3, r2
 8008976:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800897c:	4a1d      	ldr	r2, [pc, #116]	; (80089f4 <prvHeapInit+0xb0>)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008982:	4b1c      	ldr	r3, [pc, #112]	; (80089f4 <prvHeapInit+0xb0>)
 8008984:	2200      	movs	r2, #0
 8008986:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	68ba      	ldr	r2, [r7, #8]
 800898c:	4413      	add	r3, r2
 800898e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008990:	2208      	movs	r2, #8
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	1a9b      	subs	r3, r3, r2
 8008996:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f023 0307 	bic.w	r3, r3, #7
 800899e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	4a15      	ldr	r2, [pc, #84]	; (80089f8 <prvHeapInit+0xb4>)
 80089a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80089a6:	4b14      	ldr	r3, [pc, #80]	; (80089f8 <prvHeapInit+0xb4>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2200      	movs	r2, #0
 80089ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80089ae:	4b12      	ldr	r3, [pc, #72]	; (80089f8 <prvHeapInit+0xb4>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	2200      	movs	r2, #0
 80089b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	68fa      	ldr	r2, [r7, #12]
 80089be:	1ad2      	subs	r2, r2, r3
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80089c4:	4b0c      	ldr	r3, [pc, #48]	; (80089f8 <prvHeapInit+0xb4>)
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	4a0a      	ldr	r2, [pc, #40]	; (80089fc <prvHeapInit+0xb8>)
 80089d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	4a09      	ldr	r2, [pc, #36]	; (8008a00 <prvHeapInit+0xbc>)
 80089da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80089dc:	4b09      	ldr	r3, [pc, #36]	; (8008a04 <prvHeapInit+0xc0>)
 80089de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80089e2:	601a      	str	r2, [r3, #0]
}
 80089e4:	bf00      	nop
 80089e6:	3714      	adds	r7, #20
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr
 80089f0:	20000d78 	.word	0x20000d78
 80089f4:	20001930 	.word	0x20001930
 80089f8:	20001938 	.word	0x20001938
 80089fc:	20001940 	.word	0x20001940
 8008a00:	2000193c 	.word	0x2000193c
 8008a04:	2000194c 	.word	0x2000194c

08008a08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008a10:	4b28      	ldr	r3, [pc, #160]	; (8008ab4 <prvInsertBlockIntoFreeList+0xac>)
 8008a12:	60fb      	str	r3, [r7, #12]
 8008a14:	e002      	b.n	8008a1c <prvInsertBlockIntoFreeList+0x14>
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	60fb      	str	r3, [r7, #12]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d8f7      	bhi.n	8008a16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	68ba      	ldr	r2, [r7, #8]
 8008a30:	4413      	add	r3, r2
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d108      	bne.n	8008a4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	685a      	ldr	r2, [r3, #4]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	441a      	add	r2, r3
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	68ba      	ldr	r2, [r7, #8]
 8008a54:	441a      	add	r2, r3
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d118      	bne.n	8008a90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	4b15      	ldr	r3, [pc, #84]	; (8008ab8 <prvInsertBlockIntoFreeList+0xb0>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d00d      	beq.n	8008a86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	685a      	ldr	r2, [r3, #4]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	441a      	add	r2, r3
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	601a      	str	r2, [r3, #0]
 8008a84:	e008      	b.n	8008a98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008a86:	4b0c      	ldr	r3, [pc, #48]	; (8008ab8 <prvInsertBlockIntoFreeList+0xb0>)
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	601a      	str	r2, [r3, #0]
 8008a8e:	e003      	b.n	8008a98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008a98:	68fa      	ldr	r2, [r7, #12]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d002      	beq.n	8008aa6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008aa6:	bf00      	nop
 8008aa8:	3714      	adds	r7, #20
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr
 8008ab2:	bf00      	nop
 8008ab4:	20001930 	.word	0x20001930
 8008ab8:	20001938 	.word	0x20001938

08008abc <__libc_init_array>:
 8008abc:	b570      	push	{r4, r5, r6, lr}
 8008abe:	4d0d      	ldr	r5, [pc, #52]	; (8008af4 <__libc_init_array+0x38>)
 8008ac0:	4c0d      	ldr	r4, [pc, #52]	; (8008af8 <__libc_init_array+0x3c>)
 8008ac2:	1b64      	subs	r4, r4, r5
 8008ac4:	10a4      	asrs	r4, r4, #2
 8008ac6:	2600      	movs	r6, #0
 8008ac8:	42a6      	cmp	r6, r4
 8008aca:	d109      	bne.n	8008ae0 <__libc_init_array+0x24>
 8008acc:	4d0b      	ldr	r5, [pc, #44]	; (8008afc <__libc_init_array+0x40>)
 8008ace:	4c0c      	ldr	r4, [pc, #48]	; (8008b00 <__libc_init_array+0x44>)
 8008ad0:	f000 f82e 	bl	8008b30 <_init>
 8008ad4:	1b64      	subs	r4, r4, r5
 8008ad6:	10a4      	asrs	r4, r4, #2
 8008ad8:	2600      	movs	r6, #0
 8008ada:	42a6      	cmp	r6, r4
 8008adc:	d105      	bne.n	8008aea <__libc_init_array+0x2e>
 8008ade:	bd70      	pop	{r4, r5, r6, pc}
 8008ae0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ae4:	4798      	blx	r3
 8008ae6:	3601      	adds	r6, #1
 8008ae8:	e7ee      	b.n	8008ac8 <__libc_init_array+0xc>
 8008aea:	f855 3b04 	ldr.w	r3, [r5], #4
 8008aee:	4798      	blx	r3
 8008af0:	3601      	adds	r6, #1
 8008af2:	e7f2      	b.n	8008ada <__libc_init_array+0x1e>
 8008af4:	08009448 	.word	0x08009448
 8008af8:	08009448 	.word	0x08009448
 8008afc:	08009448 	.word	0x08009448
 8008b00:	0800944c 	.word	0x0800944c

08008b04 <memcpy>:
 8008b04:	440a      	add	r2, r1
 8008b06:	4291      	cmp	r1, r2
 8008b08:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b0c:	d100      	bne.n	8008b10 <memcpy+0xc>
 8008b0e:	4770      	bx	lr
 8008b10:	b510      	push	{r4, lr}
 8008b12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b1a:	4291      	cmp	r1, r2
 8008b1c:	d1f9      	bne.n	8008b12 <memcpy+0xe>
 8008b1e:	bd10      	pop	{r4, pc}

08008b20 <memset>:
 8008b20:	4402      	add	r2, r0
 8008b22:	4603      	mov	r3, r0
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d100      	bne.n	8008b2a <memset+0xa>
 8008b28:	4770      	bx	lr
 8008b2a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b2e:	e7f9      	b.n	8008b24 <memset+0x4>

08008b30 <_init>:
 8008b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b32:	bf00      	nop
 8008b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b36:	bc08      	pop	{r3}
 8008b38:	469e      	mov	lr, r3
 8008b3a:	4770      	bx	lr

08008b3c <_fini>:
 8008b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b3e:	bf00      	nop
 8008b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b42:	bc08      	pop	{r3}
 8008b44:	469e      	mov	lr, r3
 8008b46:	4770      	bx	lr
