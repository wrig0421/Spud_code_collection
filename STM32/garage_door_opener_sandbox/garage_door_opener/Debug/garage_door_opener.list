
garage_door_opener.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a7c  08009340  08009340  00019340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009dbc  08009dbc  0002004c  2**0
                  CONTENTS
  4 .ARM          00000008  08009dbc  08009dbc  00019dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009dc4  08009dc4  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009dc4  08009dc4  00019dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009dc8  08009dc8  00019dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  08009dcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ac1c  2000004c  08009e18  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000ac68  08009e18  0002ac68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027b31  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005541  00000000  00000000  00047bad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001de8  00000000  00000000  0004d0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bc8  00000000  00000000  0004eed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002741a  00000000  00000000  00050aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021a5d  00000000  00000000  00077eba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6727  00000000  00000000  00099917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018003e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b74  00000000  00000000  00180094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000004c 	.word	0x2000004c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009328 	.word	0x08009328

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000050 	.word	0x20000050
 80001cc:	08009328 	.word	0x08009328

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <board_wakeup>:
void board_wakeup(void);
void port_wakeup(void);


void board_wakeup(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	SystemClock_Config();
 80004dc:	f000 f81e 	bl	800051c <SystemClock_Config>
	HAL_Init();
 80004e0:	f002 f92f 	bl	8002742 <HAL_Init>
}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <port_wakeup>:


void port_wakeup(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 80004ec:	f000 f90a 	bl	8000704 <MX_GPIO_Init>
	MX_DMA_Init();
 80004f0:	f000 f8e2 	bl	80006b8 <MX_DMA_Init>
	MX_SPI2_Init();
 80004f4:	f000 f872 	bl	80005dc <MX_SPI2_Init>
	MX_USART1_UART_Init();
 80004f8:	f000 f8ae 	bl	8000658 <MX_USART1_UART_Init>
}
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}

08000500 <board_init>:


void board_init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	board_wakeup();
 8000504:	f7ff ffe8 	bl	80004d8 <board_wakeup>
	port_wakeup();
 8000508:	f7ff ffee 	bl	80004e8 <port_wakeup>
	flash_init();
 800050c:	f000 f988 	bl	8000820 <flash_init>
	ssd1351_init();
 8000510:	f001 f888 	bl	8001624 <ssd1351_init>
	keypad_init();
 8000514:	f000 fbe8 	bl	8000ce8 <keypad_init>
	//gt521fx_fingerprint_init();
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b0ae      	sub	sp, #184	; 0xb8
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000526:	2244      	movs	r2, #68	; 0x44
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f008 feb2 	bl	8009294 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000540:	463b      	mov	r3, r7
 8000542:	2260      	movs	r2, #96	; 0x60
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f008 fea4 	bl	8009294 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800054c:	2310      	movs	r3, #16
 800054e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000550:	2301      	movs	r3, #1
 8000552:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800055c:	2360      	movs	r3, #96	; 0x60
 800055e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000562:	2300      	movs	r3, #0
 8000564:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000568:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800056c:	4618      	mov	r0, r3
 800056e:	f003 f8b1 	bl	80036d4 <HAL_RCC_OscConfig>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000578:	f000 f94a 	bl	8000810 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057c:	230f      	movs	r3, #15
 800057e:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000580:	2300      	movs	r3, #0
 8000582:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000584:	2300      	movs	r3, #0
 8000586:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000590:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f003 fcbc 	bl	8003f14 <HAL_RCC_ClockConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80005a2:	f000 f935 	bl	8000810 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80005a6:	2301      	movs	r3, #1
 80005a8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005aa:	2300      	movs	r3, #0
 80005ac:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ae:	463b      	mov	r3, r7
 80005b0:	4618      	mov	r0, r3
 80005b2:	f003 fee7 	bl	8004384 <HAL_RCCEx_PeriphCLKConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80005bc:	f000 f928 	bl	8000810 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005c0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005c4:	f003 f830 	bl	8003628 <HAL_PWREx_ControlVoltageScaling>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005ce:	f000 f91f 	bl	8000810 <Error_Handler>
  }
}
 80005d2:	bf00      	nop
 80005d4:	37b8      	adds	r7, #184	; 0xb8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI2_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80005e0:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <MX_SPI2_Init+0x74>)
 80005e2:	4a1c      	ldr	r2, [pc, #112]	; (8000654 <MX_SPI2_Init+0x78>)
 80005e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80005e6:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <MX_SPI2_Init+0x74>)
 80005e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80005ee:	4b18      	ldr	r3, [pc, #96]	; (8000650 <MX_SPI2_Init+0x74>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80005f4:	4b16      	ldr	r3, [pc, #88]	; (8000650 <MX_SPI2_Init+0x74>)
 80005f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80005fa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005fc:	4b14      	ldr	r3, [pc, #80]	; (8000650 <MX_SPI2_Init+0x74>)
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000602:	4b13      	ldr	r3, [pc, #76]	; (8000650 <MX_SPI2_Init+0x74>)
 8000604:	2200      	movs	r2, #0
 8000606:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000608:	4b11      	ldr	r3, [pc, #68]	; (8000650 <MX_SPI2_Init+0x74>)
 800060a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800060e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <MX_SPI2_Init+0x74>)
 8000612:	2200      	movs	r2, #0
 8000614:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_SPI2_Init+0x74>)
 8000618:	2200      	movs	r2, #0
 800061a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_SPI2_Init+0x74>)
 800061e:	2200      	movs	r2, #0
 8000620:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <MX_SPI2_Init+0x74>)
 8000624:	2200      	movs	r2, #0
 8000626:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000628:	4b09      	ldr	r3, [pc, #36]	; (8000650 <MX_SPI2_Init+0x74>)
 800062a:	2207      	movs	r2, #7
 800062c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <MX_SPI2_Init+0x74>)
 8000630:	2200      	movs	r2, #0
 8000632:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_SPI2_Init+0x74>)
 8000636:	2208      	movs	r2, #8
 8000638:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_SPI2_Init+0x74>)
 800063c:	f004 f9da 	bl	80049f4 <HAL_SPI_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000646:	f000 f8e3 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20001978 	.word	0x20001978
 8000654:	40003800 	.word	0x40003800

08000658 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800065c:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 800065e:	4a15      	ldr	r2, [pc, #84]	; (80006b4 <MX_USART1_UART_Init+0x5c>)
 8000660:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000662:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 8000664:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000668:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000670:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 800067e:	220c      	movs	r2, #12
 8000680:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 8000690:	2200      	movs	r2, #0
 8000692:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 8000696:	2200      	movs	r2, #0
 8000698:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 800069c:	f004 ff9c 	bl	80055d8 <HAL_UART_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006a6:	f000 f8b3 	bl	8000810 <Error_Handler>
	*/
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20001a6c 	.word	0x20001a6c
 80006b4:	40013800 	.word	0x40013800

080006b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <MX_DMA_Init+0x48>)
 80006c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006c2:	4a0f      	ldr	r2, [pc, #60]	; (8000700 <MX_DMA_Init+0x48>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6493      	str	r3, [r2, #72]	; 0x48
 80006ca:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <MX_DMA_Init+0x48>)
 80006cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2105      	movs	r1, #5
 80006da:	200e      	movs	r0, #14
 80006dc:	f002 f946 	bl	800296c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80006e0:	200e      	movs	r0, #14
 80006e2:	f002 f95f 	bl	80029a4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2105      	movs	r1, #5
 80006ea:	200f      	movs	r0, #15
 80006ec:	f002 f93e 	bl	800296c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80006f0:	200f      	movs	r0, #15
 80006f2:	f002 f957 	bl	80029a4 <HAL_NVIC_EnableIRQ>

}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000

08000704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	f107 030c 	add.w	r3, r7, #12
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	4b3a      	ldr	r3, [pc, #232]	; (8000804 <MX_GPIO_Init+0x100>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	4a39      	ldr	r2, [pc, #228]	; (8000804 <MX_GPIO_Init+0x100>)
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000726:	4b37      	ldr	r3, [pc, #220]	; (8000804 <MX_GPIO_Init+0x100>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	4b34      	ldr	r3, [pc, #208]	; (8000804 <MX_GPIO_Init+0x100>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	4a33      	ldr	r2, [pc, #204]	; (8000804 <MX_GPIO_Init+0x100>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073e:	4b31      	ldr	r3, [pc, #196]	; (8000804 <MX_GPIO_Init+0x100>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	4b2e      	ldr	r3, [pc, #184]	; (8000804 <MX_GPIO_Init+0x100>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	4a2d      	ldr	r2, [pc, #180]	; (8000804 <MX_GPIO_Init+0x100>)
 8000750:	f043 0302 	orr.w	r3, r3, #2
 8000754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000756:	4b2b      	ldr	r3, [pc, #172]	; (8000804 <MX_GPIO_Init+0x100>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	f003 0302 	and.w	r3, r3, #2
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8
 8000762:	2200      	movs	r2, #0
 8000764:	f640 110e 	movw	r1, #2318	; 0x90e
 8000768:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076c:	f002 ff36 	bl	80035dc <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_6, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	2144      	movs	r1, #68	; 0x44
 8000774:	4824      	ldr	r0, [pc, #144]	; (8000808 <MX_GPIO_Init+0x104>)
 8000776:	f002 ff31 	bl	80035dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000780:	4822      	ldr	r0, [pc, #136]	; (800080c <MX_GPIO_Init+0x108>)
 8000782:	f002 ff2b 	bl	80035dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 PA8
                           PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8
 8000786:	f640 130e 	movw	r3, #2318	; 0x90e
 800078a:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078c:	2301      	movs	r3, #1
 800078e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000794:	2300      	movs	r3, #0
 8000796:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	4619      	mov	r1, r3
 800079e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a2:	f002 fd89 	bl	80032b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 80007a6:	2344      	movs	r3, #68	; 0x44
 80007a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007aa:	2301      	movs	r3, #1
 80007ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b6:	f107 030c 	add.w	r3, r7, #12
 80007ba:	4619      	mov	r1, r3
 80007bc:	4812      	ldr	r0, [pc, #72]	; (8000808 <MX_GPIO_Init+0x104>)
 80007be:	f002 fd7b 	bl	80032b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 80007c2:	f44f 5399 	mov.w	r3, #4896	; 0x1320
 80007c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c8:	2300      	movs	r3, #0
 80007ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007cc:	2302      	movs	r3, #2
 80007ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	4619      	mov	r1, r3
 80007d6:	480c      	ldr	r0, [pc, #48]	; (8000808 <MX_GPIO_Init+0x104>)
 80007d8:	f002 fd6e 	bl	80032b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	4619      	mov	r1, r3
 80007f4:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_GPIO_Init+0x108>)
 80007f6:	f002 fd5f 	bl	80032b8 <HAL_GPIO_Init>
}
 80007fa:	bf00      	nop
 80007fc:	3720      	adds	r7, #32
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40021000 	.word	0x40021000
 8000808:	48000400 	.word	0x48000400
 800080c:	48000800 	.word	0x48000800

08000810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
	...

08000820 <flash_init>:
uint32_t flash_write(uint32_t address, uint64_t *data, uint32_t num_words);
uint32_t flash_get_page(uint32_t addr);


void flash_init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	flash_read(FLASH_ACCESS_STORAGE_ADDR_START, (uint64_t *)&flash_access_signature_page, sizeof(flash_access_signature_page_t));
 8000824:	2208      	movs	r2, #8
 8000826:	4906      	ldr	r1, [pc, #24]	; (8000840 <flash_init+0x20>)
 8000828:	4806      	ldr	r0, [pc, #24]	; (8000844 <flash_init+0x24>)
 800082a:	f000 f8af 	bl	800098c <flash_read>
	//flash_read(FLASH_ACCESS_STORAGE_ADDR_START, &buf, 1);
	if (UINT32_MAX == flash_access_signature_page.gt_521fx_enroll_count) // uinitialized
 800082e:	4b04      	ldr	r3, [pc, #16]	; (8000840 <flash_init+0x20>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000836:	d101      	bne.n	800083c <flash_init+0x1c>
	{
		flash_access_clear_signature_page();
 8000838:	f000 f806 	bl	8000848 <flash_access_clear_signature_page>
	}
}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20009af4 	.word	0x20009af4
 8000844:	0803c000 	.word	0x0803c000

08000848 <flash_access_clear_signature_page>:


void flash_access_clear_signature_page(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	memset(&flash_access_signature_page, 0, sizeof(flash_access_signature_page_t));
 800084c:	2208      	movs	r2, #8
 800084e:	2100      	movs	r1, #0
 8000850:	4804      	ldr	r0, [pc, #16]	; (8000864 <flash_access_clear_signature_page+0x1c>)
 8000852:	f008 fd1f 	bl	8009294 <memset>
	flash_write(FLASH_ACCESS_STORAGE_ADDR_START, (uint64_t *)&flash_access_signature_page, sizeof(flash_access_signature_page_t));
 8000856:	2208      	movs	r2, #8
 8000858:	4902      	ldr	r1, [pc, #8]	; (8000864 <flash_access_clear_signature_page+0x1c>)
 800085a:	4803      	ldr	r0, [pc, #12]	; (8000868 <flash_access_clear_signature_page+0x20>)
 800085c:	f000 f8b6 	bl	80009cc <flash_write>
}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20009af4 	.word	0x20009af4
 8000868:	0803c000 	.word	0x0803c000

0800086c <flash_access_enroll_update>:


void flash_access_enroll_update(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	flash_access_signature_page.gt_521fx_last_id++;
 8000870:	4b08      	ldr	r3, [pc, #32]	; (8000894 <flash_access_enroll_update+0x28>)
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	3301      	adds	r3, #1
 8000876:	4a07      	ldr	r2, [pc, #28]	; (8000894 <flash_access_enroll_update+0x28>)
 8000878:	6053      	str	r3, [r2, #4]
	flash_access_signature_page.gt_521fx_enroll_count++;
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <flash_access_enroll_update+0x28>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	3301      	adds	r3, #1
 8000880:	4a04      	ldr	r2, [pc, #16]	; (8000894 <flash_access_enroll_update+0x28>)
 8000882:	6013      	str	r3, [r2, #0]
	flash_write(FLASH_ACCESS_STORAGE_ADDR_START, (uint64_t *)&flash_access_signature_page, sizeof(flash_access_signature_page_t));
 8000884:	2208      	movs	r2, #8
 8000886:	4903      	ldr	r1, [pc, #12]	; (8000894 <flash_access_enroll_update+0x28>)
 8000888:	4803      	ldr	r0, [pc, #12]	; (8000898 <flash_access_enroll_update+0x2c>)
 800088a:	f000 f89f 	bl	80009cc <flash_write>
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20009af4 	.word	0x20009af4
 8000898:	0803c000 	.word	0x0803c000

0800089c <flash_access_gt521fx_last_id>:


uint16_t flash_access_gt521fx_last_id(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
	return flash_access_signature_page.gt_521fx_last_id;
 80008a0:	4b03      	ldr	r3, [pc, #12]	; (80008b0 <flash_access_gt521fx_last_id+0x14>)
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	b29b      	uxth	r3, r3
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	20009af4 	.word	0x20009af4

080008b4 <flash_access_gt521fx_remove_last_id>:


void flash_access_gt521fx_remove_last_id(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	flash_access_signature_page.gt_521fx_last_id -= 1; // I don't care if starting at 1
 80008b8:	4b08      	ldr	r3, [pc, #32]	; (80008dc <flash_access_gt521fx_remove_last_id+0x28>)
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	3b01      	subs	r3, #1
 80008be:	4a07      	ldr	r2, [pc, #28]	; (80008dc <flash_access_gt521fx_remove_last_id+0x28>)
 80008c0:	6053      	str	r3, [r2, #4]
	flash_access_signature_page.gt_521fx_enroll_count--;
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <flash_access_gt521fx_remove_last_id+0x28>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	3b01      	subs	r3, #1
 80008c8:	4a04      	ldr	r2, [pc, #16]	; (80008dc <flash_access_gt521fx_remove_last_id+0x28>)
 80008ca:	6013      	str	r3, [r2, #0]
	flash_write(FLASH_ACCESS_STORAGE_ADDR_START, (uint64_t *)&flash_access_signature_page, sizeof(flash_access_signature_page_t));
 80008cc:	2208      	movs	r2, #8
 80008ce:	4903      	ldr	r1, [pc, #12]	; (80008dc <flash_access_gt521fx_remove_last_id+0x28>)
 80008d0:	4803      	ldr	r0, [pc, #12]	; (80008e0 <flash_access_gt521fx_remove_last_id+0x2c>)
 80008d2:	f000 f87b 	bl	80009cc <flash_write>
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20009af4 	.word	0x20009af4
 80008e0:	0803c000 	.word	0x0803c000

080008e4 <flash_access_gt521fx_reset_id_count>:


void flash_access_gt521fx_reset_id_count(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
	flash_access_signature_page.gt_521fx_last_id = 0; // I don't care if starting at 1
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <flash_access_gt521fx_reset_id_count+0x20>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	605a      	str	r2, [r3, #4]
	flash_access_signature_page.gt_521fx_enroll_count = 0;
 80008ee:	4b05      	ldr	r3, [pc, #20]	; (8000904 <flash_access_gt521fx_reset_id_count+0x20>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
	flash_write(FLASH_ACCESS_STORAGE_ADDR_START, (uint64_t *)&flash_access_signature_page, sizeof(flash_access_signature_page_t));
 80008f4:	2208      	movs	r2, #8
 80008f6:	4903      	ldr	r1, [pc, #12]	; (8000904 <flash_access_gt521fx_reset_id_count+0x20>)
 80008f8:	4803      	ldr	r0, [pc, #12]	; (8000908 <flash_access_gt521fx_reset_id_count+0x24>)
 80008fa:	f000 f867 	bl	80009cc <flash_write>

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20009af4 	.word	0x20009af4
 8000908:	0803c000 	.word	0x0803c000

0800090c <flash_get_page>:
	return flash_access_signature_page.gt_521fx_enroll_count;
}


uint32_t flash_get_page(uint32_t addr)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	uint32_t page = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
	if (addr < (FLASH_BASE + FLASH_BANK_SIZE))
 8000918:	4b19      	ldr	r3, [pc, #100]	; (8000980 <flash_get_page+0x74>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	b29b      	uxth	r3, r3
 800091e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000922:	4293      	cmp	r3, r2
 8000924:	d007      	beq.n	8000936 <flash_get_page+0x2a>
 8000926:	4b16      	ldr	r3, [pc, #88]	; (8000980 <flash_get_page+0x74>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	029a      	lsls	r2, r3, #10
 800092c:	4b15      	ldr	r3, [pc, #84]	; (8000984 <flash_get_page+0x78>)
 800092e:	4013      	ands	r3, r2
 8000930:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000934:	e000      	b.n	8000938 <flash_get_page+0x2c>
 8000936:	4b14      	ldr	r3, [pc, #80]	; (8000988 <flash_get_page+0x7c>)
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	4293      	cmp	r3, r2
 800093c:	d905      	bls.n	800094a <flash_get_page+0x3e>
	{
		page = (addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000944:	0adb      	lsrs	r3, r3, #11
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	e013      	b.n	8000972 <flash_get_page+0x66>
	}
	else
	{
		page = (addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 800094a:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <flash_get_page+0x74>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	b29b      	uxth	r3, r3
 8000950:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000954:	4293      	cmp	r3, r2
 8000956:	d007      	beq.n	8000968 <flash_get_page+0x5c>
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <flash_get_page+0x74>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	029a      	lsls	r2, r3, #10
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <flash_get_page+0x78>)
 8000960:	4013      	ands	r3, r2
 8000962:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000966:	e000      	b.n	800096a <flash_get_page+0x5e>
 8000968:	4b07      	ldr	r3, [pc, #28]	; (8000988 <flash_get_page+0x7c>)
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	0adb      	lsrs	r3, r3, #11
 8000970:	60fb      	str	r3, [r7, #12]
	}
	return page;
 8000972:	68fb      	ldr	r3, [r7, #12]
}
 8000974:	4618      	mov	r0, r3
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	1fff75e0 	.word	0x1fff75e0
 8000984:	03fffc00 	.word	0x03fffc00
 8000988:	08040000 	.word	0x08040000

0800098c <flash_read>:


void flash_read(uint32_t address, uint64_t *rx_buf, uint16_t num_words)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	4613      	mov	r3, r2
 8000998:	80fb      	strh	r3, [r7, #6]
	while(1)
	{
		*rx_buf = *(__IO uint64_t *)address;
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009a0:	68b9      	ldr	r1, [r7, #8]
 80009a2:	e9c1 2300 	strd	r2, r3, [r1]
		address += 4;
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	3304      	adds	r3, #4
 80009aa:	60fb      	str	r3, [r7, #12]
		rx_buf++;
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	3308      	adds	r3, #8
 80009b0:	60bb      	str	r3, [r7, #8]
		if (!(num_words--)) break;
 80009b2:	88fb      	ldrh	r3, [r7, #6]
 80009b4:	1e5a      	subs	r2, r3, #1
 80009b6:	80fa      	strh	r2, [r7, #6]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d000      	beq.n	80009be <flash_read+0x32>
		*rx_buf = *(__IO uint64_t *)address;
 80009bc:	e7ed      	b.n	800099a <flash_read+0xe>
		if (!(num_words--)) break;
 80009be:	bf00      	nop
	}
}
 80009c0:	bf00      	nop
 80009c2:	3714      	adds	r7, #20
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <flash_write>:


uint32_t flash_write(uint32_t address, uint64_t *data, uint32_t num_dbls)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b088      	sub	sp, #32
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
	static FLASH_EraseInitTypeDef erase_init_struct;
	uint32_t page_error;

	if ((address + (sizeof(uint64_t) * num_dbls)) > FLASH_ACCESS_STORAGE_ADDR_END)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	00da      	lsls	r2, r3, #3
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	4413      	add	r3, r2
 80009e0:	4a2b      	ldr	r2, [pc, #172]	; (8000a90 <flash_write+0xc4>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d902      	bls.n	80009ec <flash_write+0x20>
	{
		return -1; // error not enough allocated space
 80009e6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ea:	e04c      	b.n	8000a86 <flash_write+0xba>
	}
	HAL_FLASH_Unlock();
 80009ec:	f002 fa4c 	bl	8002e88 <HAL_FLASH_Unlock>

	uint32_t start_page = flash_get_page(address);
 80009f0:	68f8      	ldr	r0, [r7, #12]
 80009f2:	f7ff ff8b 	bl	800090c <flash_get_page>
 80009f6:	61b8      	str	r0, [r7, #24]
	uint32_t end_page = flash_get_page(address + num_dbls * 8);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	00da      	lsls	r2, r3, #3
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4413      	add	r3, r2
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ff83 	bl	800090c <flash_get_page>
 8000a06:	6178      	str	r0, [r7, #20]

	erase_init_struct.Banks = FLASH_BANK_1;
 8000a08:	4b22      	ldr	r3, [pc, #136]	; (8000a94 <flash_write+0xc8>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	605a      	str	r2, [r3, #4]
	erase_init_struct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000a0e:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <flash_write+0xc8>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
	erase_init_struct.Page = start_page;
 8000a14:	4a1f      	ldr	r2, [pc, #124]	; (8000a94 <flash_write+0xc8>)
 8000a16:	69bb      	ldr	r3, [r7, #24]
 8000a18:	6093      	str	r3, [r2, #8]
	erase_init_struct.NbPages = ((end_page - start_page) / FLASH_PAGE_SIZE) + 1;
 8000a1a:	697a      	ldr	r2, [r7, #20]
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	1ad3      	subs	r3, r2, r3
 8000a20:	0adb      	lsrs	r3, r3, #11
 8000a22:	3301      	adds	r3, #1
 8000a24:	4a1b      	ldr	r2, [pc, #108]	; (8000a94 <flash_write+0xc8>)
 8000a26:	60d3      	str	r3, [r2, #12]

	if (HAL_OK != HAL_FLASHEx_Erase(&erase_init_struct, &page_error))
 8000a28:	f107 0310 	add.w	r3, r7, #16
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4819      	ldr	r0, [pc, #100]	; (8000a94 <flash_write+0xc8>)
 8000a30:	f002 fb1c 	bl	800306c <HAL_FLASHEx_Erase>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d003      	beq.n	8000a42 <flash_write+0x76>
	{
		return HAL_FLASH_GetError();
 8000a3a:	f002 fa57 	bl	8002eec <HAL_FLASH_GetError>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	e021      	b.n	8000a86 <flash_write+0xba>
	}
	for (uint32_t i = 0; i < num_dbls; i++)
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
 8000a46:	e017      	b.n	8000a78 <flash_write+0xac>
	{
		//FLASH_TYPEPROGRAM_WORD
		if (HAL_OK == HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data[i]))
 8000a48:	69fb      	ldr	r3, [r7, #28]
 8000a4a:	00db      	lsls	r3, r3, #3
 8000a4c:	68ba      	ldr	r2, [r7, #8]
 8000a4e:	4413      	add	r3, r2
 8000a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a54:	68f9      	ldr	r1, [r7, #12]
 8000a56:	2000      	movs	r0, #0
 8000a58:	f002 f9aa 	bl	8002db0 <HAL_FLASH_Program>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d103      	bne.n	8000a6a <flash_write+0x9e>
		{
			address += 8;
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	3308      	adds	r3, #8
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	e003      	b.n	8000a72 <flash_write+0xa6>
		}
		else
		{
			return HAL_FLASH_GetError();
 8000a6a:	f002 fa3f 	bl	8002eec <HAL_FLASH_GetError>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	e009      	b.n	8000a86 <flash_write+0xba>
	for (uint32_t i = 0; i < num_dbls; i++)
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3301      	adds	r3, #1
 8000a76:	61fb      	str	r3, [r7, #28]
 8000a78:	69fa      	ldr	r2, [r7, #28]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d3e3      	bcc.n	8000a48 <flash_write+0x7c>
		}
	}
	HAL_FLASH_Lock();
 8000a80:	f002 fa24 	bl	8002ecc <HAL_FLASH_Lock>
	return 0;
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3720      	adds	r7, #32
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	0803ffff 	.word	0x0803ffff
 8000a94:	20000068 	.word	0x20000068

08000a98 <gt521fx_nack_flag_set>:
bool g_nack_flag = false;
gt_521fx_error_e g_nack_state = GT521FX_NO_ERROR_ACK;


void gt521fx_nack_flag_set(bool flag)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	71fb      	strb	r3, [r7, #7]
	g_nack_flag = flag;
 8000aa2:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <gt521fx_nack_flag_set+0x1c>)
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	7013      	strb	r3, [r2, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	2000007f 	.word	0x2000007f

08000ab8 <gt521fx_nack_state_set>:


void gt521fx_nack_state_set(gt_521fx_error_e err)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	80fb      	strh	r3, [r7, #6]
	g_nack_state = err;
 8000ac2:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <gt521fx_nack_state_set+0x1c>)
 8000ac4:	88fb      	ldrh	r3, [r7, #6]
 8000ac6:	8013      	strh	r3, [r2, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	20000008 	.word	0x20000008

08000ad8 <gt521fx_nack_flag>:


bool gt521fx_nack_flag(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
	return g_nack_flag;
 8000adc:	4b03      	ldr	r3, [pc, #12]	; (8000aec <gt521fx_nack_flag+0x14>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	2000007f 	.word	0x2000007f

08000af0 <gt521fx_enrolled_fingerprint_count_set>:
	return g_enrolled_fingerprint_count;
}


void gt521fx_enrolled_fingerprint_count_set(uint16_t count)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	80fb      	strh	r3, [r7, #6]
	g_enrolled_fingerprint_count = count;
 8000afa:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <gt521fx_enrolled_fingerprint_count_set+0x1c>)
 8000afc:	88fb      	ldrh	r3, [r7, #6]
 8000afe:	8013      	strh	r3, [r2, #0]
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	20000078 	.word	0x20000078

08000b10 <gt521fx_finger_is_pressed_clear>:
	return g_gt521fx_initialized;
}


void gt521fx_finger_is_pressed_clear(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
	g_finger_is_pressed = false;
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <gt521fx_finger_is_pressed_clear+0x14>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	701a      	strb	r2, [r3, #0]
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	2000007a 	.word	0x2000007a

08000b28 <gt521fx_finger_is_pressed_set>:


void gt521fx_finger_is_pressed_set(bool flag)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
	g_finger_is_pressed = flag;
 8000b32:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <gt521fx_finger_is_pressed_set+0x1c>)
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	7013      	strb	r3, [r2, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	2000007a 	.word	0x2000007a

08000b48 <gt521fx_finger_is_pressed_flag>:


bool gt521fx_finger_is_pressed_flag(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
	return g_finger_is_pressed;
 8000b4c:	4b03      	ldr	r3, [pc, #12]	; (8000b5c <gt521fx_finger_is_pressed_flag+0x14>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	2000007a 	.word	0x2000007a

08000b60 <gt521fx_security_lvl_set>:


void gt521fx_security_lvl_set(uint8_t lvl)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
	g_security_lvl = lvl;
 8000b6a:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <gt521fx_security_lvl_set+0x1c>)
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	7013      	strb	r3, [r2, #0]
}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	2000007e 	.word	0x2000007e

08000b80 <gt521fx_identified_id_set>:


void gt521fx_identified_id_set(uint16_t id)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	80fb      	strh	r3, [r7, #6]
	g_identified_id = id;
 8000b8a:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <gt521fx_identified_id_set+0x1c>)
 8000b8c:	88fb      	ldrh	r3, [r7, #6]
 8000b8e:	8013      	strh	r3, [r2, #0]
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	2000007c 	.word	0x2000007c

08000ba0 <gt521fx_led_on>:
	return g_identified_id;
}


void gt521fx_led_on(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_CMOS_LED, LED_ON);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	2112      	movs	r1, #18
 8000ba8:	4802      	ldr	r0, [pc, #8]	; (8000bb4 <gt521fx_led_on+0x14>)
 8000baa:	f000 fb63 	bl	8001274 <packet_create_cmd_and_send>
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20009afc 	.word	0x20009afc

08000bb8 <gt521fx_open>:
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_CMOS_LED, LED_OFF);
}


void gt521fx_open(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_OPEN, 0);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	4802      	ldr	r0, [pc, #8]	; (8000bcc <gt521fx_open+0x14>)
 8000bc2:	f000 fb57 	bl	8001274 <packet_create_cmd_and_send>
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20009afc 	.word	0x20009afc

08000bd0 <gt521fx_start_enrollment>:
	else return true;
}


void gt521fx_start_enrollment(uint16_t id)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	80fb      	strh	r3, [r7, #6]
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_ENROLL_START, id);
 8000bda:	88fb      	ldrh	r3, [r7, #6]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	2122      	movs	r1, #34	; 0x22
 8000be0:	4803      	ldr	r0, [pc, #12]	; (8000bf0 <gt521fx_start_enrollment+0x20>)
 8000be2:	f000 fb47 	bl	8001274 <packet_create_cmd_and_send>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20009afc 	.word	0x20009afc

08000bf4 <gt521fx_enrollment>:


void gt521fx_enrollment(gt_521fx_enrollment_stage_e stage)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
	gt_521fx_cmd_e cmd_stage = GT521FX_CMD_ENROLL_1;
 8000bfe:	2323      	movs	r3, #35	; 0x23
 8000c00:	73fb      	strb	r3, [r7, #15]
	switch (stage)
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d00c      	beq.n	8000c22 <gt521fx_enrollment+0x2e>
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	dc0d      	bgt.n	8000c28 <gt521fx_enrollment+0x34>
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d002      	beq.n	8000c16 <gt521fx_enrollment+0x22>
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d003      	beq.n	8000c1c <gt521fx_enrollment+0x28>
 8000c14:	e008      	b.n	8000c28 <gt521fx_enrollment+0x34>
	{
		case GT521FX_ENROLLMENT_STAGE_FIRST: // intentionally fall through
			cmd_stage = GT521FX_CMD_ENROLL_1;
 8000c16:	2323      	movs	r3, #35	; 0x23
 8000c18:	73fb      	strb	r3, [r7, #15]
		break;
 8000c1a:	e006      	b.n	8000c2a <gt521fx_enrollment+0x36>
		case GT521FX_ENROLLMENT_STAGE_SECOND: // intentionally fall through
			cmd_stage = GT521FX_CMD_ENROLL_2;
 8000c1c:	2324      	movs	r3, #36	; 0x24
 8000c1e:	73fb      	strb	r3, [r7, #15]
		break;
 8000c20:	e003      	b.n	8000c2a <gt521fx_enrollment+0x36>
		case GT521FX_ENROLLMENT_STAGE_THIRD: // intentionally fall through
			cmd_stage = GT521FX_CMD_ENROLL_3;
 8000c22:	2325      	movs	r3, #37	; 0x25
 8000c24:	73fb      	strb	r3, [r7, #15]
		break;
 8000c26:	e000      	b.n	8000c2a <gt521fx_enrollment+0x36>
		default:
			while(1);
 8000c28:	e7fe      	b.n	8000c28 <gt521fx_enrollment+0x34>
		break;
	}
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, cmd_stage, 0);
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4803      	ldr	r0, [pc, #12]	; (8000c40 <gt521fx_enrollment+0x4c>)
 8000c32:	f000 fb1f 	bl	8001274 <packet_create_cmd_and_send>
}
 8000c36:	bf00      	nop
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20009afc 	.word	0x20009afc

08000c44 <gt521fx_finger_is_pressed>:
	else return true;
}
*/

void gt521fx_finger_is_pressed(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_IS_PRESS_FINGER, 0);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2126      	movs	r1, #38	; 0x26
 8000c4c:	4802      	ldr	r0, [pc, #8]	; (8000c58 <gt521fx_finger_is_pressed+0x14>)
 8000c4e:	f000 fb11 	bl	8001274 <packet_create_cmd_and_send>
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20009afc 	.word	0x20009afc

08000c5c <gt521fx_delete_all_fingerprints>:


void gt521fx_delete_all_fingerprints(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_DELETE_ALL, 0);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2141      	movs	r1, #65	; 0x41
 8000c64:	4802      	ldr	r0, [pc, #8]	; (8000c70 <gt521fx_delete_all_fingerprints+0x14>)
 8000c66:	f000 fb05 	bl	8001274 <packet_create_cmd_and_send>
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20009afc 	.word	0x20009afc

08000c74 <gt521fx_delete_fingerprint>:


void gt521fx_delete_fingerprint(uint16_t id)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	80fb      	strh	r3, [r7, #6]
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_DELETE_ID, id);
 8000c7e:	88fb      	ldrh	r3, [r7, #6]
 8000c80:	461a      	mov	r2, r3
 8000c82:	2140      	movs	r1, #64	; 0x40
 8000c84:	4803      	ldr	r0, [pc, #12]	; (8000c94 <gt521fx_delete_fingerprint+0x20>)
 8000c86:	f000 faf5 	bl	8001274 <packet_create_cmd_and_send>
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20009afc 	.word	0x20009afc

08000c98 <gt521fx_fingerprint_identify>:
	else return true;
}


bool gt521fx_fingerprint_identify(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_IDENTIFY, 0);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2151      	movs	r1, #81	; 0x51
 8000ca0:	480a      	ldr	r0, [pc, #40]	; (8000ccc <gt521fx_fingerprint_identify+0x34>)
 8000ca2:	f000 fae7 	bl	8001274 <packet_create_cmd_and_send>
	while(!pkt_received());
 8000ca6:	bf00      	nop
 8000ca8:	f000 fb76 	bl	8001398 <pkt_received>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d0fa      	beq.n	8000ca8 <gt521fx_fingerprint_identify+0x10>
	clear_pkt_received_flag();
 8000cb2:	f000 fb85 	bl	80013c0 <clear_pkt_received_flag>
	if (gt521fx_nack_flag()) return false;
 8000cb6:	f7ff ff0f 	bl	8000ad8 <gt521fx_nack_flag>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <gt521fx_fingerprint_identify+0x2c>
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	e000      	b.n	8000cc6 <gt521fx_fingerprint_identify+0x2e>
	else return true;
 8000cc4:	2301      	movs	r3, #1
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20009afc 	.word	0x20009afc

08000cd0 <gt521fx_capture_finger>:


void gt521fx_capture_finger(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_CAPTURE_FINGER, 0);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2160      	movs	r1, #96	; 0x60
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <gt521fx_capture_finger+0x14>)
 8000cda:	f000 facb 	bl	8001274 <packet_create_cmd_and_send>
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20009afc 	.word	0x20009afc

08000ce8 <keypad_init>:
uint8_t g_keys[KEYPAD_NUM_ROWS][KEYPAD_NUM_COLS];
uint8_t g_password[KEYPAD_PASSWORD_LENGTH] = {4, 4, 2, 6, 6, 1, 3, 3};
uint8_t g_last_button_pressed = 0;

void keypad_init(void)
{
 8000ce8:	b490      	push	{r4, r7}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
	// '*' = 10, '0' = 11, '#' = 12
	uint8_t setting = 1;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	71fb      	strb	r3, [r7, #7]
	for (keypad_row_e row = KEYPAD_ROW_FIRST; row < KEYPAD_NUM_ROWS; row++)
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	71bb      	strb	r3, [r7, #6]
 8000cf6:	e017      	b.n	8000d28 <keypad_init+0x40>
	{
		for (keypad_col_e col = KEYPAD_COL_FIRST; col < KEYPAD_NUM_COLS; col++)
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	717b      	strb	r3, [r7, #5]
 8000cfc:	e00e      	b.n	8000d1c <keypad_init+0x34>
		{
			g_keys[row][col] = setting++;
 8000cfe:	79fa      	ldrb	r2, [r7, #7]
 8000d00:	1c53      	adds	r3, r2, #1
 8000d02:	71fb      	strb	r3, [r7, #7]
 8000d04:	79b9      	ldrb	r1, [r7, #6]
 8000d06:	7978      	ldrb	r0, [r7, #5]
 8000d08:	4c0c      	ldr	r4, [pc, #48]	; (8000d3c <keypad_init+0x54>)
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	440b      	add	r3, r1
 8000d10:	4423      	add	r3, r4
 8000d12:	4403      	add	r3, r0
 8000d14:	701a      	strb	r2, [r3, #0]
		for (keypad_col_e col = KEYPAD_COL_FIRST; col < KEYPAD_NUM_COLS; col++)
 8000d16:	797b      	ldrb	r3, [r7, #5]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	717b      	strb	r3, [r7, #5]
 8000d1c:	797b      	ldrb	r3, [r7, #5]
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d9ed      	bls.n	8000cfe <keypad_init+0x16>
	for (keypad_row_e row = KEYPAD_ROW_FIRST; row < KEYPAD_NUM_ROWS; row++)
 8000d22:	79bb      	ldrb	r3, [r7, #6]
 8000d24:	3301      	adds	r3, #1
 8000d26:	71bb      	strb	r3, [r7, #6]
 8000d28:	79bb      	ldrb	r3, [r7, #6]
 8000d2a:	2b03      	cmp	r3, #3
 8000d2c:	d9e4      	bls.n	8000cf8 <keypad_init+0x10>
		}
	}
}
 8000d2e:	bf00      	nop
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bc90      	pop	{r4, r7}
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20009b08 	.word	0x20009b08

08000d40 <keypad_password_check>:


bool keypad_password_check(uint8_t *user_input)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < KEYPAD_PASSWORD_LENGTH; i++)
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	e00e      	b.n	8000d6c <keypad_password_check+0x2c>
	{
		if (g_password[i] != user_input[i]) return false;
 8000d4e:	4a0c      	ldr	r2, [pc, #48]	; (8000d80 <keypad_password_check+0x40>)
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	4413      	add	r3, r2
 8000d54:	781a      	ldrb	r2, [r3, #0]
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	6879      	ldr	r1, [r7, #4]
 8000d5a:	440b      	add	r3, r1
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d001      	beq.n	8000d66 <keypad_password_check+0x26>
 8000d62:	2300      	movs	r3, #0
 8000d64:	e006      	b.n	8000d74 <keypad_password_check+0x34>
	for(int i = 0; i < KEYPAD_PASSWORD_LENGTH; i++)
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	2b07      	cmp	r3, #7
 8000d70:	dded      	ble.n	8000d4e <keypad_password_check+0xe>
	}
	return true;
 8000d72:	2301      	movs	r3, #1
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	2000000c 	.word	0x2000000c

08000d84 <keypad_lookup>:


uint8_t keypad_lookup(keypad_row_e row, keypad_col_e col)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	460a      	mov	r2, r1
 8000d8e:	71fb      	strb	r3, [r7, #7]
 8000d90:	4613      	mov	r3, r2
 8000d92:	71bb      	strb	r3, [r7, #6]
	return (g_keys[row][col]); // '*' = 10, '0' = 11, '#' = 12
 8000d94:	79fa      	ldrb	r2, [r7, #7]
 8000d96:	79b9      	ldrb	r1, [r7, #6]
 8000d98:	4806      	ldr	r0, [pc, #24]	; (8000db4 <keypad_lookup+0x30>)
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	4413      	add	r3, r2
 8000da0:	4403      	add	r3, r0
 8000da2:	440b      	add	r3, r1
 8000da4:	781b      	ldrb	r3, [r3, #0]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20009b08 	.word	0x20009b08

08000db8 <keypad_button_pressed>:


uint8_t keypad_button_pressed(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
	return g_last_button_pressed;
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <keypad_button_pressed+0x14>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	20000080 	.word	0x20000080

08000dd0 <keypad_scan>:

keypad_col_e col_index = KEYPAD_COL_ONE;
keypad_row_e row_index = KEYPAD_ROW_ONE;

bool keypad_scan(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
	bool ret_val = false;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	73fb      	strb	r3, [r7, #15]
	uint16_t row_pin = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	81bb      	strh	r3, [r7, #12]
	uint16_t col_pin = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	817b      	strh	r3, [r7, #10]
	GPIO_TypeDef *col_port = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	607b      	str	r3, [r7, #4]
	//static keypad_col_e col_index = KEYPAD_COL_ONE;
	//static keypad_row_e row_index = KEYPAD_ROW_ONE;
	switch(row_index)
 8000de6:	4b49      	ldr	r3, [pc, #292]	; (8000f0c <keypad_scan+0x13c>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	2b03      	cmp	r3, #3
 8000dec:	d819      	bhi.n	8000e22 <keypad_scan+0x52>
 8000dee:	a201      	add	r2, pc, #4	; (adr r2, 8000df4 <keypad_scan+0x24>)
 8000df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df4:	08000e05 	.word	0x08000e05
 8000df8:	08000e0b 	.word	0x08000e0b
 8000dfc:	08000e13 	.word	0x08000e13
 8000e00:	08000e1b 	.word	0x08000e1b
	{
		case KEYPAD_ROW_ONE: row_pin = KEYPAD_ROW_ONE_PIN; break;
 8000e04:	2320      	movs	r3, #32
 8000e06:	81bb      	strh	r3, [r7, #12]
 8000e08:	e00c      	b.n	8000e24 <keypad_scan+0x54>
		case KEYPAD_ROW_TWO: row_pin = KEYPAD_ROW_TWO_PIN; break;
 8000e0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e0e:	81bb      	strh	r3, [r7, #12]
 8000e10:	e008      	b.n	8000e24 <keypad_scan+0x54>
		case KEYPAD_ROW_THREE: row_pin = KEYPAD_ROW_THREE_PIN; break;
 8000e12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e16:	81bb      	strh	r3, [r7, #12]
 8000e18:	e004      	b.n	8000e24 <keypad_scan+0x54>
		case KEYPAD_ROW_FOUR: row_pin = KEYPAD_ROW_FOUR_PIN; break;
 8000e1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e1e:	81bb      	strh	r3, [r7, #12]
 8000e20:	e000      	b.n	8000e24 <keypad_scan+0x54>
		default: while(1); break;
 8000e22:	e7fe      	b.n	8000e22 <keypad_scan+0x52>
	}
	switch(col_index)
 8000e24:	4b3a      	ldr	r3, [pc, #232]	; (8000f10 <keypad_scan+0x140>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d011      	beq.n	8000e50 <keypad_scan+0x80>
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	dc15      	bgt.n	8000e5c <keypad_scan+0x8c>
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d002      	beq.n	8000e3a <keypad_scan+0x6a>
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d006      	beq.n	8000e46 <keypad_scan+0x76>
 8000e38:	e010      	b.n	8000e5c <keypad_scan+0x8c>
	{
		case KEYPAD_COL_ONE:
			col_pin = KEYPAD_COL_ONE_PIN;
 8000e3a:	2304      	movs	r3, #4
 8000e3c:	817b      	strh	r3, [r7, #10]
			col_port = GPIOA;
 8000e3e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e42:	607b      	str	r3, [r7, #4]
		break;
 8000e44:	e00b      	b.n	8000e5e <keypad_scan+0x8e>
		case KEYPAD_COL_TWO:
			col_pin = KEYPAD_COL_TWO_PIN;
 8000e46:	2304      	movs	r3, #4
 8000e48:	817b      	strh	r3, [r7, #10]
			col_port = GPIOB;
 8000e4a:	4b32      	ldr	r3, [pc, #200]	; (8000f14 <keypad_scan+0x144>)
 8000e4c:	607b      	str	r3, [r7, #4]
		break;
 8000e4e:	e006      	b.n	8000e5e <keypad_scan+0x8e>
		case KEYPAD_COL_THREE:
			col_pin = KEYPAD_COL_THREE_PIN;
 8000e50:	2308      	movs	r3, #8
 8000e52:	817b      	strh	r3, [r7, #10]
			col_port = GPIOA;
 8000e54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e58:	607b      	str	r3, [r7, #4]
		break;
 8000e5a:	e000      	b.n	8000e5e <keypad_scan+0x8e>
		default: while(1); break;
 8000e5c:	e7fe      	b.n	8000e5c <keypad_scan+0x8c>
	}
	HAL_GPIO_WritePin(col_port, col_pin, GPIO_PIN_SET);
 8000e5e:	897b      	ldrh	r3, [r7, #10]
 8000e60:	2201      	movs	r2, #1
 8000e62:	4619      	mov	r1, r3
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f002 fbb9 	bl	80035dc <HAL_GPIO_WritePin>
	if (GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOB, row_pin))
 8000e6a:	89bb      	ldrh	r3, [r7, #12]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4829      	ldr	r0, [pc, #164]	; (8000f14 <keypad_scan+0x144>)
 8000e70:	f002 fb9c 	bl	80035ac <HAL_GPIO_ReadPin>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d10a      	bne.n	8000e90 <keypad_scan+0xc0>
	{
		while (GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOB, row_pin));
 8000e7a:	bf00      	nop
 8000e7c:	89bb      	ldrh	r3, [r7, #12]
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4824      	ldr	r0, [pc, #144]	; (8000f14 <keypad_scan+0x144>)
 8000e82:	f002 fb93 	bl	80035ac <HAL_GPIO_ReadPin>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d0f7      	beq.n	8000e7c <keypad_scan+0xac>
		ret_val = true;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	73fb      	strb	r3, [r7, #15]
	}
	HAL_GPIO_WritePin(col_port, col_pin, GPIO_PIN_RESET);
 8000e90:	897b      	ldrh	r3, [r7, #10]
 8000e92:	2200      	movs	r2, #0
 8000e94:	4619      	mov	r1, r3
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f002 fba0 	bl	80035dc <HAL_GPIO_WritePin>
	if (ret_val)
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d012      	beq.n	8000ec8 <keypad_scan+0xf8>
	{
		g_last_button_pressed = keypad_lookup(row_index, col_index);
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <keypad_scan+0x13c>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	4a1a      	ldr	r2, [pc, #104]	; (8000f10 <keypad_scan+0x140>)
 8000ea8:	7812      	ldrb	r2, [r2, #0]
 8000eaa:	4611      	mov	r1, r2
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ff69 	bl	8000d84 <keypad_lookup>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <keypad_scan+0x148>)
 8000eb8:	701a      	strb	r2, [r3, #0]
		row_index = KEYPAD_ROW_ONE;
 8000eba:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <keypad_scan+0x13c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	701a      	strb	r2, [r3, #0]
		col_index = KEYPAD_COL_ONE;
 8000ec0:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <keypad_scan+0x140>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
 8000ec6:	e01b      	b.n	8000f00 <keypad_scan+0x130>
	}
	else if (KEYPAD_ROW_FOUR == row_index++)
 8000ec8:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <keypad_scan+0x13c>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	1c5a      	adds	r2, r3, #1
 8000ece:	b2d1      	uxtb	r1, r2
 8000ed0:	4a0e      	ldr	r2, [pc, #56]	; (8000f0c <keypad_scan+0x13c>)
 8000ed2:	7011      	strb	r1, [r2, #0]
 8000ed4:	2b03      	cmp	r3, #3
 8000ed6:	d113      	bne.n	8000f00 <keypad_scan+0x130>
	{
		if (KEYPAD_COL_THREE == col_index)
 8000ed8:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <keypad_scan+0x140>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d106      	bne.n	8000eee <keypad_scan+0x11e>
		{
			row_index = KEYPAD_ROW_ONE;
 8000ee0:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <keypad_scan+0x13c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
			col_index = KEYPAD_COL_ONE;
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <keypad_scan+0x140>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
 8000eec:	e008      	b.n	8000f00 <keypad_scan+0x130>
		}
		else
		{
			row_index = KEYPAD_ROW_ONE;
 8000eee:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <keypad_scan+0x13c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
			col_index++;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <keypad_scan+0x140>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <keypad_scan+0x140>)
 8000efe:	701a      	strb	r2, [r3, #0]
		}
	}
	//else row_index++;
	return ret_val;
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
		{
			return key_row;
		}
	}
	*/
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000082 	.word	0x20000082
 8000f10:	20000081 	.word	0x20000081
 8000f14:	48000400 	.word	0x48000400
 8000f18:	20000080 	.word	0x20000080

08000f1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d101      	bne.n	8000f32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f2e:	f001 fc21 	bl	8002774 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40012c00 	.word	0x40012c00

08000f40 <main>:


int main(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	board_init();
 8000f44:	f7ff fadc 	bl	8000500 <board_init>
	HAL_Delay(5000);
	board_init_set_wkup_src();
	HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE);
#endif
	//HAL_PWR_EnterSTANDBYMode();
	osKernelInitialize();
 8000f48:	f005 f9c2 	bl	80062d0 <osKernelInitialize>
	task_create();
 8000f4c:	f000 ffcc 	bl	8001ee8 <task_create>
	osKernelStart();
 8000f50:	f005 f9e2 	bl	8006318 <osKernelStart>

	while(1); // should never reach this...
 8000f54:	e7fe      	b.n	8000f54 <main+0x14>
	...

08000f58 <packet_queue_init>:


void packet_rsp_set(void);

void packet_queue_init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
	sensor_rx_queueHandle = osMessageQueueNew(GT521FX_RX_QUEUE_DEPTH, sizeof( pkt_t ), &sensor_rx_queue_attributes);
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	; (8000f94 <packet_queue_init+0x3c>)
 8000f5e:	210c      	movs	r1, #12
 8000f60:	2010      	movs	r0, #16
 8000f62:	f005 faac 	bl	80064be <osMessageQueueNew>
 8000f66:	4603      	mov	r3, r0
 8000f68:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <packet_queue_init+0x40>)
 8000f6a:	6013      	str	r3, [r2, #0]
	sensor_tx_queueHandle = osMessageQueueNew(GT521FX_TX_QUEUE_DEPTH, sizeof( pkt_t ), &sensor_tx_queue_attributes);
 8000f6c:	4a0b      	ldr	r2, [pc, #44]	; (8000f9c <packet_queue_init+0x44>)
 8000f6e:	210c      	movs	r1, #12
 8000f70:	2010      	movs	r0, #16
 8000f72:	f005 faa4 	bl	80064be <osMessageQueueNew>
 8000f76:	4603      	mov	r3, r0
 8000f78:	4a09      	ldr	r2, [pc, #36]	; (8000fa0 <packet_queue_init+0x48>)
 8000f7a:	6013      	str	r3, [r2, #0]
	gt521fx_rx_queue.handle = sensor_rx_queueHandle;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <packet_queue_init+0x40>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a08      	ldr	r2, [pc, #32]	; (8000fa4 <packet_queue_init+0x4c>)
 8000f82:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	gt521fx_tx_queue.handle = sensor_tx_queueHandle;
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <packet_queue_init+0x48>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a07      	ldr	r2, [pc, #28]	; (8000fa8 <packet_queue_init+0x50>)
 8000f8c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	//sensor_rx_queue = osMessageQueueNew(SNS_RX_QUEUE_DEPTH, sizeof( pkt_t ), NULL);
	//sensor_tx_queue = osMessageQueueNew(SNS_TX_QUEUE_DEPTH, sizeof( pkt_t ), NULL);
}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	08009c8c 	.word	0x08009c8c
 8000f98:	20009ec0 	.word	0x20009ec0
 8000f9c:	08009ca4 	.word	0x08009ca4
 8000fa0:	20009da8 	.word	0x20009da8
 8000fa4:	20009c24 	.word	0x20009c24
 8000fa8:	20009dac 	.word	0x20009dac

08000fac <packet_queue_get_count>:

uint32_t packet_queue_get_count(pkt_queue_e selection)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
	switch(selection)
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d002      	beq.n	8000fc2 <packet_queue_get_count+0x16>
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d008      	beq.n	8000fd2 <packet_queue_get_count+0x26>
 8000fc0:	e00f      	b.n	8000fe2 <packet_queue_get_count+0x36>
	{
		case PKT_QUEUE_GT521FX_RX: return osMessageQueueGetCount(gt521fx_rx_queue.handle);
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <packet_queue_get_count+0x40>)
 8000fc4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f005 fba9 	bl	8006720 <osMessageQueueGetCount>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e008      	b.n	8000fe4 <packet_queue_get_count+0x38>
		case PKT_QUEUE_GT521FX_TX: return osMessageQueueGetCount(gt521fx_tx_queue.handle);
 8000fd2:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <packet_queue_get_count+0x44>)
 8000fd4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f005 fba1 	bl	8006720 <osMessageQueueGetCount>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e000      	b.n	8000fe4 <packet_queue_get_count+0x38>
		default: while(1);
 8000fe2:	e7fe      	b.n	8000fe2 <packet_queue_get_count+0x36>
	}
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20009c24 	.word	0x20009c24
 8000ff0:	20009dac 	.word	0x20009dac

08000ff4 <packet_queue_get_queue_handle>:



osMessageQueueId_t packet_queue_get_queue_handle(pkt_queue_e selection)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
	switch(selection)
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d002      	beq.n	800100a <packet_queue_get_queue_handle+0x16>
 8001004:	2b01      	cmp	r3, #1
 8001006:	d004      	beq.n	8001012 <packet_queue_get_queue_handle+0x1e>
 8001008:	e007      	b.n	800101a <packet_queue_get_queue_handle+0x26>
	{
		case PKT_QUEUE_GT521FX_RX: return gt521fx_rx_queue.handle;
 800100a:	4b07      	ldr	r3, [pc, #28]	; (8001028 <packet_queue_get_queue_handle+0x34>)
 800100c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001010:	e004      	b.n	800101c <packet_queue_get_queue_handle+0x28>
		case PKT_QUEUE_GT521FX_TX: return gt521fx_tx_queue.handle;
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <packet_queue_get_queue_handle+0x38>)
 8001014:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001018:	e000      	b.n	800101c <packet_queue_get_queue_handle+0x28>
		default: while(1);
 800101a:	e7fe      	b.n	800101a <packet_queue_get_queue_handle+0x26>
	}
}
 800101c:	4618      	mov	r0, r3
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	20009c24 	.word	0x20009c24
 800102c:	20009dac 	.word	0x20009dac

08001030 <packet_enqueue>:


void packet_enqueue(p_packet_handle_t pkt_handle, pkt_src_dst_t dst)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	70fb      	strb	r3, [r7, #3]
	// todo add blocking w/ parameter
	switch (dst)
 800103c:	78fb      	ldrb	r3, [r7, #3]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d002      	beq.n	8001048 <packet_enqueue+0x18>
 8001042:	2b01      	cmp	r3, #1
 8001044:	d00c      	beq.n	8001060 <packet_enqueue+0x30>
 8001046:	e017      	b.n	8001078 <packet_enqueue+0x48>
	{
		case PKT_SRC_DST_SNS_TX:
			//if (osOK != osMessageQueuePut(sensor_tx_queue, pkt_handle, 0, 0)) while(1);
			if (osOK != osMessageQueuePut(gt521fx_tx_queue.handle, pkt_handle, 0, 0))
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <packet_enqueue+0x58>)
 800104a:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800104e:	2300      	movs	r3, #0
 8001050:	2200      	movs	r2, #0
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	f005 faa6 	bl	80065a4 <osMessageQueuePut>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d00d      	beq.n	800107a <packet_enqueue+0x4a>
				{
					while(1);
 800105e:	e7fe      	b.n	800105e <packet_enqueue+0x2e>
				}

		break;
		case PKT_SRC_DST_SNS_RX:
			//if (osOK != osMessageQueuePut(sensor_rx_queue, pkt_handle, 0, 0)) while(1); // queue full?
			if (osOK != osMessageQueuePut(gt521fx_rx_queue.handle, pkt_handle, 0, 0))
 8001060:	4b0a      	ldr	r3, [pc, #40]	; (800108c <packet_enqueue+0x5c>)
 8001062:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8001066:	2300      	movs	r3, #0
 8001068:	2200      	movs	r2, #0
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	f005 fa9a 	bl	80065a4 <osMessageQueuePut>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <packet_enqueue+0x4e>
				{
					while(1); // queue full?
 8001076:	e7fe      	b.n	8001076 <packet_enqueue+0x46>
				}

		break;
		default: while(1); // wtf
 8001078:	e7fe      	b.n	8001078 <packet_enqueue+0x48>
		break;
 800107a:	bf00      	nop
 800107c:	e000      	b.n	8001080 <packet_enqueue+0x50>
		break;
 800107e:	bf00      	nop
		break;
	}
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20009dac 	.word	0x20009dac
 800108c:	20009c24 	.word	0x20009c24

08001090 <packet_dequeue>:


pkt_t test_pkt;
void packet_dequeue(p_packet_handle_t pkt_handle, pkt_src_dst_t src)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	70fb      	strb	r3, [r7, #3]
	switch(src)
 800109c:	78fb      	ldrb	r3, [r7, #3]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d002      	beq.n	80010a8 <packet_dequeue+0x18>
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d00d      	beq.n	80010c2 <packet_dequeue+0x32>
 80010a6:	e019      	b.n	80010dc <packet_dequeue+0x4c>
	{
		case PKT_SRC_DST_SNS_TX:
			if (osOK != osMessageQueueGet(gt521fx_tx_queue.handle, (uint8_t *)pkt_handle, NULL, osWaitForever))
 80010a8:	4b10      	ldr	r3, [pc, #64]	; (80010ec <packet_dequeue+0x5c>)
 80010aa:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295
 80010b2:	2200      	movs	r2, #0
 80010b4:	6879      	ldr	r1, [r7, #4]
 80010b6:	f005 fad5 	bl	8006664 <osMessageQueueGet>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d00e      	beq.n	80010de <packet_dequeue+0x4e>
			//if (osOK != osMessageQueueGet(gt521fx_tx_queue.handle, &test_pkt, NULL, osWaitForever))
			{
				while(1); // wtf
 80010c0:	e7fe      	b.n	80010c0 <packet_dequeue+0x30>
			}
		break;
		case PKT_SRC_DST_SNS_RX:
			if (osOK != osMessageQueueGet(gt521fx_rx_queue.handle, (uint8_t *)pkt_handle, NULL, osWaitForever))
 80010c2:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <packet_dequeue+0x60>)
 80010c4:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 80010c8:	f04f 33ff 	mov.w	r3, #4294967295
 80010cc:	2200      	movs	r2, #0
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	f005 fac8 	bl	8006664 <osMessageQueueGet>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <packet_dequeue+0x52>
				{
					while(1); // wtf
 80010da:	e7fe      	b.n	80010da <packet_dequeue+0x4a>
				}
		break;
		default: while(1); // wtf
 80010dc:	e7fe      	b.n	80010dc <packet_dequeue+0x4c>
		break;
 80010de:	bf00      	nop
 80010e0:	e000      	b.n	80010e4 <packet_dequeue+0x54>
		break;
 80010e2:	bf00      	nop
		break;
	}
}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20009dac 	.word	0x20009dac
 80010f0:	20009c24 	.word	0x20009c24

080010f4 <packet_enqueue_to_sensor_tx>:


void packet_enqueue_to_sensor_tx(p_packet_handle_t pkt_handle)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	packet_enqueue(pkt_handle, PKT_SRC_DST_SNS_TX);
 80010fc:	2100      	movs	r1, #0
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff ff96 	bl	8001030 <packet_enqueue>
}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <packet_dequeue_from_sensor_tx>:


uint32_t tx_queue_entries = 0;
uint32_t rx_queue_entries = 0;
void packet_dequeue_from_sensor_tx(p_packet_handle_t pkt_handle)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	tx_queue_entries = packet_queue_get_count(PKT_QUEUE_GT521FX_TX);
 8001114:	2001      	movs	r0, #1
 8001116:	f7ff ff49 	bl	8000fac <packet_queue_get_count>
 800111a:	4603      	mov	r3, r0
 800111c:	4a07      	ldr	r2, [pc, #28]	; (800113c <packet_dequeue_from_sensor_tx+0x30>)
 800111e:	6013      	str	r3, [r2, #0]
	rx_queue_entries = packet_queue_get_count(PKT_QUEUE_GT521FX_RX);
 8001120:	2000      	movs	r0, #0
 8001122:	f7ff ff43 	bl	8000fac <packet_queue_get_count>
 8001126:	4603      	mov	r3, r0
 8001128:	4a05      	ldr	r2, [pc, #20]	; (8001140 <packet_dequeue_from_sensor_tx+0x34>)
 800112a:	6013      	str	r3, [r2, #0]
	packet_dequeue(pkt_handle, PKT_SRC_DST_SNS_TX);
 800112c:	2100      	movs	r1, #0
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ffae 	bl	8001090 <packet_dequeue>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000084 	.word	0x20000084
 8001140:	20000088 	.word	0x20000088

08001144 <packet_dequeue_from_sensor_rx>:
	packet_enqueue(pkt_handle, PKT_SRC_DST_SNS_RX);
}


void packet_dequeue_from_sensor_rx(p_packet_handle_t pkt_handle)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	packet_dequeue(pkt_handle, PKT_SRC_DST_SNS_RX);
 800114c:	2101      	movs	r1, #1
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ff9e 	bl	8001090 <packet_dequeue>
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <packet_parse_rsp>:

gt_521fx_cmd_e g_cmd_last_pkt = GT521FX_CMD_OPEN;


void packet_parse_rsp(p_packet_handle_t pkt_handle)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	if (RSP_RSP_NACK == pkt_handle->rsp_rsp)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	891b      	ldrh	r3, [r3, #8]
 8001168:	2b31      	cmp	r3, #49	; 0x31
 800116a:	d109      	bne.n	8001180 <packet_parse_rsp+0x24>
	{
		gt521fx_nack_flag_set(true);
 800116c:	2001      	movs	r0, #1
 800116e:	f7ff fc93 	bl	8000a98 <gt521fx_nack_flag_set>
		gt521fx_nack_state_set((gt_521fx_error_e)pkt_handle->rsp_error_code);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	b29b      	uxth	r3, r3
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff fc9d 	bl	8000ab8 <gt521fx_nack_state_set>
 800117e:	e03a      	b.n	80011f6 <packet_parse_rsp+0x9a>
	}
	else if (RSP_RSP_ACK == pkt_handle->rsp_rsp)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	891b      	ldrh	r3, [r3, #8]
 8001184:	2b30      	cmp	r3, #48	; 0x30
 8001186:	d133      	bne.n	80011f0 <packet_parse_rsp+0x94>
	{
		gt521fx_nack_flag_set(false);
 8001188:	2000      	movs	r0, #0
 800118a:	f7ff fc85 	bl	8000a98 <gt521fx_nack_flag_set>
		switch(cmd_in_flight())
 800118e:	f000 f865 	bl	800125c <cmd_in_flight>
 8001192:	4603      	mov	r3, r0
 8001194:	2bf1      	cmp	r3, #241	; 0xf1
 8001196:	d024      	beq.n	80011e2 <packet_parse_rsp+0x86>
 8001198:	2bf1      	cmp	r3, #241	; 0xf1
 800119a:	dc2b      	bgt.n	80011f4 <packet_parse_rsp+0x98>
 800119c:	2b51      	cmp	r3, #81	; 0x51
 800119e:	d019      	beq.n	80011d4 <packet_parse_rsp+0x78>
 80011a0:	2b51      	cmp	r3, #81	; 0x51
 80011a2:	dc27      	bgt.n	80011f4 <packet_parse_rsp+0x98>
 80011a4:	2b20      	cmp	r3, #32
 80011a6:	d002      	beq.n	80011ae <packet_parse_rsp+0x52>
 80011a8:	2b26      	cmp	r3, #38	; 0x26
 80011aa:	d007      	beq.n	80011bc <packet_parse_rsp+0x60>
			break;
			case GT521FX_CMD_GET_SECURITY_LEVEL:
				gt521fx_security_lvl_set(pkt_handle->cmd_input_param);
			break;
			default:
			break;
 80011ac:	e022      	b.n	80011f4 <packet_parse_rsp+0x98>
				gt521fx_enrolled_fingerprint_count_set(pkt_handle->cmd_input_param);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff fc9b 	bl	8000af0 <gt521fx_enrolled_fingerprint_count_set>
			break;
 80011ba:	e01c      	b.n	80011f6 <packet_parse_rsp+0x9a>
				if (0 == (pkt_handle->rsp_output_param))
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d103      	bne.n	80011cc <packet_parse_rsp+0x70>
					gt521fx_finger_is_pressed_set(true);
 80011c4:	2001      	movs	r0, #1
 80011c6:	f7ff fcaf 	bl	8000b28 <gt521fx_finger_is_pressed_set>
			break;
 80011ca:	e014      	b.n	80011f6 <packet_parse_rsp+0x9a>
				else gt521fx_finger_is_pressed_set(false);
 80011cc:	2000      	movs	r0, #0
 80011ce:	f7ff fcab 	bl	8000b28 <gt521fx_finger_is_pressed_set>
			break;
 80011d2:	e010      	b.n	80011f6 <packet_parse_rsp+0x9a>
				gt521fx_identified_id_set(pkt_handle->cmd_input_param);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	b29b      	uxth	r3, r3
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fcd0 	bl	8000b80 <gt521fx_identified_id_set>
			break;
 80011e0:	e009      	b.n	80011f6 <packet_parse_rsp+0x9a>
				gt521fx_security_lvl_set(pkt_handle->cmd_input_param);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fcb9 	bl	8000b60 <gt521fx_security_lvl_set>
			break;
 80011ee:	e002      	b.n	80011f6 <packet_parse_rsp+0x9a>
		}
	}
 80011f0:	bf00      	nop
 80011f2:	e000      	b.n	80011f6 <packet_parse_rsp+0x9a>
			break;
 80011f4:	bf00      	nop

	packet_rsp_set();
 80011f6:	f000 f811 	bl	800121c <packet_rsp_set>
		default:
		break;
	}
	packet_rsp_set();
	*/
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <packet_rsp_clear>:


bool packet_rsp_received = false;

void packet_rsp_clear(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
	packet_rsp_received = false;
 8001208:	4b03      	ldr	r3, [pc, #12]	; (8001218 <packet_rsp_clear+0x14>)
 800120a:	2200      	movs	r2, #0
 800120c:	701a      	strb	r2, [r3, #0]
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	2000008c 	.word	0x2000008c

0800121c <packet_rsp_set>:


void packet_rsp_set(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
	packet_rsp_received = true;
 8001220:	4b03      	ldr	r3, [pc, #12]	; (8001230 <packet_rsp_set+0x14>)
 8001222:	2201      	movs	r2, #1
 8001224:	701a      	strb	r2, [r3, #0]
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	2000008c 	.word	0x2000008c

08001234 <packet_rsp_was_received>:


bool packet_rsp_was_received(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
	if (packet_rsp_received)
 8001238:	4b07      	ldr	r3, [pc, #28]	; (8001258 <packet_rsp_was_received+0x24>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d004      	beq.n	800124a <packet_rsp_was_received+0x16>
	{
		packet_rsp_received = false;
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <packet_rsp_was_received+0x24>)
 8001242:	2200      	movs	r2, #0
 8001244:	701a      	strb	r2, [r3, #0]
		return true;
 8001246:	2301      	movs	r3, #1
 8001248:	e000      	b.n	800124c <packet_rsp_was_received+0x18>
	}
	else
	{
		return false;
 800124a:	2300      	movs	r3, #0
	}
}
 800124c:	4618      	mov	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	2000008c 	.word	0x2000008c

0800125c <cmd_in_flight>:


gt_521fx_cmd_e g_cmd_in_flight = GT521FX_CMD_OPEN;

gt_521fx_cmd_e cmd_in_flight(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
	return g_cmd_in_flight;
 8001260:	4b03      	ldr	r3, [pc, #12]	; (8001270 <cmd_in_flight+0x14>)
 8001262:	781b      	ldrb	r3, [r3, #0]
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	20000014 	.word	0x20000014

08001274 <packet_create_cmd_and_send>:

void packet_create_cmd_and_send(p_packet_handle_t pkt_handle, gt_521fx_cmd_e cmd, uint32_t input_param)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	460b      	mov	r3, r1
 800127e:	607a      	str	r2, [r7, #4]
 8001280:	72fb      	strb	r3, [r7, #11]
	packet_rsp_clear();
 8001282:	f7ff ffbf 	bl	8001204 <packet_rsp_clear>
	g_cmd_in_flight = cmd;
 8001286:	4a10      	ldr	r2, [pc, #64]	; (80012c8 <packet_create_cmd_and_send+0x54>)
 8001288:	7afb      	ldrb	r3, [r7, #11]
 800128a:	7013      	strb	r3, [r2, #0]
	pkt_handle->start_code[0] = 0x55; // default
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2255      	movs	r2, #85	; 0x55
 8001290:	701a      	strb	r2, [r3, #0]
	pkt_handle->start_code[1] = 0xAA; // default
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	22aa      	movs	r2, #170	; 0xaa
 8001296:	705a      	strb	r2, [r3, #1]
	pkt_handle->dev_id = 0x0001; // default
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2201      	movs	r2, #1
 800129c:	805a      	strh	r2, [r3, #2]
	pkt_handle->cmd_input_param = input_param;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	605a      	str	r2, [r3, #4]
	pkt_handle->cmd_code = cmd;
 80012a4:	7afb      	ldrb	r3, [r7, #11]
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	811a      	strh	r2, [r3, #8]
	pkt_handle->check_sum = packet_calc_check_sum(pkt_handle);
 80012ac:	68f8      	ldr	r0, [r7, #12]
 80012ae:	f000 f80d 	bl	80012cc <packet_calc_check_sum>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	815a      	strh	r2, [r3, #10]
	packet_enqueue_to_sensor_tx(pkt_handle);
 80012ba:	68f8      	ldr	r0, [r7, #12]
 80012bc:	f7ff ff1a 	bl	80010f4 <packet_enqueue_to_sensor_tx>
}
 80012c0:	bf00      	nop
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000014 	.word	0x20000014

080012cc <packet_calc_check_sum>:


uint16_t packet_calc_check_sum(p_packet_handle_t pkt_handle)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	uint16_t check_sum = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	81fb      	strh	r3, [r7, #14]
	check_sum += pkt_handle->start_code[0];
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	b29a      	uxth	r2, r3
 80012de:	89fb      	ldrh	r3, [r7, #14]
 80012e0:	4413      	add	r3, r2
 80012e2:	81fb      	strh	r3, [r7, #14]
	check_sum += pkt_handle->start_code[1];
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	785b      	ldrb	r3, [r3, #1]
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	89fb      	ldrh	r3, [r7, #14]
 80012ec:	4413      	add	r3, r2
 80012ee:	81fb      	strh	r3, [r7, #14]
	check_sum += pkt_handle->dev_id;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	885a      	ldrh	r2, [r3, #2]
 80012f4:	89fb      	ldrh	r3, [r7, #14]
 80012f6:	4413      	add	r3, r2
 80012f8:	81fb      	strh	r3, [r7, #14]
	check_sum += pkt_handle->cmd_input_param;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	b29a      	uxth	r2, r3
 8001300:	89fb      	ldrh	r3, [r7, #14]
 8001302:	4413      	add	r3, r2
 8001304:	81fb      	strh	r3, [r7, #14]
	check_sum += pkt_handle->cmd_code;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	891a      	ldrh	r2, [r3, #8]
 800130a:	89fb      	ldrh	r3, [r7, #14]
 800130c:	4413      	add	r3, r2
 800130e:	81fb      	strh	r3, [r7, #14]
	return check_sum;
 8001310:	89fb      	ldrh	r3, [r7, #14]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3714      	adds	r7, #20
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <HAL_UART_RxCpltCallback>:
	}
}

uint32_t rx_queue_count = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]

	if (osOK != osMessageQueuePut(packet_queue_get_queue_handle(PKT_QUEUE_GT521FX_RX), &gt521fx_uart_rx.pkt, 0, 0))//gt521fx_uart_rx.cur_queue_entry->pkt_ptr, 0, 0))
 8001328:	2000      	movs	r0, #0
 800132a:	f7ff fe63 	bl	8000ff4 <packet_queue_get_queue_handle>
 800132e:	2300      	movs	r3, #0
 8001330:	2200      	movs	r2, #0
 8001332:	4905      	ldr	r1, [pc, #20]	; (8001348 <HAL_UART_RxCpltCallback+0x28>)
 8001334:	f005 f936 	bl	80065a4 <osMessageQueuePut>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d000      	beq.n	8001340 <HAL_UART_RxCpltCallback+0x20>
	{
		while(1); // ouch
 800133e:	e7fe      	b.n	800133e <HAL_UART_RxCpltCallback+0x1e>
	}
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20009f68 	.word	0x20009f68

0800134c <serial_com_init_all>:


void serial_com_init_all(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
	gt521fx_uart_rx.gt521fx_rx_queue_handle = packet_queue_get_queue_handle(PKT_QUEUE_GT521FX_RX);
 8001350:	2000      	movs	r0, #0
 8001352:	f7ff fe4f 	bl	8000ff4 <packet_queue_get_queue_handle>
 8001356:	4603      	mov	r3, r0
 8001358:	4a0c      	ldr	r2, [pc, #48]	; (800138c <serial_com_init_all+0x40>)
 800135a:	6013      	str	r3, [r2, #0]
	gt521fx_uart_rx.rx_uart_handle = huart1;
 800135c:	4b0b      	ldr	r3, [pc, #44]	; (800138c <serial_com_init_all+0x40>)
 800135e:	4a0c      	ldr	r2, [pc, #48]	; (8001390 <serial_com_init_all+0x44>)
 8001360:	3310      	adds	r3, #16
 8001362:	4611      	mov	r1, r2
 8001364:	2284      	movs	r2, #132	; 0x84
 8001366:	4618      	mov	r0, r3
 8001368:	f007 ff86 	bl	8009278 <memcpy>
	gt521fx_uart_tx.gt521fx_tx_queue_handle = packet_queue_get_queue_handle(PKT_QUEUE_GT521FX_TX);
 800136c:	2001      	movs	r0, #1
 800136e:	f7ff fe41 	bl	8000ff4 <packet_queue_get_queue_handle>
 8001372:	4603      	mov	r3, r0
 8001374:	4a07      	ldr	r2, [pc, #28]	; (8001394 <serial_com_init_all+0x48>)
 8001376:	6013      	str	r3, [r2, #0]
	gt521fx_uart_tx.tx_uart_handle = huart1;
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <serial_com_init_all+0x48>)
 800137a:	4a05      	ldr	r2, [pc, #20]	; (8001390 <serial_com_init_all+0x44>)
 800137c:	3310      	adds	r3, #16
 800137e:	4611      	mov	r1, r2
 8001380:	2284      	movs	r2, #132	; 0x84
 8001382:	4618      	mov	r0, r3
 8001384:	f007 ff78 	bl	8009278 <memcpy>
}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20009f64 	.word	0x20009f64
 8001390:	20001a6c 	.word	0x20001a6c
 8001394:	20009ed0 	.word	0x20009ed0

08001398 <pkt_received>:


bool g_rx_pkt_received = false;

bool pkt_received(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
	if (g_rx_pkt_received)
 800139c:	4b07      	ldr	r3, [pc, #28]	; (80013bc <pkt_received+0x24>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d004      	beq.n	80013ae <pkt_received+0x16>
	{
		g_rx_pkt_received = false;
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <pkt_received+0x24>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]
		return true;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e000      	b.n	80013b0 <pkt_received+0x18>
	}
	else
	{
		return false;
 80013ae:	2300      	movs	r3, #0
	}
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	20000094 	.word	0x20000094

080013c0 <clear_pkt_received_flag>:

void clear_pkt_received_flag(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
	g_rx_pkt_received = false;
 80013c4:	4b03      	ldr	r3, [pc, #12]	; (80013d4 <clear_pkt_received_flag+0x14>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	20000094 	.word	0x20000094

080013d8 <task_sensor_tx_entry>:
* @brief Function implementing the task_sensor_tx thread.
* @param argument: Not used
* @retval None
*/
void task_sensor_tx_entry(void *argument)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_sensor_tx_entry */
  /* Infinite loop */
  for(;;)
  {

	  packet_dequeue_from_sensor_tx(&gt521fx_uart_tx.pkt);
 80013e0:	4808      	ldr	r0, [pc, #32]	; (8001404 <task_sensor_tx_entry+0x2c>)
 80013e2:	f7ff fe93 	bl	800110c <packet_dequeue_from_sensor_tx>
	  sensor_tx_entry_passes++;
 80013e6:	4b08      	ldr	r3, [pc, #32]	; (8001408 <task_sensor_tx_entry+0x30>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	3301      	adds	r3, #1
 80013ec:	4a06      	ldr	r2, [pc, #24]	; (8001408 <task_sensor_tx_entry+0x30>)
 80013ee:	6013      	str	r3, [r2, #0]
	  clear_pkt_received_flag();
 80013f0:	f7ff ffe6 	bl	80013c0 <clear_pkt_received_flag>
	  HAL_UART_Transmit(&huart1, gt521fx_uart_tx.pkt.flat_data, sizeof(pkt_t), 5000);
 80013f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80013f8:	220c      	movs	r2, #12
 80013fa:	4902      	ldr	r1, [pc, #8]	; (8001404 <task_sensor_tx_entry+0x2c>)
 80013fc:	4803      	ldr	r0, [pc, #12]	; (800140c <task_sensor_tx_entry+0x34>)
 80013fe:	f004 f939 	bl	8005674 <HAL_UART_Transmit>
	  packet_dequeue_from_sensor_tx(&gt521fx_uart_tx.pkt);
 8001402:	e7ed      	b.n	80013e0 <task_sensor_tx_entry+0x8>
 8001404:	20009ed4 	.word	0x20009ed4
 8001408:	20000098 	.word	0x20000098
 800140c:	20001a6c 	.word	0x20001a6c

08001410 <sensor_rx_entry>:
* @brief Function implementing the task_sensor_rx thread.
* @param argument: Not used
* @retval None
*/
void sensor_rx_entry(void *argument)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		HAL_UART_Receive_DMA(&huart1, gt521fx_uart_rx.pkt.flat_data, sizeof(pkt_t));
 8001418:	220c      	movs	r2, #12
 800141a:	490c      	ldr	r1, [pc, #48]	; (800144c <sensor_rx_entry+0x3c>)
 800141c:	480c      	ldr	r0, [pc, #48]	; (8001450 <sensor_rx_entry+0x40>)
 800141e:	f004 f9bd 	bl	800579c <HAL_UART_Receive_DMA>
		packet_dequeue_from_sensor_rx(&gt521fx_uart_rx.pkt);
 8001422:	480a      	ldr	r0, [pc, #40]	; (800144c <sensor_rx_entry+0x3c>)
 8001424:	f7ff fe8e 	bl	8001144 <packet_dequeue_from_sensor_rx>
		rx_queue_count = packet_queue_get_count(PKT_QUEUE_GT521FX_RX);
 8001428:	2000      	movs	r0, #0
 800142a:	f7ff fdbf 	bl	8000fac <packet_queue_get_count>
 800142e:	4603      	mov	r3, r0
 8001430:	4a08      	ldr	r2, [pc, #32]	; (8001454 <sensor_rx_entry+0x44>)
 8001432:	6013      	str	r3, [r2, #0]
		sensor_rx_entry_passes++;
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <sensor_rx_entry+0x48>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	3301      	adds	r3, #1
 800143a:	4a07      	ldr	r2, [pc, #28]	; (8001458 <sensor_rx_entry+0x48>)
 800143c:	6013      	str	r3, [r2, #0]
		packet_parse_rsp(&gt521fx_uart_rx.pkt);
 800143e:	4803      	ldr	r0, [pc, #12]	; (800144c <sensor_rx_entry+0x3c>)
 8001440:	f7ff fe8c 	bl	800115c <packet_parse_rsp>
		g_rx_pkt_received = true;
 8001444:	4b05      	ldr	r3, [pc, #20]	; (800145c <sensor_rx_entry+0x4c>)
 8001446:	2201      	movs	r2, #1
 8001448:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart1, gt521fx_uart_rx.pkt.flat_data, sizeof(pkt_t));
 800144a:	e7e5      	b.n	8001418 <sensor_rx_entry+0x8>
 800144c:	20009f68 	.word	0x20009f68
 8001450:	20001a6c 	.word	0x20001a6c
 8001454:	20000090 	.word	0x20000090
 8001458:	2000009c 	.word	0x2000009c
 800145c:	20000094 	.word	0x20000094

08001460 <ssd1351_spi_byte_write>:
void ssd1351_clear_pin(ssd1351_pins pin);
void ssd1351_reset_pixel_address(void);


static void ssd1351_spi_byte_write(uint8_t val)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
	uint8_t data = val;
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &data, 1, 10000);
 800146e:	f107 010f 	add.w	r1, r7, #15
 8001472:	f242 7310 	movw	r3, #10000	; 0x2710
 8001476:	2201      	movs	r2, #1
 8001478:	4803      	ldr	r0, [pc, #12]	; (8001488 <ssd1351_spi_byte_write+0x28>)
 800147a:	f003 fb5e 	bl	8004b3a <HAL_SPI_Transmit>
}
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20001978 	.word	0x20001978

0800148c <ssd1351_spi_block_write>:


static void ssd1351_spi_block_write(uint8_t *data, uint32_t len)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&hspi2, data, len, 10000);
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	b29a      	uxth	r2, r3
 800149a:	f242 7310 	movw	r3, #10000	; 0x2710
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	4803      	ldr	r0, [pc, #12]	; (80014b0 <ssd1351_spi_block_write+0x24>)
 80014a2:	f003 fb4a 	bl	8004b3a <HAL_SPI_Transmit>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20001978 	.word	0x20001978

080014b4 <ssd1351_byte_write_data>:


void ssd1351_byte_write_data(uint8_t data)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	71fb      	strb	r3, [r7, #7]
	ssd1351_set_pin(SSD1351_PIN_DC); // set DC (data mode)
 80014be:	2001      	movs	r0, #1
 80014c0:	f000 f882 	bl	80015c8 <ssd1351_set_pin>
	ssd1351_clear_pin(SSD1351_PIN_CS); // select chip (active low)
 80014c4:	2000      	movs	r0, #0
 80014c6:	f000 f851 	bl	800156c <ssd1351_clear_pin>
	ssd1351_spi_byte_write(data); // byte write
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ffc7 	bl	8001460 <ssd1351_spi_byte_write>
	ssd1351_set_pin(SSD1351_PIN_CS); // deselect chip
 80014d2:	2000      	movs	r0, #0
 80014d4:	f000 f878 	bl	80015c8 <ssd1351_set_pin>
}
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <ssd1351_block_write_data>:


void ssd1351_block_write_data(uint8_t *data, uint32_t len)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
	ssd1351_set_pin(SSD1351_PIN_DC); // set DC (data mode)
 80014ea:	2001      	movs	r0, #1
 80014ec:	f000 f86c 	bl	80015c8 <ssd1351_set_pin>
	ssd1351_clear_pin(SSD1351_PIN_CS); // select chip (active low)
 80014f0:	2000      	movs	r0, #0
 80014f2:	f000 f83b 	bl	800156c <ssd1351_clear_pin>
	ssd1351_spi_block_write(data, len); // byte write
 80014f6:	6839      	ldr	r1, [r7, #0]
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff ffc7 	bl	800148c <ssd1351_spi_block_write>
	ssd1351_set_pin(SSD1351_PIN_CS); // deselect chip
 80014fe:	2000      	movs	r0, #0
 8001500:	f000 f862 	bl	80015c8 <ssd1351_set_pin>
}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <ssd1351_write_cmd>:


void ssd1351_write_cmd(ssd1351_cmd_e cmd)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
	ssd1351_clear_pin(SSD1351_PIN_DC); // clear DC (cmd mode)
 8001516:	2001      	movs	r0, #1
 8001518:	f000 f828 	bl	800156c <ssd1351_clear_pin>
	ssd1351_clear_pin(SSD1351_PIN_CS); // select chip (active low)
 800151c:	2000      	movs	r0, #0
 800151e:	f000 f825 	bl	800156c <ssd1351_clear_pin>
	ssd1351_spi_byte_write(cmd); // send cmd
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff9b 	bl	8001460 <ssd1351_spi_byte_write>
	ssd1351_set_pin(SSD1351_PIN_CS); // deselect chip
 800152a:	2000      	movs	r0, #0
 800152c:	f000 f84c 	bl	80015c8 <ssd1351_set_pin>
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <ssd1351_write_buffer_to_display>:


void ssd1351_write_buffer_to_display(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
	ssd1351_write_cmd(SSD1351_CMD_WRITE_RAM);
 800153c:	205c      	movs	r0, #92	; 0x5c
 800153e:	f7ff ffe5 	bl	800150c <ssd1351_write_cmd>
	ssd1351_block_write_data(ssd1351_buffer.ssd1351_disp_buffer_uint8, sizeof(ssd1351_buffer.ssd1351_disp_buffer_uint8));
 8001542:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001546:	4802      	ldr	r0, [pc, #8]	; (8001550 <ssd1351_write_buffer_to_display+0x18>)
 8001548:	f7ff ffca 	bl	80014e0 <ssd1351_block_write_data>
}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20001af4 	.word	0x20001af4

08001554 <ssd1351_delay_ms>:


void ssd1351_delay_ms(uint32_t delay_ms)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay_ms);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f001 f929 	bl	80027b4 <HAL_Delay>
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <ssd1351_clear_pin>:


void ssd1351_clear_pin(ssd1351_pins pin)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	71fb      	strb	r3, [r7, #7]
	GPIO_TypeDef *hal_port;
	uint16_t hal_pin;
	switch(pin)
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	2b02      	cmp	r3, #2
 800157a:	d014      	beq.n	80015a6 <ssd1351_clear_pin+0x3a>
 800157c:	2b02      	cmp	r3, #2
 800157e:	dc17      	bgt.n	80015b0 <ssd1351_clear_pin+0x44>
 8001580:	2b00      	cmp	r3, #0
 8001582:	d002      	beq.n	800158a <ssd1351_clear_pin+0x1e>
 8001584:	2b01      	cmp	r3, #1
 8001586:	d007      	beq.n	8001598 <ssd1351_clear_pin+0x2c>
 8001588:	e012      	b.n	80015b0 <ssd1351_clear_pin+0x44>
	{
		case SSD1351_PIN_CS:
			hal_port = GPIOA;
 800158a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800158e:	60fb      	str	r3, [r7, #12]
			hal_pin = GPIO_PIN_11;
 8001590:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001594:	817b      	strh	r3, [r7, #10]
		break;
 8001596:	e00b      	b.n	80015b0 <ssd1351_clear_pin+0x44>
		case SSD1351_PIN_DC:
			hal_port = GPIOA;
 8001598:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800159c:	60fb      	str	r3, [r7, #12]
			hal_pin = GPIO_PIN_8;
 800159e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015a2:	817b      	strh	r3, [r7, #10]
		break;
 80015a4:	e004      	b.n	80015b0 <ssd1351_clear_pin+0x44>
		case SSD1351_PIN_RST:
			hal_port = GPIOB;
 80015a6:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <ssd1351_clear_pin+0x58>)
 80015a8:	60fb      	str	r3, [r7, #12]
			hal_pin = GPIO_PIN_6;
 80015aa:	2340      	movs	r3, #64	; 0x40
 80015ac:	817b      	strh	r3, [r7, #10]
		break;
 80015ae:	bf00      	nop
	}
	HAL_GPIO_WritePin(hal_port, hal_pin, GPIO_PIN_RESET);
 80015b0:	897b      	ldrh	r3, [r7, #10]
 80015b2:	2200      	movs	r2, #0
 80015b4:	4619      	mov	r1, r3
 80015b6:	68f8      	ldr	r0, [r7, #12]
 80015b8:	f002 f810 	bl	80035dc <HAL_GPIO_WritePin>
}
 80015bc:	bf00      	nop
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	48000400 	.word	0x48000400

080015c8 <ssd1351_set_pin>:


void ssd1351_set_pin(ssd1351_pins pin)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]
	GPIO_TypeDef *hal_port;
	uint16_t hal_pin;
	switch(pin)
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d014      	beq.n	8001602 <ssd1351_set_pin+0x3a>
 80015d8:	2b02      	cmp	r3, #2
 80015da:	dc17      	bgt.n	800160c <ssd1351_set_pin+0x44>
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d002      	beq.n	80015e6 <ssd1351_set_pin+0x1e>
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d007      	beq.n	80015f4 <ssd1351_set_pin+0x2c>
 80015e4:	e012      	b.n	800160c <ssd1351_set_pin+0x44>
	{
		case SSD1351_PIN_CS:
			hal_port = GPIOA;
 80015e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015ea:	60fb      	str	r3, [r7, #12]
			hal_pin = GPIO_PIN_11;
 80015ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015f0:	817b      	strh	r3, [r7, #10]
		break;
 80015f2:	e00b      	b.n	800160c <ssd1351_set_pin+0x44>
		case SSD1351_PIN_DC:
			hal_port = GPIOA;
 80015f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015f8:	60fb      	str	r3, [r7, #12]
			hal_pin = GPIO_PIN_8;
 80015fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015fe:	817b      	strh	r3, [r7, #10]
		break;
 8001600:	e004      	b.n	800160c <ssd1351_set_pin+0x44>
		case SSD1351_PIN_RST:
			hal_port = GPIOB;
 8001602:	4b07      	ldr	r3, [pc, #28]	; (8001620 <ssd1351_set_pin+0x58>)
 8001604:	60fb      	str	r3, [r7, #12]
			hal_pin = GPIO_PIN_6;
 8001606:	2340      	movs	r3, #64	; 0x40
 8001608:	817b      	strh	r3, [r7, #10]
		break;
 800160a:	bf00      	nop
	}
	HAL_GPIO_WritePin(hal_port, hal_pin, GPIO_PIN_SET);
 800160c:	897b      	ldrh	r3, [r7, #10]
 800160e:	2201      	movs	r2, #1
 8001610:	4619      	mov	r1, r3
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	f001 ffe2 	bl	80035dc <HAL_GPIO_WritePin>
}
 8001618:	bf00      	nop
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	48000400 	.word	0x48000400

08001624 <ssd1351_init>:


void ssd1351_init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
	ssd1351_set_pin(SSD1351_PIN_RST); // clear DC (cmd mode)
 8001628:	2002      	movs	r0, #2
 800162a:	f7ff ffcd 	bl	80015c8 <ssd1351_set_pin>
	ssd1351_delay_ms(100); // how long to hold reset?
 800162e:	2064      	movs	r0, #100	; 0x64
 8001630:	f7ff ff90 	bl	8001554 <ssd1351_delay_ms>
	ssd1351_clear_pin(SSD1351_PIN_RST); // clear DC (cmd mode)
 8001634:	2002      	movs	r0, #2
 8001636:	f7ff ff99 	bl	800156c <ssd1351_clear_pin>
	ssd1351_delay_ms(100); // how long to pause after reset?
 800163a:	2064      	movs	r0, #100	; 0x64
 800163c:	f7ff ff8a 	bl	8001554 <ssd1351_delay_ms>
	ssd1351_set_pin(SSD1351_PIN_RST); // clear DC (cmd mode)
 8001640:	2002      	movs	r0, #2
 8001642:	f7ff ffc1 	bl	80015c8 <ssd1351_set_pin>

	ssd1351_write_cmd(SSD1351_CMD_SET_CMD_LOCK);
 8001646:	20fd      	movs	r0, #253	; 0xfd
 8001648:	f7ff ff60 	bl	800150c <ssd1351_write_cmd>
	ssd1351_byte_write_data(SSD1351_CMD_UNLOCK_BYTE);
 800164c:	2012      	movs	r0, #18
 800164e:	f7ff ff31 	bl	80014b4 <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_SET_CMD_LOCK);
 8001652:	20fd      	movs	r0, #253	; 0xfd
 8001654:	f7ff ff5a 	bl	800150c <ssd1351_write_cmd>
	ssd1351_byte_write_data(0xB1); // WHY?????
 8001658:	20b1      	movs	r0, #177	; 0xb1
 800165a:	f7ff ff2b 	bl	80014b4 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_SLEEP_MODE_ON);
 800165e:	20ae      	movs	r0, #174	; 0xae
 8001660:	f7ff ff54 	bl	800150c <ssd1351_write_cmd>
	ssd1351_write_cmd(SSD1351_CMD_SET_DISP_MODE_OFF);
 8001664:	20a4      	movs	r0, #164	; 0xa4
 8001666:	f7ff ff51 	bl	800150c <ssd1351_write_cmd>

	ssd1351_write_cmd(SSD1351_CMD_SET_COLUMN_ADDRESS);
 800166a:	2015      	movs	r0, #21
 800166c:	f7ff ff4e 	bl	800150c <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x00);
 8001670:	2000      	movs	r0, #0
 8001672:	f7ff ff1f 	bl	80014b4 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0x7F);
 8001676:	207f      	movs	r0, #127	; 0x7f
 8001678:	f7ff ff1c 	bl	80014b4 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_ROW_ADDRESS);
 800167c:	2075      	movs	r0, #117	; 0x75
 800167e:	f7ff ff45 	bl	800150c <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x00);
 8001682:	2000      	movs	r0, #0
 8001684:	f7ff ff16 	bl	80014b4 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0x7F);
 8001688:	207f      	movs	r0, #127	; 0x7f
 800168a:	f7ff ff13 	bl	80014b4 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_FRONT_CLOCK_DIVIDER);
 800168e:	20b3      	movs	r0, #179	; 0xb3
 8001690:	f7ff ff3c 	bl	800150c <ssd1351_write_cmd>
	ssd1351_byte_write_data(0xF1); // highest frequency (div by 1)
 8001694:	20f1      	movs	r0, #241	; 0xf1
 8001696:	f7ff ff0d 	bl	80014b4 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_MUX_RATIO);
 800169a:	20ca      	movs	r0, #202	; 0xca
 800169c:	f7ff ff36 	bl	800150c <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x7F); // 128 MUX (Reset value)
 80016a0:	207f      	movs	r0, #127	; 0x7f
 80016a2:	f7ff ff07 	bl	80014b4 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_REMAP_COLOR_DEPTH);
 80016a6:	20a0      	movs	r0, #160	; 0xa0
 80016a8:	f7ff ff30 	bl	800150c <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x74);
 80016ac:	2074      	movs	r0, #116	; 0x74
 80016ae:	f7ff ff01 	bl	80014b4 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_DISP_START_LINE);
 80016b2:	20a1      	movs	r0, #161	; 0xa1
 80016b4:	f7ff ff2a 	bl	800150c <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x00);
 80016b8:	2000      	movs	r0, #0
 80016ba:	f7ff fefb 	bl	80014b4 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_DISP_OFFSET);
 80016be:	20a2      	movs	r0, #162	; 0xa2
 80016c0:	f7ff ff24 	bl	800150c <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x00);
 80016c4:	2000      	movs	r0, #0
 80016c6:	f7ff fef5 	bl	80014b4 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_FUNCTION_SELECTION);
 80016ca:	20ab      	movs	r0, #171	; 0xab
 80016cc:	f7ff ff1e 	bl	800150c <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x01);
 80016d0:	2001      	movs	r0, #1
 80016d2:	f7ff feef 	bl	80014b4 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_SEGMENT_LOW_VOLTAGE);
 80016d6:	20b4      	movs	r0, #180	; 0xb4
 80016d8:	f7ff ff18 	bl	800150c <ssd1351_write_cmd>
	ssd1351_byte_write_data(0xA0);
 80016dc:	20a0      	movs	r0, #160	; 0xa0
 80016de:	f7ff fee9 	bl	80014b4 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0xB5);
 80016e2:	20b5      	movs	r0, #181	; 0xb5
 80016e4:	f7ff fee6 	bl	80014b4 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0x55);
 80016e8:	2055      	movs	r0, #85	; 0x55
 80016ea:	f7ff fee3 	bl	80014b4 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_CONTRAST_CURRENT);
 80016ee:	20c1      	movs	r0, #193	; 0xc1
 80016f0:	f7ff ff0c 	bl	800150c <ssd1351_write_cmd>
	ssd1351_byte_write_data(0xC8);
 80016f4:	20c8      	movs	r0, #200	; 0xc8
 80016f6:	f7ff fedd 	bl	80014b4 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0x80);
 80016fa:	2080      	movs	r0, #128	; 0x80
 80016fc:	f7ff feda 	bl	80014b4 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0xC0);
 8001700:	20c0      	movs	r0, #192	; 0xc0
 8001702:	f7ff fed7 	bl	80014b4 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_MASTER_CONTRAST_CURRENT_CTRL);
 8001706:	20c7      	movs	r0, #199	; 0xc7
 8001708:	f7ff ff00 	bl	800150c <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x0F);
 800170c:	200f      	movs	r0, #15
 800170e:	f7ff fed1 	bl	80014b4 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_RESET_PRECHARGE_PERIOD);
 8001712:	20b1      	movs	r0, #177	; 0xb1
 8001714:	f7ff fefa 	bl	800150c <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x32);
 8001718:	2032      	movs	r0, #50	; 0x32
 800171a:	f7ff fecb 	bl	80014b4 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_DISP_ENHANCEMENT);
 800171e:	20b2      	movs	r0, #178	; 0xb2
 8001720:	f7ff fef4 	bl	800150c <ssd1351_write_cmd>
	ssd1351_byte_write_data(0xA4);
 8001724:	20a4      	movs	r0, #164	; 0xa4
 8001726:	f7ff fec5 	bl	80014b4 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0x00);
 800172a:	2000      	movs	r0, #0
 800172c:	f7ff fec2 	bl	80014b4 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0x00);
 8001730:	2000      	movs	r0, #0
 8001732:	f7ff febf 	bl	80014b4 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_PRECHARGE_VOLTAGE);
 8001736:	20bb      	movs	r0, #187	; 0xbb
 8001738:	f7ff fee8 	bl	800150c <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x17);
 800173c:	2017      	movs	r0, #23
 800173e:	f7ff feb9 	bl	80014b4 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_SECOND_PRECHARGE_PERIOD);
 8001742:	20b6      	movs	r0, #182	; 0xb6
 8001744:	f7ff fee2 	bl	800150c <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x01);
 8001748:	2001      	movs	r0, #1
 800174a:	f7ff feb3 	bl	80014b4 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_VCOMH_VOLTAGE);
 800174e:	20be      	movs	r0, #190	; 0xbe
 8001750:	f7ff fedc 	bl	800150c <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x05);
 8001754:	2005      	movs	r0, #5
 8001756:	f7ff fead 	bl	80014b4 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_DISP_MODE_NORMAL);
 800175a:	20a6      	movs	r0, #166	; 0xa6
 800175c:	f7ff fed6 	bl	800150c <ssd1351_write_cmd>

	ssd1351_clear_screen();
 8001760:	f000 f874 	bl	800184c <ssd1351_clear_screen>
	ssd1351_write_cmd(SSD1351_CMD_SET_SLEEP_MODE_OFF);
 8001764:	20af      	movs	r0, #175	; 0xaf
 8001766:	f7ff fed1 	bl	800150c <ssd1351_write_cmd>

	ssd1351_clear_screen();
 800176a:	f000 f86f 	bl	800184c <ssd1351_clear_screen>
	ssd1351_reset_ram_address();
 800176e:	f000 f865 	bl	800183c <ssd1351_reset_ram_address>

	ssd1351_clear_screen();
 8001772:	f000 f86b 	bl	800184c <ssd1351_clear_screen>
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <ssd1351_draw_pixel>:
	ssd1351_write_cmd(SSD1351_CMD_SET_DISP_MODE_OFF);
}


void ssd1351_draw_pixel(uint8_t x, uint8_t y, color_16bit_e color)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	71fb      	strb	r3, [r7, #7]
 8001786:	460b      	mov	r3, r1
 8001788:	71bb      	strb	r3, [r7, #6]
 800178a:	4613      	mov	r3, r2
 800178c:	80bb      	strh	r3, [r7, #4]
	if((x >= SSD1351_PIXEL_WIDTH - 1) || (y >= SSD1351_PIXEL_HEIGHT - 1)) return;
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	2b7e      	cmp	r3, #126	; 0x7e
 8001792:	d810      	bhi.n	80017b6 <ssd1351_draw_pixel+0x3a>
 8001794:	79bb      	ldrb	r3, [r7, #6]
 8001796:	2b7e      	cmp	r3, #126	; 0x7e
 8001798:	d80d      	bhi.n	80017b6 <ssd1351_draw_pixel+0x3a>
	else if((x < 0) || (y < 0)) return;
	// there are 128 columns and 128 row.  2 bytes stored per pixel
	//uint16_t index = ((SSD1351_PIXEL_WIDTH - 1) - x) + (y * (SSD1351_PIXEL_WIDTH - 1))
	uint16_t index = x + y * 128;
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	b29a      	uxth	r2, r3
 800179e:	79bb      	ldrb	r3, [r7, #6]
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	01db      	lsls	r3, r3, #7
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	4413      	add	r3, r2
 80017a8:	81fb      	strh	r3, [r7, #14]
	ssd1351_buffer.ssd1351_disp_buffer_uint16[index] = color;
 80017aa:	89fb      	ldrh	r3, [r7, #14]
 80017ac:	4905      	ldr	r1, [pc, #20]	; (80017c4 <ssd1351_draw_pixel+0x48>)
 80017ae:	88ba      	ldrh	r2, [r7, #4]
 80017b0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 80017b4:	e000      	b.n	80017b8 <ssd1351_draw_pixel+0x3c>
	if((x >= SSD1351_PIXEL_WIDTH - 1) || (y >= SSD1351_PIXEL_HEIGHT - 1)) return;
 80017b6:	bf00      	nop
}
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	20001af4 	.word	0x20001af4

080017c8 <ssd1351_reset_pixel_address>:
	ssd1351_coordinates.y = row;
}


void ssd1351_reset_pixel_address(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
	ssd1351_coordinates.x = 0;
 80017cc:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <ssd1351_reset_pixel_address+0x1c>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	701a      	strb	r2, [r3, #0]
	ssd1351_coordinates.y = 0;
 80017d2:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <ssd1351_reset_pixel_address+0x1c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	705a      	strb	r2, [r3, #1]
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	20001af0 	.word	0x20001af0

080017e8 <ssd1351_set_ram_address>:


void ssd1351_set_ram_address(uint16_t column, uint16_t row)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	460a      	mov	r2, r1
 80017f2:	80fb      	strh	r3, [r7, #6]
 80017f4:	4613      	mov	r3, r2
 80017f6:	80bb      	strh	r3, [r7, #4]
	ssd1351_write_cmd(SSD1351_CMD_SET_COLUMN_ADDRESS);
 80017f8:	2015      	movs	r0, #21
 80017fa:	f7ff fe87 	bl	800150c <ssd1351_write_cmd>
	ssd1351_byte_write_data((column & 0xFF00) >> 8);
 80017fe:	88fb      	ldrh	r3, [r7, #6]
 8001800:	0a1b      	lsrs	r3, r3, #8
 8001802:	b29b      	uxth	r3, r3
 8001804:	b2db      	uxtb	r3, r3
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fe54 	bl	80014b4 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(column & 0x00FF);
 800180c:	88fb      	ldrh	r3, [r7, #6]
 800180e:	b2db      	uxtb	r3, r3
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fe4f 	bl	80014b4 <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_SET_ROW_ADDRESS);
 8001816:	2075      	movs	r0, #117	; 0x75
 8001818:	f7ff fe78 	bl	800150c <ssd1351_write_cmd>
	ssd1351_byte_write_data((row & 0xFF00) >> 8);
 800181c:	88bb      	ldrh	r3, [r7, #4]
 800181e:	0a1b      	lsrs	r3, r3, #8
 8001820:	b29b      	uxth	r3, r3
 8001822:	b2db      	uxtb	r3, r3
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff fe45 	bl	80014b4 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(row & 0x00FF);
 800182a:	88bb      	ldrh	r3, [r7, #4]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fe40 	bl	80014b4 <ssd1351_byte_write_data>
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <ssd1351_reset_ram_address>:


void ssd1351_reset_ram_address(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
	ssd1351_set_ram_address(0x007F, 0x007F);
 8001840:	217f      	movs	r1, #127	; 0x7f
 8001842:	207f      	movs	r0, #127	; 0x7f
 8001844:	f7ff ffd0 	bl	80017e8 <ssd1351_set_ram_address>
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}

0800184c <ssd1351_clear_screen>:
	ssd1351_write_cmd(SSD1351_CMD_SET_SLEEP_MODE_OFF);
}


void ssd1351_clear_screen(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	//uint8_t clear_byte[128*128] = {0x00, 0x00};
	ssd1351_reset_ram_address();
 8001850:	f7ff fff4 	bl	800183c <ssd1351_reset_ram_address>
	ssd1351_write_cmd(SSD1351_CMD_WRITE_RAM);
 8001854:	205c      	movs	r0, #92	; 0x5c
 8001856:	f7ff fe59 	bl	800150c <ssd1351_write_cmd>
	memset(ssd1351_buffer.ssd1351_disp_buffer_uint8, 0, sizeof(ssd1351_buffer.ssd1351_disp_buffer_uint8));
 800185a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800185e:	2100      	movs	r1, #0
 8001860:	4805      	ldr	r0, [pc, #20]	; (8001878 <ssd1351_clear_screen+0x2c>)
 8001862:	f007 fd17 	bl	8009294 <memset>
	ssd1351_block_write_data(ssd1351_buffer.ssd1351_disp_buffer_uint8, sizeof(ssd1351_buffer));
 8001866:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800186a:	4803      	ldr	r0, [pc, #12]	; (8001878 <ssd1351_clear_screen+0x2c>)
 800186c:	f7ff fe38 	bl	80014e0 <ssd1351_block_write_data>
	//ssd1351_reset_ram_address();
	ssd1351_reset_pixel_address();
 8001870:	f7ff ffaa 	bl	80017c8 <ssd1351_reset_pixel_address>
}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20001af4 	.word	0x20001af4

0800187c <ssd1351_write_char>:


#define SPECIAL_CHAR_OFFSET 	32
void ssd1351_write_char(color_16bit_e color, font_t font, char c)
{
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af00      	add	r7, sp, #0
 8001882:	4604      	mov	r4, r0
 8001884:	1d38      	adds	r0, r7, #4
 8001886:	e880 0006 	stmia.w	r0, {r1, r2}
 800188a:	461a      	mov	r2, r3
 800188c:	4623      	mov	r3, r4
 800188e:	81fb      	strh	r3, [r7, #14]
 8001890:	4613      	mov	r3, r2
 8001892:	737b      	strb	r3, [r7, #13]
	// basic idea for writing a character is as follows:
	// 1x 16-bit value is returned for each row in pixel height.  For example if the pixel height is
	// 10 then 10x 16-bit values make up that character
	uint16_t char_pix_row_data;
	uint16_t char_pix_vert_pos = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	83fb      	strh	r3, [r7, #30]
	uint16_t char_pix_horiz_pos = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	83bb      	strh	r3, [r7, #28]
	uint16_t height = font.height;
 800189c:	797b      	ldrb	r3, [r7, #5]
 800189e:	837b      	strh	r3, [r7, #26]
	uint16_t width = font.width;
 80018a0:	793b      	ldrb	r3, [r7, #4]
 80018a2:	833b      	strh	r3, [r7, #24]

	if((SSD1351_PIXEL_WIDTH <= ssd1351_coordinates.x + width) || (SSD1351_PIXEL_HEIGHT <= ssd1351_coordinates.y + height))
 80018a4:	4b3e      	ldr	r3, [pc, #248]	; (80019a0 <ssd1351_write_char+0x124>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	461a      	mov	r2, r3
 80018aa:	8b3b      	ldrh	r3, [r7, #24]
 80018ac:	4413      	add	r3, r2
 80018ae:	2b7f      	cmp	r3, #127	; 0x7f
 80018b0:	dc70      	bgt.n	8001994 <ssd1351_write_char+0x118>
 80018b2:	4b3b      	ldr	r3, [pc, #236]	; (80019a0 <ssd1351_write_char+0x124>)
 80018b4:	785b      	ldrb	r3, [r3, #1]
 80018b6:	461a      	mov	r2, r3
 80018b8:	8b7b      	ldrh	r3, [r7, #26]
 80018ba:	4413      	add	r3, r2
 80018bc:	2b7f      	cmp	r3, #127	; 0x7f
 80018be:	dc69      	bgt.n	8001994 <ssd1351_write_char+0x118>
	{
		return;
	}
	if (c == '\n') ssd1351_coordinates.x = SSD1351_PIXEL_WIDTH - 1; // if new line simply
 80018c0:	7b7b      	ldrb	r3, [r7, #13]
 80018c2:	2b0a      	cmp	r3, #10
 80018c4:	d134      	bne.n	8001930 <ssd1351_write_char+0xb4>
 80018c6:	4b36      	ldr	r3, [pc, #216]	; (80019a0 <ssd1351_write_char+0x124>)
 80018c8:	227f      	movs	r2, #127	; 0x7f
 80018ca:	701a      	strb	r2, [r3, #0]
 80018cc:	e034      	b.n	8001938 <ssd1351_write_char+0xbc>
	else
	{
		while(char_pix_vert_pos < height)
		{
			char_pix_row_data = font.data[(c - SPECIAL_CHAR_OFFSET) * height + char_pix_vert_pos]; // "* font.height" to skip over rows and "+ i" to get the 2 byte value for the row
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	7b7b      	ldrb	r3, [r7, #13]
 80018d2:	3b20      	subs	r3, #32
 80018d4:	8b79      	ldrh	r1, [r7, #26]
 80018d6:	fb01 f103 	mul.w	r1, r1, r3
 80018da:	8bfb      	ldrh	r3, [r7, #30]
 80018dc:	440b      	add	r3, r1
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4413      	add	r3, r2
 80018e2:	881b      	ldrh	r3, [r3, #0]
 80018e4:	82fb      	strh	r3, [r7, #22]
			while(char_pix_horiz_pos < width)
 80018e6:	e01a      	b.n	800191e <ssd1351_write_char+0xa2>
			{
				if ((char_pix_row_data << char_pix_horiz_pos) & 0x8000) // if bit is set then draw
 80018e8:	8afa      	ldrh	r2, [r7, #22]
 80018ea:	8bbb      	ldrh	r3, [r7, #28]
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00f      	beq.n	8001918 <ssd1351_write_char+0x9c>
				{
					ssd1351_draw_pixel(ssd1351_coordinates.x + char_pix_horiz_pos, ssd1351_coordinates.y + char_pix_vert_pos, color);
 80018f8:	4b29      	ldr	r3, [pc, #164]	; (80019a0 <ssd1351_write_char+0x124>)
 80018fa:	781a      	ldrb	r2, [r3, #0]
 80018fc:	8bbb      	ldrh	r3, [r7, #28]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	4413      	add	r3, r2
 8001902:	b2d8      	uxtb	r0, r3
 8001904:	4b26      	ldr	r3, [pc, #152]	; (80019a0 <ssd1351_write_char+0x124>)
 8001906:	785a      	ldrb	r2, [r3, #1]
 8001908:	8bfb      	ldrh	r3, [r7, #30]
 800190a:	b2db      	uxtb	r3, r3
 800190c:	4413      	add	r3, r2
 800190e:	b2db      	uxtb	r3, r3
 8001910:	89fa      	ldrh	r2, [r7, #14]
 8001912:	4619      	mov	r1, r3
 8001914:	f7ff ff32 	bl	800177c <ssd1351_draw_pixel>
				}
				char_pix_horiz_pos++;
 8001918:	8bbb      	ldrh	r3, [r7, #28]
 800191a:	3301      	adds	r3, #1
 800191c:	83bb      	strh	r3, [r7, #28]
			while(char_pix_horiz_pos < width)
 800191e:	8bba      	ldrh	r2, [r7, #28]
 8001920:	8b3b      	ldrh	r3, [r7, #24]
 8001922:	429a      	cmp	r2, r3
 8001924:	d3e0      	bcc.n	80018e8 <ssd1351_write_char+0x6c>
			}
			char_pix_vert_pos++;
 8001926:	8bfb      	ldrh	r3, [r7, #30]
 8001928:	3301      	adds	r3, #1
 800192a:	83fb      	strh	r3, [r7, #30]
			char_pix_horiz_pos = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	83bb      	strh	r3, [r7, #28]
		while(char_pix_vert_pos < height)
 8001930:	8bfa      	ldrh	r2, [r7, #30]
 8001932:	8b7b      	ldrh	r3, [r7, #26]
 8001934:	429a      	cmp	r2, r3
 8001936:	d3ca      	bcc.n	80018ce <ssd1351_write_char+0x52>
		}

	}
	ssd1351_coordinates.x += width; // we just wrote a char increment x coordinate by font width
 8001938:	4b19      	ldr	r3, [pc, #100]	; (80019a0 <ssd1351_write_char+0x124>)
 800193a:	781a      	ldrb	r2, [r3, #0]
 800193c:	8b3b      	ldrh	r3, [r7, #24]
 800193e:	b2db      	uxtb	r3, r3
 8001940:	4413      	add	r3, r2
 8001942:	b2da      	uxtb	r2, r3
 8001944:	4b16      	ldr	r3, [pc, #88]	; (80019a0 <ssd1351_write_char+0x124>)
 8001946:	701a      	strb	r2, [r3, #0]
	if ((ssd1351_coordinates.x + width >= 127) & (ssd1351_coordinates.y + height <= 127)) // check if we need to go to new line
 8001948:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <ssd1351_write_char+0x124>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	461a      	mov	r2, r3
 800194e:	8b3b      	ldrh	r3, [r7, #24]
 8001950:	4413      	add	r3, r2
 8001952:	2b7e      	cmp	r3, #126	; 0x7e
 8001954:	bfcc      	ite	gt
 8001956:	2301      	movgt	r3, #1
 8001958:	2300      	movle	r3, #0
 800195a:	b2da      	uxtb	r2, r3
 800195c:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <ssd1351_write_char+0x124>)
 800195e:	785b      	ldrb	r3, [r3, #1]
 8001960:	4619      	mov	r1, r3
 8001962:	8b7b      	ldrh	r3, [r7, #26]
 8001964:	440b      	add	r3, r1
 8001966:	2b7f      	cmp	r3, #127	; 0x7f
 8001968:	bfd4      	ite	le
 800196a:	2301      	movle	r3, #1
 800196c:	2300      	movgt	r3, #0
 800196e:	b2db      	uxtb	r3, r3
 8001970:	4013      	ands	r3, r2
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00f      	beq.n	8001998 <ssd1351_write_char+0x11c>
	{
		ssd1351_coordinates.y = ssd1351_coordinates.y + height + 2; // the +2 is simply additional space between lines
 8001978:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <ssd1351_write_char+0x124>)
 800197a:	785a      	ldrb	r2, [r3, #1]
 800197c:	8b7b      	ldrh	r3, [r7, #26]
 800197e:	b2db      	uxtb	r3, r3
 8001980:	4413      	add	r3, r2
 8001982:	b2db      	uxtb	r3, r3
 8001984:	3302      	adds	r3, #2
 8001986:	b2da      	uxtb	r2, r3
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <ssd1351_write_char+0x124>)
 800198a:	705a      	strb	r2, [r3, #1]
		ssd1351_coordinates.x = 0; // reset x coordinate to 0 for new line!
 800198c:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <ssd1351_write_char+0x124>)
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
	}
	return;
 8001992:	e001      	b.n	8001998 <ssd1351_write_char+0x11c>
		return;
 8001994:	bf00      	nop
 8001996:	e000      	b.n	800199a <ssd1351_write_char+0x11e>
	return;
 8001998:	bf00      	nop
}
 800199a:	3724      	adds	r7, #36	; 0x24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd90      	pop	{r4, r7, pc}
 80019a0:	20001af0 	.word	0x20001af0

080019a4 <ssd1351_printf>:


color_16bit_e g_background_color = COLOR_16BIT_BLACK;
color_16bit_e g_font_color = COLOR_16BIT_RED;
void ssd1351_printf(char *string)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08a      	sub	sp, #40	; 0x28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
	char mem_string[18] = "";
 80019ac:	2300      	movs	r3, #0
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	f107 0310 	add.w	r3, r7, #16
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	819a      	strh	r2, [r3, #12]
	uint8_t mem_string_cnt = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t row_num = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	row_num = 0; // careful may be starting on a new row
 80019ca:	2300      	movs	r3, #0
 80019cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	bool new_word_flag = true;
 80019d0:	2301      	movs	r3, #1
 80019d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	bool print_flag = false;
 80019d6:	2300      	movs	r3, #0
 80019d8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	// find all spaces first...
	if (NULL == string) return;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f000 808c 	beq.w	8001afc <ssd1351_printf+0x158>
	for(int i = 0; i < strlen(string); i++)
 80019e4:	2300      	movs	r3, #0
 80019e6:	623b      	str	r3, [r7, #32]
 80019e8:	e07f      	b.n	8001aea <ssd1351_printf+0x146>
	{
		if (new_word_flag)
 80019ea:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00b      	beq.n	8001a0a <ssd1351_printf+0x66>
		{
			new_word_flag = false;
 80019f2:	2300      	movs	r3, #0
 80019f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			row_num = i / 19;
 80019f8:	6a3b      	ldr	r3, [r7, #32]
 80019fa:	4a42      	ldr	r2, [pc, #264]	; (8001b04 <ssd1351_printf+0x160>)
 80019fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001a00:	10d2      	asrs	r2, r2, #3
 8001a02:	17db      	asrs	r3, r3, #31
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}
		if (strlen(string) - 1 == i) print_flag = true;
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7fe fbe0 	bl	80001d0 <strlen>
 8001a10:	4603      	mov	r3, r0
 8001a12:	1e5a      	subs	r2, r3, #1
 8001a14:	6a3b      	ldr	r3, [r7, #32]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d102      	bne.n	8001a20 <ssd1351_printf+0x7c>
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		if (string[i] != ' ') mem_string[mem_string_cnt++] = string[i];
 8001a20:	6a3b      	ldr	r3, [r7, #32]
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b20      	cmp	r3, #32
 8001a2a:	d00e      	beq.n	8001a4a <ssd1351_printf+0xa6>
 8001a2c:	6a3b      	ldr	r3, [r7, #32]
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	441a      	add	r2, r3
 8001a32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a36:	1c59      	adds	r1, r3, #1
 8001a38:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 8001a3c:	7812      	ldrb	r2, [r2, #0]
 8001a3e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001a42:	440b      	add	r3, r1
 8001a44:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8001a48:	e002      	b.n	8001a50 <ssd1351_printf+0xac>
		else print_flag = true;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		if(print_flag)
 8001a50:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d045      	beq.n	8001ae4 <ssd1351_printf+0x140>
		{
			mem_string_cnt = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if ((i / 19) != row_num)
 8001a5e:	6a3b      	ldr	r3, [r7, #32]
 8001a60:	4a28      	ldr	r2, [pc, #160]	; (8001b04 <ssd1351_printf+0x160>)
 8001a62:	fb82 1203 	smull	r1, r2, r2, r3
 8001a66:	10d2      	asrs	r2, r2, #3
 8001a68:	17db      	asrs	r3, r3, #31
 8001a6a:	1ad2      	subs	r2, r2, r3
 8001a6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d017      	beq.n	8001aa4 <ssd1351_printf+0x100>
			{
				ssd1351_write_char(g_font_color, Font_7x10, '\n');
 8001a74:	4b24      	ldr	r3, [pc, #144]	; (8001b08 <ssd1351_printf+0x164>)
 8001a76:	8818      	ldrh	r0, [r3, #0]
 8001a78:	4a24      	ldr	r2, [pc, #144]	; (8001b0c <ssd1351_printf+0x168>)
 8001a7a:	230a      	movs	r3, #10
 8001a7c:	ca06      	ldmia	r2, {r1, r2}
 8001a7e:	f7ff fefd 	bl	800187c <ssd1351_write_char>
			}
			while(mem_string[mem_string_cnt] != 0)
 8001a82:	e00f      	b.n	8001aa4 <ssd1351_printf+0x100>
			{
				ssd1351_write_char(g_font_color, Font_7x10, mem_string[mem_string_cnt++]);
 8001a84:	4b20      	ldr	r3, [pc, #128]	; (8001b08 <ssd1351_printf+0x164>)
 8001a86:	8818      	ldrh	r0, [r3, #0]
 8001a88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a8c:	1c5a      	adds	r2, r3, #1
 8001a8e:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8001a92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a96:	4413      	add	r3, r2
 8001a98:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001a9c:	4a1b      	ldr	r2, [pc, #108]	; (8001b0c <ssd1351_printf+0x168>)
 8001a9e:	ca06      	ldmia	r2, {r1, r2}
 8001aa0:	f7ff feec 	bl	800187c <ssd1351_write_char>
			while(mem_string[mem_string_cnt] != 0)
 8001aa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001aa8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001aac:	4413      	add	r3, r2
 8001aae:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1e6      	bne.n	8001a84 <ssd1351_printf+0xe0>
			}
			ssd1351_write_char(g_font_color, Font_7x10, ' ');
 8001ab6:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <ssd1351_printf+0x164>)
 8001ab8:	8818      	ldrh	r0, [r3, #0]
 8001aba:	4a14      	ldr	r2, [pc, #80]	; (8001b0c <ssd1351_printf+0x168>)
 8001abc:	2320      	movs	r3, #32
 8001abe:	ca06      	ldmia	r2, {r1, r2}
 8001ac0:	f7ff fedc 	bl	800187c <ssd1351_write_char>
			//ssd1351_write_buffer_to_display();
			memset(mem_string, 0, sizeof(mem_string));
 8001ac4:	f107 030c 	add.w	r3, r7, #12
 8001ac8:	2212      	movs	r2, #18
 8001aca:	2100      	movs	r1, #0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f007 fbe1 	bl	8009294 <memset>
			mem_string_cnt = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			new_word_flag = true;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			print_flag = false;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	for(int i = 0; i < strlen(string); i++)
 8001ae4:	6a3b      	ldr	r3, [r7, #32]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	623b      	str	r3, [r7, #32]
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7fe fb70 	bl	80001d0 <strlen>
 8001af0:	4602      	mov	r2, r0
 8001af2:	6a3b      	ldr	r3, [r7, #32]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	f63f af78 	bhi.w	80019ea <ssd1351_printf+0x46>
 8001afa:	e000      	b.n	8001afe <ssd1351_printf+0x15a>
	if (NULL == string) return;
 8001afc:	bf00      	nop
		string++;
	}
	*/
	//ssd1351_write_buffer_to_display();

}
 8001afe:	3728      	adds	r7, #40	; 0x28
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	6bca1af3 	.word	0x6bca1af3
 8001b08:	20000016 	.word	0x20000016
 8001b0c:	20000000 	.word	0x20000000

08001b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b16:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <HAL_MspInit+0x4c>)
 8001b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b1a:	4a10      	ldr	r2, [pc, #64]	; (8001b5c <HAL_MspInit+0x4c>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	6613      	str	r3, [r2, #96]	; 0x60
 8001b22:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <HAL_MspInit+0x4c>)
 8001b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	607b      	str	r3, [r7, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <HAL_MspInit+0x4c>)
 8001b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b32:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <HAL_MspInit+0x4c>)
 8001b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b38:	6593      	str	r3, [r2, #88]	; 0x58
 8001b3a:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <HAL_MspInit+0x4c>)
 8001b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b42:	603b      	str	r3, [r7, #0]
 8001b44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b46:	2200      	movs	r2, #0
 8001b48:	210f      	movs	r1, #15
 8001b4a:	f06f 0001 	mvn.w	r0, #1
 8001b4e:	f000 ff0d 	bl	800296c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40021000 	.word	0x40021000

08001b60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08a      	sub	sp, #40	; 0x28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a25      	ldr	r2, [pc, #148]	; (8001c14 <HAL_SPI_MspInit+0xb4>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d144      	bne.n	8001c0c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b82:	4b25      	ldr	r3, [pc, #148]	; (8001c18 <HAL_SPI_MspInit+0xb8>)
 8001b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b86:	4a24      	ldr	r2, [pc, #144]	; (8001c18 <HAL_SPI_MspInit+0xb8>)
 8001b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b8c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b8e:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <HAL_SPI_MspInit+0xb8>)
 8001b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b9a:	4b1f      	ldr	r3, [pc, #124]	; (8001c18 <HAL_SPI_MspInit+0xb8>)
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9e:	4a1e      	ldr	r2, [pc, #120]	; (8001c18 <HAL_SPI_MspInit+0xb8>)
 8001ba0:	f043 0304 	orr.w	r3, r3, #4
 8001ba4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ba6:	4b1c      	ldr	r3, [pc, #112]	; (8001c18 <HAL_SPI_MspInit+0xb8>)
 8001ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001baa:	f003 0304 	and.w	r3, r3, #4
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb2:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <HAL_SPI_MspInit+0xb8>)
 8001bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb6:	4a18      	ldr	r2, [pc, #96]	; (8001c18 <HAL_SPI_MspInit+0xb8>)
 8001bb8:	f043 0302 	orr.w	r3, r3, #2
 8001bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bbe:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <HAL_SPI_MspInit+0xb8>)
 8001bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bca:	2304      	movs	r3, #4
 8001bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bda:	2305      	movs	r3, #5
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bde:	f107 0314 	add.w	r3, r7, #20
 8001be2:	4619      	mov	r1, r3
 8001be4:	480d      	ldr	r0, [pc, #52]	; (8001c1c <HAL_SPI_MspInit+0xbc>)
 8001be6:	f001 fb67 	bl	80032b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001bea:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bfc:	2305      	movs	r3, #5
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	4619      	mov	r1, r3
 8001c06:	4806      	ldr	r0, [pc, #24]	; (8001c20 <HAL_SPI_MspInit+0xc0>)
 8001c08:	f001 fb56 	bl	80032b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001c0c:	bf00      	nop
 8001c0e:	3728      	adds	r7, #40	; 0x28
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40003800 	.word	0x40003800
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	48000800 	.word	0x48000800
 8001c20:	48000400 	.word	0x48000400

08001c24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08a      	sub	sp, #40	; 0x28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a41      	ldr	r2, [pc, #260]	; (8001d48 <HAL_UART_MspInit+0x124>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d17b      	bne.n	8001d3e <HAL_UART_MspInit+0x11a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c46:	4b41      	ldr	r3, [pc, #260]	; (8001d4c <HAL_UART_MspInit+0x128>)
 8001c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c4a:	4a40      	ldr	r2, [pc, #256]	; (8001d4c <HAL_UART_MspInit+0x128>)
 8001c4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c50:	6613      	str	r3, [r2, #96]	; 0x60
 8001c52:	4b3e      	ldr	r3, [pc, #248]	; (8001d4c <HAL_UART_MspInit+0x128>)
 8001c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5e:	4b3b      	ldr	r3, [pc, #236]	; (8001d4c <HAL_UART_MspInit+0x128>)
 8001c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c62:	4a3a      	ldr	r2, [pc, #232]	; (8001d4c <HAL_UART_MspInit+0x128>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c6a:	4b38      	ldr	r3, [pc, #224]	; (8001d4c <HAL_UART_MspInit+0x128>)
 8001c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c76:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c84:	2303      	movs	r3, #3
 8001c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c88:	2307      	movs	r3, #7
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8c:	f107 0314 	add.w	r3, r7, #20
 8001c90:	4619      	mov	r1, r3
 8001c92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c96:	f001 fb0f 	bl	80032b8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001c9a:	4b2d      	ldr	r3, [pc, #180]	; (8001d50 <HAL_UART_MspInit+0x12c>)
 8001c9c:	4a2d      	ldr	r2, [pc, #180]	; (8001d54 <HAL_UART_MspInit+0x130>)
 8001c9e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8001ca0:	4b2b      	ldr	r3, [pc, #172]	; (8001d50 <HAL_UART_MspInit+0x12c>)
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ca6:	4b2a      	ldr	r3, [pc, #168]	; (8001d50 <HAL_UART_MspInit+0x12c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cac:	4b28      	ldr	r3, [pc, #160]	; (8001d50 <HAL_UART_MspInit+0x12c>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cb2:	4b27      	ldr	r3, [pc, #156]	; (8001d50 <HAL_UART_MspInit+0x12c>)
 8001cb4:	2280      	movs	r2, #128	; 0x80
 8001cb6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cb8:	4b25      	ldr	r3, [pc, #148]	; (8001d50 <HAL_UART_MspInit+0x12c>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cbe:	4b24      	ldr	r3, [pc, #144]	; (8001d50 <HAL_UART_MspInit+0x12c>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001cc4:	4b22      	ldr	r3, [pc, #136]	; (8001d50 <HAL_UART_MspInit+0x12c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001cca:	4b21      	ldr	r3, [pc, #132]	; (8001d50 <HAL_UART_MspInit+0x12c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001cd0:	481f      	ldr	r0, [pc, #124]	; (8001d50 <HAL_UART_MspInit+0x12c>)
 8001cd2:	f000 fe75 	bl	80029c0 <HAL_DMA_Init>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 8001cdc:	f7fe fd98 	bl	8000810 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a1b      	ldr	r2, [pc, #108]	; (8001d50 <HAL_UART_MspInit+0x12c>)
 8001ce4:	671a      	str	r2, [r3, #112]	; 0x70
 8001ce6:	4a1a      	ldr	r2, [pc, #104]	; (8001d50 <HAL_UART_MspInit+0x12c>)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001cec:	4b1a      	ldr	r3, [pc, #104]	; (8001d58 <HAL_UART_MspInit+0x134>)
 8001cee:	4a1b      	ldr	r2, [pc, #108]	; (8001d5c <HAL_UART_MspInit+0x138>)
 8001cf0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8001cf2:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <HAL_UART_MspInit+0x134>)
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cf8:	4b17      	ldr	r3, [pc, #92]	; (8001d58 <HAL_UART_MspInit+0x134>)
 8001cfa:	2210      	movs	r2, #16
 8001cfc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cfe:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <HAL_UART_MspInit+0x134>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d04:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <HAL_UART_MspInit+0x134>)
 8001d06:	2280      	movs	r2, #128	; 0x80
 8001d08:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d0a:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <HAL_UART_MspInit+0x134>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d10:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <HAL_UART_MspInit+0x134>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001d16:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <HAL_UART_MspInit+0x134>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d1c:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <HAL_UART_MspInit+0x134>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001d22:	480d      	ldr	r0, [pc, #52]	; (8001d58 <HAL_UART_MspInit+0x134>)
 8001d24:	f000 fe4c 	bl	80029c0 <HAL_DMA_Init>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8001d2e:	f7fe fd6f 	bl	8000810 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a08      	ldr	r2, [pc, #32]	; (8001d58 <HAL_UART_MspInit+0x134>)
 8001d36:	66da      	str	r2, [r3, #108]	; 0x6c
 8001d38:	4a07      	ldr	r2, [pc, #28]	; (8001d58 <HAL_UART_MspInit+0x134>)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d3e:	bf00      	nop
 8001d40:	3728      	adds	r7, #40	; 0x28
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40013800 	.word	0x40013800
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	20001a24 	.word	0x20001a24
 8001d54:	40020058 	.word	0x40020058
 8001d58:	200019dc 	.word	0x200019dc
 8001d5c:	40020044 	.word	0x40020044

08001d60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08c      	sub	sp, #48	; 0x30
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001d70:	2200      	movs	r2, #0
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	2019      	movs	r0, #25
 8001d76:	f000 fdf9 	bl	800296c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001d7a:	2019      	movs	r0, #25
 8001d7c:	f000 fe12 	bl	80029a4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001d80:	4b1e      	ldr	r3, [pc, #120]	; (8001dfc <HAL_InitTick+0x9c>)
 8001d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d84:	4a1d      	ldr	r2, [pc, #116]	; (8001dfc <HAL_InitTick+0x9c>)
 8001d86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d8a:	6613      	str	r3, [r2, #96]	; 0x60
 8001d8c:	4b1b      	ldr	r3, [pc, #108]	; (8001dfc <HAL_InitTick+0x9c>)
 8001d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d98:	f107 0210 	add.w	r2, r7, #16
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	4611      	mov	r1, r2
 8001da2:	4618      	mov	r0, r3
 8001da4:	f002 fa5c 	bl	8004260 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001da8:	f002 fa44 	bl	8004234 <HAL_RCC_GetPCLK2Freq>
 8001dac:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db0:	4a13      	ldr	r2, [pc, #76]	; (8001e00 <HAL_InitTick+0xa0>)
 8001db2:	fba2 2303 	umull	r2, r3, r2, r3
 8001db6:	0c9b      	lsrs	r3, r3, #18
 8001db8:	3b01      	subs	r3, #1
 8001dba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001dbc:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <HAL_InitTick+0xa4>)
 8001dbe:	4a12      	ldr	r2, [pc, #72]	; (8001e08 <HAL_InitTick+0xa8>)
 8001dc0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001dc2:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <HAL_InitTick+0xa4>)
 8001dc4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001dc8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001dca:	4a0e      	ldr	r2, [pc, #56]	; (8001e04 <HAL_InitTick+0xa4>)
 8001dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dce:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <HAL_InitTick+0xa4>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd6:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_InitTick+0xa4>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001ddc:	4809      	ldr	r0, [pc, #36]	; (8001e04 <HAL_InitTick+0xa4>)
 8001dde:	f003 f97b 	bl	80050d8 <HAL_TIM_Base_Init>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d104      	bne.n	8001df2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001de8:	4806      	ldr	r0, [pc, #24]	; (8001e04 <HAL_InitTick+0xa4>)
 8001dea:	f003 f9d7 	bl	800519c <HAL_TIM_Base_Start_IT>
 8001dee:	4603      	mov	r3, r0
 8001df0:	e000      	b.n	8001df4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3730      	adds	r7, #48	; 0x30
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	431bde83 	.word	0x431bde83
 8001e04:	20009ff8 	.word	0x20009ff8
 8001e08:	40012c00 	.word	0x40012c00

08001e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e1e:	e7fe      	b.n	8001e1e <HardFault_Handler+0x4>

08001e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e24:	e7fe      	b.n	8001e24 <MemManage_Handler+0x4>

08001e26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e2a:	e7fe      	b.n	8001e2a <BusFault_Handler+0x4>

08001e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e30:	e7fe      	b.n	8001e30 <UsageFault_Handler+0x4>

08001e32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001e44:	4802      	ldr	r0, [pc, #8]	; (8001e50 <DMA1_Channel4_IRQHandler+0x10>)
 8001e46:	f000 fed3 	bl	8002bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	200019dc 	.word	0x200019dc

08001e54 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001e58:	4802      	ldr	r0, [pc, #8]	; (8001e64 <DMA1_Channel5_IRQHandler+0x10>)
 8001e5a:	f000 fec9 	bl	8002bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20001a24 	.word	0x20001a24

08001e68 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e6c:	4802      	ldr	r0, [pc, #8]	; (8001e78 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001e6e:	f003 f9e9 	bl	8005244 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20009ff8 	.word	0x20009ff8

08001e7c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e80:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <SystemInit+0x64>)
 8001e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e86:	4a16      	ldr	r2, [pc, #88]	; (8001ee0 <SystemInit+0x64>)
 8001e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001e90:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <SystemInit+0x68>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a13      	ldr	r2, [pc, #76]	; (8001ee4 <SystemInit+0x68>)
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001e9c:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <SystemInit+0x68>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <SystemInit+0x68>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a0f      	ldr	r2, [pc, #60]	; (8001ee4 <SystemInit+0x68>)
 8001ea8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001eac:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001eb0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001eb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <SystemInit+0x68>)
 8001eb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001eb8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001eba:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <SystemInit+0x68>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a09      	ldr	r2, [pc, #36]	; (8001ee4 <SystemInit+0x68>)
 8001ec0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ec4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001ec6:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <SystemInit+0x68>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ecc:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <SystemInit+0x64>)
 8001ece:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ed2:	609a      	str	r2, [r3, #8]
#endif
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	e000ed00 	.word	0xe000ed00
 8001ee4:	40021000 	.word	0x40021000

08001ee8 <task_create>:
  .priority = (osPriority_t) osPriorityNormal1,
};


void task_create(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
	packet_queue_init();
 8001eec:	f7ff f834 	bl	8000f58 <packet_queue_init>
	serial_com_init_all();
 8001ef0:	f7ff fa2c 	bl	800134c <serial_com_init_all>

	task_sensor_txHandle = osThreadNew(task_sensor_tx_entry, NULL, &task_sensor_tx_attributes);
 8001ef4:	4a10      	ldr	r2, [pc, #64]	; (8001f38 <task_create+0x50>)
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	4810      	ldr	r0, [pc, #64]	; (8001f3c <task_create+0x54>)
 8001efa:	f004 fa33 	bl	8006364 <osThreadNew>
 8001efe:	4603      	mov	r3, r0
 8001f00:	4a0f      	ldr	r2, [pc, #60]	; (8001f40 <task_create+0x58>)
 8001f02:	6013      	str	r3, [r2, #0]
	task_sensor_rxHandle = osThreadNew(sensor_rx_entry, NULL, &task_sensor_rx_attributes);
 8001f04:	4a0f      	ldr	r2, [pc, #60]	; (8001f44 <task_create+0x5c>)
 8001f06:	2100      	movs	r1, #0
 8001f08:	480f      	ldr	r0, [pc, #60]	; (8001f48 <task_create+0x60>)
 8001f0a:	f004 fa2b 	bl	8006364 <osThreadNew>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	4a0e      	ldr	r2, [pc, #56]	; (8001f4c <task_create+0x64>)
 8001f12:	6013      	str	r3, [r2, #0]
	task_sensor_accHandle = osThreadNew(task_sensor_access_entry, NULL, &task_sensor_acc_attributes);
 8001f14:	4a0e      	ldr	r2, [pc, #56]	; (8001f50 <task_create+0x68>)
 8001f16:	2100      	movs	r1, #0
 8001f18:	480e      	ldr	r0, [pc, #56]	; (8001f54 <task_create+0x6c>)
 8001f1a:	f004 fa23 	bl	8006364 <osThreadNew>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	4a0d      	ldr	r2, [pc, #52]	; (8001f58 <task_create+0x70>)
 8001f22:	6013      	str	r3, [r2, #0]

	//task_display_upHandle = osThreadNew(task_display_update_entry, NULL, &task_display_up_attributes);
	task_keypad_accHandle = osThreadNew(task_keypad_access_entry, NULL, &task_keypad_acc_attributes);
 8001f24:	4a0d      	ldr	r2, [pc, #52]	; (8001f5c <task_create+0x74>)
 8001f26:	2100      	movs	r1, #0
 8001f28:	480d      	ldr	r0, [pc, #52]	; (8001f60 <task_create+0x78>)
 8001f2a:	f004 fa1b 	bl	8006364 <osThreadNew>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	4a0c      	ldr	r2, [pc, #48]	; (8001f64 <task_create+0x7c>)
 8001f32:	6013      	str	r3, [r2, #0]
}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	08009d28 	.word	0x08009d28
 8001f3c:	080013d9 	.word	0x080013d9
 8001f40:	2000a5c0 	.word	0x2000a5c0
 8001f44:	08009d04 	.word	0x08009d04
 8001f48:	08001411 	.word	0x08001411
 8001f4c:	2000a300 	.word	0x2000a300
 8001f50:	08009d4c 	.word	0x08009d4c
 8001f54:	08002139 	.word	0x08002139
 8001f58:	2000aa20 	.word	0x2000aa20
 8001f5c:	08009d70 	.word	0x08009d70
 8001f60:	08001f69 	.word	0x08001f69
 8001f64:	2000a044 	.word	0x2000a044

08001f68 <task_keypad_access_entry>:
keypad_state_e keypad_state = KEYPAD_STATE_SCAN;

uint8_t password[KEYPAD_PASSWORD_LENGTH] = {0};

void task_keypad_access_entry(void *argument)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
	uint8_t key_stroke = 0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	737b      	strb	r3, [r7, #13]
	uint8_t password_index = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	73fb      	strb	r3, [r7, #15]
	uint8_t failed_attempts = 0;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	73bb      	strb	r3, [r7, #14]
	while(1)
	{
		switch(keypad_state)
 8001f7c:	4b50      	ldr	r3, [pc, #320]	; (80020c0 <task_keypad_access_entry+0x158>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b03      	cmp	r3, #3
 8001f82:	f200 8099 	bhi.w	80020b8 <task_keypad_access_entry+0x150>
 8001f86:	a201      	add	r2, pc, #4	; (adr r2, 8001f8c <task_keypad_access_entry+0x24>)
 8001f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f8c:	08001f9d 	.word	0x08001f9d
 8001f90:	08001fb1 	.word	0x08001fb1
 8001f94:	08002069 	.word	0x08002069
 8001f98:	08002091 	.word	0x08002091
		{
			case KEYPAD_STATE_SCAN:
				if (keypad_scan()) keypad_state = KEYPAD_STATE_BTN_PRESS;
 8001f9c:	f7fe ff18 	bl	8000dd0 <keypad_scan>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 8085 	beq.w	80020b2 <task_keypad_access_entry+0x14a>
 8001fa8:	4b45      	ldr	r3, [pc, #276]	; (80020c0 <task_keypad_access_entry+0x158>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	701a      	strb	r2, [r3, #0]
			break;
 8001fae:	e080      	b.n	80020b2 <task_keypad_access_entry+0x14a>
			case KEYPAD_STATE_BTN_PRESS:
				key_stroke = keypad_button_pressed();
 8001fb0:	f7fe ff02 	bl	8000db8 <keypad_button_pressed>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	737b      	strb	r3, [r7, #13]
				keypad_state = KEYPAD_STATE_SCAN;
 8001fb8:	4b41      	ldr	r3, [pc, #260]	; (80020c0 <task_keypad_access_entry+0x158>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	701a      	strb	r2, [r3, #0]
				//osDelay(1000);
				if (GT521FX_STATE_IDENTIFY == gt521fx_current_state())
 8001fbe:	f000 f893 	bl	80020e8 <gt521fx_current_state>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d141      	bne.n	800204c <task_keypad_access_entry+0xe4>
				{
					// Attempting to enter admin menu
					password[password_index++] = key_stroke;
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
 8001fca:	1c5a      	adds	r2, r3, #1
 8001fcc:	73fa      	strb	r2, [r7, #15]
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4a3c      	ldr	r2, [pc, #240]	; (80020c4 <task_keypad_access_entry+0x15c>)
 8001fd2:	7b7b      	ldrb	r3, [r7, #13]
 8001fd4:	5453      	strb	r3, [r2, r1]
					if (12 == key_stroke)
 8001fd6:	7b7b      	ldrb	r3, [r7, #13]
 8001fd8:	2b0c      	cmp	r3, #12
 8001fda:	d106      	bne.n	8001fea <task_keypad_access_entry+0x82>
					{
						memset(password, 0, KEYPAD_PASSWORD_LENGTH);
 8001fdc:	2208      	movs	r2, #8
 8001fde:	2100      	movs	r1, #0
 8001fe0:	4838      	ldr	r0, [pc, #224]	; (80020c4 <task_keypad_access_entry+0x15c>)
 8001fe2:	f007 f957 	bl	8009294 <memset>
						password_index = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	73fb      	strb	r3, [r7, #15]
						// print display was cleared..
					}
					if (KEYPAD_PASSWORD_LENGTH == password_index)
 8001fea:	7bfb      	ldrb	r3, [r7, #15]
 8001fec:	2b08      	cmp	r3, #8
 8001fee:	d129      	bne.n	8002044 <task_keypad_access_entry+0xdc>
					{
						if (keypad_password_check(password))
 8001ff0:	4834      	ldr	r0, [pc, #208]	; (80020c4 <task_keypad_access_entry+0x15c>)
 8001ff2:	f7fe fea5 	bl	8000d40 <keypad_password_check>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00a      	beq.n	8002012 <task_keypad_access_entry+0xaa>
						{
							memset(password, 0, KEYPAD_PASSWORD_LENGTH);
 8001ffc:	2208      	movs	r2, #8
 8001ffe:	2100      	movs	r1, #0
 8002000:	4830      	ldr	r0, [pc, #192]	; (80020c4 <task_keypad_access_entry+0x15c>)
 8002002:	f007 f947 	bl	8009294 <memset>
							password_index = 0;
 8002006:	2300      	movs	r3, #0
 8002008:	73fb      	strb	r3, [r7, #15]
							keypad_state = KEYPAD_STATE_PASSWORD_MATCH;
 800200a:	4b2d      	ldr	r3, [pc, #180]	; (80020c0 <task_keypad_access_entry+0x158>)
 800200c:	2202      	movs	r2, #2
 800200e:	701a      	strb	r2, [r3, #0]
				else if(GT521FX_STATE_ADMIN == gt521fx_current_state())
				{
					gt521fx_set_state(key_stroke);
					keypad_state = KEYPAD_STATE_SCAN;
				}
			break;
 8002010:	e051      	b.n	80020b6 <task_keypad_access_entry+0x14e>
							failed_attempts++;
 8002012:	7bbb      	ldrb	r3, [r7, #14]
 8002014:	3301      	adds	r3, #1
 8002016:	73bb      	strb	r3, [r7, #14]
							memset(password, 0, KEYPAD_PASSWORD_LENGTH);
 8002018:	2208      	movs	r2, #8
 800201a:	2100      	movs	r1, #0
 800201c:	4829      	ldr	r0, [pc, #164]	; (80020c4 <task_keypad_access_entry+0x15c>)
 800201e:	f007 f939 	bl	8009294 <memset>
							password_index = 0;
 8002022:	2300      	movs	r3, #0
 8002024:	73fb      	strb	r3, [r7, #15]
							ssd1351_clear_screen(); // always clear here
 8002026:	f7ff fc11 	bl	800184c <ssd1351_clear_screen>
							ssd1351_printf("Wrong password. Dumbass!\n");
 800202a:	4827      	ldr	r0, [pc, #156]	; (80020c8 <task_keypad_access_entry+0x160>)
 800202c:	f7ff fcba 	bl	80019a4 <ssd1351_printf>
							ssd1351_write_buffer_to_display();
 8002030:	f7ff fa82 	bl	8001538 <ssd1351_write_buffer_to_display>
							osDelay(1000);
 8002034:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002038:	f004 fa26 	bl	8006488 <osDelay>
							keypad_state = KEYPAD_STATE_SCAN;
 800203c:	4b20      	ldr	r3, [pc, #128]	; (80020c0 <task_keypad_access_entry+0x158>)
 800203e:	2200      	movs	r2, #0
 8002040:	701a      	strb	r2, [r3, #0]
			break;
 8002042:	e038      	b.n	80020b6 <task_keypad_access_entry+0x14e>
						keypad_state = KEYPAD_STATE_SCAN;
 8002044:	4b1e      	ldr	r3, [pc, #120]	; (80020c0 <task_keypad_access_entry+0x158>)
 8002046:	2200      	movs	r2, #0
 8002048:	701a      	strb	r2, [r3, #0]
			break;
 800204a:	e034      	b.n	80020b6 <task_keypad_access_entry+0x14e>
				else if(GT521FX_STATE_ADMIN == gt521fx_current_state())
 800204c:	f000 f84c 	bl	80020e8 <gt521fx_current_state>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d12f      	bne.n	80020b6 <task_keypad_access_entry+0x14e>
					gt521fx_set_state(key_stroke);
 8002056:	7b7b      	ldrb	r3, [r7, #13]
 8002058:	b29b      	uxth	r3, r3
 800205a:	4618      	mov	r0, r3
 800205c:	f000 f850 	bl	8002100 <gt521fx_set_state>
					keypad_state = KEYPAD_STATE_SCAN;
 8002060:	4b17      	ldr	r3, [pc, #92]	; (80020c0 <task_keypad_access_entry+0x158>)
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]
			break;
 8002066:	e026      	b.n	80020b6 <task_keypad_access_entry+0x14e>
			case KEYPAD_STATE_PASSWORD_MATCH:
				gt521fx_set_state(0);
 8002068:	2000      	movs	r0, #0
 800206a:	f000 f849 	bl	8002100 <gt521fx_set_state>
				ssd1351_clear_screen(); // always clear here
 800206e:	f7ff fbed 	bl	800184c <ssd1351_clear_screen>
				ssd1351_printf("Correct password!\n");
 8002072:	4816      	ldr	r0, [pc, #88]	; (80020cc <task_keypad_access_entry+0x164>)
 8002074:	f7ff fc96 	bl	80019a4 <ssd1351_printf>
				ssd1351_write_buffer_to_display();
 8002078:	f7ff fa5e 	bl	8001538 <ssd1351_write_buffer_to_display>
				osDelay(1000);
 800207c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002080:	f004 fa02 	bl	8006488 <osDelay>
				set_screen_refresh();
 8002084:	f000 f824 	bl	80020d0 <set_screen_refresh>
				keypad_state = KEYPAD_STATE_SCAN;
 8002088:	4b0d      	ldr	r3, [pc, #52]	; (80020c0 <task_keypad_access_entry+0x158>)
 800208a:	2200      	movs	r2, #0
 800208c:	701a      	strb	r2, [r3, #0]
				// print success message
				// change state in task_sensor_access
		    break;
 800208e:	e013      	b.n	80020b8 <task_keypad_access_entry+0x150>
			case KEYPAD_STATE_LOCKOUT:
				ssd1351_clear_screen(); // always clear here
 8002090:	f7ff fbdc 	bl	800184c <ssd1351_clear_screen>
				ssd1351_printf("Wrong password. Dumbass!\n");
 8002094:	480c      	ldr	r0, [pc, #48]	; (80020c8 <task_keypad_access_entry+0x160>)
 8002096:	f7ff fc85 	bl	80019a4 <ssd1351_printf>
				ssd1351_write_buffer_to_display();
 800209a:	f7ff fa4d 	bl	8001538 <ssd1351_write_buffer_to_display>
				osDelay(1000);
 800209e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020a2:	f004 f9f1 	bl	8006488 <osDelay>
				set_screen_refresh();
 80020a6:	f000 f813 	bl	80020d0 <set_screen_refresh>
				keypad_state = KEYPAD_STATE_SCAN;
 80020aa:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <task_keypad_access_entry+0x158>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	701a      	strb	r2, [r3, #0]
				// if 5 failures in a row then this should lock for like an hour maybe
		    break;
 80020b0:	e002      	b.n	80020b8 <task_keypad_access_entry+0x150>
			break;
 80020b2:	bf00      	nop
 80020b4:	e000      	b.n	80020b8 <task_keypad_access_entry+0x150>
			break;
 80020b6:	bf00      	nop
		}
		osDelay(1);
 80020b8:	2001      	movs	r0, #1
 80020ba:	f004 f9e5 	bl	8006488 <osDelay>
		switch(keypad_state)
 80020be:	e75d      	b.n	8001f7c <task_keypad_access_entry+0x14>
 80020c0:	200000a0 	.word	0x200000a0
 80020c4:	200000a4 	.word	0x200000a4
 80020c8:	080093b8 	.word	0x080093b8
 80020cc:	080093d4 	.word	0x080093d4

080020d0 <set_screen_refresh>:
gt521fx_state_e gt521fx_state = GT521FX_STATE_IDENTIFY;
bool g_gt521fx_forced_state_change = false;


void set_screen_refresh(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
	refresh_screen = true;
 80020d4:	4b03      	ldr	r3, [pc, #12]	; (80020e4 <set_screen_refresh+0x14>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	701a      	strb	r2, [r3, #0]
}
 80020da:	bf00      	nop
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	2000001c 	.word	0x2000001c

080020e8 <gt521fx_current_state>:


gt521fx_state_e gt521fx_current_state(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
	return gt521fx_state;
 80020ec:	4b03      	ldr	r3, [pc, #12]	; (80020fc <gt521fx_current_state+0x14>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	2000001d 	.word	0x2000001d

08002100 <gt521fx_set_state>:

void gt521fx_set_state(uint16_t key)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	80fb      	strh	r3, [r7, #6]
	refresh_screen = true;
 800210a:	4b08      	ldr	r3, [pc, #32]	; (800212c <gt521fx_set_state+0x2c>)
 800210c:	2201      	movs	r2, #1
 800210e:	701a      	strb	r2, [r3, #0]
    g_gt521fx_forced_state_change = true;
 8002110:	4b07      	ldr	r3, [pc, #28]	; (8002130 <gt521fx_set_state+0x30>)
 8002112:	2201      	movs	r2, #1
 8002114:	701a      	strb	r2, [r3, #0]
	gt521fx_state = (gt521fx_state_e)key;
 8002116:	88fb      	ldrh	r3, [r7, #6]
 8002118:	b2da      	uxtb	r2, r3
 800211a:	4b06      	ldr	r3, [pc, #24]	; (8002134 <gt521fx_set_state+0x34>)
 800211c:	701a      	strb	r2, [r3, #0]
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	2000001c 	.word	0x2000001c
 8002130:	200000ac 	.word	0x200000ac
 8002134:	2000001d 	.word	0x2000001d

08002138 <task_sensor_access_entry>:


void task_sensor_access_entry(void *argument)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
	bool first_pass = true;
 8002140:	2301      	movs	r3, #1
 8002142:	73fb      	strb	r3, [r7, #15]

	char last_id[3] = {0, 0, 0};
 8002144:	4ace      	ldr	r2, [pc, #824]	; (8002480 <task_sensor_access_entry+0x348>)
 8002146:	f107 030c 	add.w	r3, r7, #12
 800214a:	6812      	ldr	r2, [r2, #0]
 800214c:	4611      	mov	r1, r2
 800214e:	8019      	strh	r1, [r3, #0]
 8002150:	3302      	adds	r3, #2
 8002152:	0c12      	lsrs	r2, r2, #16
 8002154:	701a      	strb	r2, [r3, #0]
	while(1)
	{
		if (first_pass)
 8002156:	7bfb      	ldrb	r3, [r7, #15]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d01e      	beq.n	800219a <task_sensor_access_entry+0x62>
		{
			gt521fx_open();
 800215c:	f7fe fd2c 	bl	8000bb8 <gt521fx_open>
			while (!packet_rsp_was_received())
 8002160:	e002      	b.n	8002168 <task_sensor_access_entry+0x30>
			{
				osDelay(1);
 8002162:	2001      	movs	r0, #1
 8002164:	f004 f990 	bl	8006488 <osDelay>
			while (!packet_rsp_was_received())
 8002168:	f7ff f864 	bl	8001234 <packet_rsp_was_received>
 800216c:	4603      	mov	r3, r0
 800216e:	f083 0301 	eor.w	r3, r3, #1
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1f4      	bne.n	8002162 <task_sensor_access_entry+0x2a>
			}
			gt521fx_led_on();
 8002178:	f7fe fd12 	bl	8000ba0 <gt521fx_led_on>
			while (!packet_rsp_was_received())
 800217c:	e002      	b.n	8002184 <task_sensor_access_entry+0x4c>
			{
				osDelay(1);
 800217e:	2001      	movs	r0, #1
 8002180:	f004 f982 	bl	8006488 <osDelay>
			while (!packet_rsp_was_received())
 8002184:	f7ff f856 	bl	8001234 <packet_rsp_was_received>
 8002188:	4603      	mov	r3, r0
 800218a:	f083 0301 	eor.w	r3, r3, #1
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1f4      	bne.n	800217e <task_sensor_access_entry+0x46>
			}
			first_pass = false;
 8002194:	2300      	movs	r3, #0
 8002196:	73fb      	strb	r3, [r7, #15]
 8002198:	e7dd      	b.n	8002156 <task_sensor_access_entry+0x1e>
		}
		else
		{ 
			switch(gt521fx_state)
 800219a:	4bba      	ldr	r3, [pc, #744]	; (8002484 <task_sensor_access_entry+0x34c>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b08      	cmp	r3, #8
 80021a0:	f200 8287 	bhi.w	80026b2 <task_sensor_access_entry+0x57a>
 80021a4:	a201      	add	r2, pc, #4	; (adr r2, 80021ac <task_sensor_access_entry+0x74>)
 80021a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021aa:	bf00      	nop
 80021ac:	080021d1 	.word	0x080021d1
 80021b0:	0800222b 	.word	0x0800222b
 80021b4:	0800252d 	.word	0x0800252d
 80021b8:	08002567 	.word	0x08002567
 80021bc:	08002599 	.word	0x08002599
 80021c0:	080026b5 	.word	0x080026b5
 80021c4:	08002669 	.word	0x08002669
 80021c8:	08002689 	.word	0x08002689
 80021cc:	080026a9 	.word	0x080026a9
			{
				case GT521FX_STATE_ADMIN:
					if (refresh_screen)
 80021d0:	4bad      	ldr	r3, [pc, #692]	; (8002488 <task_sensor_access_entry+0x350>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 826f 	beq.w	80026b8 <task_sensor_access_entry+0x580>
					{
						refresh_screen = false;
 80021da:	4bab      	ldr	r3, [pc, #684]	; (8002488 <task_sensor_access_entry+0x350>)
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]
						ssd1351_clear_screen();
 80021e0:	f7ff fb34 	bl	800184c <ssd1351_clear_screen>
						ssd1351_printf("Admin Menu\n");
 80021e4:	48a9      	ldr	r0, [pc, #676]	; (800248c <task_sensor_access_entry+0x354>)
 80021e6:	f7ff fbdd 	bl	80019a4 <ssd1351_printf>
						ssd1351_printf("1. Enroll\n");
 80021ea:	48a9      	ldr	r0, [pc, #676]	; (8002490 <task_sensor_access_entry+0x358>)
 80021ec:	f7ff fbda 	bl	80019a4 <ssd1351_printf>
						ssd1351_printf("2. Delete last\n");
 80021f0:	48a8      	ldr	r0, [pc, #672]	; (8002494 <task_sensor_access_entry+0x35c>)
 80021f2:	f7ff fbd7 	bl	80019a4 <ssd1351_printf>
						ssd1351_printf("3. Delete all\n");
 80021f6:	48a8      	ldr	r0, [pc, #672]	; (8002498 <task_sensor_access_entry+0x360>)
 80021f8:	f7ff fbd4 	bl	80019a4 <ssd1351_printf>
						ssd1351_printf("4. Identify\n");
 80021fc:	48a7      	ldr	r0, [pc, #668]	; (800249c <task_sensor_access_entry+0x364>)
 80021fe:	f7ff fbd1 	bl	80019a4 <ssd1351_printf>
						// print FW info in ADMIN menu
						ssd1351_printf("# enrolled ");
 8002202:	48a7      	ldr	r0, [pc, #668]	; (80024a0 <task_sensor_access_entry+0x368>)
 8002204:	f7ff fbce 	bl	80019a4 <ssd1351_printf>
						ssd1351_printf(itoa(flash_access_gt521fx_last_id(), last_id, 10));
 8002208:	f7fe fb48 	bl	800089c <flash_access_gt521fx_last_id>
 800220c:	4603      	mov	r3, r0
 800220e:	4618      	mov	r0, r3
 8002210:	f107 030c 	add.w	r3, r7, #12
 8002214:	220a      	movs	r2, #10
 8002216:	4619      	mov	r1, r3
 8002218:	f007 f82c 	bl	8009274 <itoa>
 800221c:	4603      	mov	r3, r0
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff fbc0 	bl	80019a4 <ssd1351_printf>
						ssd1351_write_buffer_to_display();
 8002224:	f7ff f988 	bl	8001538 <ssd1351_write_buffer_to_display>
					}
				break;
 8002228:	e246      	b.n	80026b8 <task_sensor_access_entry+0x580>
				case GT521FX_STATE_ENROLL:
					ssd1351_clear_screen(); // always clear here
 800222a:	f7ff fb0f 	bl	800184c <ssd1351_clear_screen>
					ssd1351_printf("GT521FX enroll state");
 800222e:	489d      	ldr	r0, [pc, #628]	; (80024a4 <task_sensor_access_entry+0x36c>)
 8002230:	f7ff fbb8 	bl	80019a4 <ssd1351_printf>
					gt521fx_start_enrollment(flash_access_gt521fx_last_id() + 1);
 8002234:	f7fe fb32 	bl	800089c <flash_access_gt521fx_last_id>
 8002238:	4603      	mov	r3, r0
 800223a:	3301      	adds	r3, #1
 800223c:	b29b      	uxth	r3, r3
 800223e:	4618      	mov	r0, r3
 8002240:	f7fe fcc6 	bl	8000bd0 <gt521fx_start_enrollment>
					while (!packet_rsp_was_received()) osDelay(500);
 8002244:	e003      	b.n	800224e <task_sensor_access_entry+0x116>
 8002246:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800224a:	f004 f91d 	bl	8006488 <osDelay>
 800224e:	f7fe fff1 	bl	8001234 <packet_rsp_was_received>
 8002252:	4603      	mov	r3, r0
 8002254:	f083 0301 	eor.w	r3, r3, #1
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f3      	bne.n	8002246 <task_sensor_access_entry+0x10e>
					if (gt521fx_nack_flag()) gt521fx_state = GT521FX_STATE_ERROR;
 800225e:	f7fe fc3b 	bl	8000ad8 <gt521fx_nack_flag>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d002      	beq.n	800226e <task_sensor_access_entry+0x136>
 8002268:	4b86      	ldr	r3, [pc, #536]	; (8002484 <task_sensor_access_entry+0x34c>)
 800226a:	2207      	movs	r2, #7
 800226c:	701a      	strb	r2, [r3, #0]
					
					ssd1351_printf("\nPlace finger on sensor");
 800226e:	488e      	ldr	r0, [pc, #568]	; (80024a8 <task_sensor_access_entry+0x370>)
 8002270:	f7ff fb98 	bl	80019a4 <ssd1351_printf>
					ssd1351_write_buffer_to_display();
 8002274:	f7ff f960 	bl	8001538 <ssd1351_write_buffer_to_display>
					while (!gt521fx_finger_is_pressed_flag()) 
 8002278:	e00e      	b.n	8002298 <task_sensor_access_entry+0x160>
					{
						gt521fx_finger_is_pressed();
 800227a:	f7fe fce3 	bl	8000c44 <gt521fx_finger_is_pressed>
						while (!packet_rsp_was_received()) osDelay(500);
 800227e:	e003      	b.n	8002288 <task_sensor_access_entry+0x150>
 8002280:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002284:	f004 f900 	bl	8006488 <osDelay>
 8002288:	f7fe ffd4 	bl	8001234 <packet_rsp_was_received>
 800228c:	4603      	mov	r3, r0
 800228e:	f083 0301 	eor.w	r3, r3, #1
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1f3      	bne.n	8002280 <task_sensor_access_entry+0x148>
					while (!gt521fx_finger_is_pressed_flag()) 
 8002298:	f7fe fc56 	bl	8000b48 <gt521fx_finger_is_pressed_flag>
 800229c:	4603      	mov	r3, r0
 800229e:	f083 0301 	eor.w	r3, r3, #1
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1e8      	bne.n	800227a <task_sensor_access_entry+0x142>
					}
					
					gt521fx_capture_finger();
 80022a8:	f7fe fd12 	bl	8000cd0 <gt521fx_capture_finger>
					while (!packet_rsp_was_received()) osDelay(500);
 80022ac:	e003      	b.n	80022b6 <task_sensor_access_entry+0x17e>
 80022ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022b2:	f004 f8e9 	bl	8006488 <osDelay>
 80022b6:	f7fe ffbd 	bl	8001234 <packet_rsp_was_received>
 80022ba:	4603      	mov	r3, r0
 80022bc:	f083 0301 	eor.w	r3, r3, #1
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f3      	bne.n	80022ae <task_sensor_access_entry+0x176>
					if (gt521fx_nack_flag()) gt521fx_state = GT521FX_STATE_ERROR;
 80022c6:	f7fe fc07 	bl	8000ad8 <gt521fx_nack_flag>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d002      	beq.n	80022d6 <task_sensor_access_entry+0x19e>
 80022d0:	4b6c      	ldr	r3, [pc, #432]	; (8002484 <task_sensor_access_entry+0x34c>)
 80022d2:	2207      	movs	r2, #7
 80022d4:	701a      	strb	r2, [r3, #0]
					
					gt521fx_enrollment(GT521FX_ENROLLMENT_STAGE_FIRST);
 80022d6:	2000      	movs	r0, #0
 80022d8:	f7fe fc8c 	bl	8000bf4 <gt521fx_enrollment>
					while (!packet_rsp_was_received()) osDelay(500);
 80022dc:	e003      	b.n	80022e6 <task_sensor_access_entry+0x1ae>
 80022de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022e2:	f004 f8d1 	bl	8006488 <osDelay>
 80022e6:	f7fe ffa5 	bl	8001234 <packet_rsp_was_received>
 80022ea:	4603      	mov	r3, r0
 80022ec:	f083 0301 	eor.w	r3, r3, #1
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f3      	bne.n	80022de <task_sensor_access_entry+0x1a6>
					if (gt521fx_nack_flag()) gt521fx_state = GT521FX_STATE_ERROR;
 80022f6:	f7fe fbef 	bl	8000ad8 <gt521fx_nack_flag>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d002      	beq.n	8002306 <task_sensor_access_entry+0x1ce>
 8002300:	4b60      	ldr	r3, [pc, #384]	; (8002484 <task_sensor_access_entry+0x34c>)
 8002302:	2207      	movs	r2, #7
 8002304:	701a      	strb	r2, [r3, #0]
					
					ssd1351_printf("\nRemove finger");
 8002306:	4869      	ldr	r0, [pc, #420]	; (80024ac <task_sensor_access_entry+0x374>)
 8002308:	f7ff fb4c 	bl	80019a4 <ssd1351_printf>
					ssd1351_write_buffer_to_display();
 800230c:	f7ff f914 	bl	8001538 <ssd1351_write_buffer_to_display>

					while (gt521fx_finger_is_pressed_flag()) 
 8002310:	e00e      	b.n	8002330 <task_sensor_access_entry+0x1f8>
					{
						gt521fx_finger_is_pressed();
 8002312:	f7fe fc97 	bl	8000c44 <gt521fx_finger_is_pressed>
						while (!packet_rsp_was_received()) osDelay(500);
 8002316:	e003      	b.n	8002320 <task_sensor_access_entry+0x1e8>
 8002318:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800231c:	f004 f8b4 	bl	8006488 <osDelay>
 8002320:	f7fe ff88 	bl	8001234 <packet_rsp_was_received>
 8002324:	4603      	mov	r3, r0
 8002326:	f083 0301 	eor.w	r3, r3, #1
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1f3      	bne.n	8002318 <task_sensor_access_entry+0x1e0>
					while (gt521fx_finger_is_pressed_flag()) 
 8002330:	f7fe fc0a 	bl	8000b48 <gt521fx_finger_is_pressed_flag>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1eb      	bne.n	8002312 <task_sensor_access_entry+0x1da>
					}
					ssd1351_clear_screen();
 800233a:	f7ff fa87 	bl	800184c <ssd1351_clear_screen>
					ssd1351_printf("\nPlace finger on sensor");
 800233e:	485a      	ldr	r0, [pc, #360]	; (80024a8 <task_sensor_access_entry+0x370>)
 8002340:	f7ff fb30 	bl	80019a4 <ssd1351_printf>
					ssd1351_write_buffer_to_display();
 8002344:	f7ff f8f8 	bl	8001538 <ssd1351_write_buffer_to_display>
					while (!gt521fx_finger_is_pressed_flag()) 
 8002348:	e00e      	b.n	8002368 <task_sensor_access_entry+0x230>
					{
						gt521fx_finger_is_pressed();
 800234a:	f7fe fc7b 	bl	8000c44 <gt521fx_finger_is_pressed>
						while (!packet_rsp_was_received()) osDelay(500);
 800234e:	e003      	b.n	8002358 <task_sensor_access_entry+0x220>
 8002350:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002354:	f004 f898 	bl	8006488 <osDelay>
 8002358:	f7fe ff6c 	bl	8001234 <packet_rsp_was_received>
 800235c:	4603      	mov	r3, r0
 800235e:	f083 0301 	eor.w	r3, r3, #1
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1f3      	bne.n	8002350 <task_sensor_access_entry+0x218>
					while (!gt521fx_finger_is_pressed_flag()) 
 8002368:	f7fe fbee 	bl	8000b48 <gt521fx_finger_is_pressed_flag>
 800236c:	4603      	mov	r3, r0
 800236e:	f083 0301 	eor.w	r3, r3, #1
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1e8      	bne.n	800234a <task_sensor_access_entry+0x212>
					}
					
					gt521fx_capture_finger();
 8002378:	f7fe fcaa 	bl	8000cd0 <gt521fx_capture_finger>
					while (!packet_rsp_was_received()) osDelay(500);
 800237c:	e003      	b.n	8002386 <task_sensor_access_entry+0x24e>
 800237e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002382:	f004 f881 	bl	8006488 <osDelay>
 8002386:	f7fe ff55 	bl	8001234 <packet_rsp_was_received>
 800238a:	4603      	mov	r3, r0
 800238c:	f083 0301 	eor.w	r3, r3, #1
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f3      	bne.n	800237e <task_sensor_access_entry+0x246>
					if (gt521fx_nack_flag()) gt521fx_state = GT521FX_STATE_ERROR;
 8002396:	f7fe fb9f 	bl	8000ad8 <gt521fx_nack_flag>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d002      	beq.n	80023a6 <task_sensor_access_entry+0x26e>
 80023a0:	4b38      	ldr	r3, [pc, #224]	; (8002484 <task_sensor_access_entry+0x34c>)
 80023a2:	2207      	movs	r2, #7
 80023a4:	701a      	strb	r2, [r3, #0]
					
					gt521fx_enrollment(GT521FX_ENROLLMENT_STAGE_SECOND);
 80023a6:	2001      	movs	r0, #1
 80023a8:	f7fe fc24 	bl	8000bf4 <gt521fx_enrollment>
					while (!packet_rsp_was_received()) osDelay(500);
 80023ac:	e003      	b.n	80023b6 <task_sensor_access_entry+0x27e>
 80023ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023b2:	f004 f869 	bl	8006488 <osDelay>
 80023b6:	f7fe ff3d 	bl	8001234 <packet_rsp_was_received>
 80023ba:	4603      	mov	r3, r0
 80023bc:	f083 0301 	eor.w	r3, r3, #1
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f3      	bne.n	80023ae <task_sensor_access_entry+0x276>
					if (gt521fx_nack_flag()) gt521fx_state = GT521FX_STATE_ERROR;
 80023c6:	f7fe fb87 	bl	8000ad8 <gt521fx_nack_flag>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d002      	beq.n	80023d6 <task_sensor_access_entry+0x29e>
 80023d0:	4b2c      	ldr	r3, [pc, #176]	; (8002484 <task_sensor_access_entry+0x34c>)
 80023d2:	2207      	movs	r2, #7
 80023d4:	701a      	strb	r2, [r3, #0]
					
					ssd1351_printf("\nRemove finger");
 80023d6:	4835      	ldr	r0, [pc, #212]	; (80024ac <task_sensor_access_entry+0x374>)
 80023d8:	f7ff fae4 	bl	80019a4 <ssd1351_printf>
					ssd1351_write_buffer_to_display();
 80023dc:	f7ff f8ac 	bl	8001538 <ssd1351_write_buffer_to_display>
					while (gt521fx_finger_is_pressed_flag()) 
 80023e0:	e00e      	b.n	8002400 <task_sensor_access_entry+0x2c8>
					{
						gt521fx_finger_is_pressed();
 80023e2:	f7fe fc2f 	bl	8000c44 <gt521fx_finger_is_pressed>
						while (!packet_rsp_was_received()) osDelay(500);
 80023e6:	e003      	b.n	80023f0 <task_sensor_access_entry+0x2b8>
 80023e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023ec:	f004 f84c 	bl	8006488 <osDelay>
 80023f0:	f7fe ff20 	bl	8001234 <packet_rsp_was_received>
 80023f4:	4603      	mov	r3, r0
 80023f6:	f083 0301 	eor.w	r3, r3, #1
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1f3      	bne.n	80023e8 <task_sensor_access_entry+0x2b0>
					while (gt521fx_finger_is_pressed_flag()) 
 8002400:	f7fe fba2 	bl	8000b48 <gt521fx_finger_is_pressed_flag>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1eb      	bne.n	80023e2 <task_sensor_access_entry+0x2aa>
					}
					ssd1351_clear_screen(); // always clear here
 800240a:	f7ff fa1f 	bl	800184c <ssd1351_clear_screen>
					ssd1351_printf("\nPlace finger on sensor");
 800240e:	4826      	ldr	r0, [pc, #152]	; (80024a8 <task_sensor_access_entry+0x370>)
 8002410:	f7ff fac8 	bl	80019a4 <ssd1351_printf>
					ssd1351_write_buffer_to_display();
 8002414:	f7ff f890 	bl	8001538 <ssd1351_write_buffer_to_display>
					while (!gt521fx_finger_is_pressed_flag()) 
 8002418:	e00e      	b.n	8002438 <task_sensor_access_entry+0x300>
					{
						gt521fx_finger_is_pressed();
 800241a:	f7fe fc13 	bl	8000c44 <gt521fx_finger_is_pressed>
						while (!packet_rsp_was_received()) osDelay(500);
 800241e:	e003      	b.n	8002428 <task_sensor_access_entry+0x2f0>
 8002420:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002424:	f004 f830 	bl	8006488 <osDelay>
 8002428:	f7fe ff04 	bl	8001234 <packet_rsp_was_received>
 800242c:	4603      	mov	r3, r0
 800242e:	f083 0301 	eor.w	r3, r3, #1
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1f3      	bne.n	8002420 <task_sensor_access_entry+0x2e8>
					while (!gt521fx_finger_is_pressed_flag()) 
 8002438:	f7fe fb86 	bl	8000b48 <gt521fx_finger_is_pressed_flag>
 800243c:	4603      	mov	r3, r0
 800243e:	f083 0301 	eor.w	r3, r3, #1
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1e8      	bne.n	800241a <task_sensor_access_entry+0x2e2>
					}
					
					gt521fx_capture_finger();
 8002448:	f7fe fc42 	bl	8000cd0 <gt521fx_capture_finger>
					while (!packet_rsp_was_received()) osDelay(500);
 800244c:	e003      	b.n	8002456 <task_sensor_access_entry+0x31e>
 800244e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002452:	f004 f819 	bl	8006488 <osDelay>
 8002456:	f7fe feed 	bl	8001234 <packet_rsp_was_received>
 800245a:	4603      	mov	r3, r0
 800245c:	f083 0301 	eor.w	r3, r3, #1
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f3      	bne.n	800244e <task_sensor_access_entry+0x316>
					if (gt521fx_nack_flag()) gt521fx_state = GT521FX_STATE_ERROR;
 8002466:	f7fe fb37 	bl	8000ad8 <gt521fx_nack_flag>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d002      	beq.n	8002476 <task_sensor_access_entry+0x33e>
 8002470:	4b04      	ldr	r3, [pc, #16]	; (8002484 <task_sensor_access_entry+0x34c>)
 8002472:	2207      	movs	r2, #7
 8002474:	701a      	strb	r2, [r3, #0]
					
					gt521fx_enrollment(GT521FX_ENROLLMENT_STAGE_THIRD);
 8002476:	2002      	movs	r0, #2
 8002478:	f7fe fbbc 	bl	8000bf4 <gt521fx_enrollment>
					while (!packet_rsp_was_received()) osDelay(500);
 800247c:	e01c      	b.n	80024b8 <task_sensor_access_entry+0x380>
 800247e:	bf00      	nop
 8002480:	08009504 	.word	0x08009504
 8002484:	2000001d 	.word	0x2000001d
 8002488:	2000001c 	.word	0x2000001c
 800248c:	080093e8 	.word	0x080093e8
 8002490:	080093f4 	.word	0x080093f4
 8002494:	08009400 	.word	0x08009400
 8002498:	08009410 	.word	0x08009410
 800249c:	08009420 	.word	0x08009420
 80024a0:	08009430 	.word	0x08009430
 80024a4:	0800943c 	.word	0x0800943c
 80024a8:	08009454 	.word	0x08009454
 80024ac:	0800946c 	.word	0x0800946c
 80024b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024b4:	f003 ffe8 	bl	8006488 <osDelay>
 80024b8:	f7fe febc 	bl	8001234 <packet_rsp_was_received>
 80024bc:	4603      	mov	r3, r0
 80024be:	f083 0301 	eor.w	r3, r3, #1
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1f3      	bne.n	80024b0 <task_sensor_access_entry+0x378>
					if (gt521fx_nack_flag()) gt521fx_state = GT521FX_STATE_ERROR;
 80024c8:	f7fe fb06 	bl	8000ad8 <gt521fx_nack_flag>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d002      	beq.n	80024d8 <task_sensor_access_entry+0x3a0>
 80024d2:	4b7a      	ldr	r3, [pc, #488]	; (80026bc <task_sensor_access_entry+0x584>)
 80024d4:	2207      	movs	r2, #7
 80024d6:	701a      	strb	r2, [r3, #0]
					
					ssd1351_printf("\nRemove finger");
 80024d8:	4879      	ldr	r0, [pc, #484]	; (80026c0 <task_sensor_access_entry+0x588>)
 80024da:	f7ff fa63 	bl	80019a4 <ssd1351_printf>
					ssd1351_write_buffer_to_display();
 80024de:	f7ff f82b 	bl	8001538 <ssd1351_write_buffer_to_display>
					while (gt521fx_finger_is_pressed_flag()) 
 80024e2:	e00e      	b.n	8002502 <task_sensor_access_entry+0x3ca>
					{
						gt521fx_finger_is_pressed();
 80024e4:	f7fe fbae 	bl	8000c44 <gt521fx_finger_is_pressed>
						while (!packet_rsp_was_received()) osDelay(500);
 80024e8:	e003      	b.n	80024f2 <task_sensor_access_entry+0x3ba>
 80024ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024ee:	f003 ffcb 	bl	8006488 <osDelay>
 80024f2:	f7fe fe9f 	bl	8001234 <packet_rsp_was_received>
 80024f6:	4603      	mov	r3, r0
 80024f8:	f083 0301 	eor.w	r3, r3, #1
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f3      	bne.n	80024ea <task_sensor_access_entry+0x3b2>
					while (gt521fx_finger_is_pressed_flag()) 
 8002502:	f7fe fb21 	bl	8000b48 <gt521fx_finger_is_pressed_flag>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1eb      	bne.n	80024e4 <task_sensor_access_entry+0x3ac>
					}
					ssd1351_clear_screen(); // always clear here
 800250c:	f7ff f99e 	bl	800184c <ssd1351_clear_screen>
					flash_access_enroll_update();
 8002510:	f7fe f9ac 	bl	800086c <flash_access_enroll_update>
					ssd1351_printf("\nEnroll successful");
 8002514:	486b      	ldr	r0, [pc, #428]	; (80026c4 <task_sensor_access_entry+0x58c>)
 8002516:	f7ff fa45 	bl	80019a4 <ssd1351_printf>
					ssd1351_write_buffer_to_display();
 800251a:	f7ff f80d 	bl	8001538 <ssd1351_write_buffer_to_display>
					refresh_screen = true;
 800251e:	4b6a      	ldr	r3, [pc, #424]	; (80026c8 <task_sensor_access_entry+0x590>)
 8002520:	2201      	movs	r2, #1
 8002522:	701a      	strb	r2, [r3, #0]
					gt521fx_state = GT521FX_STATE_ADMIN;
 8002524:	4b65      	ldr	r3, [pc, #404]	; (80026bc <task_sensor_access_entry+0x584>)
 8002526:	2200      	movs	r2, #0
 8002528:	701a      	strb	r2, [r3, #0]
				break;
 800252a:	e0c6      	b.n	80026ba <task_sensor_access_entry+0x582>
				case GT521FX_STATE_DELETE:
					refresh_screen = true;
 800252c:	4b66      	ldr	r3, [pc, #408]	; (80026c8 <task_sensor_access_entry+0x590>)
 800252e:	2201      	movs	r2, #1
 8002530:	701a      	strb	r2, [r3, #0]
					gt521fx_delete_fingerprint(flash_access_gt521fx_last_id());
 8002532:	f7fe f9b3 	bl	800089c <flash_access_gt521fx_last_id>
 8002536:	4603      	mov	r3, r0
 8002538:	4618      	mov	r0, r3
 800253a:	f7fe fb9b 	bl	8000c74 <gt521fx_delete_fingerprint>
					flash_access_gt521fx_remove_last_id();
 800253e:	f7fe f9b9 	bl	80008b4 <flash_access_gt521fx_remove_last_id>
					ssd1351_clear_screen();
 8002542:	f7ff f983 	bl	800184c <ssd1351_clear_screen>
					ssd1351_printf("\nLast print deleted!");
 8002546:	4861      	ldr	r0, [pc, #388]	; (80026cc <task_sensor_access_entry+0x594>)
 8002548:	f7ff fa2c 	bl	80019a4 <ssd1351_printf>
					ssd1351_write_buffer_to_display();
 800254c:	f7fe fff4 	bl	8001538 <ssd1351_write_buffer_to_display>
					osDelay(3000);
 8002550:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002554:	f003 ff98 	bl	8006488 <osDelay>
					refresh_screen = true;
 8002558:	4b5b      	ldr	r3, [pc, #364]	; (80026c8 <task_sensor_access_entry+0x590>)
 800255a:	2201      	movs	r2, #1
 800255c:	701a      	strb	r2, [r3, #0]
					gt521fx_state = GT521FX_STATE_ADMIN;
 800255e:	4b57      	ldr	r3, [pc, #348]	; (80026bc <task_sensor_access_entry+0x584>)
 8002560:	2200      	movs	r2, #0
 8002562:	701a      	strb	r2, [r3, #0]
				break;
 8002564:	e0a9      	b.n	80026ba <task_sensor_access_entry+0x582>
				case GT521FX_STATE_DELETE_ALL:
					refresh_screen = true;
 8002566:	4b58      	ldr	r3, [pc, #352]	; (80026c8 <task_sensor_access_entry+0x590>)
 8002568:	2201      	movs	r2, #1
 800256a:	701a      	strb	r2, [r3, #0]
					gt521fx_delete_all_fingerprints();
 800256c:	f7fe fb76 	bl	8000c5c <gt521fx_delete_all_fingerprints>
					flash_access_gt521fx_reset_id_count();
 8002570:	f7fe f9b8 	bl	80008e4 <flash_access_gt521fx_reset_id_count>
					ssd1351_clear_screen();
 8002574:	f7ff f96a 	bl	800184c <ssd1351_clear_screen>
					ssd1351_printf("\nAll prints deleted!");
 8002578:	4855      	ldr	r0, [pc, #340]	; (80026d0 <task_sensor_access_entry+0x598>)
 800257a:	f7ff fa13 	bl	80019a4 <ssd1351_printf>
					ssd1351_write_buffer_to_display();
 800257e:	f7fe ffdb 	bl	8001538 <ssd1351_write_buffer_to_display>
					osDelay(3000);
 8002582:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002586:	f003 ff7f 	bl	8006488 <osDelay>
					refresh_screen = true;
 800258a:	4b4f      	ldr	r3, [pc, #316]	; (80026c8 <task_sensor_access_entry+0x590>)
 800258c:	2201      	movs	r2, #1
 800258e:	701a      	strb	r2, [r3, #0]
					gt521fx_state = GT521FX_STATE_ADMIN;
 8002590:	4b4a      	ldr	r3, [pc, #296]	; (80026bc <task_sensor_access_entry+0x584>)
 8002592:	2200      	movs	r2, #0
 8002594:	701a      	strb	r2, [r3, #0]
				break;
 8002596:	e090      	b.n	80026ba <task_sensor_access_entry+0x582>
				case GT521FX_STATE_IDENTIFY:
					g_gt521fx_forced_state_change = false;
 8002598:	4b4e      	ldr	r3, [pc, #312]	; (80026d4 <task_sensor_access_entry+0x59c>)
 800259a:	2200      	movs	r2, #0
 800259c:	701a      	strb	r2, [r3, #0]
					gt521fx_finger_is_pressed_clear();
 800259e:	f7fe fab7 	bl	8000b10 <gt521fx_finger_is_pressed_clear>
					refresh_screen = true;
 80025a2:	4b49      	ldr	r3, [pc, #292]	; (80026c8 <task_sensor_access_entry+0x590>)
 80025a4:	2201      	movs	r2, #1
 80025a6:	701a      	strb	r2, [r3, #0]
					if (refresh_screen)
 80025a8:	4b47      	ldr	r3, [pc, #284]	; (80026c8 <task_sensor_access_entry+0x590>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d01c      	beq.n	80025ea <task_sensor_access_entry+0x4b2>
					{
						refresh_screen = false;
 80025b0:	4b45      	ldr	r3, [pc, #276]	; (80026c8 <task_sensor_access_entry+0x590>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	701a      	strb	r2, [r3, #0]
						ssd1351_clear_screen(); // always clear here
 80025b6:	f7ff f949 	bl	800184c <ssd1351_clear_screen>
						ssd1351_printf("GT521FX identify state");
 80025ba:	4847      	ldr	r0, [pc, #284]	; (80026d8 <task_sensor_access_entry+0x5a0>)
 80025bc:	f7ff f9f2 	bl	80019a4 <ssd1351_printf>
						ssd1351_printf("\nPlace finger on sensor");
 80025c0:	4846      	ldr	r0, [pc, #280]	; (80026dc <task_sensor_access_entry+0x5a4>)
 80025c2:	f7ff f9ef 	bl	80019a4 <ssd1351_printf>
						ssd1351_write_buffer_to_display();
 80025c6:	f7fe ffb7 	bl	8001538 <ssd1351_write_buffer_to_display>
					}
					while (!gt521fx_finger_is_pressed_flag() && !g_gt521fx_forced_state_change)
 80025ca:	e00e      	b.n	80025ea <task_sensor_access_entry+0x4b2>
					{
						gt521fx_finger_is_pressed();
 80025cc:	f7fe fb3a 	bl	8000c44 <gt521fx_finger_is_pressed>
						while (!packet_rsp_was_received()) osDelay(500);
 80025d0:	e003      	b.n	80025da <task_sensor_access_entry+0x4a2>
 80025d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025d6:	f003 ff57 	bl	8006488 <osDelay>
 80025da:	f7fe fe2b 	bl	8001234 <packet_rsp_was_received>
 80025de:	4603      	mov	r3, r0
 80025e0:	f083 0301 	eor.w	r3, r3, #1
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1f3      	bne.n	80025d2 <task_sensor_access_entry+0x49a>
					while (!gt521fx_finger_is_pressed_flag() && !g_gt521fx_forced_state_change)
 80025ea:	f7fe faad 	bl	8000b48 <gt521fx_finger_is_pressed_flag>
 80025ee:	4603      	mov	r3, r0
 80025f0:	f083 0301 	eor.w	r3, r3, #1
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d006      	beq.n	8002608 <task_sensor_access_entry+0x4d0>
 80025fa:	4b36      	ldr	r3, [pc, #216]	; (80026d4 <task_sensor_access_entry+0x59c>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	f083 0301 	eor.w	r3, r3, #1
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1e1      	bne.n	80025cc <task_sensor_access_entry+0x494>
					}
					if (g_gt521fx_forced_state_change)
 8002608:	4b32      	ldr	r3, [pc, #200]	; (80026d4 <task_sensor_access_entry+0x59c>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <task_sensor_access_entry+0x4e0>
					{
						refresh_screen = true;
 8002610:	4b2d      	ldr	r3, [pc, #180]	; (80026c8 <task_sensor_access_entry+0x590>)
 8002612:	2201      	movs	r2, #1
 8002614:	701a      	strb	r2, [r3, #0]
						break;
 8002616:	e050      	b.n	80026ba <task_sensor_access_entry+0x582>
					}
					else
					{
						gt521fx_capture_finger();
 8002618:	f7fe fb5a 	bl	8000cd0 <gt521fx_capture_finger>
						while(!pkt_received && !packet_rsp_was_received()) osDelay(500);
 800261c:	bf00      	nop
						//while (!packet_rsp_was_received()) osDelay(500);
						if (gt521fx_nack_flag())
 800261e:	f7fe fa5b 	bl	8000ad8 <gt521fx_nack_flag>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d008      	beq.n	800263a <task_sensor_access_entry+0x502>
						{
							gt521fx_state = GT521FX_STATE_ERROR;
 8002628:	4b24      	ldr	r3, [pc, #144]	; (80026bc <task_sensor_access_entry+0x584>)
 800262a:	2207      	movs	r2, #7
 800262c:	701a      	strb	r2, [r3, #0]
							ssd1351_printf("\nFailure!");
 800262e:	482c      	ldr	r0, [pc, #176]	; (80026e0 <task_sensor_access_entry+0x5a8>)
 8002630:	f7ff f9b8 	bl	80019a4 <ssd1351_printf>
							ssd1351_write_buffer_to_display();
 8002634:	f7fe ff80 	bl	8001538 <ssd1351_write_buffer_to_display>
							gt521fx_state = GT521FX_STATE_ERROR;
						}
					}
					//while(1);

				break;
 8002638:	e03f      	b.n	80026ba <task_sensor_access_entry+0x582>
						else if (gt521fx_fingerprint_identify())
 800263a:	f7fe fb2d 	bl	8000c98 <gt521fx_fingerprint_identify>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d008      	beq.n	8002656 <task_sensor_access_entry+0x51e>
							ssd1351_printf("\nSuccess!");
 8002644:	4827      	ldr	r0, [pc, #156]	; (80026e4 <task_sensor_access_entry+0x5ac>)
 8002646:	f7ff f9ad 	bl	80019a4 <ssd1351_printf>
							ssd1351_write_buffer_to_display();
 800264a:	f7fe ff75 	bl	8001538 <ssd1351_write_buffer_to_display>
							gt521fx_state = GT521FX_STATE_OPEN_DOOR;
 800264e:	4b1b      	ldr	r3, [pc, #108]	; (80026bc <task_sensor_access_entry+0x584>)
 8002650:	2206      	movs	r2, #6
 8002652:	701a      	strb	r2, [r3, #0]
				break;
 8002654:	e031      	b.n	80026ba <task_sensor_access_entry+0x582>
							ssd1351_printf("\nFailure!");
 8002656:	4822      	ldr	r0, [pc, #136]	; (80026e0 <task_sensor_access_entry+0x5a8>)
 8002658:	f7ff f9a4 	bl	80019a4 <ssd1351_printf>
							ssd1351_write_buffer_to_display();
 800265c:	f7fe ff6c 	bl	8001538 <ssd1351_write_buffer_to_display>
							gt521fx_state = GT521FX_STATE_ERROR;
 8002660:	4b16      	ldr	r3, [pc, #88]	; (80026bc <task_sensor_access_entry+0x584>)
 8002662:	2207      	movs	r2, #7
 8002664:	701a      	strb	r2, [r3, #0]
				break;
 8002666:	e028      	b.n	80026ba <task_sensor_access_entry+0x582>
				case GT521FX_STATE_VERIFY:
				break;
				case GT521FX_STATE_OPEN_DOOR:
					ssd1351_printf("\nOpen Door!");
 8002668:	481f      	ldr	r0, [pc, #124]	; (80026e8 <task_sensor_access_entry+0x5b0>)
 800266a:	f7ff f99b 	bl	80019a4 <ssd1351_printf>
					ssd1351_write_buffer_to_display();
 800266e:	f7fe ff63 	bl	8001538 <ssd1351_write_buffer_to_display>
					osDelay(3000);
 8002672:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002676:	f003 ff07 	bl	8006488 <osDelay>
					refresh_screen = true;
 800267a:	4b13      	ldr	r3, [pc, #76]	; (80026c8 <task_sensor_access_entry+0x590>)
 800267c:	2201      	movs	r2, #1
 800267e:	701a      	strb	r2, [r3, #0]
					gt521fx_state = GT521FX_STATE_IDENTIFY;
 8002680:	4b0e      	ldr	r3, [pc, #56]	; (80026bc <task_sensor_access_entry+0x584>)
 8002682:	2204      	movs	r2, #4
 8002684:	701a      	strb	r2, [r3, #0]
				break;
 8002686:	e018      	b.n	80026ba <task_sensor_access_entry+0x582>
				case GT521FX_STATE_ERROR:
					ssd1351_printf("\nERROR");
 8002688:	4818      	ldr	r0, [pc, #96]	; (80026ec <task_sensor_access_entry+0x5b4>)
 800268a:	f7ff f98b 	bl	80019a4 <ssd1351_printf>
					ssd1351_write_buffer_to_display();
 800268e:	f7fe ff53 	bl	8001538 <ssd1351_write_buffer_to_display>
					osDelay(3000);
 8002692:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002696:	f003 fef7 	bl	8006488 <osDelay>
					refresh_screen = true;
 800269a:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <task_sensor_access_entry+0x590>)
 800269c:	2201      	movs	r2, #1
 800269e:	701a      	strb	r2, [r3, #0]
					gt521fx_state = GT521FX_STATE_IDENTIFY;
 80026a0:	4b06      	ldr	r3, [pc, #24]	; (80026bc <task_sensor_access_entry+0x584>)
 80026a2:	2204      	movs	r2, #4
 80026a4:	701a      	strb	r2, [r3, #0]
				break;
 80026a6:	e008      	b.n	80026ba <task_sensor_access_entry+0x582>
				case GT521FX_STATE_NOTHING_TO_DO:
					osDelay(1000);
 80026a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026ac:	f003 feec 	bl	8006488 <osDelay>
				break;
 80026b0:	e003      	b.n	80026ba <task_sensor_access_entry+0x582>
				default:
					while(1);
 80026b2:	e7fe      	b.n	80026b2 <task_sensor_access_entry+0x57a>
				break;
 80026b4:	bf00      	nop
 80026b6:	e54e      	b.n	8002156 <task_sensor_access_entry+0x1e>
				break;
 80026b8:	bf00      	nop
		if (first_pass)
 80026ba:	e54c      	b.n	8002156 <task_sensor_access_entry+0x1e>
 80026bc:	2000001d 	.word	0x2000001d
 80026c0:	0800946c 	.word	0x0800946c
 80026c4:	0800947c 	.word	0x0800947c
 80026c8:	2000001c 	.word	0x2000001c
 80026cc:	08009490 	.word	0x08009490
 80026d0:	080094a8 	.word	0x080094a8
 80026d4:	200000ac 	.word	0x200000ac
 80026d8:	080094c0 	.word	0x080094c0
 80026dc:	08009454 	.word	0x08009454
 80026e0:	080094d8 	.word	0x080094d8
 80026e4:	080094e4 	.word	0x080094e4
 80026e8:	080094f0 	.word	0x080094f0
 80026ec:	080094fc 	.word	0x080094fc

080026f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80026f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002728 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026f4:	f7ff fbc2 	bl	8001e7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80026f8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80026fa:	e003      	b.n	8002704 <LoopCopyDataInit>

080026fc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80026fc:	4b0b      	ldr	r3, [pc, #44]	; (800272c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80026fe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002700:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002702:	3104      	adds	r1, #4

08002704 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002704:	480a      	ldr	r0, [pc, #40]	; (8002730 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002706:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002708:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800270a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800270c:	d3f6      	bcc.n	80026fc <CopyDataInit>
	ldr	r2, =_sbss
 800270e:	4a0a      	ldr	r2, [pc, #40]	; (8002738 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002710:	e002      	b.n	8002718 <LoopFillZerobss>

08002712 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002712:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002714:	f842 3b04 	str.w	r3, [r2], #4

08002718 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002718:	4b08      	ldr	r3, [pc, #32]	; (800273c <LoopForever+0x16>)
	cmp	r2, r3
 800271a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800271c:	d3f9      	bcc.n	8002712 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800271e:	f006 fd6d 	bl	80091fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002722:	f7fe fc0d 	bl	8000f40 <main>

08002726 <LoopForever>:

LoopForever:
    b LoopForever
 8002726:	e7fe      	b.n	8002726 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002728:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800272c:	08009dcc 	.word	0x08009dcc
	ldr	r0, =_sdata
 8002730:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002734:	2000004c 	.word	0x2000004c
	ldr	r2, =_sbss
 8002738:	2000004c 	.word	0x2000004c
	ldr	r3, = _ebss
 800273c:	2000ac68 	.word	0x2000ac68

08002740 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002740:	e7fe      	b.n	8002740 <ADC1_IRQHandler>

08002742 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b082      	sub	sp, #8
 8002746:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002748:	2300      	movs	r3, #0
 800274a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800274c:	2003      	movs	r0, #3
 800274e:	f000 f902 	bl	8002956 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002752:	2000      	movs	r0, #0
 8002754:	f7ff fb04 	bl	8001d60 <HAL_InitTick>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d002      	beq.n	8002764 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	71fb      	strb	r3, [r7, #7]
 8002762:	e001      	b.n	8002768 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002764:	f7ff f9d4 	bl	8001b10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002768:	79fb      	ldrb	r3, [r7, #7]
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002778:	4b06      	ldr	r3, [pc, #24]	; (8002794 <HAL_IncTick+0x20>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	461a      	mov	r2, r3
 800277e:	4b06      	ldr	r3, [pc, #24]	; (8002798 <HAL_IncTick+0x24>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4413      	add	r3, r2
 8002784:	4a04      	ldr	r2, [pc, #16]	; (8002798 <HAL_IncTick+0x24>)
 8002786:	6013      	str	r3, [r2, #0]
}
 8002788:	bf00      	nop
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	20000024 	.word	0x20000024
 8002798:	2000ac24 	.word	0x2000ac24

0800279c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  return uwTick;
 80027a0:	4b03      	ldr	r3, [pc, #12]	; (80027b0 <HAL_GetTick+0x14>)
 80027a2:	681b      	ldr	r3, [r3, #0]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	2000ac24 	.word	0x2000ac24

080027b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027bc:	f7ff ffee 	bl	800279c <HAL_GetTick>
 80027c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027cc:	d005      	beq.n	80027da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80027ce:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <HAL_Delay+0x44>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4413      	add	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027da:	bf00      	nop
 80027dc:	f7ff ffde 	bl	800279c <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d8f7      	bhi.n	80027dc <HAL_Delay+0x28>
  {
  }
}
 80027ec:	bf00      	nop
 80027ee:	bf00      	nop
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20000024 	.word	0x20000024

080027fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800280c:	4b0c      	ldr	r3, [pc, #48]	; (8002840 <__NVIC_SetPriorityGrouping+0x44>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002818:	4013      	ands	r3, r2
 800281a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002824:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800282c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800282e:	4a04      	ldr	r2, [pc, #16]	; (8002840 <__NVIC_SetPriorityGrouping+0x44>)
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	60d3      	str	r3, [r2, #12]
}
 8002834:	bf00      	nop
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	e000ed00 	.word	0xe000ed00

08002844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002848:	4b04      	ldr	r3, [pc, #16]	; (800285c <__NVIC_GetPriorityGrouping+0x18>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	0a1b      	lsrs	r3, r3, #8
 800284e:	f003 0307 	and.w	r3, r3, #7
}
 8002852:	4618      	mov	r0, r3
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	e000ed00 	.word	0xe000ed00

08002860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800286a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286e:	2b00      	cmp	r3, #0
 8002870:	db0b      	blt.n	800288a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002872:	79fb      	ldrb	r3, [r7, #7]
 8002874:	f003 021f 	and.w	r2, r3, #31
 8002878:	4907      	ldr	r1, [pc, #28]	; (8002898 <__NVIC_EnableIRQ+0x38>)
 800287a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287e:	095b      	lsrs	r3, r3, #5
 8002880:	2001      	movs	r0, #1
 8002882:	fa00 f202 	lsl.w	r2, r0, r2
 8002886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	e000e100 	.word	0xe000e100

0800289c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4603      	mov	r3, r0
 80028a4:	6039      	str	r1, [r7, #0]
 80028a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	db0a      	blt.n	80028c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	490c      	ldr	r1, [pc, #48]	; (80028e8 <__NVIC_SetPriority+0x4c>)
 80028b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ba:	0112      	lsls	r2, r2, #4
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	440b      	add	r3, r1
 80028c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028c4:	e00a      	b.n	80028dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	4908      	ldr	r1, [pc, #32]	; (80028ec <__NVIC_SetPriority+0x50>)
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	3b04      	subs	r3, #4
 80028d4:	0112      	lsls	r2, r2, #4
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	440b      	add	r3, r1
 80028da:	761a      	strb	r2, [r3, #24]
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	e000e100 	.word	0xe000e100
 80028ec:	e000ed00 	.word	0xe000ed00

080028f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b089      	sub	sp, #36	; 0x24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f1c3 0307 	rsb	r3, r3, #7
 800290a:	2b04      	cmp	r3, #4
 800290c:	bf28      	it	cs
 800290e:	2304      	movcs	r3, #4
 8002910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	3304      	adds	r3, #4
 8002916:	2b06      	cmp	r3, #6
 8002918:	d902      	bls.n	8002920 <NVIC_EncodePriority+0x30>
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	3b03      	subs	r3, #3
 800291e:	e000      	b.n	8002922 <NVIC_EncodePriority+0x32>
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002924:	f04f 32ff 	mov.w	r2, #4294967295
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43da      	mvns	r2, r3
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	401a      	ands	r2, r3
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002938:	f04f 31ff 	mov.w	r1, #4294967295
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	fa01 f303 	lsl.w	r3, r1, r3
 8002942:	43d9      	mvns	r1, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002948:	4313      	orrs	r3, r2
         );
}
 800294a:	4618      	mov	r0, r3
 800294c:	3724      	adds	r7, #36	; 0x24
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b082      	sub	sp, #8
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7ff ff4c 	bl	80027fc <__NVIC_SetPriorityGrouping>
}
 8002964:	bf00      	nop
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
 8002978:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800297e:	f7ff ff61 	bl	8002844 <__NVIC_GetPriorityGrouping>
 8002982:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	68b9      	ldr	r1, [r7, #8]
 8002988:	6978      	ldr	r0, [r7, #20]
 800298a:	f7ff ffb1 	bl	80028f0 <NVIC_EncodePriority>
 800298e:	4602      	mov	r2, r0
 8002990:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002994:	4611      	mov	r1, r2
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff ff80 	bl	800289c <__NVIC_SetPriority>
}
 800299c:	bf00      	nop
 800299e:	3718      	adds	r7, #24
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff ff54 	bl	8002860 <__NVIC_EnableIRQ>
}
 80029b8:	bf00      	nop
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e098      	b.n	8002b04 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	461a      	mov	r2, r3
 80029d8:	4b4d      	ldr	r3, [pc, #308]	; (8002b10 <HAL_DMA_Init+0x150>)
 80029da:	429a      	cmp	r2, r3
 80029dc:	d80f      	bhi.n	80029fe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	461a      	mov	r2, r3
 80029e4:	4b4b      	ldr	r3, [pc, #300]	; (8002b14 <HAL_DMA_Init+0x154>)
 80029e6:	4413      	add	r3, r2
 80029e8:	4a4b      	ldr	r2, [pc, #300]	; (8002b18 <HAL_DMA_Init+0x158>)
 80029ea:	fba2 2303 	umull	r2, r3, r2, r3
 80029ee:	091b      	lsrs	r3, r3, #4
 80029f0:	009a      	lsls	r2, r3, #2
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a48      	ldr	r2, [pc, #288]	; (8002b1c <HAL_DMA_Init+0x15c>)
 80029fa:	641a      	str	r2, [r3, #64]	; 0x40
 80029fc:	e00e      	b.n	8002a1c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	461a      	mov	r2, r3
 8002a04:	4b46      	ldr	r3, [pc, #280]	; (8002b20 <HAL_DMA_Init+0x160>)
 8002a06:	4413      	add	r3, r2
 8002a08:	4a43      	ldr	r2, [pc, #268]	; (8002b18 <HAL_DMA_Init+0x158>)
 8002a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0e:	091b      	lsrs	r3, r3, #4
 8002a10:	009a      	lsls	r2, r3, #2
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a42      	ldr	r2, [pc, #264]	; (8002b24 <HAL_DMA_Init+0x164>)
 8002a1a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a36:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002a40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a76:	d039      	beq.n	8002aec <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7c:	4a27      	ldr	r2, [pc, #156]	; (8002b1c <HAL_DMA_Init+0x15c>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d11a      	bne.n	8002ab8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002a82:	4b29      	ldr	r3, [pc, #164]	; (8002b28 <HAL_DMA_Init+0x168>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8a:	f003 031c 	and.w	r3, r3, #28
 8002a8e:	210f      	movs	r1, #15
 8002a90:	fa01 f303 	lsl.w	r3, r1, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	4924      	ldr	r1, [pc, #144]	; (8002b28 <HAL_DMA_Init+0x168>)
 8002a98:	4013      	ands	r3, r2
 8002a9a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002a9c:	4b22      	ldr	r3, [pc, #136]	; (8002b28 <HAL_DMA_Init+0x168>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6859      	ldr	r1, [r3, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa8:	f003 031c 	and.w	r3, r3, #28
 8002aac:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab0:	491d      	ldr	r1, [pc, #116]	; (8002b28 <HAL_DMA_Init+0x168>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	600b      	str	r3, [r1, #0]
 8002ab6:	e019      	b.n	8002aec <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002ab8:	4b1c      	ldr	r3, [pc, #112]	; (8002b2c <HAL_DMA_Init+0x16c>)
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac0:	f003 031c 	and.w	r3, r3, #28
 8002ac4:	210f      	movs	r1, #15
 8002ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aca:	43db      	mvns	r3, r3
 8002acc:	4917      	ldr	r1, [pc, #92]	; (8002b2c <HAL_DMA_Init+0x16c>)
 8002ace:	4013      	ands	r3, r2
 8002ad0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002ad2:	4b16      	ldr	r3, [pc, #88]	; (8002b2c <HAL_DMA_Init+0x16c>)
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6859      	ldr	r1, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	f003 031c 	and.w	r3, r3, #28
 8002ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae6:	4911      	ldr	r1, [pc, #68]	; (8002b2c <HAL_DMA_Init+0x16c>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	40020407 	.word	0x40020407
 8002b14:	bffdfff8 	.word	0xbffdfff8
 8002b18:	cccccccd 	.word	0xcccccccd
 8002b1c:	40020000 	.word	0x40020000
 8002b20:	bffdfbf8 	.word	0xbffdfbf8
 8002b24:	40020400 	.word	0x40020400
 8002b28:	400200a8 	.word	0x400200a8
 8002b2c:	400204a8 	.word	0x400204a8

08002b30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
 8002b3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d101      	bne.n	8002b50 <HAL_DMA_Start_IT+0x20>
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	e04b      	b.n	8002be8 <HAL_DMA_Start_IT+0xb8>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d13a      	bne.n	8002bda <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2202      	movs	r2, #2
 8002b68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0201 	bic.w	r2, r2, #1
 8002b80:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	68b9      	ldr	r1, [r7, #8]
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 f8e0 	bl	8002d4e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d008      	beq.n	8002ba8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f042 020e 	orr.w	r2, r2, #14
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	e00f      	b.n	8002bc8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0204 	bic.w	r2, r2, #4
 8002bb6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 020a 	orr.w	r2, r2, #10
 8002bc6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0201 	orr.w	r2, r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	e005      	b.n	8002be6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002be2:	2302      	movs	r3, #2
 8002be4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0c:	f003 031c 	and.w	r3, r3, #28
 8002c10:	2204      	movs	r2, #4
 8002c12:	409a      	lsls	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4013      	ands	r3, r2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d026      	beq.n	8002c6a <HAL_DMA_IRQHandler+0x7a>
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	f003 0304 	and.w	r3, r3, #4
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d021      	beq.n	8002c6a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0320 	and.w	r3, r3, #32
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d107      	bne.n	8002c44 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0204 	bic.w	r2, r2, #4
 8002c42:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c48:	f003 021c 	and.w	r2, r3, #28
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	2104      	movs	r1, #4
 8002c52:	fa01 f202 	lsl.w	r2, r1, r2
 8002c56:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d071      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002c68:	e06c      	b.n	8002d44 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6e:	f003 031c 	and.w	r3, r3, #28
 8002c72:	2202      	movs	r2, #2
 8002c74:	409a      	lsls	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d02e      	beq.n	8002cdc <HAL_DMA_IRQHandler+0xec>
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d029      	beq.n	8002cdc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0320 	and.w	r3, r3, #32
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10b      	bne.n	8002cae <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 020a 	bic.w	r2, r2, #10
 8002ca4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb2:	f003 021c 	and.w	r2, r3, #28
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	2102      	movs	r1, #2
 8002cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d038      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002cda:	e033      	b.n	8002d44 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce0:	f003 031c 	and.w	r3, r3, #28
 8002ce4:	2208      	movs	r2, #8
 8002ce6:	409a      	lsls	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4013      	ands	r3, r2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d02a      	beq.n	8002d46 <HAL_DMA_IRQHandler+0x156>
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d025      	beq.n	8002d46 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 020e 	bic.w	r2, r2, #14
 8002d08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0e:	f003 021c 	and.w	r2, r3, #28
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	2101      	movs	r1, #1
 8002d18:	fa01 f202 	lsl.w	r2, r1, r2
 8002d1c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d004      	beq.n	8002d46 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d44:	bf00      	nop
 8002d46:	bf00      	nop
}
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b085      	sub	sp, #20
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	60f8      	str	r0, [r7, #12]
 8002d56:	60b9      	str	r1, [r7, #8]
 8002d58:	607a      	str	r2, [r7, #4]
 8002d5a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d60:	f003 021c 	and.w	r2, r3, #28
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	2101      	movs	r1, #1
 8002d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d6e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	2b10      	cmp	r3, #16
 8002d7e:	d108      	bne.n	8002d92 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68ba      	ldr	r2, [r7, #8]
 8002d8e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d90:	e007      	b.n	8002da2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	60da      	str	r2, [r3, #12]
}
 8002da2:	bf00      	nop
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
	...

08002db0 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002dc2:	4b2f      	ldr	r3, [pc, #188]	; (8002e80 <HAL_FLASH_Program+0xd0>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <HAL_FLASH_Program+0x1e>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	e053      	b.n	8002e76 <HAL_FLASH_Program+0xc6>
 8002dce:	4b2c      	ldr	r3, [pc, #176]	; (8002e80 <HAL_FLASH_Program+0xd0>)
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002dd4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002dd8:	f000 f894 	bl	8002f04 <FLASH_WaitForLastOperation>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8002de0:	7dfb      	ldrb	r3, [r7, #23]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d143      	bne.n	8002e6e <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002de6:	4b26      	ldr	r3, [pc, #152]	; (8002e80 <HAL_FLASH_Program+0xd0>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002dec:	4b25      	ldr	r3, [pc, #148]	; (8002e84 <HAL_FLASH_Program+0xd4>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d009      	beq.n	8002e0c <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002df8:	4b22      	ldr	r3, [pc, #136]	; (8002e84 <HAL_FLASH_Program+0xd4>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a21      	ldr	r2, [pc, #132]	; (8002e84 <HAL_FLASH_Program+0xd4>)
 8002dfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e02:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002e04:	4b1e      	ldr	r3, [pc, #120]	; (8002e80 <HAL_FLASH_Program+0xd0>)
 8002e06:	2202      	movs	r2, #2
 8002e08:	771a      	strb	r2, [r3, #28]
 8002e0a:	e002      	b.n	8002e12 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002e0c:	4b1c      	ldr	r3, [pc, #112]	; (8002e80 <HAL_FLASH_Program+0xd0>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d107      	bne.n	8002e28 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8002e18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e1c:	68b8      	ldr	r0, [r7, #8]
 8002e1e:	f000 f8c9 	bl	8002fb4 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8002e22:	2301      	movs	r3, #1
 8002e24:	613b      	str	r3, [r7, #16]
 8002e26:	e010      	b.n	8002e4a <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d002      	beq.n	8002e34 <HAL_FLASH_Program+0x84>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d10a      	bne.n	8002e4a <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	4619      	mov	r1, r3
 8002e38:	68b8      	ldr	r0, [r7, #8]
 8002e3a:	f000 f8e1 	bl	8003000 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d102      	bne.n	8002e4a <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8002e44:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e48:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002e4a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002e4e:	f000 f859 	bl	8002f04 <FLASH_WaitForLastOperation>
 8002e52:	4603      	mov	r3, r0
 8002e54:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d006      	beq.n	8002e6a <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8002e5c:	4b09      	ldr	r3, [pc, #36]	; (8002e84 <HAL_FLASH_Program+0xd4>)
 8002e5e:	695a      	ldr	r2, [r3, #20]
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	43db      	mvns	r3, r3
 8002e64:	4907      	ldr	r1, [pc, #28]	; (8002e84 <HAL_FLASH_Program+0xd4>)
 8002e66:	4013      	ands	r3, r2
 8002e68:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002e6a:	f000 f9e1 	bl	8003230 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002e6e:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <HAL_FLASH_Program+0xd0>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	701a      	strb	r2, [r3, #0]

  return status;
 8002e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20000028 	.word	0x20000028
 8002e84:	40022000 	.word	0x40022000

08002e88 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002e92:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <HAL_FLASH_Unlock+0x38>)
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	da0b      	bge.n	8002eb2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002e9a:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <HAL_FLASH_Unlock+0x38>)
 8002e9c:	4a09      	ldr	r2, [pc, #36]	; (8002ec4 <HAL_FLASH_Unlock+0x3c>)
 8002e9e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002ea0:	4b07      	ldr	r3, [pc, #28]	; (8002ec0 <HAL_FLASH_Unlock+0x38>)
 8002ea2:	4a09      	ldr	r2, [pc, #36]	; (8002ec8 <HAL_FLASH_Unlock+0x40>)
 8002ea4:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002ea6:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <HAL_FLASH_Unlock+0x38>)
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	da01      	bge.n	8002eb2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002eb2:	79fb      	ldrb	r3, [r7, #7]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	40022000 	.word	0x40022000
 8002ec4:	45670123 	.word	0x45670123
 8002ec8:	cdef89ab 	.word	0xcdef89ab

08002ecc <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002ed0:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <HAL_FLASH_Lock+0x1c>)
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	4a04      	ldr	r2, [pc, #16]	; (8002ee8 <HAL_FLASH_Lock+0x1c>)
 8002ed6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002eda:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	40022000 	.word	0x40022000

08002eec <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  *            @arg FLASH_FLAG_PEMPTY : FLASH Boot from not programmed flash (apply only for STM32L43x/STM32L44x devices)
  */
uint32_t HAL_FLASH_GetError(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8002ef0:	4b03      	ldr	r3, [pc, #12]	; (8002f00 <HAL_FLASH_GetError+0x14>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	20000028 	.word	0x20000028

08002f04 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8002f0c:	f7ff fc46 	bl	800279c <HAL_GetTick>
 8002f10:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002f12:	e00d      	b.n	8002f30 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1a:	d009      	beq.n	8002f30 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8002f1c:	f7ff fc3e 	bl	800279c <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d801      	bhi.n	8002f30 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e036      	b.n	8002f9e <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002f30:	4b1d      	ldr	r3, [pc, #116]	; (8002fa8 <FLASH_WaitForLastOperation+0xa4>)
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1eb      	bne.n	8002f14 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8002f3c:	4b1a      	ldr	r3, [pc, #104]	; (8002fa8 <FLASH_WaitForLastOperation+0xa4>)
 8002f3e:	691a      	ldr	r2, [r3, #16]
 8002f40:	4b1a      	ldr	r3, [pc, #104]	; (8002fac <FLASH_WaitForLastOperation+0xa8>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d01e      	beq.n	8002f8a <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8002f4c:	4b18      	ldr	r3, [pc, #96]	; (8002fb0 <FLASH_WaitForLastOperation+0xac>)
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	4a16      	ldr	r2, [pc, #88]	; (8002fb0 <FLASH_WaitForLastOperation+0xac>)
 8002f56:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d007      	beq.n	8002f72 <FLASH_WaitForLastOperation+0x6e>
 8002f62:	4b11      	ldr	r3, [pc, #68]	; (8002fa8 <FLASH_WaitForLastOperation+0xa4>)
 8002f64:	699a      	ldr	r2, [r3, #24]
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002f6c:	490e      	ldr	r1, [pc, #56]	; (8002fa8 <FLASH_WaitForLastOperation+0xa4>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	618b      	str	r3, [r1, #24]
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d004      	beq.n	8002f86 <FLASH_WaitForLastOperation+0x82>
 8002f7c:	4a0a      	ldr	r2, [pc, #40]	; (8002fa8 <FLASH_WaitForLastOperation+0xa4>)
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002f84:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e009      	b.n	8002f9e <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002f8a:	4b07      	ldr	r3, [pc, #28]	; (8002fa8 <FLASH_WaitForLastOperation+0xa4>)
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d002      	beq.n	8002f9c <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002f96:	4b04      	ldr	r3, [pc, #16]	; (8002fa8 <FLASH_WaitForLastOperation+0xa4>)
 8002f98:	2201      	movs	r2, #1
 8002f9a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40022000 	.word	0x40022000
 8002fac:	0002c3fa 	.word	0x0002c3fa
 8002fb0:	20000028 	.word	0x20000028

08002fb4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002fc0:	4b0e      	ldr	r3, [pc, #56]	; (8002ffc <FLASH_Program_DoubleWord+0x48>)
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	4a0d      	ldr	r2, [pc, #52]	; (8002ffc <FLASH_Program_DoubleWord+0x48>)
 8002fc6:	f043 0301 	orr.w	r3, r3, #1
 8002fca:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8002fd2:	f3bf 8f6f 	isb	sy
}
 8002fd6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8002fd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	000a      	movs	r2, r1
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	68f9      	ldr	r1, [r7, #12]
 8002fea:	3104      	adds	r1, #4
 8002fec:	4613      	mov	r3, r2
 8002fee:	600b      	str	r3, [r1, #0]
}
 8002ff0:	bf00      	nop
 8002ff2:	3714      	adds	r7, #20
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	40022000 	.word	0x40022000

08003000 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8003000:	b480      	push	{r7}
 8003002:	b089      	sub	sp, #36	; 0x24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800300a:	2340      	movs	r3, #64	; 0x40
 800300c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003016:	4b14      	ldr	r3, [pc, #80]	; (8003068 <FLASH_Program_Fast+0x68>)
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	4a13      	ldr	r2, [pc, #76]	; (8003068 <FLASH_Program_Fast+0x68>)
 800301c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003020:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003022:	f3ef 8310 	mrs	r3, PRIMASK
 8003026:	60fb      	str	r3, [r7, #12]
  return(result);
 8003028:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800302a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800302c:	b672      	cpsid	i
}
 800302e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	3304      	adds	r3, #4
 800303c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	3304      	adds	r3, #4
 8003042:	617b      	str	r3, [r7, #20]
    row_index--;
 8003044:	7ffb      	ldrb	r3, [r7, #31]
 8003046:	3b01      	subs	r3, #1
 8003048:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800304a:	7ffb      	ldrb	r3, [r7, #31]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1ef      	bne.n	8003030 <FLASH_Program_Fast+0x30>
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	f383 8810 	msr	PRIMASK, r3
}
 800305a:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800305c:	bf00      	nop
 800305e:	3724      	adds	r7, #36	; 0x24
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	40022000 	.word	0x40022000

0800306c <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003076:	4b4b      	ldr	r3, [pc, #300]	; (80031a4 <HAL_FLASHEx_Erase+0x138>)
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d101      	bne.n	8003082 <HAL_FLASHEx_Erase+0x16>
 800307e:	2302      	movs	r3, #2
 8003080:	e08b      	b.n	800319a <HAL_FLASHEx_Erase+0x12e>
 8003082:	4b48      	ldr	r3, [pc, #288]	; (80031a4 <HAL_FLASHEx_Erase+0x138>)
 8003084:	2201      	movs	r2, #1
 8003086:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003088:	f24c 3050 	movw	r0, #50000	; 0xc350
 800308c:	f7ff ff3a 	bl	8002f04 <FLASH_WaitForLastOperation>
 8003090:	4603      	mov	r3, r0
 8003092:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003094:	7bfb      	ldrb	r3, [r7, #15]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d17b      	bne.n	8003192 <HAL_FLASHEx_Erase+0x126>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800309a:	4b42      	ldr	r3, [pc, #264]	; (80031a4 <HAL_FLASHEx_Erase+0x138>)
 800309c:	2200      	movs	r2, #0
 800309e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80030a0:	4b41      	ldr	r3, [pc, #260]	; (80031a8 <HAL_FLASHEx_Erase+0x13c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d019      	beq.n	80030e0 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80030ac:	4b3e      	ldr	r3, [pc, #248]	; (80031a8 <HAL_FLASHEx_Erase+0x13c>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a3d      	ldr	r2, [pc, #244]	; (80031a8 <HAL_FLASHEx_Erase+0x13c>)
 80030b2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030b6:	6013      	str	r3, [r2, #0]

      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80030b8:	4b3b      	ldr	r3, [pc, #236]	; (80031a8 <HAL_FLASHEx_Erase+0x13c>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d009      	beq.n	80030d8 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80030c4:	4b38      	ldr	r3, [pc, #224]	; (80031a8 <HAL_FLASHEx_Erase+0x13c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a37      	ldr	r2, [pc, #220]	; (80031a8 <HAL_FLASHEx_Erase+0x13c>)
 80030ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030ce:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80030d0:	4b34      	ldr	r3, [pc, #208]	; (80031a4 <HAL_FLASHEx_Erase+0x138>)
 80030d2:	2203      	movs	r2, #3
 80030d4:	771a      	strb	r2, [r3, #28]
 80030d6:	e016      	b.n	8003106 <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80030d8:	4b32      	ldr	r3, [pc, #200]	; (80031a4 <HAL_FLASHEx_Erase+0x138>)
 80030da:	2201      	movs	r2, #1
 80030dc:	771a      	strb	r2, [r3, #28]
 80030de:	e012      	b.n	8003106 <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80030e0:	4b31      	ldr	r3, [pc, #196]	; (80031a8 <HAL_FLASHEx_Erase+0x13c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d009      	beq.n	8003100 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80030ec:	4b2e      	ldr	r3, [pc, #184]	; (80031a8 <HAL_FLASHEx_Erase+0x13c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a2d      	ldr	r2, [pc, #180]	; (80031a8 <HAL_FLASHEx_Erase+0x13c>)
 80030f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030f6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80030f8:	4b2a      	ldr	r3, [pc, #168]	; (80031a4 <HAL_FLASHEx_Erase+0x138>)
 80030fa:	2202      	movs	r2, #2
 80030fc:	771a      	strb	r2, [r3, #28]
 80030fe:	e002      	b.n	8003106 <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003100:	4b28      	ldr	r3, [pc, #160]	; (80031a4 <HAL_FLASHEx_Erase+0x138>)
 8003102:	2200      	movs	r2, #0
 8003104:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d111      	bne.n	8003132 <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	4618      	mov	r0, r3
 8003114:	f000 f84a 	bl	80031ac <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003118:	f24c 3050 	movw	r0, #50000	; 0xc350
 800311c:	f7ff fef2 	bl	8002f04 <FLASH_WaitForLastOperation>
 8003120:	4603      	mov	r3, r0
 8003122:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8003124:	4b20      	ldr	r3, [pc, #128]	; (80031a8 <HAL_FLASHEx_Erase+0x13c>)
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	4a1f      	ldr	r2, [pc, #124]	; (80031a8 <HAL_FLASHEx_Erase+0x13c>)
 800312a:	f023 0304 	bic.w	r3, r3, #4
 800312e:	6153      	str	r3, [r2, #20]
 8003130:	e02d      	b.n	800318e <HAL_FLASHEx_Erase+0x122>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	f04f 32ff 	mov.w	r2, #4294967295
 8003138:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	60bb      	str	r3, [r7, #8]
 8003140:	e01d      	b.n	800317e <HAL_FLASHEx_Erase+0x112>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	4619      	mov	r1, r3
 8003148:	68b8      	ldr	r0, [r7, #8]
 800314a:	f000 f84d 	bl	80031e8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800314e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003152:	f7ff fed7 	bl	8002f04 <FLASH_WaitForLastOperation>
 8003156:	4603      	mov	r3, r0
 8003158:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800315a:	4b13      	ldr	r3, [pc, #76]	; (80031a8 <HAL_FLASHEx_Erase+0x13c>)
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	4a12      	ldr	r2, [pc, #72]	; (80031a8 <HAL_FLASHEx_Erase+0x13c>)
 8003160:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8003164:	f023 0302 	bic.w	r3, r3, #2
 8003168:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800316a:	7bfb      	ldrb	r3, [r7, #15]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <HAL_FLASHEx_Erase+0x10c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	68ba      	ldr	r2, [r7, #8]
 8003174:	601a      	str	r2, [r3, #0]
          break;
 8003176:	e00a      	b.n	800318e <HAL_FLASHEx_Erase+0x122>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	3301      	adds	r3, #1
 800317c:	60bb      	str	r3, [r7, #8]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	4413      	add	r3, r2
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	429a      	cmp	r2, r3
 800318c:	d3d9      	bcc.n	8003142 <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800318e:	f000 f84f 	bl	8003230 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003192:	4b04      	ldr	r3, [pc, #16]	; (80031a4 <HAL_FLASHEx_Erase+0x138>)
 8003194:	2200      	movs	r2, #0
 8003196:	701a      	strb	r2, [r3, #0]

  return status;
 8003198:	7bfb      	ldrb	r3, [r7, #15]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	20000028 	.word	0x20000028
 80031a8:	40022000 	.word	0x40022000

080031ac <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d005      	beq.n	80031ca <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80031be:	4b09      	ldr	r3, [pc, #36]	; (80031e4 <FLASH_MassErase+0x38>)
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	4a08      	ldr	r2, [pc, #32]	; (80031e4 <FLASH_MassErase+0x38>)
 80031c4:	f043 0304 	orr.w	r3, r3, #4
 80031c8:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80031ca:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <FLASH_MassErase+0x38>)
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	4a05      	ldr	r2, [pc, #20]	; (80031e4 <FLASH_MassErase+0x38>)
 80031d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d4:	6153      	str	r3, [r2, #20]
}
 80031d6:	bf00      	nop
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	40022000 	.word	0x40022000

080031e8 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80031f2:	4b0e      	ldr	r3, [pc, #56]	; (800322c <FLASH_PageErase+0x44>)
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8003202:	490a      	ldr	r1, [pc, #40]	; (800322c <FLASH_PageErase+0x44>)
 8003204:	4313      	orrs	r3, r2
 8003206:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003208:	4b08      	ldr	r3, [pc, #32]	; (800322c <FLASH_PageErase+0x44>)
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	4a07      	ldr	r2, [pc, #28]	; (800322c <FLASH_PageErase+0x44>)
 800320e:	f043 0302 	orr.w	r3, r3, #2
 8003212:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003214:	4b05      	ldr	r3, [pc, #20]	; (800322c <FLASH_PageErase+0x44>)
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	4a04      	ldr	r2, [pc, #16]	; (800322c <FLASH_PageErase+0x44>)
 800321a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800321e:	6153      	str	r3, [r2, #20]
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr
 800322c:	40022000 	.word	0x40022000

08003230 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8003236:	4b1e      	ldr	r3, [pc, #120]	; (80032b0 <FLASH_FlushCaches+0x80>)
 8003238:	7f1b      	ldrb	r3, [r3, #28]
 800323a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800323c:	79fb      	ldrb	r3, [r7, #7]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d002      	beq.n	8003248 <FLASH_FlushCaches+0x18>
 8003242:	79fb      	ldrb	r3, [r7, #7]
 8003244:	2b03      	cmp	r3, #3
 8003246:	d111      	bne.n	800326c <FLASH_FlushCaches+0x3c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003248:	4b1a      	ldr	r3, [pc, #104]	; (80032b4 <FLASH_FlushCaches+0x84>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a19      	ldr	r2, [pc, #100]	; (80032b4 <FLASH_FlushCaches+0x84>)
 800324e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003252:	6013      	str	r3, [r2, #0]
 8003254:	4b17      	ldr	r3, [pc, #92]	; (80032b4 <FLASH_FlushCaches+0x84>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a16      	ldr	r2, [pc, #88]	; (80032b4 <FLASH_FlushCaches+0x84>)
 800325a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800325e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003260:	4b14      	ldr	r3, [pc, #80]	; (80032b4 <FLASH_FlushCaches+0x84>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a13      	ldr	r2, [pc, #76]	; (80032b4 <FLASH_FlushCaches+0x84>)
 8003266:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800326a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800326c:	79fb      	ldrb	r3, [r7, #7]
 800326e:	2b02      	cmp	r3, #2
 8003270:	d002      	beq.n	8003278 <FLASH_FlushCaches+0x48>
 8003272:	79fb      	ldrb	r3, [r7, #7]
 8003274:	2b03      	cmp	r3, #3
 8003276:	d111      	bne.n	800329c <FLASH_FlushCaches+0x6c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003278:	4b0e      	ldr	r3, [pc, #56]	; (80032b4 <FLASH_FlushCaches+0x84>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a0d      	ldr	r2, [pc, #52]	; (80032b4 <FLASH_FlushCaches+0x84>)
 800327e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <FLASH_FlushCaches+0x84>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a0a      	ldr	r2, [pc, #40]	; (80032b4 <FLASH_FlushCaches+0x84>)
 800328a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800328e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003290:	4b08      	ldr	r3, [pc, #32]	; (80032b4 <FLASH_FlushCaches+0x84>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a07      	ldr	r2, [pc, #28]	; (80032b4 <FLASH_FlushCaches+0x84>)
 8003296:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800329a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800329c:	4b04      	ldr	r3, [pc, #16]	; (80032b0 <FLASH_FlushCaches+0x80>)
 800329e:	2200      	movs	r2, #0
 80032a0:	771a      	strb	r2, [r3, #28]
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	20000028 	.word	0x20000028
 80032b4:	40022000 	.word	0x40022000

080032b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b087      	sub	sp, #28
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032c2:	2300      	movs	r3, #0
 80032c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032c6:	e154      	b.n	8003572 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	2101      	movs	r1, #1
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	fa01 f303 	lsl.w	r3, r1, r3
 80032d4:	4013      	ands	r3, r2
 80032d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 8146 	beq.w	800356c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d00b      	beq.n	8003300 <HAL_GPIO_Init+0x48>
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d007      	beq.n	8003300 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032f4:	2b11      	cmp	r3, #17
 80032f6:	d003      	beq.n	8003300 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b12      	cmp	r3, #18
 80032fe:	d130      	bne.n	8003362 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	2203      	movs	r2, #3
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	43db      	mvns	r3, r3
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	4013      	ands	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	68da      	ldr	r2, [r3, #12]
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	4313      	orrs	r3, r2
 8003328:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003336:	2201      	movs	r2, #1
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	43db      	mvns	r3, r3
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4013      	ands	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	091b      	lsrs	r3, r3, #4
 800334c:	f003 0201 	and.w	r2, r3, #1
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	4313      	orrs	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	2203      	movs	r2, #3
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	43db      	mvns	r3, r3
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	4013      	ands	r3, r2
 8003378:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	689a      	ldr	r2, [r3, #8]
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	4313      	orrs	r3, r2
 800338a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b02      	cmp	r3, #2
 8003398:	d003      	beq.n	80033a2 <HAL_GPIO_Init+0xea>
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2b12      	cmp	r3, #18
 80033a0:	d123      	bne.n	80033ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	08da      	lsrs	r2, r3, #3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	3208      	adds	r2, #8
 80033aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	220f      	movs	r2, #15
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	43db      	mvns	r3, r3
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	4013      	ands	r3, r2
 80033c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	691a      	ldr	r2, [r3, #16]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	4313      	orrs	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	08da      	lsrs	r2, r3, #3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	3208      	adds	r2, #8
 80033e4:	6939      	ldr	r1, [r7, #16]
 80033e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	2203      	movs	r2, #3
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	43db      	mvns	r3, r3
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	4013      	ands	r3, r2
 8003400:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f003 0203 	and.w	r2, r3, #3
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	4313      	orrs	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 80a0 	beq.w	800356c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800342c:	4b58      	ldr	r3, [pc, #352]	; (8003590 <HAL_GPIO_Init+0x2d8>)
 800342e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003430:	4a57      	ldr	r2, [pc, #348]	; (8003590 <HAL_GPIO_Init+0x2d8>)
 8003432:	f043 0301 	orr.w	r3, r3, #1
 8003436:	6613      	str	r3, [r2, #96]	; 0x60
 8003438:	4b55      	ldr	r3, [pc, #340]	; (8003590 <HAL_GPIO_Init+0x2d8>)
 800343a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003444:	4a53      	ldr	r2, [pc, #332]	; (8003594 <HAL_GPIO_Init+0x2dc>)
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	089b      	lsrs	r3, r3, #2
 800344a:	3302      	adds	r3, #2
 800344c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003450:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f003 0303 	and.w	r3, r3, #3
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	220f      	movs	r2, #15
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	43db      	mvns	r3, r3
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	4013      	ands	r3, r2
 8003466:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800346e:	d019      	beq.n	80034a4 <HAL_GPIO_Init+0x1ec>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a49      	ldr	r2, [pc, #292]	; (8003598 <HAL_GPIO_Init+0x2e0>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d013      	beq.n	80034a0 <HAL_GPIO_Init+0x1e8>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a48      	ldr	r2, [pc, #288]	; (800359c <HAL_GPIO_Init+0x2e4>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d00d      	beq.n	800349c <HAL_GPIO_Init+0x1e4>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a47      	ldr	r2, [pc, #284]	; (80035a0 <HAL_GPIO_Init+0x2e8>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d007      	beq.n	8003498 <HAL_GPIO_Init+0x1e0>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a46      	ldr	r2, [pc, #280]	; (80035a4 <HAL_GPIO_Init+0x2ec>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d101      	bne.n	8003494 <HAL_GPIO_Init+0x1dc>
 8003490:	2304      	movs	r3, #4
 8003492:	e008      	b.n	80034a6 <HAL_GPIO_Init+0x1ee>
 8003494:	2307      	movs	r3, #7
 8003496:	e006      	b.n	80034a6 <HAL_GPIO_Init+0x1ee>
 8003498:	2303      	movs	r3, #3
 800349a:	e004      	b.n	80034a6 <HAL_GPIO_Init+0x1ee>
 800349c:	2302      	movs	r3, #2
 800349e:	e002      	b.n	80034a6 <HAL_GPIO_Init+0x1ee>
 80034a0:	2301      	movs	r3, #1
 80034a2:	e000      	b.n	80034a6 <HAL_GPIO_Init+0x1ee>
 80034a4:	2300      	movs	r3, #0
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	f002 0203 	and.w	r2, r2, #3
 80034ac:	0092      	lsls	r2, r2, #2
 80034ae:	4093      	lsls	r3, r2
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034b6:	4937      	ldr	r1, [pc, #220]	; (8003594 <HAL_GPIO_Init+0x2dc>)
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	089b      	lsrs	r3, r3, #2
 80034bc:	3302      	adds	r3, #2
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80034c4:	4b38      	ldr	r3, [pc, #224]	; (80035a8 <HAL_GPIO_Init+0x2f0>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	43db      	mvns	r3, r3
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	4013      	ands	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d003      	beq.n	80034e8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034e8:	4a2f      	ldr	r2, [pc, #188]	; (80035a8 <HAL_GPIO_Init+0x2f0>)
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80034ee:	4b2e      	ldr	r3, [pc, #184]	; (80035a8 <HAL_GPIO_Init+0x2f0>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	43db      	mvns	r3, r3
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	4013      	ands	r3, r2
 80034fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4313      	orrs	r3, r2
 8003510:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003512:	4a25      	ldr	r2, [pc, #148]	; (80035a8 <HAL_GPIO_Init+0x2f0>)
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003518:	4b23      	ldr	r3, [pc, #140]	; (80035a8 <HAL_GPIO_Init+0x2f0>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	43db      	mvns	r3, r3
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	4013      	ands	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	4313      	orrs	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800353c:	4a1a      	ldr	r2, [pc, #104]	; (80035a8 <HAL_GPIO_Init+0x2f0>)
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003542:	4b19      	ldr	r3, [pc, #100]	; (80035a8 <HAL_GPIO_Init+0x2f0>)
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	43db      	mvns	r3, r3
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	4013      	ands	r3, r2
 8003550:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4313      	orrs	r3, r2
 8003564:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003566:	4a10      	ldr	r2, [pc, #64]	; (80035a8 <HAL_GPIO_Init+0x2f0>)
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	3301      	adds	r3, #1
 8003570:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	fa22 f303 	lsr.w	r3, r2, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	f47f aea3 	bne.w	80032c8 <HAL_GPIO_Init+0x10>
  }
}
 8003582:	bf00      	nop
 8003584:	bf00      	nop
 8003586:	371c      	adds	r7, #28
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr
 8003590:	40021000 	.word	0x40021000
 8003594:	40010000 	.word	0x40010000
 8003598:	48000400 	.word	0x48000400
 800359c:	48000800 	.word	0x48000800
 80035a0:	48000c00 	.word	0x48000c00
 80035a4:	48001000 	.word	0x48001000
 80035a8:	40010400 	.word	0x40010400

080035ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	460b      	mov	r3, r1
 80035b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	691a      	ldr	r2, [r3, #16]
 80035bc:	887b      	ldrh	r3, [r7, #2]
 80035be:	4013      	ands	r3, r2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d002      	beq.n	80035ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035c4:	2301      	movs	r3, #1
 80035c6:	73fb      	strb	r3, [r7, #15]
 80035c8:	e001      	b.n	80035ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035ca:	2300      	movs	r3, #0
 80035cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3714      	adds	r7, #20
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	460b      	mov	r3, r1
 80035e6:	807b      	strh	r3, [r7, #2]
 80035e8:	4613      	mov	r3, r2
 80035ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035ec:	787b      	ldrb	r3, [r7, #1]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035f2:	887a      	ldrh	r2, [r7, #2]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035f8:	e002      	b.n	8003600 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035fa:	887a      	ldrh	r2, [r7, #2]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003610:	4b04      	ldr	r3, [pc, #16]	; (8003624 <HAL_PWREx_GetVoltageRange+0x18>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003618:	4618      	mov	r0, r3
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	40007000 	.word	0x40007000

08003628 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003636:	d130      	bne.n	800369a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003638:	4b23      	ldr	r3, [pc, #140]	; (80036c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003644:	d038      	beq.n	80036b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003646:	4b20      	ldr	r3, [pc, #128]	; (80036c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800364e:	4a1e      	ldr	r2, [pc, #120]	; (80036c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003650:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003654:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003656:	4b1d      	ldr	r3, [pc, #116]	; (80036cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2232      	movs	r2, #50	; 0x32
 800365c:	fb02 f303 	mul.w	r3, r2, r3
 8003660:	4a1b      	ldr	r2, [pc, #108]	; (80036d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003662:	fba2 2303 	umull	r2, r3, r2, r3
 8003666:	0c9b      	lsrs	r3, r3, #18
 8003668:	3301      	adds	r3, #1
 800366a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800366c:	e002      	b.n	8003674 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	3b01      	subs	r3, #1
 8003672:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003674:	4b14      	ldr	r3, [pc, #80]	; (80036c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800367c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003680:	d102      	bne.n	8003688 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1f2      	bne.n	800366e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003688:	4b0f      	ldr	r3, [pc, #60]	; (80036c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003694:	d110      	bne.n	80036b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e00f      	b.n	80036ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800369a:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a6:	d007      	beq.n	80036b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036a8:	4b07      	ldr	r3, [pc, #28]	; (80036c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036b0:	4a05      	ldr	r2, [pc, #20]	; (80036c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	40007000 	.word	0x40007000
 80036cc:	20000018 	.word	0x20000018
 80036d0:	431bde83 	.word	0x431bde83

080036d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b088      	sub	sp, #32
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d102      	bne.n	80036e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	f000 bc11 	b.w	8003f0a <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036e8:	4ba0      	ldr	r3, [pc, #640]	; (800396c <HAL_RCC_OscConfig+0x298>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f003 030c 	and.w	r3, r3, #12
 80036f0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036f2:	4b9e      	ldr	r3, [pc, #632]	; (800396c <HAL_RCC_OscConfig+0x298>)
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0310 	and.w	r3, r3, #16
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 80e4 	beq.w	80038d2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d007      	beq.n	8003720 <HAL_RCC_OscConfig+0x4c>
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	2b0c      	cmp	r3, #12
 8003714:	f040 808b 	bne.w	800382e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	2b01      	cmp	r3, #1
 800371c:	f040 8087 	bne.w	800382e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003720:	4b92      	ldr	r3, [pc, #584]	; (800396c <HAL_RCC_OscConfig+0x298>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d005      	beq.n	8003738 <HAL_RCC_OscConfig+0x64>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e3e8      	b.n	8003f0a <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a1a      	ldr	r2, [r3, #32]
 800373c:	4b8b      	ldr	r3, [pc, #556]	; (800396c <HAL_RCC_OscConfig+0x298>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0308 	and.w	r3, r3, #8
 8003744:	2b00      	cmp	r3, #0
 8003746:	d004      	beq.n	8003752 <HAL_RCC_OscConfig+0x7e>
 8003748:	4b88      	ldr	r3, [pc, #544]	; (800396c <HAL_RCC_OscConfig+0x298>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003750:	e005      	b.n	800375e <HAL_RCC_OscConfig+0x8a>
 8003752:	4b86      	ldr	r3, [pc, #536]	; (800396c <HAL_RCC_OscConfig+0x298>)
 8003754:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003758:	091b      	lsrs	r3, r3, #4
 800375a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800375e:	4293      	cmp	r3, r2
 8003760:	d223      	bcs.n	80037aa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	4618      	mov	r0, r3
 8003768:	f000 fdac 	bl	80042c4 <RCC_SetFlashLatencyFromMSIRange>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e3c9      	b.n	8003f0a <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003776:	4b7d      	ldr	r3, [pc, #500]	; (800396c <HAL_RCC_OscConfig+0x298>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a7c      	ldr	r2, [pc, #496]	; (800396c <HAL_RCC_OscConfig+0x298>)
 800377c:	f043 0308 	orr.w	r3, r3, #8
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	4b7a      	ldr	r3, [pc, #488]	; (800396c <HAL_RCC_OscConfig+0x298>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	4977      	ldr	r1, [pc, #476]	; (800396c <HAL_RCC_OscConfig+0x298>)
 8003790:	4313      	orrs	r3, r2
 8003792:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003794:	4b75      	ldr	r3, [pc, #468]	; (800396c <HAL_RCC_OscConfig+0x298>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	021b      	lsls	r3, r3, #8
 80037a2:	4972      	ldr	r1, [pc, #456]	; (800396c <HAL_RCC_OscConfig+0x298>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	604b      	str	r3, [r1, #4]
 80037a8:	e025      	b.n	80037f6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037aa:	4b70      	ldr	r3, [pc, #448]	; (800396c <HAL_RCC_OscConfig+0x298>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a6f      	ldr	r2, [pc, #444]	; (800396c <HAL_RCC_OscConfig+0x298>)
 80037b0:	f043 0308 	orr.w	r3, r3, #8
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	4b6d      	ldr	r3, [pc, #436]	; (800396c <HAL_RCC_OscConfig+0x298>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	496a      	ldr	r1, [pc, #424]	; (800396c <HAL_RCC_OscConfig+0x298>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037c8:	4b68      	ldr	r3, [pc, #416]	; (800396c <HAL_RCC_OscConfig+0x298>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	021b      	lsls	r3, r3, #8
 80037d6:	4965      	ldr	r1, [pc, #404]	; (800396c <HAL_RCC_OscConfig+0x298>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d109      	bne.n	80037f6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 fd6c 	bl	80042c4 <RCC_SetFlashLatencyFromMSIRange>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e389      	b.n	8003f0a <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037f6:	f000 fc6f 	bl	80040d8 <HAL_RCC_GetSysClockFreq>
 80037fa:	4602      	mov	r2, r0
 80037fc:	4b5b      	ldr	r3, [pc, #364]	; (800396c <HAL_RCC_OscConfig+0x298>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	091b      	lsrs	r3, r3, #4
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	495a      	ldr	r1, [pc, #360]	; (8003970 <HAL_RCC_OscConfig+0x29c>)
 8003808:	5ccb      	ldrb	r3, [r1, r3]
 800380a:	f003 031f 	and.w	r3, r3, #31
 800380e:	fa22 f303 	lsr.w	r3, r2, r3
 8003812:	4a58      	ldr	r2, [pc, #352]	; (8003974 <HAL_RCC_OscConfig+0x2a0>)
 8003814:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003816:	4b58      	ldr	r3, [pc, #352]	; (8003978 <HAL_RCC_OscConfig+0x2a4>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f7fe faa0 	bl	8001d60 <HAL_InitTick>
 8003820:	4603      	mov	r3, r0
 8003822:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003824:	7bfb      	ldrb	r3, [r7, #15]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d052      	beq.n	80038d0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800382a:	7bfb      	ldrb	r3, [r7, #15]
 800382c:	e36d      	b.n	8003f0a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d032      	beq.n	800389c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003836:	4b4d      	ldr	r3, [pc, #308]	; (800396c <HAL_RCC_OscConfig+0x298>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a4c      	ldr	r2, [pc, #304]	; (800396c <HAL_RCC_OscConfig+0x298>)
 800383c:	f043 0301 	orr.w	r3, r3, #1
 8003840:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003842:	f7fe ffab 	bl	800279c <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003848:	e008      	b.n	800385c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800384a:	f7fe ffa7 	bl	800279c <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e356      	b.n	8003f0a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800385c:	4b43      	ldr	r3, [pc, #268]	; (800396c <HAL_RCC_OscConfig+0x298>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0f0      	beq.n	800384a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003868:	4b40      	ldr	r3, [pc, #256]	; (800396c <HAL_RCC_OscConfig+0x298>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a3f      	ldr	r2, [pc, #252]	; (800396c <HAL_RCC_OscConfig+0x298>)
 800386e:	f043 0308 	orr.w	r3, r3, #8
 8003872:	6013      	str	r3, [r2, #0]
 8003874:	4b3d      	ldr	r3, [pc, #244]	; (800396c <HAL_RCC_OscConfig+0x298>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	493a      	ldr	r1, [pc, #232]	; (800396c <HAL_RCC_OscConfig+0x298>)
 8003882:	4313      	orrs	r3, r2
 8003884:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003886:	4b39      	ldr	r3, [pc, #228]	; (800396c <HAL_RCC_OscConfig+0x298>)
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	021b      	lsls	r3, r3, #8
 8003894:	4935      	ldr	r1, [pc, #212]	; (800396c <HAL_RCC_OscConfig+0x298>)
 8003896:	4313      	orrs	r3, r2
 8003898:	604b      	str	r3, [r1, #4]
 800389a:	e01a      	b.n	80038d2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800389c:	4b33      	ldr	r3, [pc, #204]	; (800396c <HAL_RCC_OscConfig+0x298>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a32      	ldr	r2, [pc, #200]	; (800396c <HAL_RCC_OscConfig+0x298>)
 80038a2:	f023 0301 	bic.w	r3, r3, #1
 80038a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038a8:	f7fe ff78 	bl	800279c <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038b0:	f7fe ff74 	bl	800279c <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e323      	b.n	8003f0a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038c2:	4b2a      	ldr	r3, [pc, #168]	; (800396c <HAL_RCC_OscConfig+0x298>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f0      	bne.n	80038b0 <HAL_RCC_OscConfig+0x1dc>
 80038ce:	e000      	b.n	80038d2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d073      	beq.n	80039c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	d005      	beq.n	80038f0 <HAL_RCC_OscConfig+0x21c>
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	2b0c      	cmp	r3, #12
 80038e8:	d10e      	bne.n	8003908 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2b03      	cmp	r3, #3
 80038ee:	d10b      	bne.n	8003908 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f0:	4b1e      	ldr	r3, [pc, #120]	; (800396c <HAL_RCC_OscConfig+0x298>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d063      	beq.n	80039c4 <HAL_RCC_OscConfig+0x2f0>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d15f      	bne.n	80039c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e300      	b.n	8003f0a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003910:	d106      	bne.n	8003920 <HAL_RCC_OscConfig+0x24c>
 8003912:	4b16      	ldr	r3, [pc, #88]	; (800396c <HAL_RCC_OscConfig+0x298>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a15      	ldr	r2, [pc, #84]	; (800396c <HAL_RCC_OscConfig+0x298>)
 8003918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800391c:	6013      	str	r3, [r2, #0]
 800391e:	e01d      	b.n	800395c <HAL_RCC_OscConfig+0x288>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003928:	d10c      	bne.n	8003944 <HAL_RCC_OscConfig+0x270>
 800392a:	4b10      	ldr	r3, [pc, #64]	; (800396c <HAL_RCC_OscConfig+0x298>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a0f      	ldr	r2, [pc, #60]	; (800396c <HAL_RCC_OscConfig+0x298>)
 8003930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	4b0d      	ldr	r3, [pc, #52]	; (800396c <HAL_RCC_OscConfig+0x298>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a0c      	ldr	r2, [pc, #48]	; (800396c <HAL_RCC_OscConfig+0x298>)
 800393c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	e00b      	b.n	800395c <HAL_RCC_OscConfig+0x288>
 8003944:	4b09      	ldr	r3, [pc, #36]	; (800396c <HAL_RCC_OscConfig+0x298>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a08      	ldr	r2, [pc, #32]	; (800396c <HAL_RCC_OscConfig+0x298>)
 800394a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800394e:	6013      	str	r3, [r2, #0]
 8003950:	4b06      	ldr	r3, [pc, #24]	; (800396c <HAL_RCC_OscConfig+0x298>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a05      	ldr	r2, [pc, #20]	; (800396c <HAL_RCC_OscConfig+0x298>)
 8003956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800395a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d01b      	beq.n	800399c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003964:	f7fe ff1a 	bl	800279c <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800396a:	e010      	b.n	800398e <HAL_RCC_OscConfig+0x2ba>
 800396c:	40021000 	.word	0x40021000
 8003970:	08009cbc 	.word	0x08009cbc
 8003974:	20000018 	.word	0x20000018
 8003978:	20000020 	.word	0x20000020
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800397c:	f7fe ff0e 	bl	800279c <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b64      	cmp	r3, #100	; 0x64
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e2bd      	b.n	8003f0a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800398e:	4baf      	ldr	r3, [pc, #700]	; (8003c4c <HAL_RCC_OscConfig+0x578>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d0f0      	beq.n	800397c <HAL_RCC_OscConfig+0x2a8>
 800399a:	e014      	b.n	80039c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399c:	f7fe fefe 	bl	800279c <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039a4:	f7fe fefa 	bl	800279c <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b64      	cmp	r3, #100	; 0x64
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e2a9      	b.n	8003f0a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039b6:	4ba5      	ldr	r3, [pc, #660]	; (8003c4c <HAL_RCC_OscConfig+0x578>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1f0      	bne.n	80039a4 <HAL_RCC_OscConfig+0x2d0>
 80039c2:	e000      	b.n	80039c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d060      	beq.n	8003a94 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	2b04      	cmp	r3, #4
 80039d6:	d005      	beq.n	80039e4 <HAL_RCC_OscConfig+0x310>
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	2b0c      	cmp	r3, #12
 80039dc:	d119      	bne.n	8003a12 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d116      	bne.n	8003a12 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039e4:	4b99      	ldr	r3, [pc, #612]	; (8003c4c <HAL_RCC_OscConfig+0x578>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d005      	beq.n	80039fc <HAL_RCC_OscConfig+0x328>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e286      	b.n	8003f0a <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039fc:	4b93      	ldr	r3, [pc, #588]	; (8003c4c <HAL_RCC_OscConfig+0x578>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	061b      	lsls	r3, r3, #24
 8003a0a:	4990      	ldr	r1, [pc, #576]	; (8003c4c <HAL_RCC_OscConfig+0x578>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a10:	e040      	b.n	8003a94 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d023      	beq.n	8003a62 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a1a:	4b8c      	ldr	r3, [pc, #560]	; (8003c4c <HAL_RCC_OscConfig+0x578>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a8b      	ldr	r2, [pc, #556]	; (8003c4c <HAL_RCC_OscConfig+0x578>)
 8003a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a26:	f7fe feb9 	bl	800279c <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a2e:	f7fe feb5 	bl	800279c <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e264      	b.n	8003f0a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a40:	4b82      	ldr	r3, [pc, #520]	; (8003c4c <HAL_RCC_OscConfig+0x578>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d0f0      	beq.n	8003a2e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a4c:	4b7f      	ldr	r3, [pc, #508]	; (8003c4c <HAL_RCC_OscConfig+0x578>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	061b      	lsls	r3, r3, #24
 8003a5a:	497c      	ldr	r1, [pc, #496]	; (8003c4c <HAL_RCC_OscConfig+0x578>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	604b      	str	r3, [r1, #4]
 8003a60:	e018      	b.n	8003a94 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a62:	4b7a      	ldr	r3, [pc, #488]	; (8003c4c <HAL_RCC_OscConfig+0x578>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a79      	ldr	r2, [pc, #484]	; (8003c4c <HAL_RCC_OscConfig+0x578>)
 8003a68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6e:	f7fe fe95 	bl	800279c <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a76:	f7fe fe91 	bl	800279c <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e240      	b.n	8003f0a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a88:	4b70      	ldr	r3, [pc, #448]	; (8003c4c <HAL_RCC_OscConfig+0x578>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1f0      	bne.n	8003a76 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0308 	and.w	r3, r3, #8
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d03c      	beq.n	8003b1a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d01c      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aa8:	4b68      	ldr	r3, [pc, #416]	; (8003c4c <HAL_RCC_OscConfig+0x578>)
 8003aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aae:	4a67      	ldr	r2, [pc, #412]	; (8003c4c <HAL_RCC_OscConfig+0x578>)
 8003ab0:	f043 0301 	orr.w	r3, r3, #1
 8003ab4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab8:	f7fe fe70 	bl	800279c <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ac0:	f7fe fe6c 	bl	800279c <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e21b      	b.n	8003f0a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ad2:	4b5e      	ldr	r3, [pc, #376]	; (8003c4c <HAL_RCC_OscConfig+0x578>)
 8003ad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0ef      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x3ec>
 8003ae0:	e01b      	b.n	8003b1a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ae2:	4b5a      	ldr	r3, [pc, #360]	; (8003c4c <HAL_RCC_OscConfig+0x578>)
 8003ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ae8:	4a58      	ldr	r2, [pc, #352]	; (8003c4c <HAL_RCC_OscConfig+0x578>)
 8003aea:	f023 0301 	bic.w	r3, r3, #1
 8003aee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af2:	f7fe fe53 	bl	800279c <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003afa:	f7fe fe4f 	bl	800279c <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e1fe      	b.n	8003f0a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b0c:	4b4f      	ldr	r3, [pc, #316]	; (8003c4c <HAL_RCC_OscConfig+0x578>)
 8003b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1ef      	bne.n	8003afa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0304 	and.w	r3, r3, #4
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 80a6 	beq.w	8003c74 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b2c:	4b47      	ldr	r3, [pc, #284]	; (8003c4c <HAL_RCC_OscConfig+0x578>)
 8003b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10d      	bne.n	8003b54 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b38:	4b44      	ldr	r3, [pc, #272]	; (8003c4c <HAL_RCC_OscConfig+0x578>)
 8003b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b3c:	4a43      	ldr	r2, [pc, #268]	; (8003c4c <HAL_RCC_OscConfig+0x578>)
 8003b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b42:	6593      	str	r3, [r2, #88]	; 0x58
 8003b44:	4b41      	ldr	r3, [pc, #260]	; (8003c4c <HAL_RCC_OscConfig+0x578>)
 8003b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4c:	60bb      	str	r3, [r7, #8]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b50:	2301      	movs	r3, #1
 8003b52:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b54:	4b3e      	ldr	r3, [pc, #248]	; (8003c50 <HAL_RCC_OscConfig+0x57c>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d118      	bne.n	8003b92 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b60:	4b3b      	ldr	r3, [pc, #236]	; (8003c50 <HAL_RCC_OscConfig+0x57c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a3a      	ldr	r2, [pc, #232]	; (8003c50 <HAL_RCC_OscConfig+0x57c>)
 8003b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b6a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b6c:	f7fe fe16 	bl	800279c <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b74:	f7fe fe12 	bl	800279c <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e1c1      	b.n	8003f0a <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b86:	4b32      	ldr	r3, [pc, #200]	; (8003c50 <HAL_RCC_OscConfig+0x57c>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0f0      	beq.n	8003b74 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d108      	bne.n	8003bac <HAL_RCC_OscConfig+0x4d8>
 8003b9a:	4b2c      	ldr	r3, [pc, #176]	; (8003c4c <HAL_RCC_OscConfig+0x578>)
 8003b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba0:	4a2a      	ldr	r2, [pc, #168]	; (8003c4c <HAL_RCC_OscConfig+0x578>)
 8003ba2:	f043 0301 	orr.w	r3, r3, #1
 8003ba6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003baa:	e024      	b.n	8003bf6 <HAL_RCC_OscConfig+0x522>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	2b05      	cmp	r3, #5
 8003bb2:	d110      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x502>
 8003bb4:	4b25      	ldr	r3, [pc, #148]	; (8003c4c <HAL_RCC_OscConfig+0x578>)
 8003bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bba:	4a24      	ldr	r2, [pc, #144]	; (8003c4c <HAL_RCC_OscConfig+0x578>)
 8003bbc:	f043 0304 	orr.w	r3, r3, #4
 8003bc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bc4:	4b21      	ldr	r3, [pc, #132]	; (8003c4c <HAL_RCC_OscConfig+0x578>)
 8003bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bca:	4a20      	ldr	r2, [pc, #128]	; (8003c4c <HAL_RCC_OscConfig+0x578>)
 8003bcc:	f043 0301 	orr.w	r3, r3, #1
 8003bd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bd4:	e00f      	b.n	8003bf6 <HAL_RCC_OscConfig+0x522>
 8003bd6:	4b1d      	ldr	r3, [pc, #116]	; (8003c4c <HAL_RCC_OscConfig+0x578>)
 8003bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bdc:	4a1b      	ldr	r2, [pc, #108]	; (8003c4c <HAL_RCC_OscConfig+0x578>)
 8003bde:	f023 0301 	bic.w	r3, r3, #1
 8003be2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003be6:	4b19      	ldr	r3, [pc, #100]	; (8003c4c <HAL_RCC_OscConfig+0x578>)
 8003be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bec:	4a17      	ldr	r2, [pc, #92]	; (8003c4c <HAL_RCC_OscConfig+0x578>)
 8003bee:	f023 0304 	bic.w	r3, r3, #4
 8003bf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d016      	beq.n	8003c2c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bfe:	f7fe fdcd 	bl	800279c <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c04:	e00a      	b.n	8003c1c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c06:	f7fe fdc9 	bl	800279c <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e176      	b.n	8003f0a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c1c:	4b0b      	ldr	r3, [pc, #44]	; (8003c4c <HAL_RCC_OscConfig+0x578>)
 8003c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0ed      	beq.n	8003c06 <HAL_RCC_OscConfig+0x532>
 8003c2a:	e01a      	b.n	8003c62 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2c:	f7fe fdb6 	bl	800279c <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c32:	e00f      	b.n	8003c54 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c34:	f7fe fdb2 	bl	800279c <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d906      	bls.n	8003c54 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e15f      	b.n	8003f0a <HAL_RCC_OscConfig+0x836>
 8003c4a:	bf00      	nop
 8003c4c:	40021000 	.word	0x40021000
 8003c50:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c54:	4baa      	ldr	r3, [pc, #680]	; (8003f00 <HAL_RCC_OscConfig+0x82c>)
 8003c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1e8      	bne.n	8003c34 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c62:	7ffb      	ldrb	r3, [r7, #31]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d105      	bne.n	8003c74 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c68:	4ba5      	ldr	r3, [pc, #660]	; (8003f00 <HAL_RCC_OscConfig+0x82c>)
 8003c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6c:	4aa4      	ldr	r2, [pc, #656]	; (8003f00 <HAL_RCC_OscConfig+0x82c>)
 8003c6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c72:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0320 	and.w	r3, r3, #32
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d03c      	beq.n	8003cfa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d01c      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c88:	4b9d      	ldr	r3, [pc, #628]	; (8003f00 <HAL_RCC_OscConfig+0x82c>)
 8003c8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c8e:	4a9c      	ldr	r2, [pc, #624]	; (8003f00 <HAL_RCC_OscConfig+0x82c>)
 8003c90:	f043 0301 	orr.w	r3, r3, #1
 8003c94:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c98:	f7fe fd80 	bl	800279c <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ca0:	f7fe fd7c 	bl	800279c <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e12b      	b.n	8003f0a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cb2:	4b93      	ldr	r3, [pc, #588]	; (8003f00 <HAL_RCC_OscConfig+0x82c>)
 8003cb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0ef      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x5cc>
 8003cc0:	e01b      	b.n	8003cfa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003cc2:	4b8f      	ldr	r3, [pc, #572]	; (8003f00 <HAL_RCC_OscConfig+0x82c>)
 8003cc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cc8:	4a8d      	ldr	r2, [pc, #564]	; (8003f00 <HAL_RCC_OscConfig+0x82c>)
 8003cca:	f023 0301 	bic.w	r3, r3, #1
 8003cce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd2:	f7fe fd63 	bl	800279c <HAL_GetTick>
 8003cd6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003cd8:	e008      	b.n	8003cec <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cda:	f7fe fd5f 	bl	800279c <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e10e      	b.n	8003f0a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003cec:	4b84      	ldr	r3, [pc, #528]	; (8003f00 <HAL_RCC_OscConfig+0x82c>)
 8003cee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1ef      	bne.n	8003cda <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 8102 	beq.w	8003f08 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	f040 80c5 	bne.w	8003e98 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d0e:	4b7c      	ldr	r3, [pc, #496]	; (8003f00 <HAL_RCC_OscConfig+0x82c>)
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	f003 0203 	and.w	r2, r3, #3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d12c      	bne.n	8003d7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d123      	bne.n	8003d7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d3e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d11b      	bne.n	8003d7c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d113      	bne.n	8003d7c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5e:	085b      	lsrs	r3, r3, #1
 8003d60:	3b01      	subs	r3, #1
 8003d62:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d109      	bne.n	8003d7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	085b      	lsrs	r3, r3, #1
 8003d74:	3b01      	subs	r3, #1
 8003d76:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d067      	beq.n	8003e4c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	2b0c      	cmp	r3, #12
 8003d80:	d062      	beq.n	8003e48 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d82:	4b5f      	ldr	r3, [pc, #380]	; (8003f00 <HAL_RCC_OscConfig+0x82c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e0bb      	b.n	8003f0a <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d92:	4b5b      	ldr	r3, [pc, #364]	; (8003f00 <HAL_RCC_OscConfig+0x82c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a5a      	ldr	r2, [pc, #360]	; (8003f00 <HAL_RCC_OscConfig+0x82c>)
 8003d98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d9c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d9e:	f7fe fcfd 	bl	800279c <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003da4:	e008      	b.n	8003db8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003da6:	f7fe fcf9 	bl	800279c <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e0a8      	b.n	8003f0a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003db8:	4b51      	ldr	r3, [pc, #324]	; (8003f00 <HAL_RCC_OscConfig+0x82c>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1f0      	bne.n	8003da6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dc4:	4b4e      	ldr	r3, [pc, #312]	; (8003f00 <HAL_RCC_OscConfig+0x82c>)
 8003dc6:	68da      	ldr	r2, [r3, #12]
 8003dc8:	4b4e      	ldr	r3, [pc, #312]	; (8003f04 <HAL_RCC_OscConfig+0x830>)
 8003dca:	4013      	ands	r3, r2
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003dd4:	3a01      	subs	r2, #1
 8003dd6:	0112      	lsls	r2, r2, #4
 8003dd8:	4311      	orrs	r1, r2
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003dde:	0212      	lsls	r2, r2, #8
 8003de0:	4311      	orrs	r1, r2
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003de6:	0852      	lsrs	r2, r2, #1
 8003de8:	3a01      	subs	r2, #1
 8003dea:	0552      	lsls	r2, r2, #21
 8003dec:	4311      	orrs	r1, r2
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003df2:	0852      	lsrs	r2, r2, #1
 8003df4:	3a01      	subs	r2, #1
 8003df6:	0652      	lsls	r2, r2, #25
 8003df8:	4311      	orrs	r1, r2
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003dfe:	06d2      	lsls	r2, r2, #27
 8003e00:	430a      	orrs	r2, r1
 8003e02:	493f      	ldr	r1, [pc, #252]	; (8003f00 <HAL_RCC_OscConfig+0x82c>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e08:	4b3d      	ldr	r3, [pc, #244]	; (8003f00 <HAL_RCC_OscConfig+0x82c>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a3c      	ldr	r2, [pc, #240]	; (8003f00 <HAL_RCC_OscConfig+0x82c>)
 8003e0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e12:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e14:	4b3a      	ldr	r3, [pc, #232]	; (8003f00 <HAL_RCC_OscConfig+0x82c>)
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	4a39      	ldr	r2, [pc, #228]	; (8003f00 <HAL_RCC_OscConfig+0x82c>)
 8003e1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e1e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e20:	f7fe fcbc 	bl	800279c <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e28:	f7fe fcb8 	bl	800279c <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e067      	b.n	8003f0a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e3a:	4b31      	ldr	r3, [pc, #196]	; (8003f00 <HAL_RCC_OscConfig+0x82c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0f0      	beq.n	8003e28 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e46:	e05f      	b.n	8003f08 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e05e      	b.n	8003f0a <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e4c:	4b2c      	ldr	r3, [pc, #176]	; (8003f00 <HAL_RCC_OscConfig+0x82c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d157      	bne.n	8003f08 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e58:	4b29      	ldr	r3, [pc, #164]	; (8003f00 <HAL_RCC_OscConfig+0x82c>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a28      	ldr	r2, [pc, #160]	; (8003f00 <HAL_RCC_OscConfig+0x82c>)
 8003e5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e62:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e64:	4b26      	ldr	r3, [pc, #152]	; (8003f00 <HAL_RCC_OscConfig+0x82c>)
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	4a25      	ldr	r2, [pc, #148]	; (8003f00 <HAL_RCC_OscConfig+0x82c>)
 8003e6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e6e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e70:	f7fe fc94 	bl	800279c <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e78:	f7fe fc90 	bl	800279c <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e03f      	b.n	8003f0a <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e8a:	4b1d      	ldr	r3, [pc, #116]	; (8003f00 <HAL_RCC_OscConfig+0x82c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0f0      	beq.n	8003e78 <HAL_RCC_OscConfig+0x7a4>
 8003e96:	e037      	b.n	8003f08 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	2b0c      	cmp	r3, #12
 8003e9c:	d02d      	beq.n	8003efa <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e9e:	4b18      	ldr	r3, [pc, #96]	; (8003f00 <HAL_RCC_OscConfig+0x82c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a17      	ldr	r2, [pc, #92]	; (8003f00 <HAL_RCC_OscConfig+0x82c>)
 8003ea4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ea8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003eaa:	4b15      	ldr	r3, [pc, #84]	; (8003f00 <HAL_RCC_OscConfig+0x82c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d105      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003eb6:	4b12      	ldr	r3, [pc, #72]	; (8003f00 <HAL_RCC_OscConfig+0x82c>)
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	4a11      	ldr	r2, [pc, #68]	; (8003f00 <HAL_RCC_OscConfig+0x82c>)
 8003ebc:	f023 0303 	bic.w	r3, r3, #3
 8003ec0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003ec2:	4b0f      	ldr	r3, [pc, #60]	; (8003f00 <HAL_RCC_OscConfig+0x82c>)
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	4a0e      	ldr	r2, [pc, #56]	; (8003f00 <HAL_RCC_OscConfig+0x82c>)
 8003ec8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003ecc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ed0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed2:	f7fe fc63 	bl	800279c <HAL_GetTick>
 8003ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ed8:	e008      	b.n	8003eec <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eda:	f7fe fc5f 	bl	800279c <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e00e      	b.n	8003f0a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eec:	4b04      	ldr	r3, [pc, #16]	; (8003f00 <HAL_RCC_OscConfig+0x82c>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1f0      	bne.n	8003eda <HAL_RCC_OscConfig+0x806>
 8003ef8:	e006      	b.n	8003f08 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e005      	b.n	8003f0a <HAL_RCC_OscConfig+0x836>
 8003efe:	bf00      	nop
 8003f00:	40021000 	.word	0x40021000
 8003f04:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3720      	adds	r7, #32
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop

08003f14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d101      	bne.n	8003f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e0c8      	b.n	80040ba <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f28:	4b66      	ldr	r3, [pc, #408]	; (80040c4 <HAL_RCC_ClockConfig+0x1b0>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0307 	and.w	r3, r3, #7
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d910      	bls.n	8003f58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f36:	4b63      	ldr	r3, [pc, #396]	; (80040c4 <HAL_RCC_ClockConfig+0x1b0>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f023 0207 	bic.w	r2, r3, #7
 8003f3e:	4961      	ldr	r1, [pc, #388]	; (80040c4 <HAL_RCC_ClockConfig+0x1b0>)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f46:	4b5f      	ldr	r3, [pc, #380]	; (80040c4 <HAL_RCC_ClockConfig+0x1b0>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0307 	and.w	r3, r3, #7
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d001      	beq.n	8003f58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e0b0      	b.n	80040ba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d04c      	beq.n	8003ffe <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	2b03      	cmp	r3, #3
 8003f6a:	d107      	bne.n	8003f7c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f6c:	4b56      	ldr	r3, [pc, #344]	; (80040c8 <HAL_RCC_ClockConfig+0x1b4>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d121      	bne.n	8003fbc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e09e      	b.n	80040ba <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d107      	bne.n	8003f94 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f84:	4b50      	ldr	r3, [pc, #320]	; (80040c8 <HAL_RCC_ClockConfig+0x1b4>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d115      	bne.n	8003fbc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e092      	b.n	80040ba <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d107      	bne.n	8003fac <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f9c:	4b4a      	ldr	r3, [pc, #296]	; (80040c8 <HAL_RCC_ClockConfig+0x1b4>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d109      	bne.n	8003fbc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e086      	b.n	80040ba <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fac:	4b46      	ldr	r3, [pc, #280]	; (80040c8 <HAL_RCC_ClockConfig+0x1b4>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e07e      	b.n	80040ba <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fbc:	4b42      	ldr	r3, [pc, #264]	; (80040c8 <HAL_RCC_ClockConfig+0x1b4>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f023 0203 	bic.w	r2, r3, #3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	493f      	ldr	r1, [pc, #252]	; (80040c8 <HAL_RCC_ClockConfig+0x1b4>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fce:	f7fe fbe5 	bl	800279c <HAL_GetTick>
 8003fd2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd4:	e00a      	b.n	8003fec <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fd6:	f7fe fbe1 	bl	800279c <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e066      	b.n	80040ba <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fec:	4b36      	ldr	r3, [pc, #216]	; (80040c8 <HAL_RCC_ClockConfig+0x1b4>)
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f003 020c 	and.w	r2, r3, #12
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d1eb      	bne.n	8003fd6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d008      	beq.n	800401c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800400a:	4b2f      	ldr	r3, [pc, #188]	; (80040c8 <HAL_RCC_ClockConfig+0x1b4>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	492c      	ldr	r1, [pc, #176]	; (80040c8 <HAL_RCC_ClockConfig+0x1b4>)
 8004018:	4313      	orrs	r3, r2
 800401a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800401c:	4b29      	ldr	r3, [pc, #164]	; (80040c4 <HAL_RCC_ClockConfig+0x1b0>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	429a      	cmp	r2, r3
 8004028:	d210      	bcs.n	800404c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800402a:	4b26      	ldr	r3, [pc, #152]	; (80040c4 <HAL_RCC_ClockConfig+0x1b0>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f023 0207 	bic.w	r2, r3, #7
 8004032:	4924      	ldr	r1, [pc, #144]	; (80040c4 <HAL_RCC_ClockConfig+0x1b0>)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	4313      	orrs	r3, r2
 8004038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800403a:	4b22      	ldr	r3, [pc, #136]	; (80040c4 <HAL_RCC_ClockConfig+0x1b0>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0307 	and.w	r3, r3, #7
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	429a      	cmp	r2, r3
 8004046:	d001      	beq.n	800404c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e036      	b.n	80040ba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0304 	and.w	r3, r3, #4
 8004054:	2b00      	cmp	r3, #0
 8004056:	d008      	beq.n	800406a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004058:	4b1b      	ldr	r3, [pc, #108]	; (80040c8 <HAL_RCC_ClockConfig+0x1b4>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	4918      	ldr	r1, [pc, #96]	; (80040c8 <HAL_RCC_ClockConfig+0x1b4>)
 8004066:	4313      	orrs	r3, r2
 8004068:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0308 	and.w	r3, r3, #8
 8004072:	2b00      	cmp	r3, #0
 8004074:	d009      	beq.n	800408a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004076:	4b14      	ldr	r3, [pc, #80]	; (80040c8 <HAL_RCC_ClockConfig+0x1b4>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	4910      	ldr	r1, [pc, #64]	; (80040c8 <HAL_RCC_ClockConfig+0x1b4>)
 8004086:	4313      	orrs	r3, r2
 8004088:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800408a:	f000 f825 	bl	80040d8 <HAL_RCC_GetSysClockFreq>
 800408e:	4602      	mov	r2, r0
 8004090:	4b0d      	ldr	r3, [pc, #52]	; (80040c8 <HAL_RCC_ClockConfig+0x1b4>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	091b      	lsrs	r3, r3, #4
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	490c      	ldr	r1, [pc, #48]	; (80040cc <HAL_RCC_ClockConfig+0x1b8>)
 800409c:	5ccb      	ldrb	r3, [r1, r3]
 800409e:	f003 031f 	and.w	r3, r3, #31
 80040a2:	fa22 f303 	lsr.w	r3, r2, r3
 80040a6:	4a0a      	ldr	r2, [pc, #40]	; (80040d0 <HAL_RCC_ClockConfig+0x1bc>)
 80040a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80040aa:	4b0a      	ldr	r3, [pc, #40]	; (80040d4 <HAL_RCC_ClockConfig+0x1c0>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7fd fe56 	bl	8001d60 <HAL_InitTick>
 80040b4:	4603      	mov	r3, r0
 80040b6:	72fb      	strb	r3, [r7, #11]

  return status;
 80040b8:	7afb      	ldrb	r3, [r7, #11]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	40022000 	.word	0x40022000
 80040c8:	40021000 	.word	0x40021000
 80040cc:	08009cbc 	.word	0x08009cbc
 80040d0:	20000018 	.word	0x20000018
 80040d4:	20000020 	.word	0x20000020

080040d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	b089      	sub	sp, #36	; 0x24
 80040dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80040de:	2300      	movs	r3, #0
 80040e0:	61fb      	str	r3, [r7, #28]
 80040e2:	2300      	movs	r3, #0
 80040e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040e6:	4b3e      	ldr	r3, [pc, #248]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f003 030c 	and.w	r3, r3, #12
 80040ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040f0:	4b3b      	ldr	r3, [pc, #236]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	f003 0303 	and.w	r3, r3, #3
 80040f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d005      	beq.n	800410c <HAL_RCC_GetSysClockFreq+0x34>
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	2b0c      	cmp	r3, #12
 8004104:	d121      	bne.n	800414a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d11e      	bne.n	800414a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800410c:	4b34      	ldr	r3, [pc, #208]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0308 	and.w	r3, r3, #8
 8004114:	2b00      	cmp	r3, #0
 8004116:	d107      	bne.n	8004128 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004118:	4b31      	ldr	r3, [pc, #196]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800411a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800411e:	0a1b      	lsrs	r3, r3, #8
 8004120:	f003 030f 	and.w	r3, r3, #15
 8004124:	61fb      	str	r3, [r7, #28]
 8004126:	e005      	b.n	8004134 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004128:	4b2d      	ldr	r3, [pc, #180]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	091b      	lsrs	r3, r3, #4
 800412e:	f003 030f 	and.w	r3, r3, #15
 8004132:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004134:	4a2b      	ldr	r2, [pc, #172]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800413c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10d      	bne.n	8004160 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004148:	e00a      	b.n	8004160 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	2b04      	cmp	r3, #4
 800414e:	d102      	bne.n	8004156 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004150:	4b25      	ldr	r3, [pc, #148]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004152:	61bb      	str	r3, [r7, #24]
 8004154:	e004      	b.n	8004160 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	2b08      	cmp	r3, #8
 800415a:	d101      	bne.n	8004160 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800415c:	4b23      	ldr	r3, [pc, #140]	; (80041ec <HAL_RCC_GetSysClockFreq+0x114>)
 800415e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	2b0c      	cmp	r3, #12
 8004164:	d134      	bne.n	80041d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004166:	4b1e      	ldr	r3, [pc, #120]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	2b02      	cmp	r3, #2
 8004174:	d003      	beq.n	800417e <HAL_RCC_GetSysClockFreq+0xa6>
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	2b03      	cmp	r3, #3
 800417a:	d003      	beq.n	8004184 <HAL_RCC_GetSysClockFreq+0xac>
 800417c:	e005      	b.n	800418a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800417e:	4b1a      	ldr	r3, [pc, #104]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004180:	617b      	str	r3, [r7, #20]
      break;
 8004182:	e005      	b.n	8004190 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004184:	4b19      	ldr	r3, [pc, #100]	; (80041ec <HAL_RCC_GetSysClockFreq+0x114>)
 8004186:	617b      	str	r3, [r7, #20]
      break;
 8004188:	e002      	b.n	8004190 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	617b      	str	r3, [r7, #20]
      break;
 800418e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004190:	4b13      	ldr	r3, [pc, #76]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	091b      	lsrs	r3, r3, #4
 8004196:	f003 0307 	and.w	r3, r3, #7
 800419a:	3301      	adds	r3, #1
 800419c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800419e:	4b10      	ldr	r3, [pc, #64]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	0a1b      	lsrs	r3, r3, #8
 80041a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	fb02 f203 	mul.w	r2, r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041b6:	4b0a      	ldr	r3, [pc, #40]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	0e5b      	lsrs	r3, r3, #25
 80041bc:	f003 0303 	and.w	r3, r3, #3
 80041c0:	3301      	adds	r3, #1
 80041c2:	005b      	lsls	r3, r3, #1
 80041c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80041d0:	69bb      	ldr	r3, [r7, #24]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3724      	adds	r7, #36	; 0x24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	40021000 	.word	0x40021000
 80041e4:	08009cd4 	.word	0x08009cd4
 80041e8:	00f42400 	.word	0x00f42400
 80041ec:	007a1200 	.word	0x007a1200

080041f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041f4:	4b03      	ldr	r3, [pc, #12]	; (8004204 <HAL_RCC_GetHCLKFreq+0x14>)
 80041f6:	681b      	ldr	r3, [r3, #0]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	20000018 	.word	0x20000018

08004208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800420c:	f7ff fff0 	bl	80041f0 <HAL_RCC_GetHCLKFreq>
 8004210:	4602      	mov	r2, r0
 8004212:	4b06      	ldr	r3, [pc, #24]	; (800422c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	0a1b      	lsrs	r3, r3, #8
 8004218:	f003 0307 	and.w	r3, r3, #7
 800421c:	4904      	ldr	r1, [pc, #16]	; (8004230 <HAL_RCC_GetPCLK1Freq+0x28>)
 800421e:	5ccb      	ldrb	r3, [r1, r3]
 8004220:	f003 031f 	and.w	r3, r3, #31
 8004224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004228:	4618      	mov	r0, r3
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40021000 	.word	0x40021000
 8004230:	08009ccc 	.word	0x08009ccc

08004234 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004238:	f7ff ffda 	bl	80041f0 <HAL_RCC_GetHCLKFreq>
 800423c:	4602      	mov	r2, r0
 800423e:	4b06      	ldr	r3, [pc, #24]	; (8004258 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	0adb      	lsrs	r3, r3, #11
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	4904      	ldr	r1, [pc, #16]	; (800425c <HAL_RCC_GetPCLK2Freq+0x28>)
 800424a:	5ccb      	ldrb	r3, [r1, r3]
 800424c:	f003 031f 	and.w	r3, r3, #31
 8004250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004254:	4618      	mov	r0, r3
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40021000 	.word	0x40021000
 800425c:	08009ccc 	.word	0x08009ccc

08004260 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	220f      	movs	r2, #15
 800426e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004270:	4b12      	ldr	r3, [pc, #72]	; (80042bc <HAL_RCC_GetClockConfig+0x5c>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f003 0203 	and.w	r2, r3, #3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800427c:	4b0f      	ldr	r3, [pc, #60]	; (80042bc <HAL_RCC_GetClockConfig+0x5c>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004288:	4b0c      	ldr	r3, [pc, #48]	; (80042bc <HAL_RCC_GetClockConfig+0x5c>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004294:	4b09      	ldr	r3, [pc, #36]	; (80042bc <HAL_RCC_GetClockConfig+0x5c>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	08db      	lsrs	r3, r3, #3
 800429a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80042a2:	4b07      	ldr	r3, [pc, #28]	; (80042c0 <HAL_RCC_GetClockConfig+0x60>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0207 	and.w	r2, r3, #7
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	601a      	str	r2, [r3, #0]
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	40021000 	.word	0x40021000
 80042c0:	40022000 	.word	0x40022000

080042c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80042cc:	2300      	movs	r3, #0
 80042ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80042d0:	4b2a      	ldr	r3, [pc, #168]	; (800437c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80042dc:	f7ff f996 	bl	800360c <HAL_PWREx_GetVoltageRange>
 80042e0:	6178      	str	r0, [r7, #20]
 80042e2:	e014      	b.n	800430e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80042e4:	4b25      	ldr	r3, [pc, #148]	; (800437c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e8:	4a24      	ldr	r2, [pc, #144]	; (800437c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ee:	6593      	str	r3, [r2, #88]	; 0x58
 80042f0:	4b22      	ldr	r3, [pc, #136]	; (800437c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f8:	60fb      	str	r3, [r7, #12]
 80042fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80042fc:	f7ff f986 	bl	800360c <HAL_PWREx_GetVoltageRange>
 8004300:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004302:	4b1e      	ldr	r3, [pc, #120]	; (800437c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004306:	4a1d      	ldr	r2, [pc, #116]	; (800437c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004308:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800430c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004314:	d10b      	bne.n	800432e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b80      	cmp	r3, #128	; 0x80
 800431a:	d919      	bls.n	8004350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2ba0      	cmp	r3, #160	; 0xa0
 8004320:	d902      	bls.n	8004328 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004322:	2302      	movs	r3, #2
 8004324:	613b      	str	r3, [r7, #16]
 8004326:	e013      	b.n	8004350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004328:	2301      	movs	r3, #1
 800432a:	613b      	str	r3, [r7, #16]
 800432c:	e010      	b.n	8004350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b80      	cmp	r3, #128	; 0x80
 8004332:	d902      	bls.n	800433a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004334:	2303      	movs	r3, #3
 8004336:	613b      	str	r3, [r7, #16]
 8004338:	e00a      	b.n	8004350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b80      	cmp	r3, #128	; 0x80
 800433e:	d102      	bne.n	8004346 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004340:	2302      	movs	r3, #2
 8004342:	613b      	str	r3, [r7, #16]
 8004344:	e004      	b.n	8004350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b70      	cmp	r3, #112	; 0x70
 800434a:	d101      	bne.n	8004350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800434c:	2301      	movs	r3, #1
 800434e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004350:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f023 0207 	bic.w	r2, r3, #7
 8004358:	4909      	ldr	r1, [pc, #36]	; (8004380 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	4313      	orrs	r3, r2
 800435e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004360:	4b07      	ldr	r3, [pc, #28]	; (8004380 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	429a      	cmp	r2, r3
 800436c:	d001      	beq.n	8004372 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e000      	b.n	8004374 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3718      	adds	r7, #24
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	40021000 	.word	0x40021000
 8004380:	40022000 	.word	0x40022000

08004384 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800438c:	2300      	movs	r3, #0
 800438e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004390:	2300      	movs	r3, #0
 8004392:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800439c:	2b00      	cmp	r3, #0
 800439e:	d031      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043a8:	d01a      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80043aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043ae:	d814      	bhi.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d009      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80043b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043b8:	d10f      	bne.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80043ba:	4b5d      	ldr	r3, [pc, #372]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	4a5c      	ldr	r2, [pc, #368]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043c6:	e00c      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3304      	adds	r3, #4
 80043cc:	2100      	movs	r1, #0
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 fa1e 	bl	8004810 <RCCEx_PLLSAI1_Config>
 80043d4:	4603      	mov	r3, r0
 80043d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043d8:	e003      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	74fb      	strb	r3, [r7, #19]
      break;
 80043de:	e000      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80043e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043e2:	7cfb      	ldrb	r3, [r7, #19]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10b      	bne.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043e8:	4b51      	ldr	r3, [pc, #324]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f6:	494e      	ldr	r1, [pc, #312]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80043fe:	e001      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004400:	7cfb      	ldrb	r3, [r7, #19]
 8004402:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440c:	2b00      	cmp	r3, #0
 800440e:	f000 809e 	beq.w	800454e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004412:	2300      	movs	r3, #0
 8004414:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004416:	4b46      	ldr	r3, [pc, #280]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004422:	2301      	movs	r3, #1
 8004424:	e000      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004426:	2300      	movs	r3, #0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00d      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800442c:	4b40      	ldr	r3, [pc, #256]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800442e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004430:	4a3f      	ldr	r2, [pc, #252]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004436:	6593      	str	r3, [r2, #88]	; 0x58
 8004438:	4b3d      	ldr	r3, [pc, #244]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800443a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004440:	60bb      	str	r3, [r7, #8]
 8004442:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004444:	2301      	movs	r3, #1
 8004446:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004448:	4b3a      	ldr	r3, [pc, #232]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a39      	ldr	r2, [pc, #228]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800444e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004452:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004454:	f7fe f9a2 	bl	800279c <HAL_GetTick>
 8004458:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800445a:	e009      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800445c:	f7fe f99e 	bl	800279c <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d902      	bls.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	74fb      	strb	r3, [r7, #19]
        break;
 800446e:	e005      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004470:	4b30      	ldr	r3, [pc, #192]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0ef      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800447c:	7cfb      	ldrb	r3, [r7, #19]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d15a      	bne.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004482:	4b2b      	ldr	r3, [pc, #172]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004488:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800448c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d01e      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	429a      	cmp	r2, r3
 800449c:	d019      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800449e:	4b24      	ldr	r3, [pc, #144]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044a8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044aa:	4b21      	ldr	r3, [pc, #132]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b0:	4a1f      	ldr	r2, [pc, #124]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044ba:	4b1d      	ldr	r3, [pc, #116]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c0:	4a1b      	ldr	r2, [pc, #108]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80044ca:	4a19      	ldr	r2, [pc, #100]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d016      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044dc:	f7fe f95e 	bl	800279c <HAL_GetTick>
 80044e0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044e2:	e00b      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044e4:	f7fe f95a 	bl	800279c <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d902      	bls.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	74fb      	strb	r3, [r7, #19]
            break;
 80044fa:	e006      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044fc:	4b0c      	ldr	r3, [pc, #48]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0ec      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800450a:	7cfb      	ldrb	r3, [r7, #19]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10b      	bne.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004510:	4b07      	ldr	r3, [pc, #28]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004516:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800451e:	4904      	ldr	r1, [pc, #16]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004520:	4313      	orrs	r3, r2
 8004522:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004526:	e009      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004528:	7cfb      	ldrb	r3, [r7, #19]
 800452a:	74bb      	strb	r3, [r7, #18]
 800452c:	e006      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800452e:	bf00      	nop
 8004530:	40021000 	.word	0x40021000
 8004534:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004538:	7cfb      	ldrb	r3, [r7, #19]
 800453a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800453c:	7c7b      	ldrb	r3, [r7, #17]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d105      	bne.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004542:	4bb2      	ldr	r3, [pc, #712]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004546:	4ab1      	ldr	r2, [pc, #708]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004548:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800454c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00a      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800455a:	4bac      	ldr	r3, [pc, #688]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800455c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004560:	f023 0203 	bic.w	r2, r3, #3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	49a8      	ldr	r1, [pc, #672]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800456a:	4313      	orrs	r3, r2
 800456c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00a      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800457c:	4ba3      	ldr	r3, [pc, #652]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800457e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004582:	f023 020c 	bic.w	r2, r3, #12
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458a:	49a0      	ldr	r1, [pc, #640]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800458c:	4313      	orrs	r3, r2
 800458e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0304 	and.w	r3, r3, #4
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00a      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800459e:	4b9b      	ldr	r3, [pc, #620]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ac:	4997      	ldr	r1, [pc, #604]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0320 	and.w	r3, r3, #32
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00a      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045c0:	4b92      	ldr	r3, [pc, #584]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ce:	498f      	ldr	r1, [pc, #572]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00a      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045e2:	4b8a      	ldr	r3, [pc, #552]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f0:	4986      	ldr	r1, [pc, #536]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00a      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004604:	4b81      	ldr	r3, [pc, #516]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	497e      	ldr	r1, [pc, #504]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004614:	4313      	orrs	r3, r2
 8004616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004626:	4b79      	ldr	r3, [pc, #484]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004634:	4975      	ldr	r1, [pc, #468]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004636:	4313      	orrs	r3, r2
 8004638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00a      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004648:	4b70      	ldr	r3, [pc, #448]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800464a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004656:	496d      	ldr	r1, [pc, #436]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004658:	4313      	orrs	r3, r2
 800465a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00a      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800466a:	4b68      	ldr	r3, [pc, #416]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800466c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004670:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004678:	4964      	ldr	r1, [pc, #400]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800467a:	4313      	orrs	r3, r2
 800467c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d028      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800468c:	4b5f      	ldr	r3, [pc, #380]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800468e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004692:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800469a:	495c      	ldr	r1, [pc, #368]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800469c:	4313      	orrs	r3, r2
 800469e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046aa:	d106      	bne.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046ac:	4b57      	ldr	r3, [pc, #348]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	4a56      	ldr	r2, [pc, #344]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046b6:	60d3      	str	r3, [r2, #12]
 80046b8:	e011      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046c2:	d10c      	bne.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	3304      	adds	r3, #4
 80046c8:	2101      	movs	r1, #1
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 f8a0 	bl	8004810 <RCCEx_PLLSAI1_Config>
 80046d0:	4603      	mov	r3, r0
 80046d2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80046d4:	7cfb      	ldrb	r3, [r7, #19]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 80046da:	7cfb      	ldrb	r3, [r7, #19]
 80046dc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d028      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046ea:	4b48      	ldr	r3, [pc, #288]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f8:	4944      	ldr	r1, [pc, #272]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004704:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004708:	d106      	bne.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800470a:	4b40      	ldr	r3, [pc, #256]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	4a3f      	ldr	r2, [pc, #252]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004710:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004714:	60d3      	str	r3, [r2, #12]
 8004716:	e011      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800471c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004720:	d10c      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	3304      	adds	r3, #4
 8004726:	2101      	movs	r1, #1
 8004728:	4618      	mov	r0, r3
 800472a:	f000 f871 	bl	8004810 <RCCEx_PLLSAI1_Config>
 800472e:	4603      	mov	r3, r0
 8004730:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004732:	7cfb      	ldrb	r3, [r7, #19]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004738:	7cfb      	ldrb	r3, [r7, #19]
 800473a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d028      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004748:	4b30      	ldr	r3, [pc, #192]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800474a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004756:	492d      	ldr	r1, [pc, #180]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004758:	4313      	orrs	r3, r2
 800475a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004762:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004766:	d106      	bne.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004768:	4b28      	ldr	r3, [pc, #160]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	4a27      	ldr	r2, [pc, #156]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800476e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004772:	60d3      	str	r3, [r2, #12]
 8004774:	e011      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x416>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800477a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800477e:	d10c      	bne.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x416>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	3304      	adds	r3, #4
 8004784:	2101      	movs	r1, #1
 8004786:	4618      	mov	r0, r3
 8004788:	f000 f842 	bl	8004810 <RCCEx_PLLSAI1_Config>
 800478c:	4603      	mov	r3, r0
 800478e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004790:	7cfb      	ldrb	r3, [r7, #19]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x416>
      {
        /* set overall return value */
        status = ret;
 8004796:	7cfb      	ldrb	r3, [r7, #19]
 8004798:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d01c      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047a6:	4b19      	ldr	r3, [pc, #100]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b4:	4915      	ldr	r1, [pc, #84]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047c4:	d10c      	bne.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	3304      	adds	r3, #4
 80047ca:	2102      	movs	r1, #2
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 f81f 	bl	8004810 <RCCEx_PLLSAI1_Config>
 80047d2:	4603      	mov	r3, r0
 80047d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047d6:	7cfb      	ldrb	r3, [r7, #19]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 80047dc:	7cfb      	ldrb	r3, [r7, #19]
 80047de:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00a      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x47e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047ec:	4b07      	ldr	r3, [pc, #28]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fa:	4904      	ldr	r1, [pc, #16]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004802:	7cbb      	ldrb	r3, [r7, #18]
}
 8004804:	4618      	mov	r0, r3
 8004806:	3718      	adds	r7, #24
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	40021000 	.word	0x40021000

08004810 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800481e:	4b74      	ldr	r3, [pc, #464]	; (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	f003 0303 	and.w	r3, r3, #3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d018      	beq.n	800485c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800482a:	4b71      	ldr	r3, [pc, #452]	; (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	f003 0203 	and.w	r2, r3, #3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	429a      	cmp	r2, r3
 8004838:	d10d      	bne.n	8004856 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
       ||
 800483e:	2b00      	cmp	r3, #0
 8004840:	d009      	beq.n	8004856 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004842:	4b6b      	ldr	r3, [pc, #428]	; (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	091b      	lsrs	r3, r3, #4
 8004848:	f003 0307 	and.w	r3, r3, #7
 800484c:	1c5a      	adds	r2, r3, #1
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
       ||
 8004852:	429a      	cmp	r2, r3
 8004854:	d047      	beq.n	80048e6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	73fb      	strb	r3, [r7, #15]
 800485a:	e044      	b.n	80048e6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b03      	cmp	r3, #3
 8004862:	d018      	beq.n	8004896 <RCCEx_PLLSAI1_Config+0x86>
 8004864:	2b03      	cmp	r3, #3
 8004866:	d825      	bhi.n	80048b4 <RCCEx_PLLSAI1_Config+0xa4>
 8004868:	2b01      	cmp	r3, #1
 800486a:	d002      	beq.n	8004872 <RCCEx_PLLSAI1_Config+0x62>
 800486c:	2b02      	cmp	r3, #2
 800486e:	d009      	beq.n	8004884 <RCCEx_PLLSAI1_Config+0x74>
 8004870:	e020      	b.n	80048b4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004872:	4b5f      	ldr	r3, [pc, #380]	; (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d11d      	bne.n	80048ba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004882:	e01a      	b.n	80048ba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004884:	4b5a      	ldr	r3, [pc, #360]	; (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800488c:	2b00      	cmp	r3, #0
 800488e:	d116      	bne.n	80048be <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004894:	e013      	b.n	80048be <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004896:	4b56      	ldr	r3, [pc, #344]	; (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10f      	bne.n	80048c2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048a2:	4b53      	ldr	r3, [pc, #332]	; (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d109      	bne.n	80048c2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048b2:	e006      	b.n	80048c2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	73fb      	strb	r3, [r7, #15]
      break;
 80048b8:	e004      	b.n	80048c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048ba:	bf00      	nop
 80048bc:	e002      	b.n	80048c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048be:	bf00      	nop
 80048c0:	e000      	b.n	80048c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10d      	bne.n	80048e6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048ca:	4b49      	ldr	r3, [pc, #292]	; (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6819      	ldr	r1, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	3b01      	subs	r3, #1
 80048dc:	011b      	lsls	r3, r3, #4
 80048de:	430b      	orrs	r3, r1
 80048e0:	4943      	ldr	r1, [pc, #268]	; (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048e6:	7bfb      	ldrb	r3, [r7, #15]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d17c      	bne.n	80049e6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80048ec:	4b40      	ldr	r3, [pc, #256]	; (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a3f      	ldr	r2, [pc, #252]	; (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048f8:	f7fd ff50 	bl	800279c <HAL_GetTick>
 80048fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048fe:	e009      	b.n	8004914 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004900:	f7fd ff4c 	bl	800279c <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d902      	bls.n	8004914 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	73fb      	strb	r3, [r7, #15]
        break;
 8004912:	e005      	b.n	8004920 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004914:	4b36      	ldr	r3, [pc, #216]	; (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1ef      	bne.n	8004900 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004920:	7bfb      	ldrb	r3, [r7, #15]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d15f      	bne.n	80049e6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d110      	bne.n	800494e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800492c:	4b30      	ldr	r3, [pc, #192]	; (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004934:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	6892      	ldr	r2, [r2, #8]
 800493c:	0211      	lsls	r1, r2, #8
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	68d2      	ldr	r2, [r2, #12]
 8004942:	06d2      	lsls	r2, r2, #27
 8004944:	430a      	orrs	r2, r1
 8004946:	492a      	ldr	r1, [pc, #168]	; (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004948:	4313      	orrs	r3, r2
 800494a:	610b      	str	r3, [r1, #16]
 800494c:	e027      	b.n	800499e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d112      	bne.n	800497a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004954:	4b26      	ldr	r3, [pc, #152]	; (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800495c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	6892      	ldr	r2, [r2, #8]
 8004964:	0211      	lsls	r1, r2, #8
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	6912      	ldr	r2, [r2, #16]
 800496a:	0852      	lsrs	r2, r2, #1
 800496c:	3a01      	subs	r2, #1
 800496e:	0552      	lsls	r2, r2, #21
 8004970:	430a      	orrs	r2, r1
 8004972:	491f      	ldr	r1, [pc, #124]	; (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004974:	4313      	orrs	r3, r2
 8004976:	610b      	str	r3, [r1, #16]
 8004978:	e011      	b.n	800499e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800497a:	4b1d      	ldr	r3, [pc, #116]	; (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004982:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	6892      	ldr	r2, [r2, #8]
 800498a:	0211      	lsls	r1, r2, #8
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	6952      	ldr	r2, [r2, #20]
 8004990:	0852      	lsrs	r2, r2, #1
 8004992:	3a01      	subs	r2, #1
 8004994:	0652      	lsls	r2, r2, #25
 8004996:	430a      	orrs	r2, r1
 8004998:	4915      	ldr	r1, [pc, #84]	; (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800499a:	4313      	orrs	r3, r2
 800499c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800499e:	4b14      	ldr	r3, [pc, #80]	; (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a13      	ldr	r2, [pc, #76]	; (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049a8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049aa:	f7fd fef7 	bl	800279c <HAL_GetTick>
 80049ae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049b0:	e009      	b.n	80049c6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049b2:	f7fd fef3 	bl	800279c <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d902      	bls.n	80049c6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	73fb      	strb	r3, [r7, #15]
          break;
 80049c4:	e005      	b.n	80049d2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049c6:	4b0a      	ldr	r3, [pc, #40]	; (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d0ef      	beq.n	80049b2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80049d2:	7bfb      	ldrb	r3, [r7, #15]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d106      	bne.n	80049e6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80049d8:	4b05      	ldr	r3, [pc, #20]	; (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049da:	691a      	ldr	r2, [r3, #16]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	4903      	ldr	r1, [pc, #12]	; (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80049e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	40021000 	.word	0x40021000

080049f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e095      	b.n	8004b32 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d108      	bne.n	8004a20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a16:	d009      	beq.n	8004a2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	61da      	str	r2, [r3, #28]
 8004a1e:	e005      	b.n	8004a2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d106      	bne.n	8004a4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7fd f88a 	bl	8001b60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a62:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a6c:	d902      	bls.n	8004a74 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	60fb      	str	r3, [r7, #12]
 8004a72:	e002      	b.n	8004a7a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a78:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004a82:	d007      	beq.n	8004a94 <HAL_SPI_Init+0xa0>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a8c:	d002      	beq.n	8004a94 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004acc:	431a      	orrs	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad6:	ea42 0103 	orr.w	r1, r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ade:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	0c1b      	lsrs	r3, r3, #16
 8004af0:	f003 0204 	and.w	r2, r3, #4
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af8:	f003 0310 	and.w	r3, r3, #16
 8004afc:	431a      	orrs	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b02:	f003 0308 	and.w	r3, r3, #8
 8004b06:	431a      	orrs	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004b10:	ea42 0103 	orr.w	r1, r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b088      	sub	sp, #32
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	60f8      	str	r0, [r7, #12]
 8004b42:	60b9      	str	r1, [r7, #8]
 8004b44:	603b      	str	r3, [r7, #0]
 8004b46:	4613      	mov	r3, r2
 8004b48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d101      	bne.n	8004b5c <HAL_SPI_Transmit+0x22>
 8004b58:	2302      	movs	r3, #2
 8004b5a:	e158      	b.n	8004e0e <HAL_SPI_Transmit+0x2d4>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b64:	f7fd fe1a 	bl	800279c <HAL_GetTick>
 8004b68:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004b6a:	88fb      	ldrh	r3, [r7, #6]
 8004b6c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d002      	beq.n	8004b80 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b7e:	e13d      	b.n	8004dfc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d002      	beq.n	8004b8c <HAL_SPI_Transmit+0x52>
 8004b86:	88fb      	ldrh	r3, [r7, #6]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d102      	bne.n	8004b92 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b90:	e134      	b.n	8004dfc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2203      	movs	r2, #3
 8004b96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	88fa      	ldrh	r2, [r7, #6]
 8004baa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	88fa      	ldrh	r2, [r7, #6]
 8004bb0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bdc:	d10f      	bne.n	8004bfe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bfc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c08:	2b40      	cmp	r3, #64	; 0x40
 8004c0a:	d007      	beq.n	8004c1c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c24:	d94b      	bls.n	8004cbe <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <HAL_SPI_Transmit+0xfa>
 8004c2e:	8afb      	ldrh	r3, [r7, #22]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d13e      	bne.n	8004cb2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c38:	881a      	ldrh	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c44:	1c9a      	adds	r2, r3, #2
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	3b01      	subs	r3, #1
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c58:	e02b      	b.n	8004cb2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d112      	bne.n	8004c8e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6c:	881a      	ldrh	r2, [r3, #0]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c78:	1c9a      	adds	r2, r3, #2
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	3b01      	subs	r3, #1
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c8c:	e011      	b.n	8004cb2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c8e:	f7fd fd85 	bl	800279c <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d803      	bhi.n	8004ca6 <HAL_SPI_Transmit+0x16c>
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca4:	d102      	bne.n	8004cac <HAL_SPI_Transmit+0x172>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d102      	bne.n	8004cb2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004cb0:	e0a4      	b.n	8004dfc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1ce      	bne.n	8004c5a <HAL_SPI_Transmit+0x120>
 8004cbc:	e07c      	b.n	8004db8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d002      	beq.n	8004ccc <HAL_SPI_Transmit+0x192>
 8004cc6:	8afb      	ldrh	r3, [r7, #22]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d170      	bne.n	8004dae <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d912      	bls.n	8004cfc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cda:	881a      	ldrh	r2, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce6:	1c9a      	adds	r2, r3, #2
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	3b02      	subs	r3, #2
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cfa:	e058      	b.n	8004dae <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	330c      	adds	r3, #12
 8004d06:	7812      	ldrb	r2, [r2, #0]
 8004d08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0e:	1c5a      	adds	r2, r3, #1
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004d22:	e044      	b.n	8004dae <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d12b      	bne.n	8004d8a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d912      	bls.n	8004d62 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d40:	881a      	ldrh	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4c:	1c9a      	adds	r2, r3, #2
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	3b02      	subs	r3, #2
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d60:	e025      	b.n	8004dae <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	330c      	adds	r3, #12
 8004d6c:	7812      	ldrb	r2, [r2, #0]
 8004d6e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d74:	1c5a      	adds	r2, r3, #1
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	3b01      	subs	r3, #1
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d88:	e011      	b.n	8004dae <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d8a:	f7fd fd07 	bl	800279c <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	683a      	ldr	r2, [r7, #0]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d803      	bhi.n	8004da2 <HAL_SPI_Transmit+0x268>
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da0:	d102      	bne.n	8004da8 <HAL_SPI_Transmit+0x26e>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d102      	bne.n	8004dae <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004dac:	e026      	b.n	8004dfc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1b5      	bne.n	8004d24 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	6839      	ldr	r1, [r7, #0]
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f000 f945 	bl	800504c <SPI_EndRxTxTransaction>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d002      	beq.n	8004dce <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10a      	bne.n	8004dec <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	613b      	str	r3, [r7, #16]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	613b      	str	r3, [r7, #16]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	613b      	str	r3, [r7, #16]
 8004dea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d002      	beq.n	8004dfa <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	77fb      	strb	r3, [r7, #31]
 8004df8:	e000      	b.n	8004dfc <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004dfa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004e0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3720      	adds	r7, #32
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
	...

08004e18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b088      	sub	sp, #32
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	603b      	str	r3, [r7, #0]
 8004e24:	4613      	mov	r3, r2
 8004e26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e28:	f7fd fcb8 	bl	800279c <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e30:	1a9b      	subs	r3, r3, r2
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	4413      	add	r3, r2
 8004e36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e38:	f7fd fcb0 	bl	800279c <HAL_GetTick>
 8004e3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e3e:	4b39      	ldr	r3, [pc, #228]	; (8004f24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	015b      	lsls	r3, r3, #5
 8004e44:	0d1b      	lsrs	r3, r3, #20
 8004e46:	69fa      	ldr	r2, [r7, #28]
 8004e48:	fb02 f303 	mul.w	r3, r2, r3
 8004e4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e4e:	e054      	b.n	8004efa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e56:	d050      	beq.n	8004efa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e58:	f7fd fca0 	bl	800279c <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	69fa      	ldr	r2, [r7, #28]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d902      	bls.n	8004e6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d13d      	bne.n	8004eea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e86:	d111      	bne.n	8004eac <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e90:	d004      	beq.n	8004e9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e9a:	d107      	bne.n	8004eac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eaa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eb4:	d10f      	bne.n	8004ed6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ed4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e017      	b.n	8004f1a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	689a      	ldr	r2, [r3, #8]
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	4013      	ands	r3, r2
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	bf0c      	ite	eq
 8004f0a:	2301      	moveq	r3, #1
 8004f0c:	2300      	movne	r3, #0
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	461a      	mov	r2, r3
 8004f12:	79fb      	ldrb	r3, [r7, #7]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d19b      	bne.n	8004e50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3720      	adds	r7, #32
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	20000018 	.word	0x20000018

08004f28 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b088      	sub	sp, #32
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
 8004f34:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004f36:	f7fd fc31 	bl	800279c <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3e:	1a9b      	subs	r3, r3, r2
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	4413      	add	r3, r2
 8004f44:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f46:	f7fd fc29 	bl	800279c <HAL_GetTick>
 8004f4a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004f4c:	4b3e      	ldr	r3, [pc, #248]	; (8005048 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	4613      	mov	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4413      	add	r3, r2
 8004f56:	00da      	lsls	r2, r3, #3
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	0d1b      	lsrs	r3, r3, #20
 8004f5c:	69fa      	ldr	r2, [r7, #28]
 8004f5e:	fb02 f303 	mul.w	r3, r2, r3
 8004f62:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8004f64:	e062      	b.n	800502c <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004f6c:	d109      	bne.n	8004f82 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d106      	bne.n	8004f82 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	330c      	adds	r3, #12
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8004f80:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f88:	d050      	beq.n	800502c <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f8a:	f7fd fc07 	bl	800279c <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	69fa      	ldr	r2, [r7, #28]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d902      	bls.n	8004fa0 <SPI_WaitFifoStateUntilTimeout+0x78>
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d13d      	bne.n	800501c <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685a      	ldr	r2, [r3, #4]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fb8:	d111      	bne.n	8004fde <SPI_WaitFifoStateUntilTimeout+0xb6>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fc2:	d004      	beq.n	8004fce <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fcc:	d107      	bne.n	8004fde <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fdc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fe6:	d10f      	bne.n	8005008 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005006:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e010      	b.n	800503e <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8005022:	2300      	movs	r3, #0
 8005024:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	3b01      	subs	r3, #1
 800502a:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689a      	ldr	r2, [r3, #8]
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	4013      	ands	r3, r2
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	429a      	cmp	r2, r3
 800503a:	d194      	bne.n	8004f66 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3720      	adds	r7, #32
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	20000018 	.word	0x20000018

0800504c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af02      	add	r7, sp, #8
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	2200      	movs	r2, #0
 8005060:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f7ff ff5f 	bl	8004f28 <SPI_WaitFifoStateUntilTimeout>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d007      	beq.n	8005080 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005074:	f043 0220 	orr.w	r2, r3, #32
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e027      	b.n	80050d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	2200      	movs	r2, #0
 8005088:	2180      	movs	r1, #128	; 0x80
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f7ff fec4 	bl	8004e18 <SPI_WaitFlagStateUntilTimeout>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d007      	beq.n	80050a6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800509a:	f043 0220 	orr.w	r2, r3, #32
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e014      	b.n	80050d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f7ff ff38 	bl	8004f28 <SPI_WaitFifoStateUntilTimeout>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d007      	beq.n	80050ce <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050c2:	f043 0220 	orr.w	r2, r3, #32
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e000      	b.n	80050d0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e049      	b.n	800517e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d106      	bne.n	8005104 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f841 	bl	8005186 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	3304      	adds	r3, #4
 8005114:	4619      	mov	r1, r3
 8005116:	4610      	mov	r0, r2
 8005118:	f000 f9dc 	bl	80054d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3708      	adds	r7, #8
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005186:	b480      	push	{r7}
 8005188:	b083      	sub	sp, #12
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800518e:	bf00      	nop
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
	...

0800519c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d001      	beq.n	80051b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e03b      	b.n	800522c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2202      	movs	r2, #2
 80051b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68da      	ldr	r2, [r3, #12]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0201 	orr.w	r2, r2, #1
 80051ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a19      	ldr	r2, [pc, #100]	; (8005238 <HAL_TIM_Base_Start_IT+0x9c>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d009      	beq.n	80051ea <HAL_TIM_Base_Start_IT+0x4e>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051de:	d004      	beq.n	80051ea <HAL_TIM_Base_Start_IT+0x4e>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a15      	ldr	r2, [pc, #84]	; (800523c <HAL_TIM_Base_Start_IT+0xa0>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d115      	bne.n	8005216 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	4b13      	ldr	r3, [pc, #76]	; (8005240 <HAL_TIM_Base_Start_IT+0xa4>)
 80051f2:	4013      	ands	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2b06      	cmp	r3, #6
 80051fa:	d015      	beq.n	8005228 <HAL_TIM_Base_Start_IT+0x8c>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005202:	d011      	beq.n	8005228 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f042 0201 	orr.w	r2, r2, #1
 8005212:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005214:	e008      	b.n	8005228 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f042 0201 	orr.w	r2, r2, #1
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	e000      	b.n	800522a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005228:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	40012c00 	.word	0x40012c00
 800523c:	40014000 	.word	0x40014000
 8005240:	00010007 	.word	0x00010007

08005244 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b02      	cmp	r3, #2
 8005258:	d122      	bne.n	80052a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	f003 0302 	and.w	r3, r3, #2
 8005264:	2b02      	cmp	r3, #2
 8005266:	d11b      	bne.n	80052a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f06f 0202 	mvn.w	r2, #2
 8005270:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	f003 0303 	and.w	r3, r3, #3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d003      	beq.n	800528e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f905 	bl	8005496 <HAL_TIM_IC_CaptureCallback>
 800528c:	e005      	b.n	800529a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f8f7 	bl	8005482 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f908 	bl	80054aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	f003 0304 	and.w	r3, r3, #4
 80052aa:	2b04      	cmp	r3, #4
 80052ac:	d122      	bne.n	80052f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	f003 0304 	and.w	r3, r3, #4
 80052b8:	2b04      	cmp	r3, #4
 80052ba:	d11b      	bne.n	80052f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f06f 0204 	mvn.w	r2, #4
 80052c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2202      	movs	r2, #2
 80052ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d003      	beq.n	80052e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f8db 	bl	8005496 <HAL_TIM_IC_CaptureCallback>
 80052e0:	e005      	b.n	80052ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f8cd 	bl	8005482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 f8de 	bl	80054aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	f003 0308 	and.w	r3, r3, #8
 80052fe:	2b08      	cmp	r3, #8
 8005300:	d122      	bne.n	8005348 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f003 0308 	and.w	r3, r3, #8
 800530c:	2b08      	cmp	r3, #8
 800530e:	d11b      	bne.n	8005348 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f06f 0208 	mvn.w	r2, #8
 8005318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2204      	movs	r2, #4
 800531e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	f003 0303 	and.w	r3, r3, #3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d003      	beq.n	8005336 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f8b1 	bl	8005496 <HAL_TIM_IC_CaptureCallback>
 8005334:	e005      	b.n	8005342 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f8a3 	bl	8005482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 f8b4 	bl	80054aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	f003 0310 	and.w	r3, r3, #16
 8005352:	2b10      	cmp	r3, #16
 8005354:	d122      	bne.n	800539c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	f003 0310 	and.w	r3, r3, #16
 8005360:	2b10      	cmp	r3, #16
 8005362:	d11b      	bne.n	800539c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f06f 0210 	mvn.w	r2, #16
 800536c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2208      	movs	r2, #8
 8005372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f887 	bl	8005496 <HAL_TIM_IC_CaptureCallback>
 8005388:	e005      	b.n	8005396 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f879 	bl	8005482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 f88a 	bl	80054aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d10e      	bne.n	80053c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f003 0301 	and.w	r3, r3, #1
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d107      	bne.n	80053c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f06f 0201 	mvn.w	r2, #1
 80053c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7fb fdaa 	bl	8000f1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d2:	2b80      	cmp	r3, #128	; 0x80
 80053d4:	d10e      	bne.n	80053f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e0:	2b80      	cmp	r3, #128	; 0x80
 80053e2:	d107      	bne.n	80053f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f8de 	bl	80055b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005402:	d10e      	bne.n	8005422 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540e:	2b80      	cmp	r3, #128	; 0x80
 8005410:	d107      	bne.n	8005422 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800541a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f8d1 	bl	80055c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542c:	2b40      	cmp	r3, #64	; 0x40
 800542e:	d10e      	bne.n	800544e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800543a:	2b40      	cmp	r3, #64	; 0x40
 800543c:	d107      	bne.n	800544e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 f838 	bl	80054be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	f003 0320 	and.w	r3, r3, #32
 8005458:	2b20      	cmp	r3, #32
 800545a:	d10e      	bne.n	800547a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	f003 0320 	and.w	r3, r3, #32
 8005466:	2b20      	cmp	r3, #32
 8005468:	d107      	bne.n	800547a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f06f 0220 	mvn.w	r2, #32
 8005472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 f891 	bl	800559c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800547a:	bf00      	nop
 800547c:	3708      	adds	r7, #8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005482:	b480      	push	{r7}
 8005484:	b083      	sub	sp, #12
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800548a:	bf00      	nop
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005496:	b480      	push	{r7}
 8005498:	b083      	sub	sp, #12
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800549e:	bf00      	nop
 80054a0:	370c      	adds	r7, #12
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b083      	sub	sp, #12
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054b2:	bf00      	nop
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054c6:	bf00      	nop
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
	...

080054d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a2a      	ldr	r2, [pc, #168]	; (8005590 <TIM_Base_SetConfig+0xbc>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d003      	beq.n	80054f4 <TIM_Base_SetConfig+0x20>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054f2:	d108      	bne.n	8005506 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	4313      	orrs	r3, r2
 8005504:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a21      	ldr	r2, [pc, #132]	; (8005590 <TIM_Base_SetConfig+0xbc>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d00b      	beq.n	8005526 <TIM_Base_SetConfig+0x52>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005514:	d007      	beq.n	8005526 <TIM_Base_SetConfig+0x52>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a1e      	ldr	r2, [pc, #120]	; (8005594 <TIM_Base_SetConfig+0xc0>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d003      	beq.n	8005526 <TIM_Base_SetConfig+0x52>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a1d      	ldr	r2, [pc, #116]	; (8005598 <TIM_Base_SetConfig+0xc4>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d108      	bne.n	8005538 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800552c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	4313      	orrs	r3, r2
 8005536:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	4313      	orrs	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a0c      	ldr	r2, [pc, #48]	; (8005590 <TIM_Base_SetConfig+0xbc>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d007      	beq.n	8005574 <TIM_Base_SetConfig+0xa0>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a0b      	ldr	r2, [pc, #44]	; (8005594 <TIM_Base_SetConfig+0xc0>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d003      	beq.n	8005574 <TIM_Base_SetConfig+0xa0>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a0a      	ldr	r2, [pc, #40]	; (8005598 <TIM_Base_SetConfig+0xc4>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d103      	bne.n	800557c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	691a      	ldr	r2, [r3, #16]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	615a      	str	r2, [r3, #20]
}
 8005582:	bf00      	nop
 8005584:	3714      	adds	r7, #20
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	40012c00 	.word	0x40012c00
 8005594:	40014000 	.word	0x40014000
 8005598:	40014400 	.word	0x40014400

0800559c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d101      	bne.n	80055ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e040      	b.n	800566c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d106      	bne.n	8005600 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7fc fb12 	bl	8001c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2224      	movs	r2, #36	; 0x24
 8005604:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f022 0201 	bic.w	r2, r2, #1
 8005614:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f924 	bl	8005864 <UART_SetConfig>
 800561c:	4603      	mov	r3, r0
 800561e:	2b01      	cmp	r3, #1
 8005620:	d101      	bne.n	8005626 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e022      	b.n	800566c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562a:	2b00      	cmp	r3, #0
 800562c:	d002      	beq.n	8005634 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 fb4c 	bl	8005ccc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005642:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	689a      	ldr	r2, [r3, #8]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005652:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f042 0201 	orr.w	r2, r2, #1
 8005662:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 fbd3 	bl	8005e10 <UART_CheckIdleState>
 800566a:	4603      	mov	r3, r0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3708      	adds	r7, #8
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b08a      	sub	sp, #40	; 0x28
 8005678:	af02      	add	r7, sp, #8
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	603b      	str	r3, [r7, #0]
 8005680:	4613      	mov	r3, r2
 8005682:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005688:	2b20      	cmp	r3, #32
 800568a:	f040 8082 	bne.w	8005792 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d002      	beq.n	800569a <HAL_UART_Transmit+0x26>
 8005694:	88fb      	ldrh	r3, [r7, #6]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e07a      	b.n	8005794 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d101      	bne.n	80056ac <HAL_UART_Transmit+0x38>
 80056a8:	2302      	movs	r3, #2
 80056aa:	e073      	b.n	8005794 <HAL_UART_Transmit+0x120>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2221      	movs	r2, #33	; 0x21
 80056c0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056c2:	f7fd f86b 	bl	800279c <HAL_GetTick>
 80056c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	88fa      	ldrh	r2, [r7, #6]
 80056cc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	88fa      	ldrh	r2, [r7, #6]
 80056d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e0:	d108      	bne.n	80056f4 <HAL_UART_Transmit+0x80>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d104      	bne.n	80056f4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80056ea:	2300      	movs	r3, #0
 80056ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	61bb      	str	r3, [r7, #24]
 80056f2:	e003      	b.n	80056fc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056f8:	2300      	movs	r3, #0
 80056fa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005704:	e02d      	b.n	8005762 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	9300      	str	r3, [sp, #0]
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	2200      	movs	r2, #0
 800570e:	2180      	movs	r1, #128	; 0x80
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f000 fbc6 	bl	8005ea2 <UART_WaitOnFlagUntilTimeout>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d001      	beq.n	8005720 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e039      	b.n	8005794 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10b      	bne.n	800573e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	881a      	ldrh	r2, [r3, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005732:	b292      	uxth	r2, r2
 8005734:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	3302      	adds	r3, #2
 800573a:	61bb      	str	r3, [r7, #24]
 800573c:	e008      	b.n	8005750 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	781a      	ldrb	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	b292      	uxth	r2, r2
 8005748:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	3301      	adds	r3, #1
 800574e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005756:	b29b      	uxth	r3, r3
 8005758:	3b01      	subs	r3, #1
 800575a:	b29a      	uxth	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005768:	b29b      	uxth	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1cb      	bne.n	8005706 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	2200      	movs	r2, #0
 8005776:	2140      	movs	r1, #64	; 0x40
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 fb92 	bl	8005ea2 <UART_WaitOnFlagUntilTimeout>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d001      	beq.n	8005788 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e005      	b.n	8005794 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2220      	movs	r2, #32
 800578c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800578e:	2300      	movs	r3, #0
 8005790:	e000      	b.n	8005794 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005792:	2302      	movs	r3, #2
  }
}
 8005794:	4618      	mov	r0, r3
 8005796:	3720      	adds	r7, #32
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	4613      	mov	r3, r2
 80057a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057ae:	2b20      	cmp	r3, #32
 80057b0:	d131      	bne.n	8005816 <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d002      	beq.n	80057be <HAL_UART_Receive_DMA+0x22>
 80057b8:	88fb      	ldrh	r3, [r7, #6]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e02a      	b.n	8005818 <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d101      	bne.n	80057d0 <HAL_UART_Receive_DMA+0x34>
 80057cc:	2302      	movs	r3, #2
 80057ce:	e023      	b.n	8005818 <HAL_UART_Receive_DMA+0x7c>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a0f      	ldr	r2, [pc, #60]	; (8005820 <HAL_UART_Receive_DMA+0x84>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d00e      	beq.n	8005806 <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d007      	beq.n	8005806 <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005804:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8005806:	88fb      	ldrh	r3, [r7, #6]
 8005808:	461a      	mov	r2, r3
 800580a:	68b9      	ldr	r1, [r7, #8]
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f000 fbc5 	bl	8005f9c <UART_Start_Receive_DMA>
 8005812:	4603      	mov	r3, r0
 8005814:	e000      	b.n	8005818 <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8005816:	2302      	movs	r3, #2
  }
}
 8005818:	4618      	mov	r0, r3
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	40008000 	.word	0x40008000

08005824 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	460b      	mov	r3, r1
 8005856:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005864:	b5b0      	push	{r4, r5, r7, lr}
 8005866:	b088      	sub	sp, #32
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800586c:	2300      	movs	r3, #0
 800586e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	431a      	orrs	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	431a      	orrs	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	69db      	ldr	r3, [r3, #28]
 8005884:	4313      	orrs	r3, r2
 8005886:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	4baa      	ldr	r3, [pc, #680]	; (8005b38 <UART_SetConfig+0x2d4>)
 8005890:	4013      	ands	r3, r2
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6812      	ldr	r2, [r2, #0]
 8005896:	69f9      	ldr	r1, [r7, #28]
 8005898:	430b      	orrs	r3, r1
 800589a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68da      	ldr	r2, [r3, #12]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a9f      	ldr	r2, [pc, #636]	; (8005b3c <UART_SetConfig+0x2d8>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d004      	beq.n	80058cc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	69fa      	ldr	r2, [r7, #28]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	69fa      	ldr	r2, [r7, #28]
 80058dc:	430a      	orrs	r2, r1
 80058de:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a96      	ldr	r2, [pc, #600]	; (8005b40 <UART_SetConfig+0x2dc>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d121      	bne.n	800592e <UART_SetConfig+0xca>
 80058ea:	4b96      	ldr	r3, [pc, #600]	; (8005b44 <UART_SetConfig+0x2e0>)
 80058ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f0:	f003 0303 	and.w	r3, r3, #3
 80058f4:	2b03      	cmp	r3, #3
 80058f6:	d817      	bhi.n	8005928 <UART_SetConfig+0xc4>
 80058f8:	a201      	add	r2, pc, #4	; (adr r2, 8005900 <UART_SetConfig+0x9c>)
 80058fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fe:	bf00      	nop
 8005900:	08005911 	.word	0x08005911
 8005904:	0800591d 	.word	0x0800591d
 8005908:	08005917 	.word	0x08005917
 800590c:	08005923 	.word	0x08005923
 8005910:	2301      	movs	r3, #1
 8005912:	76fb      	strb	r3, [r7, #27]
 8005914:	e096      	b.n	8005a44 <UART_SetConfig+0x1e0>
 8005916:	2302      	movs	r3, #2
 8005918:	76fb      	strb	r3, [r7, #27]
 800591a:	e093      	b.n	8005a44 <UART_SetConfig+0x1e0>
 800591c:	2304      	movs	r3, #4
 800591e:	76fb      	strb	r3, [r7, #27]
 8005920:	e090      	b.n	8005a44 <UART_SetConfig+0x1e0>
 8005922:	2308      	movs	r3, #8
 8005924:	76fb      	strb	r3, [r7, #27]
 8005926:	e08d      	b.n	8005a44 <UART_SetConfig+0x1e0>
 8005928:	2310      	movs	r3, #16
 800592a:	76fb      	strb	r3, [r7, #27]
 800592c:	e08a      	b.n	8005a44 <UART_SetConfig+0x1e0>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a85      	ldr	r2, [pc, #532]	; (8005b48 <UART_SetConfig+0x2e4>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d132      	bne.n	800599e <UART_SetConfig+0x13a>
 8005938:	4b82      	ldr	r3, [pc, #520]	; (8005b44 <UART_SetConfig+0x2e0>)
 800593a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800593e:	f003 030c 	and.w	r3, r3, #12
 8005942:	2b0c      	cmp	r3, #12
 8005944:	d828      	bhi.n	8005998 <UART_SetConfig+0x134>
 8005946:	a201      	add	r2, pc, #4	; (adr r2, 800594c <UART_SetConfig+0xe8>)
 8005948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800594c:	08005981 	.word	0x08005981
 8005950:	08005999 	.word	0x08005999
 8005954:	08005999 	.word	0x08005999
 8005958:	08005999 	.word	0x08005999
 800595c:	0800598d 	.word	0x0800598d
 8005960:	08005999 	.word	0x08005999
 8005964:	08005999 	.word	0x08005999
 8005968:	08005999 	.word	0x08005999
 800596c:	08005987 	.word	0x08005987
 8005970:	08005999 	.word	0x08005999
 8005974:	08005999 	.word	0x08005999
 8005978:	08005999 	.word	0x08005999
 800597c:	08005993 	.word	0x08005993
 8005980:	2300      	movs	r3, #0
 8005982:	76fb      	strb	r3, [r7, #27]
 8005984:	e05e      	b.n	8005a44 <UART_SetConfig+0x1e0>
 8005986:	2302      	movs	r3, #2
 8005988:	76fb      	strb	r3, [r7, #27]
 800598a:	e05b      	b.n	8005a44 <UART_SetConfig+0x1e0>
 800598c:	2304      	movs	r3, #4
 800598e:	76fb      	strb	r3, [r7, #27]
 8005990:	e058      	b.n	8005a44 <UART_SetConfig+0x1e0>
 8005992:	2308      	movs	r3, #8
 8005994:	76fb      	strb	r3, [r7, #27]
 8005996:	e055      	b.n	8005a44 <UART_SetConfig+0x1e0>
 8005998:	2310      	movs	r3, #16
 800599a:	76fb      	strb	r3, [r7, #27]
 800599c:	e052      	b.n	8005a44 <UART_SetConfig+0x1e0>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a6a      	ldr	r2, [pc, #424]	; (8005b4c <UART_SetConfig+0x2e8>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d120      	bne.n	80059ea <UART_SetConfig+0x186>
 80059a8:	4b66      	ldr	r3, [pc, #408]	; (8005b44 <UART_SetConfig+0x2e0>)
 80059aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80059b2:	2b30      	cmp	r3, #48	; 0x30
 80059b4:	d013      	beq.n	80059de <UART_SetConfig+0x17a>
 80059b6:	2b30      	cmp	r3, #48	; 0x30
 80059b8:	d814      	bhi.n	80059e4 <UART_SetConfig+0x180>
 80059ba:	2b20      	cmp	r3, #32
 80059bc:	d009      	beq.n	80059d2 <UART_SetConfig+0x16e>
 80059be:	2b20      	cmp	r3, #32
 80059c0:	d810      	bhi.n	80059e4 <UART_SetConfig+0x180>
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d002      	beq.n	80059cc <UART_SetConfig+0x168>
 80059c6:	2b10      	cmp	r3, #16
 80059c8:	d006      	beq.n	80059d8 <UART_SetConfig+0x174>
 80059ca:	e00b      	b.n	80059e4 <UART_SetConfig+0x180>
 80059cc:	2300      	movs	r3, #0
 80059ce:	76fb      	strb	r3, [r7, #27]
 80059d0:	e038      	b.n	8005a44 <UART_SetConfig+0x1e0>
 80059d2:	2302      	movs	r3, #2
 80059d4:	76fb      	strb	r3, [r7, #27]
 80059d6:	e035      	b.n	8005a44 <UART_SetConfig+0x1e0>
 80059d8:	2304      	movs	r3, #4
 80059da:	76fb      	strb	r3, [r7, #27]
 80059dc:	e032      	b.n	8005a44 <UART_SetConfig+0x1e0>
 80059de:	2308      	movs	r3, #8
 80059e0:	76fb      	strb	r3, [r7, #27]
 80059e2:	e02f      	b.n	8005a44 <UART_SetConfig+0x1e0>
 80059e4:	2310      	movs	r3, #16
 80059e6:	76fb      	strb	r3, [r7, #27]
 80059e8:	e02c      	b.n	8005a44 <UART_SetConfig+0x1e0>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a53      	ldr	r2, [pc, #332]	; (8005b3c <UART_SetConfig+0x2d8>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d125      	bne.n	8005a40 <UART_SetConfig+0x1dc>
 80059f4:	4b53      	ldr	r3, [pc, #332]	; (8005b44 <UART_SetConfig+0x2e0>)
 80059f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059fa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80059fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a02:	d017      	beq.n	8005a34 <UART_SetConfig+0x1d0>
 8005a04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a08:	d817      	bhi.n	8005a3a <UART_SetConfig+0x1d6>
 8005a0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a0e:	d00b      	beq.n	8005a28 <UART_SetConfig+0x1c4>
 8005a10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a14:	d811      	bhi.n	8005a3a <UART_SetConfig+0x1d6>
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <UART_SetConfig+0x1be>
 8005a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a1e:	d006      	beq.n	8005a2e <UART_SetConfig+0x1ca>
 8005a20:	e00b      	b.n	8005a3a <UART_SetConfig+0x1d6>
 8005a22:	2300      	movs	r3, #0
 8005a24:	76fb      	strb	r3, [r7, #27]
 8005a26:	e00d      	b.n	8005a44 <UART_SetConfig+0x1e0>
 8005a28:	2302      	movs	r3, #2
 8005a2a:	76fb      	strb	r3, [r7, #27]
 8005a2c:	e00a      	b.n	8005a44 <UART_SetConfig+0x1e0>
 8005a2e:	2304      	movs	r3, #4
 8005a30:	76fb      	strb	r3, [r7, #27]
 8005a32:	e007      	b.n	8005a44 <UART_SetConfig+0x1e0>
 8005a34:	2308      	movs	r3, #8
 8005a36:	76fb      	strb	r3, [r7, #27]
 8005a38:	e004      	b.n	8005a44 <UART_SetConfig+0x1e0>
 8005a3a:	2310      	movs	r3, #16
 8005a3c:	76fb      	strb	r3, [r7, #27]
 8005a3e:	e001      	b.n	8005a44 <UART_SetConfig+0x1e0>
 8005a40:	2310      	movs	r3, #16
 8005a42:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a3c      	ldr	r2, [pc, #240]	; (8005b3c <UART_SetConfig+0x2d8>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	f040 8082 	bne.w	8005b54 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a50:	7efb      	ldrb	r3, [r7, #27]
 8005a52:	2b08      	cmp	r3, #8
 8005a54:	d823      	bhi.n	8005a9e <UART_SetConfig+0x23a>
 8005a56:	a201      	add	r2, pc, #4	; (adr r2, 8005a5c <UART_SetConfig+0x1f8>)
 8005a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a5c:	08005a81 	.word	0x08005a81
 8005a60:	08005a9f 	.word	0x08005a9f
 8005a64:	08005a89 	.word	0x08005a89
 8005a68:	08005a9f 	.word	0x08005a9f
 8005a6c:	08005a8f 	.word	0x08005a8f
 8005a70:	08005a9f 	.word	0x08005a9f
 8005a74:	08005a9f 	.word	0x08005a9f
 8005a78:	08005a9f 	.word	0x08005a9f
 8005a7c:	08005a97 	.word	0x08005a97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a80:	f7fe fbc2 	bl	8004208 <HAL_RCC_GetPCLK1Freq>
 8005a84:	6178      	str	r0, [r7, #20]
        break;
 8005a86:	e00f      	b.n	8005aa8 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a88:	4b31      	ldr	r3, [pc, #196]	; (8005b50 <UART_SetConfig+0x2ec>)
 8005a8a:	617b      	str	r3, [r7, #20]
        break;
 8005a8c:	e00c      	b.n	8005aa8 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a8e:	f7fe fb23 	bl	80040d8 <HAL_RCC_GetSysClockFreq>
 8005a92:	6178      	str	r0, [r7, #20]
        break;
 8005a94:	e008      	b.n	8005aa8 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a9a:	617b      	str	r3, [r7, #20]
        break;
 8005a9c:	e004      	b.n	8005aa8 <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	76bb      	strb	r3, [r7, #26]
        break;
 8005aa6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	f000 8100 	beq.w	8005cb0 <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	005b      	lsls	r3, r3, #1
 8005ab8:	4413      	add	r3, r2
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d305      	bcc.n	8005acc <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d902      	bls.n	8005ad2 <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	76bb      	strb	r3, [r7, #26]
 8005ad0:	e0ee      	b.n	8005cb0 <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f04f 0100 	mov.w	r1, #0
 8005ada:	f04f 0200 	mov.w	r2, #0
 8005ade:	f04f 0300 	mov.w	r3, #0
 8005ae2:	020b      	lsls	r3, r1, #8
 8005ae4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005ae8:	0202      	lsls	r2, r0, #8
 8005aea:	6879      	ldr	r1, [r7, #4]
 8005aec:	6849      	ldr	r1, [r1, #4]
 8005aee:	0849      	lsrs	r1, r1, #1
 8005af0:	4608      	mov	r0, r1
 8005af2:	f04f 0100 	mov.w	r1, #0
 8005af6:	1814      	adds	r4, r2, r0
 8005af8:	eb43 0501 	adc.w	r5, r3, r1
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	461a      	mov	r2, r3
 8005b02:	f04f 0300 	mov.w	r3, #0
 8005b06:	4620      	mov	r0, r4
 8005b08:	4629      	mov	r1, r5
 8005b0a:	f7fa fb69 	bl	80001e0 <__aeabi_uldivmod>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	460b      	mov	r3, r1
 8005b12:	4613      	mov	r3, r2
 8005b14:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b1c:	d308      	bcc.n	8005b30 <UART_SetConfig+0x2cc>
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b24:	d204      	bcs.n	8005b30 <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	60da      	str	r2, [r3, #12]
 8005b2e:	e0bf      	b.n	8005cb0 <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	76bb      	strb	r3, [r7, #26]
 8005b34:	e0bc      	b.n	8005cb0 <UART_SetConfig+0x44c>
 8005b36:	bf00      	nop
 8005b38:	efff69f3 	.word	0xefff69f3
 8005b3c:	40008000 	.word	0x40008000
 8005b40:	40013800 	.word	0x40013800
 8005b44:	40021000 	.word	0x40021000
 8005b48:	40004400 	.word	0x40004400
 8005b4c:	40004800 	.word	0x40004800
 8005b50:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	69db      	ldr	r3, [r3, #28]
 8005b58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b5c:	d15c      	bne.n	8005c18 <UART_SetConfig+0x3b4>
  {
    switch (clocksource)
 8005b5e:	7efb      	ldrb	r3, [r7, #27]
 8005b60:	2b08      	cmp	r3, #8
 8005b62:	d828      	bhi.n	8005bb6 <UART_SetConfig+0x352>
 8005b64:	a201      	add	r2, pc, #4	; (adr r2, 8005b6c <UART_SetConfig+0x308>)
 8005b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6a:	bf00      	nop
 8005b6c:	08005b91 	.word	0x08005b91
 8005b70:	08005b99 	.word	0x08005b99
 8005b74:	08005ba1 	.word	0x08005ba1
 8005b78:	08005bb7 	.word	0x08005bb7
 8005b7c:	08005ba7 	.word	0x08005ba7
 8005b80:	08005bb7 	.word	0x08005bb7
 8005b84:	08005bb7 	.word	0x08005bb7
 8005b88:	08005bb7 	.word	0x08005bb7
 8005b8c:	08005baf 	.word	0x08005baf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b90:	f7fe fb3a 	bl	8004208 <HAL_RCC_GetPCLK1Freq>
 8005b94:	6178      	str	r0, [r7, #20]
        break;
 8005b96:	e013      	b.n	8005bc0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b98:	f7fe fb4c 	bl	8004234 <HAL_RCC_GetPCLK2Freq>
 8005b9c:	6178      	str	r0, [r7, #20]
        break;
 8005b9e:	e00f      	b.n	8005bc0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ba0:	4b49      	ldr	r3, [pc, #292]	; (8005cc8 <UART_SetConfig+0x464>)
 8005ba2:	617b      	str	r3, [r7, #20]
        break;
 8005ba4:	e00c      	b.n	8005bc0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ba6:	f7fe fa97 	bl	80040d8 <HAL_RCC_GetSysClockFreq>
 8005baa:	6178      	str	r0, [r7, #20]
        break;
 8005bac:	e008      	b.n	8005bc0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bb2:	617b      	str	r3, [r7, #20]
        break;
 8005bb4:	e004      	b.n	8005bc0 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	76bb      	strb	r3, [r7, #26]
        break;
 8005bbe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d074      	beq.n	8005cb0 <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	005a      	lsls	r2, r3, #1
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	085b      	lsrs	r3, r3, #1
 8005bd0:	441a      	add	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	2b0f      	cmp	r3, #15
 8005be2:	d916      	bls.n	8005c12 <UART_SetConfig+0x3ae>
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bea:	d212      	bcs.n	8005c12 <UART_SetConfig+0x3ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	f023 030f 	bic.w	r3, r3, #15
 8005bf4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	085b      	lsrs	r3, r3, #1
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	f003 0307 	and.w	r3, r3, #7
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	89fb      	ldrh	r3, [r7, #14]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	89fa      	ldrh	r2, [r7, #14]
 8005c0e:	60da      	str	r2, [r3, #12]
 8005c10:	e04e      	b.n	8005cb0 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	76bb      	strb	r3, [r7, #26]
 8005c16:	e04b      	b.n	8005cb0 <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c18:	7efb      	ldrb	r3, [r7, #27]
 8005c1a:	2b08      	cmp	r3, #8
 8005c1c:	d827      	bhi.n	8005c6e <UART_SetConfig+0x40a>
 8005c1e:	a201      	add	r2, pc, #4	; (adr r2, 8005c24 <UART_SetConfig+0x3c0>)
 8005c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c24:	08005c49 	.word	0x08005c49
 8005c28:	08005c51 	.word	0x08005c51
 8005c2c:	08005c59 	.word	0x08005c59
 8005c30:	08005c6f 	.word	0x08005c6f
 8005c34:	08005c5f 	.word	0x08005c5f
 8005c38:	08005c6f 	.word	0x08005c6f
 8005c3c:	08005c6f 	.word	0x08005c6f
 8005c40:	08005c6f 	.word	0x08005c6f
 8005c44:	08005c67 	.word	0x08005c67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c48:	f7fe fade 	bl	8004208 <HAL_RCC_GetPCLK1Freq>
 8005c4c:	6178      	str	r0, [r7, #20]
        break;
 8005c4e:	e013      	b.n	8005c78 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c50:	f7fe faf0 	bl	8004234 <HAL_RCC_GetPCLK2Freq>
 8005c54:	6178      	str	r0, [r7, #20]
        break;
 8005c56:	e00f      	b.n	8005c78 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c58:	4b1b      	ldr	r3, [pc, #108]	; (8005cc8 <UART_SetConfig+0x464>)
 8005c5a:	617b      	str	r3, [r7, #20]
        break;
 8005c5c:	e00c      	b.n	8005c78 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c5e:	f7fe fa3b 	bl	80040d8 <HAL_RCC_GetSysClockFreq>
 8005c62:	6178      	str	r0, [r7, #20]
        break;
 8005c64:	e008      	b.n	8005c78 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c6a:	617b      	str	r3, [r7, #20]
        break;
 8005c6c:	e004      	b.n	8005c78 <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	76bb      	strb	r3, [r7, #26]
        break;
 8005c76:	bf00      	nop
    }

    if (pclk != 0U)
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d018      	beq.n	8005cb0 <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	085a      	lsrs	r2, r3, #1
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	441a      	add	r2, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	2b0f      	cmp	r3, #15
 8005c98:	d908      	bls.n	8005cac <UART_SetConfig+0x448>
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ca0:	d204      	bcs.n	8005cac <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = usartdiv;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	60da      	str	r2, [r3, #12]
 8005caa:	e001      	b.n	8005cb0 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005cbc:	7ebb      	ldrb	r3, [r7, #26]
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3720      	adds	r7, #32
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bdb0      	pop	{r4, r5, r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	00f42400 	.word	0x00f42400

08005ccc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00a      	beq.n	8005cf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	f003 0302 	and.w	r3, r3, #2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00a      	beq.n	8005d18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	430a      	orrs	r2, r1
 8005d16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1c:	f003 0304 	and.w	r3, r3, #4
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00a      	beq.n	8005d3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	430a      	orrs	r2, r1
 8005d38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3e:	f003 0308 	and.w	r3, r3, #8
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00a      	beq.n	8005d5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	430a      	orrs	r2, r1
 8005d5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d60:	f003 0310 	and.w	r3, r3, #16
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00a      	beq.n	8005d7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d82:	f003 0320 	and.w	r3, r3, #32
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00a      	beq.n	8005da0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d01a      	beq.n	8005de2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dca:	d10a      	bne.n	8005de2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00a      	beq.n	8005e04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	430a      	orrs	r2, r1
 8005e02:	605a      	str	r2, [r3, #4]
  }
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af02      	add	r7, sp, #8
 8005e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e20:	f7fc fcbc 	bl	800279c <HAL_GetTick>
 8005e24:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0308 	and.w	r3, r3, #8
 8005e30:	2b08      	cmp	r3, #8
 8005e32:	d10e      	bne.n	8005e52 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f82d 	bl	8005ea2 <UART_WaitOnFlagUntilTimeout>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d001      	beq.n	8005e52 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e023      	b.n	8005e9a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0304 	and.w	r3, r3, #4
 8005e5c:	2b04      	cmp	r3, #4
 8005e5e:	d10e      	bne.n	8005e7e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e64:	9300      	str	r3, [sp, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f817 	bl	8005ea2 <UART_WaitOnFlagUntilTimeout>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d001      	beq.n	8005e7e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e00d      	b.n	8005e9a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2220      	movs	r2, #32
 8005e82:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2220      	movs	r2, #32
 8005e88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b084      	sub	sp, #16
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	60f8      	str	r0, [r7, #12]
 8005eaa:	60b9      	str	r1, [r7, #8]
 8005eac:	603b      	str	r3, [r7, #0]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eb2:	e05e      	b.n	8005f72 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eba:	d05a      	beq.n	8005f72 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ebc:	f7fc fc6e 	bl	800279c <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d302      	bcc.n	8005ed2 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d11b      	bne.n	8005f0a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ee0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	689a      	ldr	r2, [r3, #8]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f022 0201 	bic.w	r2, r2, #1
 8005ef0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2220      	movs	r2, #32
 8005efc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e043      	b.n	8005f92 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0304 	and.w	r3, r3, #4
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d02c      	beq.n	8005f72 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	69db      	ldr	r3, [r3, #28]
 8005f1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f26:	d124      	bne.n	8005f72 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f30:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f40:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689a      	ldr	r2, [r3, #8]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f022 0201 	bic.w	r2, r2, #1
 8005f50:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2220      	movs	r2, #32
 8005f56:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2220      	movs	r2, #32
 8005f5c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2220      	movs	r2, #32
 8005f62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e00f      	b.n	8005f92 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	69da      	ldr	r2, [r3, #28]
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	68ba      	ldr	r2, [r7, #8]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	bf0c      	ite	eq
 8005f82:	2301      	moveq	r3, #1
 8005f84:	2300      	movne	r3, #0
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	461a      	mov	r2, r3
 8005f8a:	79fb      	ldrb	r3, [r7, #7]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d091      	beq.n	8005eb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
	...

08005f9c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	88fa      	ldrh	r2, [r7, #6]
 8005fb4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2222      	movs	r2, #34	; 0x22
 8005fc4:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d02b      	beq.n	8006026 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd2:	4a25      	ldr	r2, [pc, #148]	; (8006068 <UART_Start_Receive_DMA+0xcc>)
 8005fd4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fda:	4a24      	ldr	r2, [pc, #144]	; (800606c <UART_Start_Receive_DMA+0xd0>)
 8005fdc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe2:	4a23      	ldr	r2, [pc, #140]	; (8006070 <UART_Start_Receive_DMA+0xd4>)
 8005fe4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fea:	2200      	movs	r2, #0
 8005fec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	3324      	adds	r3, #36	; 0x24
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ffe:	461a      	mov	r2, r3
 8006000:	88fb      	ldrh	r3, [r7, #6]
 8006002:	f7fc fd95 	bl	8002b30 <HAL_DMA_Start_IT>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00c      	beq.n	8006026 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2210      	movs	r2, #16
 8006010:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2220      	movs	r2, #32
 8006020:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e01c      	b.n	8006060 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800603c:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	689a      	ldr	r2, [r3, #8]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f042 0201 	orr.w	r2, r2, #1
 800604c:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	689a      	ldr	r2, [r3, #8]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800605c:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3710      	adds	r7, #16
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	080060fd 	.word	0x080060fd
 800606c:	08006195 	.word	0x08006195
 8006070:	080061cd 	.word	0x080061cd

08006074 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800608a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2220      	movs	r2, #32
 8006090:	679a      	str	r2, [r3, #120]	; 0x78
}
 8006092:	bf00      	nop
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800609e:	b480      	push	{r7}
 80060a0:	b083      	sub	sp, #12
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80060b4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	689a      	ldr	r2, [r3, #8]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f022 0201 	bic.w	r2, r2, #1
 80060c4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d107      	bne.n	80060de <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f022 0210 	bic.w	r2, r2, #16
 80060dc:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2220      	movs	r2, #32
 80060e2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	665a      	str	r2, [r3, #100]	; 0x64
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006108:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0320 	and.w	r3, r3, #32
 8006114:	2b00      	cmp	r3, #0
 8006116:	d12a      	bne.n	800616e <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800612e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689a      	ldr	r2, [r3, #8]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f022 0201 	bic.w	r2, r2, #1
 800613e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	689a      	ldr	r2, [r3, #8]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800614e:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2220      	movs	r2, #32
 8006154:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800615a:	2b01      	cmp	r3, #1
 800615c:	d107      	bne.n	800616e <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f022 0210 	bic.w	r2, r2, #16
 800616c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006172:	2b01      	cmp	r3, #1
 8006174:	d107      	bne.n	8006186 <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800617c:	4619      	mov	r1, r3
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f7ff fb64 	bl	800584c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006184:	e002      	b.n	800618c <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f7fb f8ca 	bl	8001320 <HAL_UART_RxCpltCallback>
}
 800618c:	bf00      	nop
 800618e:	3710      	adds	r7, #16
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d109      	bne.n	80061be <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80061b0:	085b      	lsrs	r3, r3, #1
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	4619      	mov	r1, r3
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f7ff fb48 	bl	800584c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80061bc:	e002      	b.n	80061c4 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f7ff fb30 	bl	8005824 <HAL_UART_RxHalfCpltCallback>
}
 80061c4:	bf00      	nop
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b086      	sub	sp, #24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061de:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061e4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061f0:	2b80      	cmp	r3, #128	; 0x80
 80061f2:	d109      	bne.n	8006208 <UART_DMAError+0x3c>
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	2b21      	cmp	r3, #33	; 0x21
 80061f8:	d106      	bne.n	8006208 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006202:	6978      	ldr	r0, [r7, #20]
 8006204:	f7ff ff36 	bl	8006074 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006212:	2b40      	cmp	r3, #64	; 0x40
 8006214:	d109      	bne.n	800622a <UART_DMAError+0x5e>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2b22      	cmp	r3, #34	; 0x22
 800621a:	d106      	bne.n	800622a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	2200      	movs	r2, #0
 8006220:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006224:	6978      	ldr	r0, [r7, #20]
 8006226:	f7ff ff3a 	bl	800609e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006230:	f043 0210 	orr.w	r2, r3, #16
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800623a:	6978      	ldr	r0, [r7, #20]
 800623c:	f7ff fafc 	bl	8005838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006240:	bf00      	nop
 8006242:	3718      	adds	r7, #24
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <__NVIC_SetPriority>:
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	4603      	mov	r3, r0
 8006250:	6039      	str	r1, [r7, #0]
 8006252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006258:	2b00      	cmp	r3, #0
 800625a:	db0a      	blt.n	8006272 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	b2da      	uxtb	r2, r3
 8006260:	490c      	ldr	r1, [pc, #48]	; (8006294 <__NVIC_SetPriority+0x4c>)
 8006262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006266:	0112      	lsls	r2, r2, #4
 8006268:	b2d2      	uxtb	r2, r2
 800626a:	440b      	add	r3, r1
 800626c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006270:	e00a      	b.n	8006288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	b2da      	uxtb	r2, r3
 8006276:	4908      	ldr	r1, [pc, #32]	; (8006298 <__NVIC_SetPriority+0x50>)
 8006278:	79fb      	ldrb	r3, [r7, #7]
 800627a:	f003 030f 	and.w	r3, r3, #15
 800627e:	3b04      	subs	r3, #4
 8006280:	0112      	lsls	r2, r2, #4
 8006282:	b2d2      	uxtb	r2, r2
 8006284:	440b      	add	r3, r1
 8006286:	761a      	strb	r2, [r3, #24]
}
 8006288:	bf00      	nop
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr
 8006294:	e000e100 	.word	0xe000e100
 8006298:	e000ed00 	.word	0xe000ed00

0800629c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800629c:	b580      	push	{r7, lr}
 800629e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80062a0:	4b05      	ldr	r3, [pc, #20]	; (80062b8 <SysTick_Handler+0x1c>)
 80062a2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80062a4:	f001 ff44 	bl	8008130 <xTaskGetSchedulerState>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d001      	beq.n	80062b2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80062ae:	f002 fd2b 	bl	8008d08 <xPortSysTickHandler>
  }
}
 80062b2:	bf00      	nop
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	e000e010 	.word	0xe000e010

080062bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80062bc:	b580      	push	{r7, lr}
 80062be:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80062c0:	2100      	movs	r1, #0
 80062c2:	f06f 0004 	mvn.w	r0, #4
 80062c6:	f7ff ffbf 	bl	8006248 <__NVIC_SetPriority>
#endif
}
 80062ca:	bf00      	nop
 80062cc:	bd80      	pop	{r7, pc}
	...

080062d0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062d6:	f3ef 8305 	mrs	r3, IPSR
 80062da:	603b      	str	r3, [r7, #0]
  return(result);
 80062dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d003      	beq.n	80062ea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80062e2:	f06f 0305 	mvn.w	r3, #5
 80062e6:	607b      	str	r3, [r7, #4]
 80062e8:	e00c      	b.n	8006304 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80062ea:	4b0a      	ldr	r3, [pc, #40]	; (8006314 <osKernelInitialize+0x44>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d105      	bne.n	80062fe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80062f2:	4b08      	ldr	r3, [pc, #32]	; (8006314 <osKernelInitialize+0x44>)
 80062f4:	2201      	movs	r2, #1
 80062f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80062f8:	2300      	movs	r3, #0
 80062fa:	607b      	str	r3, [r7, #4]
 80062fc:	e002      	b.n	8006304 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80062fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006302:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006304:	687b      	ldr	r3, [r7, #4]
}
 8006306:	4618      	mov	r0, r3
 8006308:	370c      	adds	r7, #12
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	200000b0 	.word	0x200000b0

08006318 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800631e:	f3ef 8305 	mrs	r3, IPSR
 8006322:	603b      	str	r3, [r7, #0]
  return(result);
 8006324:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006326:	2b00      	cmp	r3, #0
 8006328:	d003      	beq.n	8006332 <osKernelStart+0x1a>
    stat = osErrorISR;
 800632a:	f06f 0305 	mvn.w	r3, #5
 800632e:	607b      	str	r3, [r7, #4]
 8006330:	e010      	b.n	8006354 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006332:	4b0b      	ldr	r3, [pc, #44]	; (8006360 <osKernelStart+0x48>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d109      	bne.n	800634e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800633a:	f7ff ffbf 	bl	80062bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800633e:	4b08      	ldr	r3, [pc, #32]	; (8006360 <osKernelStart+0x48>)
 8006340:	2202      	movs	r2, #2
 8006342:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006344:	f001 faac 	bl	80078a0 <vTaskStartScheduler>
      stat = osOK;
 8006348:	2300      	movs	r3, #0
 800634a:	607b      	str	r3, [r7, #4]
 800634c:	e002      	b.n	8006354 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800634e:	f04f 33ff 	mov.w	r3, #4294967295
 8006352:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006354:	687b      	ldr	r3, [r7, #4]
}
 8006356:	4618      	mov	r0, r3
 8006358:	3708      	adds	r7, #8
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	200000b0 	.word	0x200000b0

08006364 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006364:	b580      	push	{r7, lr}
 8006366:	b08e      	sub	sp, #56	; 0x38
 8006368:	af04      	add	r7, sp, #16
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006370:	2300      	movs	r3, #0
 8006372:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006374:	f3ef 8305 	mrs	r3, IPSR
 8006378:	617b      	str	r3, [r7, #20]
  return(result);
 800637a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800637c:	2b00      	cmp	r3, #0
 800637e:	d17e      	bne.n	800647e <osThreadNew+0x11a>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d07b      	beq.n	800647e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006386:	2380      	movs	r3, #128	; 0x80
 8006388:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800638a:	2318      	movs	r3, #24
 800638c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800638e:	2300      	movs	r3, #0
 8006390:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006392:	f04f 33ff 	mov.w	r3, #4294967295
 8006396:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d045      	beq.n	800642a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d002      	beq.n	80063ac <osThreadNew+0x48>
        name = attr->name;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	699b      	ldr	r3, [r3, #24]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d002      	beq.n	80063ba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d008      	beq.n	80063d2 <osThreadNew+0x6e>
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	2b38      	cmp	r3, #56	; 0x38
 80063c4:	d805      	bhi.n	80063d2 <osThreadNew+0x6e>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d001      	beq.n	80063d6 <osThreadNew+0x72>
        return (NULL);
 80063d2:	2300      	movs	r3, #0
 80063d4:	e054      	b.n	8006480 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d003      	beq.n	80063e6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	089b      	lsrs	r3, r3, #2
 80063e4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00e      	beq.n	800640c <osThreadNew+0xa8>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	2b5b      	cmp	r3, #91	; 0x5b
 80063f4:	d90a      	bls.n	800640c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d006      	beq.n	800640c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d002      	beq.n	800640c <osThreadNew+0xa8>
        mem = 1;
 8006406:	2301      	movs	r3, #1
 8006408:	61bb      	str	r3, [r7, #24]
 800640a:	e010      	b.n	800642e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10c      	bne.n	800642e <osThreadNew+0xca>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d108      	bne.n	800642e <osThreadNew+0xca>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d104      	bne.n	800642e <osThreadNew+0xca>
          mem = 0;
 8006424:	2300      	movs	r3, #0
 8006426:	61bb      	str	r3, [r7, #24]
 8006428:	e001      	b.n	800642e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800642a:	2300      	movs	r3, #0
 800642c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d110      	bne.n	8006456 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800643c:	9202      	str	r2, [sp, #8]
 800643e:	9301      	str	r3, [sp, #4]
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	9300      	str	r3, [sp, #0]
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	6a3a      	ldr	r2, [r7, #32]
 8006448:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f001 f852 	bl	80074f4 <xTaskCreateStatic>
 8006450:	4603      	mov	r3, r0
 8006452:	613b      	str	r3, [r7, #16]
 8006454:	e013      	b.n	800647e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d110      	bne.n	800647e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800645c:	6a3b      	ldr	r3, [r7, #32]
 800645e:	b29a      	uxth	r2, r3
 8006460:	f107 0310 	add.w	r3, r7, #16
 8006464:	9301      	str	r3, [sp, #4]
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	9300      	str	r3, [sp, #0]
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f001 f89d 	bl	80075ae <xTaskCreate>
 8006474:	4603      	mov	r3, r0
 8006476:	2b01      	cmp	r3, #1
 8006478:	d001      	beq.n	800647e <osThreadNew+0x11a>
            hTask = NULL;
 800647a:	2300      	movs	r3, #0
 800647c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800647e:	693b      	ldr	r3, [r7, #16]
}
 8006480:	4618      	mov	r0, r3
 8006482:	3728      	adds	r7, #40	; 0x28
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006490:	f3ef 8305 	mrs	r3, IPSR
 8006494:	60bb      	str	r3, [r7, #8]
  return(result);
 8006496:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006498:	2b00      	cmp	r3, #0
 800649a:	d003      	beq.n	80064a4 <osDelay+0x1c>
    stat = osErrorISR;
 800649c:	f06f 0305 	mvn.w	r3, #5
 80064a0:	60fb      	str	r3, [r7, #12]
 80064a2:	e007      	b.n	80064b4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80064a4:	2300      	movs	r3, #0
 80064a6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d002      	beq.n	80064b4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f001 f9c2 	bl	8007838 <vTaskDelay>
    }
  }

  return (stat);
 80064b4:	68fb      	ldr	r3, [r7, #12]
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}

080064be <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80064be:	b580      	push	{r7, lr}
 80064c0:	b08a      	sub	sp, #40	; 0x28
 80064c2:	af02      	add	r7, sp, #8
 80064c4:	60f8      	str	r0, [r7, #12]
 80064c6:	60b9      	str	r1, [r7, #8]
 80064c8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80064ca:	2300      	movs	r3, #0
 80064cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064ce:	f3ef 8305 	mrs	r3, IPSR
 80064d2:	613b      	str	r3, [r7, #16]
  return(result);
 80064d4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d15f      	bne.n	800659a <osMessageQueueNew+0xdc>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d05c      	beq.n	800659a <osMessageQueueNew+0xdc>
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d059      	beq.n	800659a <osMessageQueueNew+0xdc>
    mem = -1;
 80064e6:	f04f 33ff 	mov.w	r3, #4294967295
 80064ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d029      	beq.n	8006546 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d012      	beq.n	8006520 <osMessageQueueNew+0x62>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	2b4f      	cmp	r3, #79	; 0x4f
 8006500:	d90e      	bls.n	8006520 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00a      	beq.n	8006520 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	695a      	ldr	r2, [r3, #20]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	68b9      	ldr	r1, [r7, #8]
 8006512:	fb01 f303 	mul.w	r3, r1, r3
 8006516:	429a      	cmp	r2, r3
 8006518:	d302      	bcc.n	8006520 <osMessageQueueNew+0x62>
        mem = 1;
 800651a:	2301      	movs	r3, #1
 800651c:	61bb      	str	r3, [r7, #24]
 800651e:	e014      	b.n	800654a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d110      	bne.n	800654a <osMessageQueueNew+0x8c>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10c      	bne.n	800654a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006534:	2b00      	cmp	r3, #0
 8006536:	d108      	bne.n	800654a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	695b      	ldr	r3, [r3, #20]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d104      	bne.n	800654a <osMessageQueueNew+0x8c>
          mem = 0;
 8006540:	2300      	movs	r3, #0
 8006542:	61bb      	str	r3, [r7, #24]
 8006544:	e001      	b.n	800654a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006546:	2300      	movs	r3, #0
 8006548:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d10b      	bne.n	8006568 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	691a      	ldr	r2, [r3, #16]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	2100      	movs	r1, #0
 800655a:	9100      	str	r1, [sp, #0]
 800655c:	68b9      	ldr	r1, [r7, #8]
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f000 fa4e 	bl	8006a00 <xQueueGenericCreateStatic>
 8006564:	61f8      	str	r0, [r7, #28]
 8006566:	e008      	b.n	800657a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d105      	bne.n	800657a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800656e:	2200      	movs	r2, #0
 8006570:	68b9      	ldr	r1, [r7, #8]
 8006572:	68f8      	ldr	r0, [r7, #12]
 8006574:	f000 fabc 	bl	8006af0 <xQueueGenericCreate>
 8006578:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00c      	beq.n	800659a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d003      	beq.n	800658e <osMessageQueueNew+0xd0>
        name = attr->name;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	617b      	str	r3, [r7, #20]
 800658c:	e001      	b.n	8006592 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800658e:	2300      	movs	r3, #0
 8006590:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006592:	6979      	ldr	r1, [r7, #20]
 8006594:	69f8      	ldr	r0, [r7, #28]
 8006596:	f000 ff4f 	bl	8007438 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800659a:	69fb      	ldr	r3, [r7, #28]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3720      	adds	r7, #32
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b088      	sub	sp, #32
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	603b      	str	r3, [r7, #0]
 80065b0:	4613      	mov	r3, r2
 80065b2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80065b8:	2300      	movs	r3, #0
 80065ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065bc:	f3ef 8305 	mrs	r3, IPSR
 80065c0:	617b      	str	r3, [r7, #20]
  return(result);
 80065c2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d028      	beq.n	800661a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d005      	beq.n	80065da <osMessageQueuePut+0x36>
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d002      	beq.n	80065da <osMessageQueuePut+0x36>
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d003      	beq.n	80065e2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80065da:	f06f 0303 	mvn.w	r3, #3
 80065de:	61fb      	str	r3, [r7, #28]
 80065e0:	e038      	b.n	8006654 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80065e2:	2300      	movs	r3, #0
 80065e4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80065e6:	f107 0210 	add.w	r2, r7, #16
 80065ea:	2300      	movs	r3, #0
 80065ec:	68b9      	ldr	r1, [r7, #8]
 80065ee:	69b8      	ldr	r0, [r7, #24]
 80065f0:	f000 fbda 	bl	8006da8 <xQueueGenericSendFromISR>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d003      	beq.n	8006602 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80065fa:	f06f 0302 	mvn.w	r3, #2
 80065fe:	61fb      	str	r3, [r7, #28]
 8006600:	e028      	b.n	8006654 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d025      	beq.n	8006654 <osMessageQueuePut+0xb0>
 8006608:	4b15      	ldr	r3, [pc, #84]	; (8006660 <osMessageQueuePut+0xbc>)
 800660a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800660e:	601a      	str	r2, [r3, #0]
 8006610:	f3bf 8f4f 	dsb	sy
 8006614:	f3bf 8f6f 	isb	sy
 8006618:	e01c      	b.n	8006654 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d002      	beq.n	8006626 <osMessageQueuePut+0x82>
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d103      	bne.n	800662e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006626:	f06f 0303 	mvn.w	r3, #3
 800662a:	61fb      	str	r3, [r7, #28]
 800662c:	e012      	b.n	8006654 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800662e:	2300      	movs	r3, #0
 8006630:	683a      	ldr	r2, [r7, #0]
 8006632:	68b9      	ldr	r1, [r7, #8]
 8006634:	69b8      	ldr	r0, [r7, #24]
 8006636:	f000 fab9 	bl	8006bac <xQueueGenericSend>
 800663a:	4603      	mov	r3, r0
 800663c:	2b01      	cmp	r3, #1
 800663e:	d009      	beq.n	8006654 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d003      	beq.n	800664e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006646:	f06f 0301 	mvn.w	r3, #1
 800664a:	61fb      	str	r3, [r7, #28]
 800664c:	e002      	b.n	8006654 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800664e:	f06f 0302 	mvn.w	r3, #2
 8006652:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006654:	69fb      	ldr	r3, [r7, #28]
}
 8006656:	4618      	mov	r0, r3
 8006658:	3720      	adds	r7, #32
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	e000ed04 	.word	0xe000ed04

08006664 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006664:	b580      	push	{r7, lr}
 8006666:	b088      	sub	sp, #32
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
 8006670:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006676:	2300      	movs	r3, #0
 8006678:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800667a:	f3ef 8305 	mrs	r3, IPSR
 800667e:	617b      	str	r3, [r7, #20]
  return(result);
 8006680:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006682:	2b00      	cmp	r3, #0
 8006684:	d028      	beq.n	80066d8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d005      	beq.n	8006698 <osMessageQueueGet+0x34>
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d002      	beq.n	8006698 <osMessageQueueGet+0x34>
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d003      	beq.n	80066a0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006698:	f06f 0303 	mvn.w	r3, #3
 800669c:	61fb      	str	r3, [r7, #28]
 800669e:	e037      	b.n	8006710 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80066a0:	2300      	movs	r3, #0
 80066a2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80066a4:	f107 0310 	add.w	r3, r7, #16
 80066a8:	461a      	mov	r2, r3
 80066aa:	68b9      	ldr	r1, [r7, #8]
 80066ac:	69b8      	ldr	r0, [r7, #24]
 80066ae:	f000 fcf7 	bl	80070a0 <xQueueReceiveFromISR>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d003      	beq.n	80066c0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80066b8:	f06f 0302 	mvn.w	r3, #2
 80066bc:	61fb      	str	r3, [r7, #28]
 80066be:	e027      	b.n	8006710 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d024      	beq.n	8006710 <osMessageQueueGet+0xac>
 80066c6:	4b15      	ldr	r3, [pc, #84]	; (800671c <osMessageQueueGet+0xb8>)
 80066c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066cc:	601a      	str	r2, [r3, #0]
 80066ce:	f3bf 8f4f 	dsb	sy
 80066d2:	f3bf 8f6f 	isb	sy
 80066d6:	e01b      	b.n	8006710 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d002      	beq.n	80066e4 <osMessageQueueGet+0x80>
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d103      	bne.n	80066ec <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80066e4:	f06f 0303 	mvn.w	r3, #3
 80066e8:	61fb      	str	r3, [r7, #28]
 80066ea:	e011      	b.n	8006710 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80066ec:	683a      	ldr	r2, [r7, #0]
 80066ee:	68b9      	ldr	r1, [r7, #8]
 80066f0:	69b8      	ldr	r0, [r7, #24]
 80066f2:	f000 fbf5 	bl	8006ee0 <xQueueReceive>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d009      	beq.n	8006710 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d003      	beq.n	800670a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006702:	f06f 0301 	mvn.w	r3, #1
 8006706:	61fb      	str	r3, [r7, #28]
 8006708:	e002      	b.n	8006710 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800670a:	f06f 0302 	mvn.w	r3, #2
 800670e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006710:	69fb      	ldr	r3, [r7, #28]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3720      	adds	r7, #32
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	e000ed04 	.word	0xe000ed04

08006720 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8006720:	b580      	push	{r7, lr}
 8006722:	b086      	sub	sp, #24
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d102      	bne.n	8006738 <osMessageQueueGetCount+0x18>
    count = 0U;
 8006732:	2300      	movs	r3, #0
 8006734:	617b      	str	r3, [r7, #20]
 8006736:	e00e      	b.n	8006756 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006738:	f3ef 8305 	mrs	r3, IPSR
 800673c:	60fb      	str	r3, [r7, #12]
  return(result);
 800673e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006740:	2b00      	cmp	r3, #0
 8006742:	d004      	beq.n	800674e <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8006744:	6938      	ldr	r0, [r7, #16]
 8006746:	f000 fd49 	bl	80071dc <uxQueueMessagesWaitingFromISR>
 800674a:	6178      	str	r0, [r7, #20]
 800674c:	e003      	b.n	8006756 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800674e:	6938      	ldr	r0, [r7, #16]
 8006750:	f000 fd26 	bl	80071a0 <uxQueueMessagesWaiting>
 8006754:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8006756:	697b      	ldr	r3, [r7, #20]
}
 8006758:	4618      	mov	r0, r3
 800675a:	3718      	adds	r7, #24
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4a07      	ldr	r2, [pc, #28]	; (800678c <vApplicationGetIdleTaskMemory+0x2c>)
 8006770:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	4a06      	ldr	r2, [pc, #24]	; (8006790 <vApplicationGetIdleTaskMemory+0x30>)
 8006776:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2280      	movs	r2, #128	; 0x80
 800677c:	601a      	str	r2, [r3, #0]
}
 800677e:	bf00      	nop
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	200000b4 	.word	0x200000b4
 8006790:	20000110 	.word	0x20000110

08006794 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4a07      	ldr	r2, [pc, #28]	; (80067c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80067a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	4a06      	ldr	r2, [pc, #24]	; (80067c4 <vApplicationGetTimerTaskMemory+0x30>)
 80067aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067b2:	601a      	str	r2, [r3, #0]
}
 80067b4:	bf00      	nop
 80067b6:	3714      	adds	r7, #20
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr
 80067c0:	20000310 	.word	0x20000310
 80067c4:	2000036c 	.word	0x2000036c

080067c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f103 0208 	add.w	r2, r3, #8
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f04f 32ff 	mov.w	r2, #4294967295
 80067e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f103 0208 	add.w	r2, r3, #8
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f103 0208 	add.w	r2, r3, #8
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006816:	bf00      	nop
 8006818:	370c      	adds	r7, #12
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr

08006822 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006822:	b480      	push	{r7}
 8006824:	b085      	sub	sp, #20
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
 800682a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	689a      	ldr	r2, [r3, #8]
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	683a      	ldr	r2, [r7, #0]
 8006846:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	683a      	ldr	r2, [r7, #0]
 800684c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	1c5a      	adds	r2, r3, #1
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	601a      	str	r2, [r3, #0]
}
 800685e:	bf00      	nop
 8006860:	3714      	adds	r7, #20
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr

0800686a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800686a:	b480      	push	{r7}
 800686c:	b085      	sub	sp, #20
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
 8006872:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006880:	d103      	bne.n	800688a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	60fb      	str	r3, [r7, #12]
 8006888:	e00c      	b.n	80068a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	3308      	adds	r3, #8
 800688e:	60fb      	str	r3, [r7, #12]
 8006890:	e002      	b.n	8006898 <vListInsert+0x2e>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	60fb      	str	r3, [r7, #12]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d2f6      	bcs.n	8006892 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	685a      	ldr	r2, [r3, #4]
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	683a      	ldr	r2, [r7, #0]
 80068b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	683a      	ldr	r2, [r7, #0]
 80068be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	1c5a      	adds	r2, r3, #1
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	601a      	str	r2, [r3, #0]
}
 80068d0:	bf00      	nop
 80068d2:	3714      	adds	r7, #20
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	6892      	ldr	r2, [r2, #8]
 80068f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	6852      	ldr	r2, [r2, #4]
 80068fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	429a      	cmp	r2, r3
 8006906:	d103      	bne.n	8006910 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	689a      	ldr	r2, [r3, #8]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	1e5a      	subs	r2, r3, #1
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3714      	adds	r7, #20
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10a      	bne.n	800695a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006948:	f383 8811 	msr	BASEPRI, r3
 800694c:	f3bf 8f6f 	isb	sy
 8006950:	f3bf 8f4f 	dsb	sy
 8006954:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006956:	bf00      	nop
 8006958:	e7fe      	b.n	8006958 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800695a:	f002 f943 	bl	8008be4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006966:	68f9      	ldr	r1, [r7, #12]
 8006968:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800696a:	fb01 f303 	mul.w	r3, r1, r3
 800696e:	441a      	add	r2, r3
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800698a:	3b01      	subs	r3, #1
 800698c:	68f9      	ldr	r1, [r7, #12]
 800698e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006990:	fb01 f303 	mul.w	r3, r1, r3
 8006994:	441a      	add	r2, r3
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	22ff      	movs	r2, #255	; 0xff
 800699e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	22ff      	movs	r2, #255	; 0xff
 80069a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d114      	bne.n	80069da <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d01a      	beq.n	80069ee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	3310      	adds	r3, #16
 80069bc:	4618      	mov	r0, r3
 80069be:	f001 f9f9 	bl	8007db4 <xTaskRemoveFromEventList>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d012      	beq.n	80069ee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80069c8:	4b0c      	ldr	r3, [pc, #48]	; (80069fc <xQueueGenericReset+0xcc>)
 80069ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ce:	601a      	str	r2, [r3, #0]
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	f3bf 8f6f 	isb	sy
 80069d8:	e009      	b.n	80069ee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	3310      	adds	r3, #16
 80069de:	4618      	mov	r0, r3
 80069e0:	f7ff fef2 	bl	80067c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	3324      	adds	r3, #36	; 0x24
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7ff feed 	bl	80067c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80069ee:	f002 f929 	bl	8008c44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80069f2:	2301      	movs	r3, #1
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	e000ed04 	.word	0xe000ed04

08006a00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b08e      	sub	sp, #56	; 0x38
 8006a04:	af02      	add	r7, sp, #8
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
 8006a0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10a      	bne.n	8006a2a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a18:	f383 8811 	msr	BASEPRI, r3
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006a26:	bf00      	nop
 8006a28:	e7fe      	b.n	8006a28 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10a      	bne.n	8006a46 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a42:	bf00      	nop
 8006a44:	e7fe      	b.n	8006a44 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d002      	beq.n	8006a52 <xQueueGenericCreateStatic+0x52>
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d001      	beq.n	8006a56 <xQueueGenericCreateStatic+0x56>
 8006a52:	2301      	movs	r3, #1
 8006a54:	e000      	b.n	8006a58 <xQueueGenericCreateStatic+0x58>
 8006a56:	2300      	movs	r3, #0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10a      	bne.n	8006a72 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a60:	f383 8811 	msr	BASEPRI, r3
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	623b      	str	r3, [r7, #32]
}
 8006a6e:	bf00      	nop
 8006a70:	e7fe      	b.n	8006a70 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d102      	bne.n	8006a7e <xQueueGenericCreateStatic+0x7e>
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d101      	bne.n	8006a82 <xQueueGenericCreateStatic+0x82>
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e000      	b.n	8006a84 <xQueueGenericCreateStatic+0x84>
 8006a82:	2300      	movs	r3, #0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d10a      	bne.n	8006a9e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8c:	f383 8811 	msr	BASEPRI, r3
 8006a90:	f3bf 8f6f 	isb	sy
 8006a94:	f3bf 8f4f 	dsb	sy
 8006a98:	61fb      	str	r3, [r7, #28]
}
 8006a9a:	bf00      	nop
 8006a9c:	e7fe      	b.n	8006a9c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a9e:	2350      	movs	r3, #80	; 0x50
 8006aa0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	2b50      	cmp	r3, #80	; 0x50
 8006aa6:	d00a      	beq.n	8006abe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aac:	f383 8811 	msr	BASEPRI, r3
 8006ab0:	f3bf 8f6f 	isb	sy
 8006ab4:	f3bf 8f4f 	dsb	sy
 8006ab8:	61bb      	str	r3, [r7, #24]
}
 8006aba:	bf00      	nop
 8006abc:	e7fe      	b.n	8006abc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006abe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00d      	beq.n	8006ae6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006ad2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad8:	9300      	str	r3, [sp, #0]
 8006ada:	4613      	mov	r3, r2
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	68b9      	ldr	r1, [r7, #8]
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f000 f83f 	bl	8006b64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3730      	adds	r7, #48	; 0x30
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b08a      	sub	sp, #40	; 0x28
 8006af4:	af02      	add	r7, sp, #8
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	4613      	mov	r3, r2
 8006afc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d10a      	bne.n	8006b1a <xQueueGenericCreate+0x2a>
	__asm volatile
 8006b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b08:	f383 8811 	msr	BASEPRI, r3
 8006b0c:	f3bf 8f6f 	isb	sy
 8006b10:	f3bf 8f4f 	dsb	sy
 8006b14:	613b      	str	r3, [r7, #16]
}
 8006b16:	bf00      	nop
 8006b18:	e7fe      	b.n	8006b18 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	68ba      	ldr	r2, [r7, #8]
 8006b1e:	fb02 f303 	mul.w	r3, r2, r3
 8006b22:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	3350      	adds	r3, #80	; 0x50
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f002 f97d 	bl	8008e28 <pvPortMalloc>
 8006b2e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d011      	beq.n	8006b5a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	3350      	adds	r3, #80	; 0x50
 8006b3e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b48:	79fa      	ldrb	r2, [r7, #7]
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	4613      	mov	r3, r2
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	68b9      	ldr	r1, [r7, #8]
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f000 f805 	bl	8006b64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b5a:	69bb      	ldr	r3, [r7, #24]
	}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3720      	adds	r7, #32
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]
 8006b70:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d103      	bne.n	8006b80 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	69ba      	ldr	r2, [r7, #24]
 8006b7c:	601a      	str	r2, [r3, #0]
 8006b7e:	e002      	b.n	8006b86 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006b92:	2101      	movs	r1, #1
 8006b94:	69b8      	ldr	r0, [r7, #24]
 8006b96:	f7ff fecb 	bl	8006930 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	78fa      	ldrb	r2, [r7, #3]
 8006b9e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006ba2:	bf00      	nop
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
	...

08006bac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b08e      	sub	sp, #56	; 0x38
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
 8006bb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d10a      	bne.n	8006bde <xQueueGenericSend+0x32>
	__asm volatile
 8006bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bcc:	f383 8811 	msr	BASEPRI, r3
 8006bd0:	f3bf 8f6f 	isb	sy
 8006bd4:	f3bf 8f4f 	dsb	sy
 8006bd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006bda:	bf00      	nop
 8006bdc:	e7fe      	b.n	8006bdc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d103      	bne.n	8006bec <xQueueGenericSend+0x40>
 8006be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d101      	bne.n	8006bf0 <xQueueGenericSend+0x44>
 8006bec:	2301      	movs	r3, #1
 8006bee:	e000      	b.n	8006bf2 <xQueueGenericSend+0x46>
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d10a      	bne.n	8006c0c <xQueueGenericSend+0x60>
	__asm volatile
 8006bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfa:	f383 8811 	msr	BASEPRI, r3
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	f3bf 8f4f 	dsb	sy
 8006c06:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c08:	bf00      	nop
 8006c0a:	e7fe      	b.n	8006c0a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d103      	bne.n	8006c1a <xQueueGenericSend+0x6e>
 8006c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d101      	bne.n	8006c1e <xQueueGenericSend+0x72>
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e000      	b.n	8006c20 <xQueueGenericSend+0x74>
 8006c1e:	2300      	movs	r3, #0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d10a      	bne.n	8006c3a <xQueueGenericSend+0x8e>
	__asm volatile
 8006c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c28:	f383 8811 	msr	BASEPRI, r3
 8006c2c:	f3bf 8f6f 	isb	sy
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	623b      	str	r3, [r7, #32]
}
 8006c36:	bf00      	nop
 8006c38:	e7fe      	b.n	8006c38 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c3a:	f001 fa79 	bl	8008130 <xTaskGetSchedulerState>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d102      	bne.n	8006c4a <xQueueGenericSend+0x9e>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d101      	bne.n	8006c4e <xQueueGenericSend+0xa2>
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e000      	b.n	8006c50 <xQueueGenericSend+0xa4>
 8006c4e:	2300      	movs	r3, #0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10a      	bne.n	8006c6a <xQueueGenericSend+0xbe>
	__asm volatile
 8006c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c58:	f383 8811 	msr	BASEPRI, r3
 8006c5c:	f3bf 8f6f 	isb	sy
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	61fb      	str	r3, [r7, #28]
}
 8006c66:	bf00      	nop
 8006c68:	e7fe      	b.n	8006c68 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c6a:	f001 ffbb 	bl	8008be4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d302      	bcc.n	8006c80 <xQueueGenericSend+0xd4>
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d129      	bne.n	8006cd4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c80:	683a      	ldr	r2, [r7, #0]
 8006c82:	68b9      	ldr	r1, [r7, #8]
 8006c84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c86:	f000 fac7 	bl	8007218 <prvCopyDataToQueue>
 8006c8a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d010      	beq.n	8006cb6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c96:	3324      	adds	r3, #36	; 0x24
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f001 f88b 	bl	8007db4 <xTaskRemoveFromEventList>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d013      	beq.n	8006ccc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006ca4:	4b3f      	ldr	r3, [pc, #252]	; (8006da4 <xQueueGenericSend+0x1f8>)
 8006ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006caa:	601a      	str	r2, [r3, #0]
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	f3bf 8f6f 	isb	sy
 8006cb4:	e00a      	b.n	8006ccc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d007      	beq.n	8006ccc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006cbc:	4b39      	ldr	r3, [pc, #228]	; (8006da4 <xQueueGenericSend+0x1f8>)
 8006cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cc2:	601a      	str	r2, [r3, #0]
 8006cc4:	f3bf 8f4f 	dsb	sy
 8006cc8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006ccc:	f001 ffba 	bl	8008c44 <vPortExitCritical>
				return pdPASS;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e063      	b.n	8006d9c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d103      	bne.n	8006ce2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006cda:	f001 ffb3 	bl	8008c44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	e05c      	b.n	8006d9c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d106      	bne.n	8006cf6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ce8:	f107 0314 	add.w	r3, r7, #20
 8006cec:	4618      	mov	r0, r3
 8006cee:	f001 f8c5 	bl	8007e7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006cf6:	f001 ffa5 	bl	8008c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006cfa:	f000 fe37 	bl	800796c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006cfe:	f001 ff71 	bl	8008be4 <vPortEnterCritical>
 8006d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d08:	b25b      	sxtb	r3, r3
 8006d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d0e:	d103      	bne.n	8006d18 <xQueueGenericSend+0x16c>
 8006d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d1e:	b25b      	sxtb	r3, r3
 8006d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d24:	d103      	bne.n	8006d2e <xQueueGenericSend+0x182>
 8006d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d2e:	f001 ff89 	bl	8008c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d32:	1d3a      	adds	r2, r7, #4
 8006d34:	f107 0314 	add.w	r3, r7, #20
 8006d38:	4611      	mov	r1, r2
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f001 f8b4 	bl	8007ea8 <xTaskCheckForTimeOut>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d124      	bne.n	8006d90 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006d46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d48:	f000 fb5e 	bl	8007408 <prvIsQueueFull>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d018      	beq.n	8006d84 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d54:	3310      	adds	r3, #16
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	4611      	mov	r1, r2
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f000 ffda 	bl	8007d14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006d60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d62:	f000 fae9 	bl	8007338 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006d66:	f000 fe0f 	bl	8007988 <xTaskResumeAll>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f47f af7c 	bne.w	8006c6a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006d72:	4b0c      	ldr	r3, [pc, #48]	; (8006da4 <xQueueGenericSend+0x1f8>)
 8006d74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d78:	601a      	str	r2, [r3, #0]
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	e772      	b.n	8006c6a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006d84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d86:	f000 fad7 	bl	8007338 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d8a:	f000 fdfd 	bl	8007988 <xTaskResumeAll>
 8006d8e:	e76c      	b.n	8006c6a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006d90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d92:	f000 fad1 	bl	8007338 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d96:	f000 fdf7 	bl	8007988 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006d9a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3738      	adds	r7, #56	; 0x38
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	e000ed04 	.word	0xe000ed04

08006da8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b090      	sub	sp, #64	; 0x40
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	607a      	str	r2, [r7, #4]
 8006db4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10a      	bne.n	8006dd6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc4:	f383 8811 	msr	BASEPRI, r3
 8006dc8:	f3bf 8f6f 	isb	sy
 8006dcc:	f3bf 8f4f 	dsb	sy
 8006dd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006dd2:	bf00      	nop
 8006dd4:	e7fe      	b.n	8006dd4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d103      	bne.n	8006de4 <xQueueGenericSendFromISR+0x3c>
 8006ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d101      	bne.n	8006de8 <xQueueGenericSendFromISR+0x40>
 8006de4:	2301      	movs	r3, #1
 8006de6:	e000      	b.n	8006dea <xQueueGenericSendFromISR+0x42>
 8006de8:	2300      	movs	r3, #0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d10a      	bne.n	8006e04 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df2:	f383 8811 	msr	BASEPRI, r3
 8006df6:	f3bf 8f6f 	isb	sy
 8006dfa:	f3bf 8f4f 	dsb	sy
 8006dfe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e00:	bf00      	nop
 8006e02:	e7fe      	b.n	8006e02 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d103      	bne.n	8006e12 <xQueueGenericSendFromISR+0x6a>
 8006e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d101      	bne.n	8006e16 <xQueueGenericSendFromISR+0x6e>
 8006e12:	2301      	movs	r3, #1
 8006e14:	e000      	b.n	8006e18 <xQueueGenericSendFromISR+0x70>
 8006e16:	2300      	movs	r3, #0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d10a      	bne.n	8006e32 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e20:	f383 8811 	msr	BASEPRI, r3
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	623b      	str	r3, [r7, #32]
}
 8006e2e:	bf00      	nop
 8006e30:	e7fe      	b.n	8006e30 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e32:	f001 ffb9 	bl	8008da8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006e36:	f3ef 8211 	mrs	r2, BASEPRI
 8006e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3e:	f383 8811 	msr	BASEPRI, r3
 8006e42:	f3bf 8f6f 	isb	sy
 8006e46:	f3bf 8f4f 	dsb	sy
 8006e4a:	61fa      	str	r2, [r7, #28]
 8006e4c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006e4e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e50:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d302      	bcc.n	8006e64 <xQueueGenericSendFromISR+0xbc>
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	d12f      	bne.n	8006ec4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e72:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e74:	683a      	ldr	r2, [r7, #0]
 8006e76:	68b9      	ldr	r1, [r7, #8]
 8006e78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006e7a:	f000 f9cd 	bl	8007218 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006e7e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e86:	d112      	bne.n	8006eae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d016      	beq.n	8006ebe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e92:	3324      	adds	r3, #36	; 0x24
 8006e94:	4618      	mov	r0, r3
 8006e96:	f000 ff8d 	bl	8007db4 <xTaskRemoveFromEventList>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00e      	beq.n	8006ebe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00b      	beq.n	8006ebe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	601a      	str	r2, [r3, #0]
 8006eac:	e007      	b.n	8006ebe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006eae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	b25a      	sxtb	r2, r3
 8006eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006ec2:	e001      	b.n	8006ec8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eca:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006ed2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3740      	adds	r7, #64	; 0x40
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
	...

08006ee0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b08c      	sub	sp, #48	; 0x30
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006eec:	2300      	movs	r3, #0
 8006eee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10a      	bne.n	8006f10 <xQueueReceive+0x30>
	__asm volatile
 8006efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efe:	f383 8811 	msr	BASEPRI, r3
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	623b      	str	r3, [r7, #32]
}
 8006f0c:	bf00      	nop
 8006f0e:	e7fe      	b.n	8006f0e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d103      	bne.n	8006f1e <xQueueReceive+0x3e>
 8006f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d101      	bne.n	8006f22 <xQueueReceive+0x42>
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e000      	b.n	8006f24 <xQueueReceive+0x44>
 8006f22:	2300      	movs	r3, #0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d10a      	bne.n	8006f3e <xQueueReceive+0x5e>
	__asm volatile
 8006f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2c:	f383 8811 	msr	BASEPRI, r3
 8006f30:	f3bf 8f6f 	isb	sy
 8006f34:	f3bf 8f4f 	dsb	sy
 8006f38:	61fb      	str	r3, [r7, #28]
}
 8006f3a:	bf00      	nop
 8006f3c:	e7fe      	b.n	8006f3c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f3e:	f001 f8f7 	bl	8008130 <xTaskGetSchedulerState>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d102      	bne.n	8006f4e <xQueueReceive+0x6e>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d101      	bne.n	8006f52 <xQueueReceive+0x72>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e000      	b.n	8006f54 <xQueueReceive+0x74>
 8006f52:	2300      	movs	r3, #0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d10a      	bne.n	8006f6e <xQueueReceive+0x8e>
	__asm volatile
 8006f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5c:	f383 8811 	msr	BASEPRI, r3
 8006f60:	f3bf 8f6f 	isb	sy
 8006f64:	f3bf 8f4f 	dsb	sy
 8006f68:	61bb      	str	r3, [r7, #24]
}
 8006f6a:	bf00      	nop
 8006f6c:	e7fe      	b.n	8006f6c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f6e:	f001 fe39 	bl	8008be4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f76:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d01f      	beq.n	8006fbe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f7e:	68b9      	ldr	r1, [r7, #8]
 8006f80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f82:	f000 f9b3 	bl	80072ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f88:	1e5a      	subs	r2, r3, #1
 8006f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00f      	beq.n	8006fb6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f98:	3310      	adds	r3, #16
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f000 ff0a 	bl	8007db4 <xTaskRemoveFromEventList>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d007      	beq.n	8006fb6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006fa6:	4b3d      	ldr	r3, [pc, #244]	; (800709c <xQueueReceive+0x1bc>)
 8006fa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fac:	601a      	str	r2, [r3, #0]
 8006fae:	f3bf 8f4f 	dsb	sy
 8006fb2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006fb6:	f001 fe45 	bl	8008c44 <vPortExitCritical>
				return pdPASS;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e069      	b.n	8007092 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d103      	bne.n	8006fcc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006fc4:	f001 fe3e 	bl	8008c44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	e062      	b.n	8007092 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d106      	bne.n	8006fe0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fd2:	f107 0310 	add.w	r3, r7, #16
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f000 ff50 	bl	8007e7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006fe0:	f001 fe30 	bl	8008c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006fe4:	f000 fcc2 	bl	800796c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fe8:	f001 fdfc 	bl	8008be4 <vPortEnterCritical>
 8006fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ff2:	b25b      	sxtb	r3, r3
 8006ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff8:	d103      	bne.n	8007002 <xQueueReceive+0x122>
 8006ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007004:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007008:	b25b      	sxtb	r3, r3
 800700a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700e:	d103      	bne.n	8007018 <xQueueReceive+0x138>
 8007010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007012:	2200      	movs	r2, #0
 8007014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007018:	f001 fe14 	bl	8008c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800701c:	1d3a      	adds	r2, r7, #4
 800701e:	f107 0310 	add.w	r3, r7, #16
 8007022:	4611      	mov	r1, r2
 8007024:	4618      	mov	r0, r3
 8007026:	f000 ff3f 	bl	8007ea8 <xTaskCheckForTimeOut>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d123      	bne.n	8007078 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007030:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007032:	f000 f9d3 	bl	80073dc <prvIsQueueEmpty>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d017      	beq.n	800706c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800703c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703e:	3324      	adds	r3, #36	; 0x24
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	4611      	mov	r1, r2
 8007044:	4618      	mov	r0, r3
 8007046:	f000 fe65 	bl	8007d14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800704a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800704c:	f000 f974 	bl	8007338 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007050:	f000 fc9a 	bl	8007988 <xTaskResumeAll>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d189      	bne.n	8006f6e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800705a:	4b10      	ldr	r3, [pc, #64]	; (800709c <xQueueReceive+0x1bc>)
 800705c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007060:	601a      	str	r2, [r3, #0]
 8007062:	f3bf 8f4f 	dsb	sy
 8007066:	f3bf 8f6f 	isb	sy
 800706a:	e780      	b.n	8006f6e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800706c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800706e:	f000 f963 	bl	8007338 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007072:	f000 fc89 	bl	8007988 <xTaskResumeAll>
 8007076:	e77a      	b.n	8006f6e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800707a:	f000 f95d 	bl	8007338 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800707e:	f000 fc83 	bl	8007988 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007082:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007084:	f000 f9aa 	bl	80073dc <prvIsQueueEmpty>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	f43f af6f 	beq.w	8006f6e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007090:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007092:	4618      	mov	r0, r3
 8007094:	3730      	adds	r7, #48	; 0x30
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	e000ed04 	.word	0xe000ed04

080070a0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b08e      	sub	sp, #56	; 0x38
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80070b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d10a      	bne.n	80070cc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80070b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ba:	f383 8811 	msr	BASEPRI, r3
 80070be:	f3bf 8f6f 	isb	sy
 80070c2:	f3bf 8f4f 	dsb	sy
 80070c6:	623b      	str	r3, [r7, #32]
}
 80070c8:	bf00      	nop
 80070ca:	e7fe      	b.n	80070ca <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d103      	bne.n	80070da <xQueueReceiveFromISR+0x3a>
 80070d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d101      	bne.n	80070de <xQueueReceiveFromISR+0x3e>
 80070da:	2301      	movs	r3, #1
 80070dc:	e000      	b.n	80070e0 <xQueueReceiveFromISR+0x40>
 80070de:	2300      	movs	r3, #0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10a      	bne.n	80070fa <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80070e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	61fb      	str	r3, [r7, #28]
}
 80070f6:	bf00      	nop
 80070f8:	e7fe      	b.n	80070f8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070fa:	f001 fe55 	bl	8008da8 <vPortValidateInterruptPriority>
	__asm volatile
 80070fe:	f3ef 8211 	mrs	r2, BASEPRI
 8007102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007106:	f383 8811 	msr	BASEPRI, r3
 800710a:	f3bf 8f6f 	isb	sy
 800710e:	f3bf 8f4f 	dsb	sy
 8007112:	61ba      	str	r2, [r7, #24]
 8007114:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007116:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007118:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800711a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007122:	2b00      	cmp	r3, #0
 8007124:	d02f      	beq.n	8007186 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007128:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800712c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007130:	68b9      	ldr	r1, [r7, #8]
 8007132:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007134:	f000 f8da 	bl	80072ec <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713a:	1e5a      	subs	r2, r3, #1
 800713c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007140:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007148:	d112      	bne.n	8007170 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800714a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d016      	beq.n	8007180 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007154:	3310      	adds	r3, #16
 8007156:	4618      	mov	r0, r3
 8007158:	f000 fe2c 	bl	8007db4 <xTaskRemoveFromEventList>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00e      	beq.n	8007180 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00b      	beq.n	8007180 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	601a      	str	r2, [r3, #0]
 800716e:	e007      	b.n	8007180 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007170:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007174:	3301      	adds	r3, #1
 8007176:	b2db      	uxtb	r3, r3
 8007178:	b25a      	sxtb	r2, r3
 800717a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007180:	2301      	movs	r3, #1
 8007182:	637b      	str	r3, [r7, #52]	; 0x34
 8007184:	e001      	b.n	800718a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007186:	2300      	movs	r3, #0
 8007188:	637b      	str	r3, [r7, #52]	; 0x34
 800718a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	f383 8811 	msr	BASEPRI, r3
}
 8007194:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007198:	4618      	mov	r0, r3
 800719a:	3738      	adds	r7, #56	; 0x38
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10a      	bne.n	80071c4 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80071ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b2:	f383 8811 	msr	BASEPRI, r3
 80071b6:	f3bf 8f6f 	isb	sy
 80071ba:	f3bf 8f4f 	dsb	sy
 80071be:	60bb      	str	r3, [r7, #8]
}
 80071c0:	bf00      	nop
 80071c2:	e7fe      	b.n	80071c2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80071c4:	f001 fd0e 	bl	8008be4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071cc:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80071ce:	f001 fd39 	bl	8008c44 <vPortExitCritical>

	return uxReturn;
 80071d2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80071d4:	4618      	mov	r0, r3
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80071dc:	b480      	push	{r7}
 80071de:	b087      	sub	sp, #28
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d10a      	bne.n	8007204 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 80071ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f2:	f383 8811 	msr	BASEPRI, r3
 80071f6:	f3bf 8f6f 	isb	sy
 80071fa:	f3bf 8f4f 	dsb	sy
 80071fe:	60fb      	str	r3, [r7, #12]
}
 8007200:	bf00      	nop
 8007202:	e7fe      	b.n	8007202 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007208:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800720a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800720c:	4618      	mov	r0, r3
 800720e:	371c      	adds	r7, #28
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr

08007218 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b086      	sub	sp, #24
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007224:	2300      	movs	r3, #0
 8007226:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007232:	2b00      	cmp	r3, #0
 8007234:	d10d      	bne.n	8007252 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d14d      	bne.n	80072da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	4618      	mov	r0, r3
 8007244:	f000 ff92 	bl	800816c <xTaskPriorityDisinherit>
 8007248:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2200      	movs	r2, #0
 800724e:	609a      	str	r2, [r3, #8]
 8007250:	e043      	b.n	80072da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d119      	bne.n	800728c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6858      	ldr	r0, [r3, #4]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007260:	461a      	mov	r2, r3
 8007262:	68b9      	ldr	r1, [r7, #8]
 8007264:	f002 f808 	bl	8009278 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007270:	441a      	add	r2, r3
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	685a      	ldr	r2, [r3, #4]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	429a      	cmp	r2, r3
 8007280:	d32b      	bcc.n	80072da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	605a      	str	r2, [r3, #4]
 800728a:	e026      	b.n	80072da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	68d8      	ldr	r0, [r3, #12]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007294:	461a      	mov	r2, r3
 8007296:	68b9      	ldr	r1, [r7, #8]
 8007298:	f001 ffee 	bl	8009278 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	68da      	ldr	r2, [r3, #12]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a4:	425b      	negs	r3, r3
 80072a6:	441a      	add	r2, r3
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	68da      	ldr	r2, [r3, #12]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d207      	bcs.n	80072c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	689a      	ldr	r2, [r3, #8]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c0:	425b      	negs	r3, r3
 80072c2:	441a      	add	r2, r3
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d105      	bne.n	80072da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d002      	beq.n	80072da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	3b01      	subs	r3, #1
 80072d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	1c5a      	adds	r2, r3, #1
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80072e2:	697b      	ldr	r3, [r7, #20]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3718      	adds	r7, #24
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d018      	beq.n	8007330 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	68da      	ldr	r2, [r3, #12]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007306:	441a      	add	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	68da      	ldr	r2, [r3, #12]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	429a      	cmp	r2, r3
 8007316:	d303      	bcc.n	8007320 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	68d9      	ldr	r1, [r3, #12]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007328:	461a      	mov	r2, r3
 800732a:	6838      	ldr	r0, [r7, #0]
 800732c:	f001 ffa4 	bl	8009278 <memcpy>
	}
}
 8007330:	bf00      	nop
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007340:	f001 fc50 	bl	8008be4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800734a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800734c:	e011      	b.n	8007372 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007352:	2b00      	cmp	r3, #0
 8007354:	d012      	beq.n	800737c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	3324      	adds	r3, #36	; 0x24
 800735a:	4618      	mov	r0, r3
 800735c:	f000 fd2a 	bl	8007db4 <xTaskRemoveFromEventList>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d001      	beq.n	800736a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007366:	f000 fe01 	bl	8007f6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800736a:	7bfb      	ldrb	r3, [r7, #15]
 800736c:	3b01      	subs	r3, #1
 800736e:	b2db      	uxtb	r3, r3
 8007370:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007376:	2b00      	cmp	r3, #0
 8007378:	dce9      	bgt.n	800734e <prvUnlockQueue+0x16>
 800737a:	e000      	b.n	800737e <prvUnlockQueue+0x46>
					break;
 800737c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	22ff      	movs	r2, #255	; 0xff
 8007382:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007386:	f001 fc5d 	bl	8008c44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800738a:	f001 fc2b 	bl	8008be4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007394:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007396:	e011      	b.n	80073bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d012      	beq.n	80073c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	3310      	adds	r3, #16
 80073a4:	4618      	mov	r0, r3
 80073a6:	f000 fd05 	bl	8007db4 <xTaskRemoveFromEventList>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d001      	beq.n	80073b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80073b0:	f000 fddc 	bl	8007f6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80073b4:	7bbb      	ldrb	r3, [r7, #14]
 80073b6:	3b01      	subs	r3, #1
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80073bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	dce9      	bgt.n	8007398 <prvUnlockQueue+0x60>
 80073c4:	e000      	b.n	80073c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80073c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	22ff      	movs	r2, #255	; 0xff
 80073cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80073d0:	f001 fc38 	bl	8008c44 <vPortExitCritical>
}
 80073d4:	bf00      	nop
 80073d6:	3710      	adds	r7, #16
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073e4:	f001 fbfe 	bl	8008be4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d102      	bne.n	80073f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80073f0:	2301      	movs	r3, #1
 80073f2:	60fb      	str	r3, [r7, #12]
 80073f4:	e001      	b.n	80073fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80073f6:	2300      	movs	r3, #0
 80073f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073fa:	f001 fc23 	bl	8008c44 <vPortExitCritical>

	return xReturn;
 80073fe:	68fb      	ldr	r3, [r7, #12]
}
 8007400:	4618      	mov	r0, r3
 8007402:	3710      	adds	r7, #16
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007410:	f001 fbe8 	bl	8008be4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800741c:	429a      	cmp	r2, r3
 800741e:	d102      	bne.n	8007426 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007420:	2301      	movs	r3, #1
 8007422:	60fb      	str	r3, [r7, #12]
 8007424:	e001      	b.n	800742a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007426:	2300      	movs	r3, #0
 8007428:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800742a:	f001 fc0b 	bl	8008c44 <vPortExitCritical>

	return xReturn;
 800742e:	68fb      	ldr	r3, [r7, #12]
}
 8007430:	4618      	mov	r0, r3
 8007432:	3710      	adds	r7, #16
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007438:	b480      	push	{r7}
 800743a:	b085      	sub	sp, #20
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007442:	2300      	movs	r3, #0
 8007444:	60fb      	str	r3, [r7, #12]
 8007446:	e014      	b.n	8007472 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007448:	4a0f      	ldr	r2, [pc, #60]	; (8007488 <vQueueAddToRegistry+0x50>)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10b      	bne.n	800746c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007454:	490c      	ldr	r1, [pc, #48]	; (8007488 <vQueueAddToRegistry+0x50>)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	683a      	ldr	r2, [r7, #0]
 800745a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800745e:	4a0a      	ldr	r2, [pc, #40]	; (8007488 <vQueueAddToRegistry+0x50>)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	00db      	lsls	r3, r3, #3
 8007464:	4413      	add	r3, r2
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800746a:	e006      	b.n	800747a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	3301      	adds	r3, #1
 8007470:	60fb      	str	r3, [r7, #12]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2b07      	cmp	r3, #7
 8007476:	d9e7      	bls.n	8007448 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007478:	bf00      	nop
 800747a:	bf00      	nop
 800747c:	3714      	adds	r7, #20
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	2000ac28 	.word	0x2000ac28

0800748c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800748c:	b580      	push	{r7, lr}
 800748e:	b086      	sub	sp, #24
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800749c:	f001 fba2 	bl	8008be4 <vPortEnterCritical>
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074a6:	b25b      	sxtb	r3, r3
 80074a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ac:	d103      	bne.n	80074b6 <vQueueWaitForMessageRestricted+0x2a>
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074bc:	b25b      	sxtb	r3, r3
 80074be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c2:	d103      	bne.n	80074cc <vQueueWaitForMessageRestricted+0x40>
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074cc:	f001 fbba 	bl	8008c44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d106      	bne.n	80074e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	3324      	adds	r3, #36	; 0x24
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	68b9      	ldr	r1, [r7, #8]
 80074e0:	4618      	mov	r0, r3
 80074e2:	f000 fc3b 	bl	8007d5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80074e6:	6978      	ldr	r0, [r7, #20]
 80074e8:	f7ff ff26 	bl	8007338 <prvUnlockQueue>
	}
 80074ec:	bf00      	nop
 80074ee:	3718      	adds	r7, #24
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b08e      	sub	sp, #56	; 0x38
 80074f8:	af04      	add	r7, sp, #16
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
 8007500:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007504:	2b00      	cmp	r3, #0
 8007506:	d10a      	bne.n	800751e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750c:	f383 8811 	msr	BASEPRI, r3
 8007510:	f3bf 8f6f 	isb	sy
 8007514:	f3bf 8f4f 	dsb	sy
 8007518:	623b      	str	r3, [r7, #32]
}
 800751a:	bf00      	nop
 800751c:	e7fe      	b.n	800751c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800751e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007520:	2b00      	cmp	r3, #0
 8007522:	d10a      	bne.n	800753a <xTaskCreateStatic+0x46>
	__asm volatile
 8007524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007528:	f383 8811 	msr	BASEPRI, r3
 800752c:	f3bf 8f6f 	isb	sy
 8007530:	f3bf 8f4f 	dsb	sy
 8007534:	61fb      	str	r3, [r7, #28]
}
 8007536:	bf00      	nop
 8007538:	e7fe      	b.n	8007538 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800753a:	235c      	movs	r3, #92	; 0x5c
 800753c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	2b5c      	cmp	r3, #92	; 0x5c
 8007542:	d00a      	beq.n	800755a <xTaskCreateStatic+0x66>
	__asm volatile
 8007544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007548:	f383 8811 	msr	BASEPRI, r3
 800754c:	f3bf 8f6f 	isb	sy
 8007550:	f3bf 8f4f 	dsb	sy
 8007554:	61bb      	str	r3, [r7, #24]
}
 8007556:	bf00      	nop
 8007558:	e7fe      	b.n	8007558 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800755a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800755c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755e:	2b00      	cmp	r3, #0
 8007560:	d01e      	beq.n	80075a0 <xTaskCreateStatic+0xac>
 8007562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007564:	2b00      	cmp	r3, #0
 8007566:	d01b      	beq.n	80075a0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800756a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007570:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007574:	2202      	movs	r2, #2
 8007576:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800757a:	2300      	movs	r3, #0
 800757c:	9303      	str	r3, [sp, #12]
 800757e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007580:	9302      	str	r3, [sp, #8]
 8007582:	f107 0314 	add.w	r3, r7, #20
 8007586:	9301      	str	r3, [sp, #4]
 8007588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758a:	9300      	str	r3, [sp, #0]
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	68b9      	ldr	r1, [r7, #8]
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f000 f850 	bl	8007638 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007598:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800759a:	f000 f8dd 	bl	8007758 <prvAddNewTaskToReadyList>
 800759e:	e001      	b.n	80075a4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80075a0:	2300      	movs	r3, #0
 80075a2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80075a4:	697b      	ldr	r3, [r7, #20]
	}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3728      	adds	r7, #40	; 0x28
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b08c      	sub	sp, #48	; 0x30
 80075b2:	af04      	add	r7, sp, #16
 80075b4:	60f8      	str	r0, [r7, #12]
 80075b6:	60b9      	str	r1, [r7, #8]
 80075b8:	603b      	str	r3, [r7, #0]
 80075ba:	4613      	mov	r3, r2
 80075bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80075be:	88fb      	ldrh	r3, [r7, #6]
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	4618      	mov	r0, r3
 80075c4:	f001 fc30 	bl	8008e28 <pvPortMalloc>
 80075c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00e      	beq.n	80075ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80075d0:	205c      	movs	r0, #92	; 0x5c
 80075d2:	f001 fc29 	bl	8008e28 <pvPortMalloc>
 80075d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d003      	beq.n	80075e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	697a      	ldr	r2, [r7, #20]
 80075e2:	631a      	str	r2, [r3, #48]	; 0x30
 80075e4:	e005      	b.n	80075f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80075e6:	6978      	ldr	r0, [r7, #20]
 80075e8:	f001 fcea 	bl	8008fc0 <vPortFree>
 80075ec:	e001      	b.n	80075f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80075ee:	2300      	movs	r3, #0
 80075f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d017      	beq.n	8007628 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007600:	88fa      	ldrh	r2, [r7, #6]
 8007602:	2300      	movs	r3, #0
 8007604:	9303      	str	r3, [sp, #12]
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	9302      	str	r3, [sp, #8]
 800760a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800760c:	9301      	str	r3, [sp, #4]
 800760e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007610:	9300      	str	r3, [sp, #0]
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	68b9      	ldr	r1, [r7, #8]
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	f000 f80e 	bl	8007638 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800761c:	69f8      	ldr	r0, [r7, #28]
 800761e:	f000 f89b 	bl	8007758 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007622:	2301      	movs	r3, #1
 8007624:	61bb      	str	r3, [r7, #24]
 8007626:	e002      	b.n	800762e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007628:	f04f 33ff 	mov.w	r3, #4294967295
 800762c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800762e:	69bb      	ldr	r3, [r7, #24]
	}
 8007630:	4618      	mov	r0, r3
 8007632:	3720      	adds	r7, #32
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b088      	sub	sp, #32
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	607a      	str	r2, [r7, #4]
 8007644:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007648:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	461a      	mov	r2, r3
 8007650:	21a5      	movs	r1, #165	; 0xa5
 8007652:	f001 fe1f 	bl	8009294 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007660:	3b01      	subs	r3, #1
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	4413      	add	r3, r2
 8007666:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	f023 0307 	bic.w	r3, r3, #7
 800766e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	f003 0307 	and.w	r3, r3, #7
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00a      	beq.n	8007690 <prvInitialiseNewTask+0x58>
	__asm volatile
 800767a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767e:	f383 8811 	msr	BASEPRI, r3
 8007682:	f3bf 8f6f 	isb	sy
 8007686:	f3bf 8f4f 	dsb	sy
 800768a:	617b      	str	r3, [r7, #20]
}
 800768c:	bf00      	nop
 800768e:	e7fe      	b.n	800768e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d01f      	beq.n	80076d6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007696:	2300      	movs	r3, #0
 8007698:	61fb      	str	r3, [r7, #28]
 800769a:	e012      	b.n	80076c2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	4413      	add	r3, r2
 80076a2:	7819      	ldrb	r1, [r3, #0]
 80076a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	4413      	add	r3, r2
 80076aa:	3334      	adds	r3, #52	; 0x34
 80076ac:	460a      	mov	r2, r1
 80076ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80076b0:	68ba      	ldr	r2, [r7, #8]
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	4413      	add	r3, r2
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d006      	beq.n	80076ca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	3301      	adds	r3, #1
 80076c0:	61fb      	str	r3, [r7, #28]
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	2b0f      	cmp	r3, #15
 80076c6:	d9e9      	bls.n	800769c <prvInitialiseNewTask+0x64>
 80076c8:	e000      	b.n	80076cc <prvInitialiseNewTask+0x94>
			{
				break;
 80076ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80076cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076d4:	e003      	b.n	80076de <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80076d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80076de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e0:	2b37      	cmp	r3, #55	; 0x37
 80076e2:	d901      	bls.n	80076e8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80076e4:	2337      	movs	r3, #55	; 0x37
 80076e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80076e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80076ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80076f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f6:	2200      	movs	r2, #0
 80076f8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80076fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fc:	3304      	adds	r3, #4
 80076fe:	4618      	mov	r0, r3
 8007700:	f7ff f882 	bl	8006808 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007706:	3318      	adds	r3, #24
 8007708:	4618      	mov	r0, r3
 800770a:	f7ff f87d 	bl	8006808 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800770e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007712:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007716:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800771a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800771e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007722:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007726:	2200      	movs	r2, #0
 8007728:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800772a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772c:	2200      	movs	r2, #0
 800772e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007732:	683a      	ldr	r2, [r7, #0]
 8007734:	68f9      	ldr	r1, [r7, #12]
 8007736:	69b8      	ldr	r0, [r7, #24]
 8007738:	f001 f928 	bl	800898c <pxPortInitialiseStack>
 800773c:	4602      	mov	r2, r0
 800773e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007740:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007744:	2b00      	cmp	r3, #0
 8007746:	d002      	beq.n	800774e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800774a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800774c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800774e:	bf00      	nop
 8007750:	3720      	adds	r7, #32
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
	...

08007758 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007760:	f001 fa40 	bl	8008be4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007764:	4b2d      	ldr	r3, [pc, #180]	; (800781c <prvAddNewTaskToReadyList+0xc4>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	3301      	adds	r3, #1
 800776a:	4a2c      	ldr	r2, [pc, #176]	; (800781c <prvAddNewTaskToReadyList+0xc4>)
 800776c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800776e:	4b2c      	ldr	r3, [pc, #176]	; (8007820 <prvAddNewTaskToReadyList+0xc8>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d109      	bne.n	800778a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007776:	4a2a      	ldr	r2, [pc, #168]	; (8007820 <prvAddNewTaskToReadyList+0xc8>)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800777c:	4b27      	ldr	r3, [pc, #156]	; (800781c <prvAddNewTaskToReadyList+0xc4>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d110      	bne.n	80077a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007784:	f000 fc16 	bl	8007fb4 <prvInitialiseTaskLists>
 8007788:	e00d      	b.n	80077a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800778a:	4b26      	ldr	r3, [pc, #152]	; (8007824 <prvAddNewTaskToReadyList+0xcc>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d109      	bne.n	80077a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007792:	4b23      	ldr	r3, [pc, #140]	; (8007820 <prvAddNewTaskToReadyList+0xc8>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779c:	429a      	cmp	r2, r3
 800779e:	d802      	bhi.n	80077a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80077a0:	4a1f      	ldr	r2, [pc, #124]	; (8007820 <prvAddNewTaskToReadyList+0xc8>)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80077a6:	4b20      	ldr	r3, [pc, #128]	; (8007828 <prvAddNewTaskToReadyList+0xd0>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	3301      	adds	r3, #1
 80077ac:	4a1e      	ldr	r2, [pc, #120]	; (8007828 <prvAddNewTaskToReadyList+0xd0>)
 80077ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80077b0:	4b1d      	ldr	r3, [pc, #116]	; (8007828 <prvAddNewTaskToReadyList+0xd0>)
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077bc:	4b1b      	ldr	r3, [pc, #108]	; (800782c <prvAddNewTaskToReadyList+0xd4>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d903      	bls.n	80077cc <prvAddNewTaskToReadyList+0x74>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c8:	4a18      	ldr	r2, [pc, #96]	; (800782c <prvAddNewTaskToReadyList+0xd4>)
 80077ca:	6013      	str	r3, [r2, #0]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d0:	4613      	mov	r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4413      	add	r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4a15      	ldr	r2, [pc, #84]	; (8007830 <prvAddNewTaskToReadyList+0xd8>)
 80077da:	441a      	add	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	3304      	adds	r3, #4
 80077e0:	4619      	mov	r1, r3
 80077e2:	4610      	mov	r0, r2
 80077e4:	f7ff f81d 	bl	8006822 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80077e8:	f001 fa2c 	bl	8008c44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80077ec:	4b0d      	ldr	r3, [pc, #52]	; (8007824 <prvAddNewTaskToReadyList+0xcc>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d00e      	beq.n	8007812 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80077f4:	4b0a      	ldr	r3, [pc, #40]	; (8007820 <prvAddNewTaskToReadyList+0xc8>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077fe:	429a      	cmp	r2, r3
 8007800:	d207      	bcs.n	8007812 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007802:	4b0c      	ldr	r3, [pc, #48]	; (8007834 <prvAddNewTaskToReadyList+0xdc>)
 8007804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007808:	601a      	str	r2, [r3, #0]
 800780a:	f3bf 8f4f 	dsb	sy
 800780e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007812:	bf00      	nop
 8007814:	3708      	adds	r7, #8
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	20000c40 	.word	0x20000c40
 8007820:	2000076c 	.word	0x2000076c
 8007824:	20000c4c 	.word	0x20000c4c
 8007828:	20000c5c 	.word	0x20000c5c
 800782c:	20000c48 	.word	0x20000c48
 8007830:	20000770 	.word	0x20000770
 8007834:	e000ed04 	.word	0xe000ed04

08007838 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007840:	2300      	movs	r3, #0
 8007842:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d017      	beq.n	800787a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800784a:	4b13      	ldr	r3, [pc, #76]	; (8007898 <vTaskDelay+0x60>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00a      	beq.n	8007868 <vTaskDelay+0x30>
	__asm volatile
 8007852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007856:	f383 8811 	msr	BASEPRI, r3
 800785a:	f3bf 8f6f 	isb	sy
 800785e:	f3bf 8f4f 	dsb	sy
 8007862:	60bb      	str	r3, [r7, #8]
}
 8007864:	bf00      	nop
 8007866:	e7fe      	b.n	8007866 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007868:	f000 f880 	bl	800796c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800786c:	2100      	movs	r1, #0
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 fcea 	bl	8008248 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007874:	f000 f888 	bl	8007988 <xTaskResumeAll>
 8007878:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d107      	bne.n	8007890 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007880:	4b06      	ldr	r3, [pc, #24]	; (800789c <vTaskDelay+0x64>)
 8007882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007886:	601a      	str	r2, [r3, #0]
 8007888:	f3bf 8f4f 	dsb	sy
 800788c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007890:	bf00      	nop
 8007892:	3710      	adds	r7, #16
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}
 8007898:	20000c68 	.word	0x20000c68
 800789c:	e000ed04 	.word	0xe000ed04

080078a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b08a      	sub	sp, #40	; 0x28
 80078a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80078a6:	2300      	movs	r3, #0
 80078a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80078aa:	2300      	movs	r3, #0
 80078ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80078ae:	463a      	mov	r2, r7
 80078b0:	1d39      	adds	r1, r7, #4
 80078b2:	f107 0308 	add.w	r3, r7, #8
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7fe ff52 	bl	8006760 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80078bc:	6839      	ldr	r1, [r7, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	68ba      	ldr	r2, [r7, #8]
 80078c2:	9202      	str	r2, [sp, #8]
 80078c4:	9301      	str	r3, [sp, #4]
 80078c6:	2300      	movs	r3, #0
 80078c8:	9300      	str	r3, [sp, #0]
 80078ca:	2300      	movs	r3, #0
 80078cc:	460a      	mov	r2, r1
 80078ce:	4921      	ldr	r1, [pc, #132]	; (8007954 <vTaskStartScheduler+0xb4>)
 80078d0:	4821      	ldr	r0, [pc, #132]	; (8007958 <vTaskStartScheduler+0xb8>)
 80078d2:	f7ff fe0f 	bl	80074f4 <xTaskCreateStatic>
 80078d6:	4603      	mov	r3, r0
 80078d8:	4a20      	ldr	r2, [pc, #128]	; (800795c <vTaskStartScheduler+0xbc>)
 80078da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80078dc:	4b1f      	ldr	r3, [pc, #124]	; (800795c <vTaskStartScheduler+0xbc>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d002      	beq.n	80078ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80078e4:	2301      	movs	r3, #1
 80078e6:	617b      	str	r3, [r7, #20]
 80078e8:	e001      	b.n	80078ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80078ea:	2300      	movs	r3, #0
 80078ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d102      	bne.n	80078fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80078f4:	f000 fcfc 	bl	80082f0 <xTimerCreateTimerTask>
 80078f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d116      	bne.n	800792e <vTaskStartScheduler+0x8e>
	__asm volatile
 8007900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007904:	f383 8811 	msr	BASEPRI, r3
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	613b      	str	r3, [r7, #16]
}
 8007912:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007914:	4b12      	ldr	r3, [pc, #72]	; (8007960 <vTaskStartScheduler+0xc0>)
 8007916:	f04f 32ff 	mov.w	r2, #4294967295
 800791a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800791c:	4b11      	ldr	r3, [pc, #68]	; (8007964 <vTaskStartScheduler+0xc4>)
 800791e:	2201      	movs	r2, #1
 8007920:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007922:	4b11      	ldr	r3, [pc, #68]	; (8007968 <vTaskStartScheduler+0xc8>)
 8007924:	2200      	movs	r2, #0
 8007926:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007928:	f001 f8ba 	bl	8008aa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800792c:	e00e      	b.n	800794c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007934:	d10a      	bne.n	800794c <vTaskStartScheduler+0xac>
	__asm volatile
 8007936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793a:	f383 8811 	msr	BASEPRI, r3
 800793e:	f3bf 8f6f 	isb	sy
 8007942:	f3bf 8f4f 	dsb	sy
 8007946:	60fb      	str	r3, [r7, #12]
}
 8007948:	bf00      	nop
 800794a:	e7fe      	b.n	800794a <vTaskStartScheduler+0xaa>
}
 800794c:	bf00      	nop
 800794e:	3718      	adds	r7, #24
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}
 8007954:	08009508 	.word	0x08009508
 8007958:	08007f85 	.word	0x08007f85
 800795c:	20000c64 	.word	0x20000c64
 8007960:	20000c60 	.word	0x20000c60
 8007964:	20000c4c 	.word	0x20000c4c
 8007968:	20000c44 	.word	0x20000c44

0800796c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800796c:	b480      	push	{r7}
 800796e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007970:	4b04      	ldr	r3, [pc, #16]	; (8007984 <vTaskSuspendAll+0x18>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	3301      	adds	r3, #1
 8007976:	4a03      	ldr	r2, [pc, #12]	; (8007984 <vTaskSuspendAll+0x18>)
 8007978:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800797a:	bf00      	nop
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr
 8007984:	20000c68 	.word	0x20000c68

08007988 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800798e:	2300      	movs	r3, #0
 8007990:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007992:	2300      	movs	r3, #0
 8007994:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007996:	4b42      	ldr	r3, [pc, #264]	; (8007aa0 <xTaskResumeAll+0x118>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10a      	bne.n	80079b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800799e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a2:	f383 8811 	msr	BASEPRI, r3
 80079a6:	f3bf 8f6f 	isb	sy
 80079aa:	f3bf 8f4f 	dsb	sy
 80079ae:	603b      	str	r3, [r7, #0]
}
 80079b0:	bf00      	nop
 80079b2:	e7fe      	b.n	80079b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80079b4:	f001 f916 	bl	8008be4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80079b8:	4b39      	ldr	r3, [pc, #228]	; (8007aa0 <xTaskResumeAll+0x118>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	3b01      	subs	r3, #1
 80079be:	4a38      	ldr	r2, [pc, #224]	; (8007aa0 <xTaskResumeAll+0x118>)
 80079c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079c2:	4b37      	ldr	r3, [pc, #220]	; (8007aa0 <xTaskResumeAll+0x118>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d162      	bne.n	8007a90 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80079ca:	4b36      	ldr	r3, [pc, #216]	; (8007aa4 <xTaskResumeAll+0x11c>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d05e      	beq.n	8007a90 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079d2:	e02f      	b.n	8007a34 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079d4:	4b34      	ldr	r3, [pc, #208]	; (8007aa8 <xTaskResumeAll+0x120>)
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	3318      	adds	r3, #24
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7fe ff7b 	bl	80068dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	3304      	adds	r3, #4
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7fe ff76 	bl	80068dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079f4:	4b2d      	ldr	r3, [pc, #180]	; (8007aac <xTaskResumeAll+0x124>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d903      	bls.n	8007a04 <xTaskResumeAll+0x7c>
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a00:	4a2a      	ldr	r2, [pc, #168]	; (8007aac <xTaskResumeAll+0x124>)
 8007a02:	6013      	str	r3, [r2, #0]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a08:	4613      	mov	r3, r2
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	4413      	add	r3, r2
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	4a27      	ldr	r2, [pc, #156]	; (8007ab0 <xTaskResumeAll+0x128>)
 8007a12:	441a      	add	r2, r3
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	3304      	adds	r3, #4
 8007a18:	4619      	mov	r1, r3
 8007a1a:	4610      	mov	r0, r2
 8007a1c:	f7fe ff01 	bl	8006822 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a24:	4b23      	ldr	r3, [pc, #140]	; (8007ab4 <xTaskResumeAll+0x12c>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d302      	bcc.n	8007a34 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007a2e:	4b22      	ldr	r3, [pc, #136]	; (8007ab8 <xTaskResumeAll+0x130>)
 8007a30:	2201      	movs	r2, #1
 8007a32:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a34:	4b1c      	ldr	r3, [pc, #112]	; (8007aa8 <xTaskResumeAll+0x120>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d1cb      	bne.n	80079d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d001      	beq.n	8007a46 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007a42:	f000 fb55 	bl	80080f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007a46:	4b1d      	ldr	r3, [pc, #116]	; (8007abc <xTaskResumeAll+0x134>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d010      	beq.n	8007a74 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007a52:	f000 f847 	bl	8007ae4 <xTaskIncrementTick>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d002      	beq.n	8007a62 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007a5c:	4b16      	ldr	r3, [pc, #88]	; (8007ab8 <xTaskResumeAll+0x130>)
 8007a5e:	2201      	movs	r2, #1
 8007a60:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	3b01      	subs	r3, #1
 8007a66:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d1f1      	bne.n	8007a52 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007a6e:	4b13      	ldr	r3, [pc, #76]	; (8007abc <xTaskResumeAll+0x134>)
 8007a70:	2200      	movs	r2, #0
 8007a72:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a74:	4b10      	ldr	r3, [pc, #64]	; (8007ab8 <xTaskResumeAll+0x130>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d009      	beq.n	8007a90 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a80:	4b0f      	ldr	r3, [pc, #60]	; (8007ac0 <xTaskResumeAll+0x138>)
 8007a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a86:	601a      	str	r2, [r3, #0]
 8007a88:	f3bf 8f4f 	dsb	sy
 8007a8c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a90:	f001 f8d8 	bl	8008c44 <vPortExitCritical>

	return xAlreadyYielded;
 8007a94:	68bb      	ldr	r3, [r7, #8]
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	20000c68 	.word	0x20000c68
 8007aa4:	20000c40 	.word	0x20000c40
 8007aa8:	20000c00 	.word	0x20000c00
 8007aac:	20000c48 	.word	0x20000c48
 8007ab0:	20000770 	.word	0x20000770
 8007ab4:	2000076c 	.word	0x2000076c
 8007ab8:	20000c54 	.word	0x20000c54
 8007abc:	20000c50 	.word	0x20000c50
 8007ac0:	e000ed04 	.word	0xe000ed04

08007ac4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007aca:	4b05      	ldr	r3, [pc, #20]	; (8007ae0 <xTaskGetTickCount+0x1c>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007ad0:	687b      	ldr	r3, [r7, #4]
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	370c      	adds	r7, #12
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop
 8007ae0:	20000c44 	.word	0x20000c44

08007ae4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b086      	sub	sp, #24
 8007ae8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007aea:	2300      	movs	r3, #0
 8007aec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007aee:	4b4f      	ldr	r3, [pc, #316]	; (8007c2c <xTaskIncrementTick+0x148>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f040 808f 	bne.w	8007c16 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007af8:	4b4d      	ldr	r3, [pc, #308]	; (8007c30 <xTaskIncrementTick+0x14c>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	3301      	adds	r3, #1
 8007afe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007b00:	4a4b      	ldr	r2, [pc, #300]	; (8007c30 <xTaskIncrementTick+0x14c>)
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d120      	bne.n	8007b4e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007b0c:	4b49      	ldr	r3, [pc, #292]	; (8007c34 <xTaskIncrementTick+0x150>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00a      	beq.n	8007b2c <xTaskIncrementTick+0x48>
	__asm volatile
 8007b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1a:	f383 8811 	msr	BASEPRI, r3
 8007b1e:	f3bf 8f6f 	isb	sy
 8007b22:	f3bf 8f4f 	dsb	sy
 8007b26:	603b      	str	r3, [r7, #0]
}
 8007b28:	bf00      	nop
 8007b2a:	e7fe      	b.n	8007b2a <xTaskIncrementTick+0x46>
 8007b2c:	4b41      	ldr	r3, [pc, #260]	; (8007c34 <xTaskIncrementTick+0x150>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	60fb      	str	r3, [r7, #12]
 8007b32:	4b41      	ldr	r3, [pc, #260]	; (8007c38 <xTaskIncrementTick+0x154>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a3f      	ldr	r2, [pc, #252]	; (8007c34 <xTaskIncrementTick+0x150>)
 8007b38:	6013      	str	r3, [r2, #0]
 8007b3a:	4a3f      	ldr	r2, [pc, #252]	; (8007c38 <xTaskIncrementTick+0x154>)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6013      	str	r3, [r2, #0]
 8007b40:	4b3e      	ldr	r3, [pc, #248]	; (8007c3c <xTaskIncrementTick+0x158>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	3301      	adds	r3, #1
 8007b46:	4a3d      	ldr	r2, [pc, #244]	; (8007c3c <xTaskIncrementTick+0x158>)
 8007b48:	6013      	str	r3, [r2, #0]
 8007b4a:	f000 fad1 	bl	80080f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b4e:	4b3c      	ldr	r3, [pc, #240]	; (8007c40 <xTaskIncrementTick+0x15c>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	693a      	ldr	r2, [r7, #16]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d349      	bcc.n	8007bec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b58:	4b36      	ldr	r3, [pc, #216]	; (8007c34 <xTaskIncrementTick+0x150>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d104      	bne.n	8007b6c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b62:	4b37      	ldr	r3, [pc, #220]	; (8007c40 <xTaskIncrementTick+0x15c>)
 8007b64:	f04f 32ff 	mov.w	r2, #4294967295
 8007b68:	601a      	str	r2, [r3, #0]
					break;
 8007b6a:	e03f      	b.n	8007bec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b6c:	4b31      	ldr	r3, [pc, #196]	; (8007c34 <xTaskIncrementTick+0x150>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007b7c:	693a      	ldr	r2, [r7, #16]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d203      	bcs.n	8007b8c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b84:	4a2e      	ldr	r2, [pc, #184]	; (8007c40 <xTaskIncrementTick+0x15c>)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007b8a:	e02f      	b.n	8007bec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	3304      	adds	r3, #4
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7fe fea3 	bl	80068dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d004      	beq.n	8007ba8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	3318      	adds	r3, #24
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7fe fe9a 	bl	80068dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bac:	4b25      	ldr	r3, [pc, #148]	; (8007c44 <xTaskIncrementTick+0x160>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d903      	bls.n	8007bbc <xTaskIncrementTick+0xd8>
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb8:	4a22      	ldr	r2, [pc, #136]	; (8007c44 <xTaskIncrementTick+0x160>)
 8007bba:	6013      	str	r3, [r2, #0]
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	4413      	add	r3, r2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	4a1f      	ldr	r2, [pc, #124]	; (8007c48 <xTaskIncrementTick+0x164>)
 8007bca:	441a      	add	r2, r3
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	3304      	adds	r3, #4
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	4610      	mov	r0, r2
 8007bd4:	f7fe fe25 	bl	8006822 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bdc:	4b1b      	ldr	r3, [pc, #108]	; (8007c4c <xTaskIncrementTick+0x168>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d3b8      	bcc.n	8007b58 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007be6:	2301      	movs	r3, #1
 8007be8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bea:	e7b5      	b.n	8007b58 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007bec:	4b17      	ldr	r3, [pc, #92]	; (8007c4c <xTaskIncrementTick+0x168>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf2:	4915      	ldr	r1, [pc, #84]	; (8007c48 <xTaskIncrementTick+0x164>)
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	4413      	add	r3, r2
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	440b      	add	r3, r1
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d901      	bls.n	8007c08 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007c04:	2301      	movs	r3, #1
 8007c06:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007c08:	4b11      	ldr	r3, [pc, #68]	; (8007c50 <xTaskIncrementTick+0x16c>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d007      	beq.n	8007c20 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007c10:	2301      	movs	r3, #1
 8007c12:	617b      	str	r3, [r7, #20]
 8007c14:	e004      	b.n	8007c20 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007c16:	4b0f      	ldr	r3, [pc, #60]	; (8007c54 <xTaskIncrementTick+0x170>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	4a0d      	ldr	r2, [pc, #52]	; (8007c54 <xTaskIncrementTick+0x170>)
 8007c1e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007c20:	697b      	ldr	r3, [r7, #20]
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3718      	adds	r7, #24
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	20000c68 	.word	0x20000c68
 8007c30:	20000c44 	.word	0x20000c44
 8007c34:	20000bf8 	.word	0x20000bf8
 8007c38:	20000bfc 	.word	0x20000bfc
 8007c3c:	20000c58 	.word	0x20000c58
 8007c40:	20000c60 	.word	0x20000c60
 8007c44:	20000c48 	.word	0x20000c48
 8007c48:	20000770 	.word	0x20000770
 8007c4c:	2000076c 	.word	0x2000076c
 8007c50:	20000c54 	.word	0x20000c54
 8007c54:	20000c50 	.word	0x20000c50

08007c58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007c5e:	4b28      	ldr	r3, [pc, #160]	; (8007d00 <vTaskSwitchContext+0xa8>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d003      	beq.n	8007c6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007c66:	4b27      	ldr	r3, [pc, #156]	; (8007d04 <vTaskSwitchContext+0xac>)
 8007c68:	2201      	movs	r2, #1
 8007c6a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007c6c:	e041      	b.n	8007cf2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007c6e:	4b25      	ldr	r3, [pc, #148]	; (8007d04 <vTaskSwitchContext+0xac>)
 8007c70:	2200      	movs	r2, #0
 8007c72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c74:	4b24      	ldr	r3, [pc, #144]	; (8007d08 <vTaskSwitchContext+0xb0>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	60fb      	str	r3, [r7, #12]
 8007c7a:	e010      	b.n	8007c9e <vTaskSwitchContext+0x46>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d10a      	bne.n	8007c98 <vTaskSwitchContext+0x40>
	__asm volatile
 8007c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c86:	f383 8811 	msr	BASEPRI, r3
 8007c8a:	f3bf 8f6f 	isb	sy
 8007c8e:	f3bf 8f4f 	dsb	sy
 8007c92:	607b      	str	r3, [r7, #4]
}
 8007c94:	bf00      	nop
 8007c96:	e7fe      	b.n	8007c96 <vTaskSwitchContext+0x3e>
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	60fb      	str	r3, [r7, #12]
 8007c9e:	491b      	ldr	r1, [pc, #108]	; (8007d0c <vTaskSwitchContext+0xb4>)
 8007ca0:	68fa      	ldr	r2, [r7, #12]
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	4413      	add	r3, r2
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	440b      	add	r3, r1
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d0e4      	beq.n	8007c7c <vTaskSwitchContext+0x24>
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	4413      	add	r3, r2
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	4a13      	ldr	r2, [pc, #76]	; (8007d0c <vTaskSwitchContext+0xb4>)
 8007cbe:	4413      	add	r3, r2
 8007cc0:	60bb      	str	r3, [r7, #8]
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	685a      	ldr	r2, [r3, #4]
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	605a      	str	r2, [r3, #4]
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	685a      	ldr	r2, [r3, #4]
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	3308      	adds	r3, #8
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d104      	bne.n	8007ce2 <vTaskSwitchContext+0x8a>
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	685a      	ldr	r2, [r3, #4]
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	605a      	str	r2, [r3, #4]
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	4a09      	ldr	r2, [pc, #36]	; (8007d10 <vTaskSwitchContext+0xb8>)
 8007cea:	6013      	str	r3, [r2, #0]
 8007cec:	4a06      	ldr	r2, [pc, #24]	; (8007d08 <vTaskSwitchContext+0xb0>)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6013      	str	r3, [r2, #0]
}
 8007cf2:	bf00      	nop
 8007cf4:	3714      	adds	r7, #20
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr
 8007cfe:	bf00      	nop
 8007d00:	20000c68 	.word	0x20000c68
 8007d04:	20000c54 	.word	0x20000c54
 8007d08:	20000c48 	.word	0x20000c48
 8007d0c:	20000770 	.word	0x20000770
 8007d10:	2000076c 	.word	0x2000076c

08007d14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d10a      	bne.n	8007d3a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d28:	f383 8811 	msr	BASEPRI, r3
 8007d2c:	f3bf 8f6f 	isb	sy
 8007d30:	f3bf 8f4f 	dsb	sy
 8007d34:	60fb      	str	r3, [r7, #12]
}
 8007d36:	bf00      	nop
 8007d38:	e7fe      	b.n	8007d38 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d3a:	4b07      	ldr	r3, [pc, #28]	; (8007d58 <vTaskPlaceOnEventList+0x44>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	3318      	adds	r3, #24
 8007d40:	4619      	mov	r1, r3
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f7fe fd91 	bl	800686a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007d48:	2101      	movs	r1, #1
 8007d4a:	6838      	ldr	r0, [r7, #0]
 8007d4c:	f000 fa7c 	bl	8008248 <prvAddCurrentTaskToDelayedList>
}
 8007d50:	bf00      	nop
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	2000076c 	.word	0x2000076c

08007d5c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b086      	sub	sp, #24
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d10a      	bne.n	8007d84 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d72:	f383 8811 	msr	BASEPRI, r3
 8007d76:	f3bf 8f6f 	isb	sy
 8007d7a:	f3bf 8f4f 	dsb	sy
 8007d7e:	617b      	str	r3, [r7, #20]
}
 8007d80:	bf00      	nop
 8007d82:	e7fe      	b.n	8007d82 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d84:	4b0a      	ldr	r3, [pc, #40]	; (8007db0 <vTaskPlaceOnEventListRestricted+0x54>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	3318      	adds	r3, #24
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f7fe fd48 	bl	8006822 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d002      	beq.n	8007d9e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007d98:	f04f 33ff 	mov.w	r3, #4294967295
 8007d9c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007d9e:	6879      	ldr	r1, [r7, #4]
 8007da0:	68b8      	ldr	r0, [r7, #8]
 8007da2:	f000 fa51 	bl	8008248 <prvAddCurrentTaskToDelayedList>
	}
 8007da6:	bf00      	nop
 8007da8:	3718      	adds	r7, #24
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	2000076c 	.word	0x2000076c

08007db4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b086      	sub	sp, #24
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d10a      	bne.n	8007de0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	60fb      	str	r3, [r7, #12]
}
 8007ddc:	bf00      	nop
 8007dde:	e7fe      	b.n	8007dde <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	3318      	adds	r3, #24
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7fe fd79 	bl	80068dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dea:	4b1e      	ldr	r3, [pc, #120]	; (8007e64 <xTaskRemoveFromEventList+0xb0>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d11d      	bne.n	8007e2e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	3304      	adds	r3, #4
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7fe fd70 	bl	80068dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e00:	4b19      	ldr	r3, [pc, #100]	; (8007e68 <xTaskRemoveFromEventList+0xb4>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d903      	bls.n	8007e10 <xTaskRemoveFromEventList+0x5c>
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e0c:	4a16      	ldr	r2, [pc, #88]	; (8007e68 <xTaskRemoveFromEventList+0xb4>)
 8007e0e:	6013      	str	r3, [r2, #0]
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e14:	4613      	mov	r3, r2
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	4413      	add	r3, r2
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	4a13      	ldr	r2, [pc, #76]	; (8007e6c <xTaskRemoveFromEventList+0xb8>)
 8007e1e:	441a      	add	r2, r3
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	3304      	adds	r3, #4
 8007e24:	4619      	mov	r1, r3
 8007e26:	4610      	mov	r0, r2
 8007e28:	f7fe fcfb 	bl	8006822 <vListInsertEnd>
 8007e2c:	e005      	b.n	8007e3a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	3318      	adds	r3, #24
 8007e32:	4619      	mov	r1, r3
 8007e34:	480e      	ldr	r0, [pc, #56]	; (8007e70 <xTaskRemoveFromEventList+0xbc>)
 8007e36:	f7fe fcf4 	bl	8006822 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e3e:	4b0d      	ldr	r3, [pc, #52]	; (8007e74 <xTaskRemoveFromEventList+0xc0>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d905      	bls.n	8007e54 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007e4c:	4b0a      	ldr	r3, [pc, #40]	; (8007e78 <xTaskRemoveFromEventList+0xc4>)
 8007e4e:	2201      	movs	r2, #1
 8007e50:	601a      	str	r2, [r3, #0]
 8007e52:	e001      	b.n	8007e58 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007e54:	2300      	movs	r3, #0
 8007e56:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007e58:	697b      	ldr	r3, [r7, #20]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3718      	adds	r7, #24
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	20000c68 	.word	0x20000c68
 8007e68:	20000c48 	.word	0x20000c48
 8007e6c:	20000770 	.word	0x20000770
 8007e70:	20000c00 	.word	0x20000c00
 8007e74:	2000076c 	.word	0x2000076c
 8007e78:	20000c54 	.word	0x20000c54

08007e7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e84:	4b06      	ldr	r3, [pc, #24]	; (8007ea0 <vTaskInternalSetTimeOutState+0x24>)
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e8c:	4b05      	ldr	r3, [pc, #20]	; (8007ea4 <vTaskInternalSetTimeOutState+0x28>)
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	605a      	str	r2, [r3, #4]
}
 8007e94:	bf00      	nop
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr
 8007ea0:	20000c58 	.word	0x20000c58
 8007ea4:	20000c44 	.word	0x20000c44

08007ea8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b088      	sub	sp, #32
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d10a      	bne.n	8007ece <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ebc:	f383 8811 	msr	BASEPRI, r3
 8007ec0:	f3bf 8f6f 	isb	sy
 8007ec4:	f3bf 8f4f 	dsb	sy
 8007ec8:	613b      	str	r3, [r7, #16]
}
 8007eca:	bf00      	nop
 8007ecc:	e7fe      	b.n	8007ecc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d10a      	bne.n	8007eea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed8:	f383 8811 	msr	BASEPRI, r3
 8007edc:	f3bf 8f6f 	isb	sy
 8007ee0:	f3bf 8f4f 	dsb	sy
 8007ee4:	60fb      	str	r3, [r7, #12]
}
 8007ee6:	bf00      	nop
 8007ee8:	e7fe      	b.n	8007ee8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007eea:	f000 fe7b 	bl	8008be4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007eee:	4b1d      	ldr	r3, [pc, #116]	; (8007f64 <xTaskCheckForTimeOut+0xbc>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	69ba      	ldr	r2, [r7, #24]
 8007efa:	1ad3      	subs	r3, r2, r3
 8007efc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f06:	d102      	bne.n	8007f0e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	61fb      	str	r3, [r7, #28]
 8007f0c:	e023      	b.n	8007f56 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	4b15      	ldr	r3, [pc, #84]	; (8007f68 <xTaskCheckForTimeOut+0xc0>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d007      	beq.n	8007f2a <xTaskCheckForTimeOut+0x82>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	69ba      	ldr	r2, [r7, #24]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d302      	bcc.n	8007f2a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007f24:	2301      	movs	r3, #1
 8007f26:	61fb      	str	r3, [r7, #28]
 8007f28:	e015      	b.n	8007f56 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	697a      	ldr	r2, [r7, #20]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d20b      	bcs.n	8007f4c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	1ad2      	subs	r2, r2, r3
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f7ff ff9b 	bl	8007e7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007f46:	2300      	movs	r3, #0
 8007f48:	61fb      	str	r3, [r7, #28]
 8007f4a:	e004      	b.n	8007f56 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007f52:	2301      	movs	r3, #1
 8007f54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007f56:	f000 fe75 	bl	8008c44 <vPortExitCritical>

	return xReturn;
 8007f5a:	69fb      	ldr	r3, [r7, #28]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3720      	adds	r7, #32
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	20000c44 	.word	0x20000c44
 8007f68:	20000c58 	.word	0x20000c58

08007f6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007f70:	4b03      	ldr	r3, [pc, #12]	; (8007f80 <vTaskMissedYield+0x14>)
 8007f72:	2201      	movs	r2, #1
 8007f74:	601a      	str	r2, [r3, #0]
}
 8007f76:	bf00      	nop
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr
 8007f80:	20000c54 	.word	0x20000c54

08007f84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007f8c:	f000 f852 	bl	8008034 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f90:	4b06      	ldr	r3, [pc, #24]	; (8007fac <prvIdleTask+0x28>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d9f9      	bls.n	8007f8c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007f98:	4b05      	ldr	r3, [pc, #20]	; (8007fb0 <prvIdleTask+0x2c>)
 8007f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f9e:	601a      	str	r2, [r3, #0]
 8007fa0:	f3bf 8f4f 	dsb	sy
 8007fa4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007fa8:	e7f0      	b.n	8007f8c <prvIdleTask+0x8>
 8007faa:	bf00      	nop
 8007fac:	20000770 	.word	0x20000770
 8007fb0:	e000ed04 	.word	0xe000ed04

08007fb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007fba:	2300      	movs	r3, #0
 8007fbc:	607b      	str	r3, [r7, #4]
 8007fbe:	e00c      	b.n	8007fda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	4413      	add	r3, r2
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	4a12      	ldr	r2, [pc, #72]	; (8008014 <prvInitialiseTaskLists+0x60>)
 8007fcc:	4413      	add	r3, r2
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7fe fbfa 	bl	80067c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	607b      	str	r3, [r7, #4]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2b37      	cmp	r3, #55	; 0x37
 8007fde:	d9ef      	bls.n	8007fc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007fe0:	480d      	ldr	r0, [pc, #52]	; (8008018 <prvInitialiseTaskLists+0x64>)
 8007fe2:	f7fe fbf1 	bl	80067c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007fe6:	480d      	ldr	r0, [pc, #52]	; (800801c <prvInitialiseTaskLists+0x68>)
 8007fe8:	f7fe fbee 	bl	80067c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007fec:	480c      	ldr	r0, [pc, #48]	; (8008020 <prvInitialiseTaskLists+0x6c>)
 8007fee:	f7fe fbeb 	bl	80067c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007ff2:	480c      	ldr	r0, [pc, #48]	; (8008024 <prvInitialiseTaskLists+0x70>)
 8007ff4:	f7fe fbe8 	bl	80067c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ff8:	480b      	ldr	r0, [pc, #44]	; (8008028 <prvInitialiseTaskLists+0x74>)
 8007ffa:	f7fe fbe5 	bl	80067c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ffe:	4b0b      	ldr	r3, [pc, #44]	; (800802c <prvInitialiseTaskLists+0x78>)
 8008000:	4a05      	ldr	r2, [pc, #20]	; (8008018 <prvInitialiseTaskLists+0x64>)
 8008002:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008004:	4b0a      	ldr	r3, [pc, #40]	; (8008030 <prvInitialiseTaskLists+0x7c>)
 8008006:	4a05      	ldr	r2, [pc, #20]	; (800801c <prvInitialiseTaskLists+0x68>)
 8008008:	601a      	str	r2, [r3, #0]
}
 800800a:	bf00      	nop
 800800c:	3708      	adds	r7, #8
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	20000770 	.word	0x20000770
 8008018:	20000bd0 	.word	0x20000bd0
 800801c:	20000be4 	.word	0x20000be4
 8008020:	20000c00 	.word	0x20000c00
 8008024:	20000c14 	.word	0x20000c14
 8008028:	20000c2c 	.word	0x20000c2c
 800802c:	20000bf8 	.word	0x20000bf8
 8008030:	20000bfc 	.word	0x20000bfc

08008034 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800803a:	e019      	b.n	8008070 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800803c:	f000 fdd2 	bl	8008be4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008040:	4b10      	ldr	r3, [pc, #64]	; (8008084 <prvCheckTasksWaitingTermination+0x50>)
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	3304      	adds	r3, #4
 800804c:	4618      	mov	r0, r3
 800804e:	f7fe fc45 	bl	80068dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008052:	4b0d      	ldr	r3, [pc, #52]	; (8008088 <prvCheckTasksWaitingTermination+0x54>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	3b01      	subs	r3, #1
 8008058:	4a0b      	ldr	r2, [pc, #44]	; (8008088 <prvCheckTasksWaitingTermination+0x54>)
 800805a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800805c:	4b0b      	ldr	r3, [pc, #44]	; (800808c <prvCheckTasksWaitingTermination+0x58>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	3b01      	subs	r3, #1
 8008062:	4a0a      	ldr	r2, [pc, #40]	; (800808c <prvCheckTasksWaitingTermination+0x58>)
 8008064:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008066:	f000 fded 	bl	8008c44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 f810 	bl	8008090 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008070:	4b06      	ldr	r3, [pc, #24]	; (800808c <prvCheckTasksWaitingTermination+0x58>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d1e1      	bne.n	800803c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008078:	bf00      	nop
 800807a:	bf00      	nop
 800807c:	3708      	adds	r7, #8
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	20000c14 	.word	0x20000c14
 8008088:	20000c40 	.word	0x20000c40
 800808c:	20000c28 	.word	0x20000c28

08008090 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d108      	bne.n	80080b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080a6:	4618      	mov	r0, r3
 80080a8:	f000 ff8a 	bl	8008fc0 <vPortFree>
				vPortFree( pxTCB );
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 ff87 	bl	8008fc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80080b2:	e018      	b.n	80080e6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d103      	bne.n	80080c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 ff7e 	bl	8008fc0 <vPortFree>
	}
 80080c4:	e00f      	b.n	80080e6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	d00a      	beq.n	80080e6 <prvDeleteTCB+0x56>
	__asm volatile
 80080d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d4:	f383 8811 	msr	BASEPRI, r3
 80080d8:	f3bf 8f6f 	isb	sy
 80080dc:	f3bf 8f4f 	dsb	sy
 80080e0:	60fb      	str	r3, [r7, #12]
}
 80080e2:	bf00      	nop
 80080e4:	e7fe      	b.n	80080e4 <prvDeleteTCB+0x54>
	}
 80080e6:	bf00      	nop
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
	...

080080f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080f6:	4b0c      	ldr	r3, [pc, #48]	; (8008128 <prvResetNextTaskUnblockTime+0x38>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d104      	bne.n	800810a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008100:	4b0a      	ldr	r3, [pc, #40]	; (800812c <prvResetNextTaskUnblockTime+0x3c>)
 8008102:	f04f 32ff 	mov.w	r2, #4294967295
 8008106:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008108:	e008      	b.n	800811c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800810a:	4b07      	ldr	r3, [pc, #28]	; (8008128 <prvResetNextTaskUnblockTime+0x38>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	4a04      	ldr	r2, [pc, #16]	; (800812c <prvResetNextTaskUnblockTime+0x3c>)
 800811a:	6013      	str	r3, [r2, #0]
}
 800811c:	bf00      	nop
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr
 8008128:	20000bf8 	.word	0x20000bf8
 800812c:	20000c60 	.word	0x20000c60

08008130 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008136:	4b0b      	ldr	r3, [pc, #44]	; (8008164 <xTaskGetSchedulerState+0x34>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d102      	bne.n	8008144 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800813e:	2301      	movs	r3, #1
 8008140:	607b      	str	r3, [r7, #4]
 8008142:	e008      	b.n	8008156 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008144:	4b08      	ldr	r3, [pc, #32]	; (8008168 <xTaskGetSchedulerState+0x38>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d102      	bne.n	8008152 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800814c:	2302      	movs	r3, #2
 800814e:	607b      	str	r3, [r7, #4]
 8008150:	e001      	b.n	8008156 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008152:	2300      	movs	r3, #0
 8008154:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008156:	687b      	ldr	r3, [r7, #4]
	}
 8008158:	4618      	mov	r0, r3
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr
 8008164:	20000c4c 	.word	0x20000c4c
 8008168:	20000c68 	.word	0x20000c68

0800816c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800816c:	b580      	push	{r7, lr}
 800816e:	b086      	sub	sp, #24
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008178:	2300      	movs	r3, #0
 800817a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d056      	beq.n	8008230 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008182:	4b2e      	ldr	r3, [pc, #184]	; (800823c <xTaskPriorityDisinherit+0xd0>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	693a      	ldr	r2, [r7, #16]
 8008188:	429a      	cmp	r2, r3
 800818a:	d00a      	beq.n	80081a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800818c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008190:	f383 8811 	msr	BASEPRI, r3
 8008194:	f3bf 8f6f 	isb	sy
 8008198:	f3bf 8f4f 	dsb	sy
 800819c:	60fb      	str	r3, [r7, #12]
}
 800819e:	bf00      	nop
 80081a0:	e7fe      	b.n	80081a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d10a      	bne.n	80081c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80081aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ae:	f383 8811 	msr	BASEPRI, r3
 80081b2:	f3bf 8f6f 	isb	sy
 80081b6:	f3bf 8f4f 	dsb	sy
 80081ba:	60bb      	str	r3, [r7, #8]
}
 80081bc:	bf00      	nop
 80081be:	e7fe      	b.n	80081be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081c4:	1e5a      	subs	r2, r3, #1
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d02c      	beq.n	8008230 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d128      	bne.n	8008230 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	3304      	adds	r3, #4
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7fe fb7a 	bl	80068dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008200:	4b0f      	ldr	r3, [pc, #60]	; (8008240 <xTaskPriorityDisinherit+0xd4>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	429a      	cmp	r2, r3
 8008206:	d903      	bls.n	8008210 <xTaskPriorityDisinherit+0xa4>
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820c:	4a0c      	ldr	r2, [pc, #48]	; (8008240 <xTaskPriorityDisinherit+0xd4>)
 800820e:	6013      	str	r3, [r2, #0]
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008214:	4613      	mov	r3, r2
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	4413      	add	r3, r2
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	4a09      	ldr	r2, [pc, #36]	; (8008244 <xTaskPriorityDisinherit+0xd8>)
 800821e:	441a      	add	r2, r3
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	3304      	adds	r3, #4
 8008224:	4619      	mov	r1, r3
 8008226:	4610      	mov	r0, r2
 8008228:	f7fe fafb 	bl	8006822 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800822c:	2301      	movs	r3, #1
 800822e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008230:	697b      	ldr	r3, [r7, #20]
	}
 8008232:	4618      	mov	r0, r3
 8008234:	3718      	adds	r7, #24
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	2000076c 	.word	0x2000076c
 8008240:	20000c48 	.word	0x20000c48
 8008244:	20000770 	.word	0x20000770

08008248 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008252:	4b21      	ldr	r3, [pc, #132]	; (80082d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008258:	4b20      	ldr	r3, [pc, #128]	; (80082dc <prvAddCurrentTaskToDelayedList+0x94>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	3304      	adds	r3, #4
 800825e:	4618      	mov	r0, r3
 8008260:	f7fe fb3c 	bl	80068dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800826a:	d10a      	bne.n	8008282 <prvAddCurrentTaskToDelayedList+0x3a>
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d007      	beq.n	8008282 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008272:	4b1a      	ldr	r3, [pc, #104]	; (80082dc <prvAddCurrentTaskToDelayedList+0x94>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	3304      	adds	r3, #4
 8008278:	4619      	mov	r1, r3
 800827a:	4819      	ldr	r0, [pc, #100]	; (80082e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800827c:	f7fe fad1 	bl	8006822 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008280:	e026      	b.n	80082d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008282:	68fa      	ldr	r2, [r7, #12]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4413      	add	r3, r2
 8008288:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800828a:	4b14      	ldr	r3, [pc, #80]	; (80082dc <prvAddCurrentTaskToDelayedList+0x94>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68ba      	ldr	r2, [r7, #8]
 8008290:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008292:	68ba      	ldr	r2, [r7, #8]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	429a      	cmp	r2, r3
 8008298:	d209      	bcs.n	80082ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800829a:	4b12      	ldr	r3, [pc, #72]	; (80082e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	4b0f      	ldr	r3, [pc, #60]	; (80082dc <prvAddCurrentTaskToDelayedList+0x94>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	3304      	adds	r3, #4
 80082a4:	4619      	mov	r1, r3
 80082a6:	4610      	mov	r0, r2
 80082a8:	f7fe fadf 	bl	800686a <vListInsert>
}
 80082ac:	e010      	b.n	80082d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082ae:	4b0e      	ldr	r3, [pc, #56]	; (80082e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	4b0a      	ldr	r3, [pc, #40]	; (80082dc <prvAddCurrentTaskToDelayedList+0x94>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	3304      	adds	r3, #4
 80082b8:	4619      	mov	r1, r3
 80082ba:	4610      	mov	r0, r2
 80082bc:	f7fe fad5 	bl	800686a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80082c0:	4b0a      	ldr	r3, [pc, #40]	; (80082ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68ba      	ldr	r2, [r7, #8]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d202      	bcs.n	80082d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80082ca:	4a08      	ldr	r2, [pc, #32]	; (80082ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	6013      	str	r3, [r2, #0]
}
 80082d0:	bf00      	nop
 80082d2:	3710      	adds	r7, #16
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	20000c44 	.word	0x20000c44
 80082dc:	2000076c 	.word	0x2000076c
 80082e0:	20000c2c 	.word	0x20000c2c
 80082e4:	20000bfc 	.word	0x20000bfc
 80082e8:	20000bf8 	.word	0x20000bf8
 80082ec:	20000c60 	.word	0x20000c60

080082f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b08a      	sub	sp, #40	; 0x28
 80082f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80082f6:	2300      	movs	r3, #0
 80082f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80082fa:	f000 fb07 	bl	800890c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80082fe:	4b1c      	ldr	r3, [pc, #112]	; (8008370 <xTimerCreateTimerTask+0x80>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d021      	beq.n	800834a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008306:	2300      	movs	r3, #0
 8008308:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800830a:	2300      	movs	r3, #0
 800830c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800830e:	1d3a      	adds	r2, r7, #4
 8008310:	f107 0108 	add.w	r1, r7, #8
 8008314:	f107 030c 	add.w	r3, r7, #12
 8008318:	4618      	mov	r0, r3
 800831a:	f7fe fa3b 	bl	8006794 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800831e:	6879      	ldr	r1, [r7, #4]
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	9202      	str	r2, [sp, #8]
 8008326:	9301      	str	r3, [sp, #4]
 8008328:	2302      	movs	r3, #2
 800832a:	9300      	str	r3, [sp, #0]
 800832c:	2300      	movs	r3, #0
 800832e:	460a      	mov	r2, r1
 8008330:	4910      	ldr	r1, [pc, #64]	; (8008374 <xTimerCreateTimerTask+0x84>)
 8008332:	4811      	ldr	r0, [pc, #68]	; (8008378 <xTimerCreateTimerTask+0x88>)
 8008334:	f7ff f8de 	bl	80074f4 <xTaskCreateStatic>
 8008338:	4603      	mov	r3, r0
 800833a:	4a10      	ldr	r2, [pc, #64]	; (800837c <xTimerCreateTimerTask+0x8c>)
 800833c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800833e:	4b0f      	ldr	r3, [pc, #60]	; (800837c <xTimerCreateTimerTask+0x8c>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d001      	beq.n	800834a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008346:	2301      	movs	r3, #1
 8008348:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10a      	bne.n	8008366 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008354:	f383 8811 	msr	BASEPRI, r3
 8008358:	f3bf 8f6f 	isb	sy
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	613b      	str	r3, [r7, #16]
}
 8008362:	bf00      	nop
 8008364:	e7fe      	b.n	8008364 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008366:	697b      	ldr	r3, [r7, #20]
}
 8008368:	4618      	mov	r0, r3
 800836a:	3718      	adds	r7, #24
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	20000c9c 	.word	0x20000c9c
 8008374:	08009510 	.word	0x08009510
 8008378:	080084b5 	.word	0x080084b5
 800837c:	20000ca0 	.word	0x20000ca0

08008380 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b08a      	sub	sp, #40	; 0x28
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	607a      	str	r2, [r7, #4]
 800838c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800838e:	2300      	movs	r3, #0
 8008390:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10a      	bne.n	80083ae <xTimerGenericCommand+0x2e>
	__asm volatile
 8008398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839c:	f383 8811 	msr	BASEPRI, r3
 80083a0:	f3bf 8f6f 	isb	sy
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	623b      	str	r3, [r7, #32]
}
 80083aa:	bf00      	nop
 80083ac:	e7fe      	b.n	80083ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80083ae:	4b1a      	ldr	r3, [pc, #104]	; (8008418 <xTimerGenericCommand+0x98>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d02a      	beq.n	800840c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	2b05      	cmp	r3, #5
 80083c6:	dc18      	bgt.n	80083fa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80083c8:	f7ff feb2 	bl	8008130 <xTaskGetSchedulerState>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b02      	cmp	r3, #2
 80083d0:	d109      	bne.n	80083e6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80083d2:	4b11      	ldr	r3, [pc, #68]	; (8008418 <xTimerGenericCommand+0x98>)
 80083d4:	6818      	ldr	r0, [r3, #0]
 80083d6:	f107 0110 	add.w	r1, r7, #16
 80083da:	2300      	movs	r3, #0
 80083dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083de:	f7fe fbe5 	bl	8006bac <xQueueGenericSend>
 80083e2:	6278      	str	r0, [r7, #36]	; 0x24
 80083e4:	e012      	b.n	800840c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80083e6:	4b0c      	ldr	r3, [pc, #48]	; (8008418 <xTimerGenericCommand+0x98>)
 80083e8:	6818      	ldr	r0, [r3, #0]
 80083ea:	f107 0110 	add.w	r1, r7, #16
 80083ee:	2300      	movs	r3, #0
 80083f0:	2200      	movs	r2, #0
 80083f2:	f7fe fbdb 	bl	8006bac <xQueueGenericSend>
 80083f6:	6278      	str	r0, [r7, #36]	; 0x24
 80083f8:	e008      	b.n	800840c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80083fa:	4b07      	ldr	r3, [pc, #28]	; (8008418 <xTimerGenericCommand+0x98>)
 80083fc:	6818      	ldr	r0, [r3, #0]
 80083fe:	f107 0110 	add.w	r1, r7, #16
 8008402:	2300      	movs	r3, #0
 8008404:	683a      	ldr	r2, [r7, #0]
 8008406:	f7fe fccf 	bl	8006da8 <xQueueGenericSendFromISR>
 800840a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800840c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800840e:	4618      	mov	r0, r3
 8008410:	3728      	adds	r7, #40	; 0x28
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	20000c9c 	.word	0x20000c9c

0800841c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b088      	sub	sp, #32
 8008420:	af02      	add	r7, sp, #8
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008426:	4b22      	ldr	r3, [pc, #136]	; (80084b0 <prvProcessExpiredTimer+0x94>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	3304      	adds	r3, #4
 8008434:	4618      	mov	r0, r3
 8008436:	f7fe fa51 	bl	80068dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008440:	f003 0304 	and.w	r3, r3, #4
 8008444:	2b00      	cmp	r3, #0
 8008446:	d022      	beq.n	800848e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	699a      	ldr	r2, [r3, #24]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	18d1      	adds	r1, r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	683a      	ldr	r2, [r7, #0]
 8008454:	6978      	ldr	r0, [r7, #20]
 8008456:	f000 f8d1 	bl	80085fc <prvInsertTimerInActiveList>
 800845a:	4603      	mov	r3, r0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d01f      	beq.n	80084a0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008460:	2300      	movs	r3, #0
 8008462:	9300      	str	r3, [sp, #0]
 8008464:	2300      	movs	r3, #0
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	2100      	movs	r1, #0
 800846a:	6978      	ldr	r0, [r7, #20]
 800846c:	f7ff ff88 	bl	8008380 <xTimerGenericCommand>
 8008470:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d113      	bne.n	80084a0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847c:	f383 8811 	msr	BASEPRI, r3
 8008480:	f3bf 8f6f 	isb	sy
 8008484:	f3bf 8f4f 	dsb	sy
 8008488:	60fb      	str	r3, [r7, #12]
}
 800848a:	bf00      	nop
 800848c:	e7fe      	b.n	800848c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008494:	f023 0301 	bic.w	r3, r3, #1
 8008498:	b2da      	uxtb	r2, r3
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	6a1b      	ldr	r3, [r3, #32]
 80084a4:	6978      	ldr	r0, [r7, #20]
 80084a6:	4798      	blx	r3
}
 80084a8:	bf00      	nop
 80084aa:	3718      	adds	r7, #24
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	20000c94 	.word	0x20000c94

080084b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084bc:	f107 0308 	add.w	r3, r7, #8
 80084c0:	4618      	mov	r0, r3
 80084c2:	f000 f857 	bl	8008574 <prvGetNextExpireTime>
 80084c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	4619      	mov	r1, r3
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f000 f803 	bl	80084d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80084d2:	f000 f8d5 	bl	8008680 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084d6:	e7f1      	b.n	80084bc <prvTimerTask+0x8>

080084d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80084e2:	f7ff fa43 	bl	800796c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084e6:	f107 0308 	add.w	r3, r7, #8
 80084ea:	4618      	mov	r0, r3
 80084ec:	f000 f866 	bl	80085bc <prvSampleTimeNow>
 80084f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d130      	bne.n	800855a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d10a      	bne.n	8008514 <prvProcessTimerOrBlockTask+0x3c>
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	429a      	cmp	r2, r3
 8008504:	d806      	bhi.n	8008514 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008506:	f7ff fa3f 	bl	8007988 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800850a:	68f9      	ldr	r1, [r7, #12]
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f7ff ff85 	bl	800841c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008512:	e024      	b.n	800855e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d008      	beq.n	800852c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800851a:	4b13      	ldr	r3, [pc, #76]	; (8008568 <prvProcessTimerOrBlockTask+0x90>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d101      	bne.n	8008528 <prvProcessTimerOrBlockTask+0x50>
 8008524:	2301      	movs	r3, #1
 8008526:	e000      	b.n	800852a <prvProcessTimerOrBlockTask+0x52>
 8008528:	2300      	movs	r3, #0
 800852a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800852c:	4b0f      	ldr	r3, [pc, #60]	; (800856c <prvProcessTimerOrBlockTask+0x94>)
 800852e:	6818      	ldr	r0, [r3, #0]
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	1ad3      	subs	r3, r2, r3
 8008536:	683a      	ldr	r2, [r7, #0]
 8008538:	4619      	mov	r1, r3
 800853a:	f7fe ffa7 	bl	800748c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800853e:	f7ff fa23 	bl	8007988 <xTaskResumeAll>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d10a      	bne.n	800855e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008548:	4b09      	ldr	r3, [pc, #36]	; (8008570 <prvProcessTimerOrBlockTask+0x98>)
 800854a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800854e:	601a      	str	r2, [r3, #0]
 8008550:	f3bf 8f4f 	dsb	sy
 8008554:	f3bf 8f6f 	isb	sy
}
 8008558:	e001      	b.n	800855e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800855a:	f7ff fa15 	bl	8007988 <xTaskResumeAll>
}
 800855e:	bf00      	nop
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	20000c98 	.word	0x20000c98
 800856c:	20000c9c 	.word	0x20000c9c
 8008570:	e000ed04 	.word	0xe000ed04

08008574 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008574:	b480      	push	{r7}
 8008576:	b085      	sub	sp, #20
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800857c:	4b0e      	ldr	r3, [pc, #56]	; (80085b8 <prvGetNextExpireTime+0x44>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d101      	bne.n	800858a <prvGetNextExpireTime+0x16>
 8008586:	2201      	movs	r2, #1
 8008588:	e000      	b.n	800858c <prvGetNextExpireTime+0x18>
 800858a:	2200      	movs	r2, #0
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d105      	bne.n	80085a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008598:	4b07      	ldr	r3, [pc, #28]	; (80085b8 <prvGetNextExpireTime+0x44>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	60fb      	str	r3, [r7, #12]
 80085a2:	e001      	b.n	80085a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80085a4:	2300      	movs	r3, #0
 80085a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80085a8:	68fb      	ldr	r3, [r7, #12]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3714      	adds	r7, #20
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop
 80085b8:	20000c94 	.word	0x20000c94

080085bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80085c4:	f7ff fa7e 	bl	8007ac4 <xTaskGetTickCount>
 80085c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80085ca:	4b0b      	ldr	r3, [pc, #44]	; (80085f8 <prvSampleTimeNow+0x3c>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d205      	bcs.n	80085e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80085d4:	f000 f936 	bl	8008844 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	601a      	str	r2, [r3, #0]
 80085de:	e002      	b.n	80085e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80085e6:	4a04      	ldr	r2, [pc, #16]	; (80085f8 <prvSampleTimeNow+0x3c>)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80085ec:	68fb      	ldr	r3, [r7, #12]
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3710      	adds	r7, #16
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	20000ca4 	.word	0x20000ca4

080085fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b086      	sub	sp, #24
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	607a      	str	r2, [r7, #4]
 8008608:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800860a:	2300      	movs	r3, #0
 800860c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	68ba      	ldr	r2, [r7, #8]
 8008612:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800861a:	68ba      	ldr	r2, [r7, #8]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	429a      	cmp	r2, r3
 8008620:	d812      	bhi.n	8008648 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	1ad2      	subs	r2, r2, r3
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	699b      	ldr	r3, [r3, #24]
 800862c:	429a      	cmp	r2, r3
 800862e:	d302      	bcc.n	8008636 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008630:	2301      	movs	r3, #1
 8008632:	617b      	str	r3, [r7, #20]
 8008634:	e01b      	b.n	800866e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008636:	4b10      	ldr	r3, [pc, #64]	; (8008678 <prvInsertTimerInActiveList+0x7c>)
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	3304      	adds	r3, #4
 800863e:	4619      	mov	r1, r3
 8008640:	4610      	mov	r0, r2
 8008642:	f7fe f912 	bl	800686a <vListInsert>
 8008646:	e012      	b.n	800866e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	429a      	cmp	r2, r3
 800864e:	d206      	bcs.n	800865e <prvInsertTimerInActiveList+0x62>
 8008650:	68ba      	ldr	r2, [r7, #8]
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	429a      	cmp	r2, r3
 8008656:	d302      	bcc.n	800865e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008658:	2301      	movs	r3, #1
 800865a:	617b      	str	r3, [r7, #20]
 800865c:	e007      	b.n	800866e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800865e:	4b07      	ldr	r3, [pc, #28]	; (800867c <prvInsertTimerInActiveList+0x80>)
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	3304      	adds	r3, #4
 8008666:	4619      	mov	r1, r3
 8008668:	4610      	mov	r0, r2
 800866a:	f7fe f8fe 	bl	800686a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800866e:	697b      	ldr	r3, [r7, #20]
}
 8008670:	4618      	mov	r0, r3
 8008672:	3718      	adds	r7, #24
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	20000c98 	.word	0x20000c98
 800867c:	20000c94 	.word	0x20000c94

08008680 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b08e      	sub	sp, #56	; 0x38
 8008684:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008686:	e0ca      	b.n	800881e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2b00      	cmp	r3, #0
 800868c:	da18      	bge.n	80086c0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800868e:	1d3b      	adds	r3, r7, #4
 8008690:	3304      	adds	r3, #4
 8008692:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008696:	2b00      	cmp	r3, #0
 8008698:	d10a      	bne.n	80086b0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800869a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869e:	f383 8811 	msr	BASEPRI, r3
 80086a2:	f3bf 8f6f 	isb	sy
 80086a6:	f3bf 8f4f 	dsb	sy
 80086aa:	61fb      	str	r3, [r7, #28]
}
 80086ac:	bf00      	nop
 80086ae:	e7fe      	b.n	80086ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80086b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086b6:	6850      	ldr	r0, [r2, #4]
 80086b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086ba:	6892      	ldr	r2, [r2, #8]
 80086bc:	4611      	mov	r1, r2
 80086be:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	f2c0 80aa 	blt.w	800881c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80086cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ce:	695b      	ldr	r3, [r3, #20]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d004      	beq.n	80086de <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d6:	3304      	adds	r3, #4
 80086d8:	4618      	mov	r0, r3
 80086da:	f7fe f8ff 	bl	80068dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80086de:	463b      	mov	r3, r7
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7ff ff6b 	bl	80085bc <prvSampleTimeNow>
 80086e6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2b09      	cmp	r3, #9
 80086ec:	f200 8097 	bhi.w	800881e <prvProcessReceivedCommands+0x19e>
 80086f0:	a201      	add	r2, pc, #4	; (adr r2, 80086f8 <prvProcessReceivedCommands+0x78>)
 80086f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f6:	bf00      	nop
 80086f8:	08008721 	.word	0x08008721
 80086fc:	08008721 	.word	0x08008721
 8008700:	08008721 	.word	0x08008721
 8008704:	08008795 	.word	0x08008795
 8008708:	080087a9 	.word	0x080087a9
 800870c:	080087f3 	.word	0x080087f3
 8008710:	08008721 	.word	0x08008721
 8008714:	08008721 	.word	0x08008721
 8008718:	08008795 	.word	0x08008795
 800871c:	080087a9 	.word	0x080087a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008722:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008726:	f043 0301 	orr.w	r3, r3, #1
 800872a:	b2da      	uxtb	r2, r3
 800872c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008732:	68ba      	ldr	r2, [r7, #8]
 8008734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008736:	699b      	ldr	r3, [r3, #24]
 8008738:	18d1      	adds	r1, r2, r3
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800873e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008740:	f7ff ff5c 	bl	80085fc <prvInsertTimerInActiveList>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d069      	beq.n	800881e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800874a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874c:	6a1b      	ldr	r3, [r3, #32]
 800874e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008750:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008754:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008758:	f003 0304 	and.w	r3, r3, #4
 800875c:	2b00      	cmp	r3, #0
 800875e:	d05e      	beq.n	800881e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008760:	68ba      	ldr	r2, [r7, #8]
 8008762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008764:	699b      	ldr	r3, [r3, #24]
 8008766:	441a      	add	r2, r3
 8008768:	2300      	movs	r3, #0
 800876a:	9300      	str	r3, [sp, #0]
 800876c:	2300      	movs	r3, #0
 800876e:	2100      	movs	r1, #0
 8008770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008772:	f7ff fe05 	bl	8008380 <xTimerGenericCommand>
 8008776:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008778:	6a3b      	ldr	r3, [r7, #32]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d14f      	bne.n	800881e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800877e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008782:	f383 8811 	msr	BASEPRI, r3
 8008786:	f3bf 8f6f 	isb	sy
 800878a:	f3bf 8f4f 	dsb	sy
 800878e:	61bb      	str	r3, [r7, #24]
}
 8008790:	bf00      	nop
 8008792:	e7fe      	b.n	8008792 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008796:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800879a:	f023 0301 	bic.w	r3, r3, #1
 800879e:	b2da      	uxtb	r2, r3
 80087a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80087a6:	e03a      	b.n	800881e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80087a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087ae:	f043 0301 	orr.w	r3, r3, #1
 80087b2:	b2da      	uxtb	r2, r3
 80087b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80087ba:	68ba      	ldr	r2, [r7, #8]
 80087bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80087c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c2:	699b      	ldr	r3, [r3, #24]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d10a      	bne.n	80087de <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80087c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087cc:	f383 8811 	msr	BASEPRI, r3
 80087d0:	f3bf 8f6f 	isb	sy
 80087d4:	f3bf 8f4f 	dsb	sy
 80087d8:	617b      	str	r3, [r7, #20]
}
 80087da:	bf00      	nop
 80087dc:	e7fe      	b.n	80087dc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80087de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e0:	699a      	ldr	r2, [r3, #24]
 80087e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e4:	18d1      	adds	r1, r2, r3
 80087e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087ec:	f7ff ff06 	bl	80085fc <prvInsertTimerInActiveList>
					break;
 80087f0:	e015      	b.n	800881e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80087f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087f8:	f003 0302 	and.w	r3, r3, #2
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d103      	bne.n	8008808 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008800:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008802:	f000 fbdd 	bl	8008fc0 <vPortFree>
 8008806:	e00a      	b.n	800881e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800880e:	f023 0301 	bic.w	r3, r3, #1
 8008812:	b2da      	uxtb	r2, r3
 8008814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008816:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800881a:	e000      	b.n	800881e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800881c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800881e:	4b08      	ldr	r3, [pc, #32]	; (8008840 <prvProcessReceivedCommands+0x1c0>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	1d39      	adds	r1, r7, #4
 8008824:	2200      	movs	r2, #0
 8008826:	4618      	mov	r0, r3
 8008828:	f7fe fb5a 	bl	8006ee0 <xQueueReceive>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	f47f af2a 	bne.w	8008688 <prvProcessReceivedCommands+0x8>
	}
}
 8008834:	bf00      	nop
 8008836:	bf00      	nop
 8008838:	3730      	adds	r7, #48	; 0x30
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	20000c9c 	.word	0x20000c9c

08008844 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b088      	sub	sp, #32
 8008848:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800884a:	e048      	b.n	80088de <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800884c:	4b2d      	ldr	r3, [pc, #180]	; (8008904 <prvSwitchTimerLists+0xc0>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008856:	4b2b      	ldr	r3, [pc, #172]	; (8008904 <prvSwitchTimerLists+0xc0>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	3304      	adds	r3, #4
 8008864:	4618      	mov	r0, r3
 8008866:	f7fe f839 	bl	80068dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6a1b      	ldr	r3, [r3, #32]
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008878:	f003 0304 	and.w	r3, r3, #4
 800887c:	2b00      	cmp	r3, #0
 800887e:	d02e      	beq.n	80088de <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	699b      	ldr	r3, [r3, #24]
 8008884:	693a      	ldr	r2, [r7, #16]
 8008886:	4413      	add	r3, r2
 8008888:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	429a      	cmp	r2, r3
 8008890:	d90e      	bls.n	80088b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	68ba      	ldr	r2, [r7, #8]
 8008896:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800889e:	4b19      	ldr	r3, [pc, #100]	; (8008904 <prvSwitchTimerLists+0xc0>)
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	3304      	adds	r3, #4
 80088a6:	4619      	mov	r1, r3
 80088a8:	4610      	mov	r0, r2
 80088aa:	f7fd ffde 	bl	800686a <vListInsert>
 80088ae:	e016      	b.n	80088de <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80088b0:	2300      	movs	r3, #0
 80088b2:	9300      	str	r3, [sp, #0]
 80088b4:	2300      	movs	r3, #0
 80088b6:	693a      	ldr	r2, [r7, #16]
 80088b8:	2100      	movs	r1, #0
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f7ff fd60 	bl	8008380 <xTimerGenericCommand>
 80088c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d10a      	bne.n	80088de <prvSwitchTimerLists+0x9a>
	__asm volatile
 80088c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088cc:	f383 8811 	msr	BASEPRI, r3
 80088d0:	f3bf 8f6f 	isb	sy
 80088d4:	f3bf 8f4f 	dsb	sy
 80088d8:	603b      	str	r3, [r7, #0]
}
 80088da:	bf00      	nop
 80088dc:	e7fe      	b.n	80088dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80088de:	4b09      	ldr	r3, [pc, #36]	; (8008904 <prvSwitchTimerLists+0xc0>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d1b1      	bne.n	800884c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80088e8:	4b06      	ldr	r3, [pc, #24]	; (8008904 <prvSwitchTimerLists+0xc0>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80088ee:	4b06      	ldr	r3, [pc, #24]	; (8008908 <prvSwitchTimerLists+0xc4>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a04      	ldr	r2, [pc, #16]	; (8008904 <prvSwitchTimerLists+0xc0>)
 80088f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80088f6:	4a04      	ldr	r2, [pc, #16]	; (8008908 <prvSwitchTimerLists+0xc4>)
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	6013      	str	r3, [r2, #0]
}
 80088fc:	bf00      	nop
 80088fe:	3718      	adds	r7, #24
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	20000c94 	.word	0x20000c94
 8008908:	20000c98 	.word	0x20000c98

0800890c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008912:	f000 f967 	bl	8008be4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008916:	4b15      	ldr	r3, [pc, #84]	; (800896c <prvCheckForValidListAndQueue+0x60>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d120      	bne.n	8008960 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800891e:	4814      	ldr	r0, [pc, #80]	; (8008970 <prvCheckForValidListAndQueue+0x64>)
 8008920:	f7fd ff52 	bl	80067c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008924:	4813      	ldr	r0, [pc, #76]	; (8008974 <prvCheckForValidListAndQueue+0x68>)
 8008926:	f7fd ff4f 	bl	80067c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800892a:	4b13      	ldr	r3, [pc, #76]	; (8008978 <prvCheckForValidListAndQueue+0x6c>)
 800892c:	4a10      	ldr	r2, [pc, #64]	; (8008970 <prvCheckForValidListAndQueue+0x64>)
 800892e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008930:	4b12      	ldr	r3, [pc, #72]	; (800897c <prvCheckForValidListAndQueue+0x70>)
 8008932:	4a10      	ldr	r2, [pc, #64]	; (8008974 <prvCheckForValidListAndQueue+0x68>)
 8008934:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008936:	2300      	movs	r3, #0
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	4b11      	ldr	r3, [pc, #68]	; (8008980 <prvCheckForValidListAndQueue+0x74>)
 800893c:	4a11      	ldr	r2, [pc, #68]	; (8008984 <prvCheckForValidListAndQueue+0x78>)
 800893e:	2110      	movs	r1, #16
 8008940:	200a      	movs	r0, #10
 8008942:	f7fe f85d 	bl	8006a00 <xQueueGenericCreateStatic>
 8008946:	4603      	mov	r3, r0
 8008948:	4a08      	ldr	r2, [pc, #32]	; (800896c <prvCheckForValidListAndQueue+0x60>)
 800894a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800894c:	4b07      	ldr	r3, [pc, #28]	; (800896c <prvCheckForValidListAndQueue+0x60>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d005      	beq.n	8008960 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008954:	4b05      	ldr	r3, [pc, #20]	; (800896c <prvCheckForValidListAndQueue+0x60>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	490b      	ldr	r1, [pc, #44]	; (8008988 <prvCheckForValidListAndQueue+0x7c>)
 800895a:	4618      	mov	r0, r3
 800895c:	f7fe fd6c 	bl	8007438 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008960:	f000 f970 	bl	8008c44 <vPortExitCritical>
}
 8008964:	bf00      	nop
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	20000c9c 	.word	0x20000c9c
 8008970:	20000c6c 	.word	0x20000c6c
 8008974:	20000c80 	.word	0x20000c80
 8008978:	20000c94 	.word	0x20000c94
 800897c:	20000c98 	.word	0x20000c98
 8008980:	20000d48 	.word	0x20000d48
 8008984:	20000ca8 	.word	0x20000ca8
 8008988:	08009518 	.word	0x08009518

0800898c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	60b9      	str	r1, [r7, #8]
 8008996:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	3b04      	subs	r3, #4
 800899c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80089a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	3b04      	subs	r3, #4
 80089aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	f023 0201 	bic.w	r2, r3, #1
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	3b04      	subs	r3, #4
 80089ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80089bc:	4a0c      	ldr	r2, [pc, #48]	; (80089f0 <pxPortInitialiseStack+0x64>)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	3b14      	subs	r3, #20
 80089c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	3b04      	subs	r3, #4
 80089d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f06f 0202 	mvn.w	r2, #2
 80089da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	3b20      	subs	r3, #32
 80089e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80089e2:	68fb      	ldr	r3, [r7, #12]
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3714      	adds	r7, #20
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr
 80089f0:	080089f5 	.word	0x080089f5

080089f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80089f4:	b480      	push	{r7}
 80089f6:	b085      	sub	sp, #20
 80089f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80089fa:	2300      	movs	r3, #0
 80089fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80089fe:	4b12      	ldr	r3, [pc, #72]	; (8008a48 <prvTaskExitError+0x54>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a06:	d00a      	beq.n	8008a1e <prvTaskExitError+0x2a>
	__asm volatile
 8008a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0c:	f383 8811 	msr	BASEPRI, r3
 8008a10:	f3bf 8f6f 	isb	sy
 8008a14:	f3bf 8f4f 	dsb	sy
 8008a18:	60fb      	str	r3, [r7, #12]
}
 8008a1a:	bf00      	nop
 8008a1c:	e7fe      	b.n	8008a1c <prvTaskExitError+0x28>
	__asm volatile
 8008a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a22:	f383 8811 	msr	BASEPRI, r3
 8008a26:	f3bf 8f6f 	isb	sy
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	60bb      	str	r3, [r7, #8]
}
 8008a30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008a32:	bf00      	nop
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d0fc      	beq.n	8008a34 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008a3a:	bf00      	nop
 8008a3c:	bf00      	nop
 8008a3e:	3714      	adds	r7, #20
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr
 8008a48:	20000048 	.word	0x20000048
 8008a4c:	00000000 	.word	0x00000000

08008a50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a50:	4b07      	ldr	r3, [pc, #28]	; (8008a70 <pxCurrentTCBConst2>)
 8008a52:	6819      	ldr	r1, [r3, #0]
 8008a54:	6808      	ldr	r0, [r1, #0]
 8008a56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a5a:	f380 8809 	msr	PSP, r0
 8008a5e:	f3bf 8f6f 	isb	sy
 8008a62:	f04f 0000 	mov.w	r0, #0
 8008a66:	f380 8811 	msr	BASEPRI, r0
 8008a6a:	4770      	bx	lr
 8008a6c:	f3af 8000 	nop.w

08008a70 <pxCurrentTCBConst2>:
 8008a70:	2000076c 	.word	0x2000076c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a74:	bf00      	nop
 8008a76:	bf00      	nop

08008a78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a78:	4808      	ldr	r0, [pc, #32]	; (8008a9c <prvPortStartFirstTask+0x24>)
 8008a7a:	6800      	ldr	r0, [r0, #0]
 8008a7c:	6800      	ldr	r0, [r0, #0]
 8008a7e:	f380 8808 	msr	MSP, r0
 8008a82:	f04f 0000 	mov.w	r0, #0
 8008a86:	f380 8814 	msr	CONTROL, r0
 8008a8a:	b662      	cpsie	i
 8008a8c:	b661      	cpsie	f
 8008a8e:	f3bf 8f4f 	dsb	sy
 8008a92:	f3bf 8f6f 	isb	sy
 8008a96:	df00      	svc	0
 8008a98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a9a:	bf00      	nop
 8008a9c:	e000ed08 	.word	0xe000ed08

08008aa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b086      	sub	sp, #24
 8008aa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008aa6:	4b46      	ldr	r3, [pc, #280]	; (8008bc0 <xPortStartScheduler+0x120>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a46      	ldr	r2, [pc, #280]	; (8008bc4 <xPortStartScheduler+0x124>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d10a      	bne.n	8008ac6 <xPortStartScheduler+0x26>
	__asm volatile
 8008ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab4:	f383 8811 	msr	BASEPRI, r3
 8008ab8:	f3bf 8f6f 	isb	sy
 8008abc:	f3bf 8f4f 	dsb	sy
 8008ac0:	613b      	str	r3, [r7, #16]
}
 8008ac2:	bf00      	nop
 8008ac4:	e7fe      	b.n	8008ac4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008ac6:	4b3e      	ldr	r3, [pc, #248]	; (8008bc0 <xPortStartScheduler+0x120>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a3f      	ldr	r2, [pc, #252]	; (8008bc8 <xPortStartScheduler+0x128>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d10a      	bne.n	8008ae6 <xPortStartScheduler+0x46>
	__asm volatile
 8008ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad4:	f383 8811 	msr	BASEPRI, r3
 8008ad8:	f3bf 8f6f 	isb	sy
 8008adc:	f3bf 8f4f 	dsb	sy
 8008ae0:	60fb      	str	r3, [r7, #12]
}
 8008ae2:	bf00      	nop
 8008ae4:	e7fe      	b.n	8008ae4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008ae6:	4b39      	ldr	r3, [pc, #228]	; (8008bcc <xPortStartScheduler+0x12c>)
 8008ae8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	22ff      	movs	r2, #255	; 0xff
 8008af6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008b00:	78fb      	ldrb	r3, [r7, #3]
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008b08:	b2da      	uxtb	r2, r3
 8008b0a:	4b31      	ldr	r3, [pc, #196]	; (8008bd0 <xPortStartScheduler+0x130>)
 8008b0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008b0e:	4b31      	ldr	r3, [pc, #196]	; (8008bd4 <xPortStartScheduler+0x134>)
 8008b10:	2207      	movs	r2, #7
 8008b12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b14:	e009      	b.n	8008b2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008b16:	4b2f      	ldr	r3, [pc, #188]	; (8008bd4 <xPortStartScheduler+0x134>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	4a2d      	ldr	r2, [pc, #180]	; (8008bd4 <xPortStartScheduler+0x134>)
 8008b1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008b20:	78fb      	ldrb	r3, [r7, #3]
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	005b      	lsls	r3, r3, #1
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b2a:	78fb      	ldrb	r3, [r7, #3]
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b32:	2b80      	cmp	r3, #128	; 0x80
 8008b34:	d0ef      	beq.n	8008b16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008b36:	4b27      	ldr	r3, [pc, #156]	; (8008bd4 <xPortStartScheduler+0x134>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f1c3 0307 	rsb	r3, r3, #7
 8008b3e:	2b04      	cmp	r3, #4
 8008b40:	d00a      	beq.n	8008b58 <xPortStartScheduler+0xb8>
	__asm volatile
 8008b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b46:	f383 8811 	msr	BASEPRI, r3
 8008b4a:	f3bf 8f6f 	isb	sy
 8008b4e:	f3bf 8f4f 	dsb	sy
 8008b52:	60bb      	str	r3, [r7, #8]
}
 8008b54:	bf00      	nop
 8008b56:	e7fe      	b.n	8008b56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b58:	4b1e      	ldr	r3, [pc, #120]	; (8008bd4 <xPortStartScheduler+0x134>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	021b      	lsls	r3, r3, #8
 8008b5e:	4a1d      	ldr	r2, [pc, #116]	; (8008bd4 <xPortStartScheduler+0x134>)
 8008b60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b62:	4b1c      	ldr	r3, [pc, #112]	; (8008bd4 <xPortStartScheduler+0x134>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b6a:	4a1a      	ldr	r2, [pc, #104]	; (8008bd4 <xPortStartScheduler+0x134>)
 8008b6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	b2da      	uxtb	r2, r3
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b76:	4b18      	ldr	r3, [pc, #96]	; (8008bd8 <xPortStartScheduler+0x138>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a17      	ldr	r2, [pc, #92]	; (8008bd8 <xPortStartScheduler+0x138>)
 8008b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b82:	4b15      	ldr	r3, [pc, #84]	; (8008bd8 <xPortStartScheduler+0x138>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a14      	ldr	r2, [pc, #80]	; (8008bd8 <xPortStartScheduler+0x138>)
 8008b88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008b8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b8e:	f000 f8dd 	bl	8008d4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b92:	4b12      	ldr	r3, [pc, #72]	; (8008bdc <xPortStartScheduler+0x13c>)
 8008b94:	2200      	movs	r2, #0
 8008b96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b98:	f000 f8fc 	bl	8008d94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b9c:	4b10      	ldr	r3, [pc, #64]	; (8008be0 <xPortStartScheduler+0x140>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a0f      	ldr	r2, [pc, #60]	; (8008be0 <xPortStartScheduler+0x140>)
 8008ba2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008ba6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008ba8:	f7ff ff66 	bl	8008a78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008bac:	f7ff f854 	bl	8007c58 <vTaskSwitchContext>
	prvTaskExitError();
 8008bb0:	f7ff ff20 	bl	80089f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3718      	adds	r7, #24
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	e000ed00 	.word	0xe000ed00
 8008bc4:	410fc271 	.word	0x410fc271
 8008bc8:	410fc270 	.word	0x410fc270
 8008bcc:	e000e400 	.word	0xe000e400
 8008bd0:	20000d98 	.word	0x20000d98
 8008bd4:	20000d9c 	.word	0x20000d9c
 8008bd8:	e000ed20 	.word	0xe000ed20
 8008bdc:	20000048 	.word	0x20000048
 8008be0:	e000ef34 	.word	0xe000ef34

08008be4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
	__asm volatile
 8008bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bee:	f383 8811 	msr	BASEPRI, r3
 8008bf2:	f3bf 8f6f 	isb	sy
 8008bf6:	f3bf 8f4f 	dsb	sy
 8008bfa:	607b      	str	r3, [r7, #4]
}
 8008bfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008bfe:	4b0f      	ldr	r3, [pc, #60]	; (8008c3c <vPortEnterCritical+0x58>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	3301      	adds	r3, #1
 8008c04:	4a0d      	ldr	r2, [pc, #52]	; (8008c3c <vPortEnterCritical+0x58>)
 8008c06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008c08:	4b0c      	ldr	r3, [pc, #48]	; (8008c3c <vPortEnterCritical+0x58>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d10f      	bne.n	8008c30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008c10:	4b0b      	ldr	r3, [pc, #44]	; (8008c40 <vPortEnterCritical+0x5c>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00a      	beq.n	8008c30 <vPortEnterCritical+0x4c>
	__asm volatile
 8008c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1e:	f383 8811 	msr	BASEPRI, r3
 8008c22:	f3bf 8f6f 	isb	sy
 8008c26:	f3bf 8f4f 	dsb	sy
 8008c2a:	603b      	str	r3, [r7, #0]
}
 8008c2c:	bf00      	nop
 8008c2e:	e7fe      	b.n	8008c2e <vPortEnterCritical+0x4a>
	}
}
 8008c30:	bf00      	nop
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr
 8008c3c:	20000048 	.word	0x20000048
 8008c40:	e000ed04 	.word	0xe000ed04

08008c44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c4a:	4b12      	ldr	r3, [pc, #72]	; (8008c94 <vPortExitCritical+0x50>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d10a      	bne.n	8008c68 <vPortExitCritical+0x24>
	__asm volatile
 8008c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c56:	f383 8811 	msr	BASEPRI, r3
 8008c5a:	f3bf 8f6f 	isb	sy
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	607b      	str	r3, [r7, #4]
}
 8008c64:	bf00      	nop
 8008c66:	e7fe      	b.n	8008c66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008c68:	4b0a      	ldr	r3, [pc, #40]	; (8008c94 <vPortExitCritical+0x50>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	4a09      	ldr	r2, [pc, #36]	; (8008c94 <vPortExitCritical+0x50>)
 8008c70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c72:	4b08      	ldr	r3, [pc, #32]	; (8008c94 <vPortExitCritical+0x50>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d105      	bne.n	8008c86 <vPortExitCritical+0x42>
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	f383 8811 	msr	BASEPRI, r3
}
 8008c84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c86:	bf00      	nop
 8008c88:	370c      	adds	r7, #12
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr
 8008c92:	bf00      	nop
 8008c94:	20000048 	.word	0x20000048
	...

08008ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ca0:	f3ef 8009 	mrs	r0, PSP
 8008ca4:	f3bf 8f6f 	isb	sy
 8008ca8:	4b15      	ldr	r3, [pc, #84]	; (8008d00 <pxCurrentTCBConst>)
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	f01e 0f10 	tst.w	lr, #16
 8008cb0:	bf08      	it	eq
 8008cb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008cb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cba:	6010      	str	r0, [r2, #0]
 8008cbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008cc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008cc4:	f380 8811 	msr	BASEPRI, r0
 8008cc8:	f3bf 8f4f 	dsb	sy
 8008ccc:	f3bf 8f6f 	isb	sy
 8008cd0:	f7fe ffc2 	bl	8007c58 <vTaskSwitchContext>
 8008cd4:	f04f 0000 	mov.w	r0, #0
 8008cd8:	f380 8811 	msr	BASEPRI, r0
 8008cdc:	bc09      	pop	{r0, r3}
 8008cde:	6819      	ldr	r1, [r3, #0]
 8008ce0:	6808      	ldr	r0, [r1, #0]
 8008ce2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce6:	f01e 0f10 	tst.w	lr, #16
 8008cea:	bf08      	it	eq
 8008cec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008cf0:	f380 8809 	msr	PSP, r0
 8008cf4:	f3bf 8f6f 	isb	sy
 8008cf8:	4770      	bx	lr
 8008cfa:	bf00      	nop
 8008cfc:	f3af 8000 	nop.w

08008d00 <pxCurrentTCBConst>:
 8008d00:	2000076c 	.word	0x2000076c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008d04:	bf00      	nop
 8008d06:	bf00      	nop

08008d08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d12:	f383 8811 	msr	BASEPRI, r3
 8008d16:	f3bf 8f6f 	isb	sy
 8008d1a:	f3bf 8f4f 	dsb	sy
 8008d1e:	607b      	str	r3, [r7, #4]
}
 8008d20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008d22:	f7fe fedf 	bl	8007ae4 <xTaskIncrementTick>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d003      	beq.n	8008d34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008d2c:	4b06      	ldr	r3, [pc, #24]	; (8008d48 <xPortSysTickHandler+0x40>)
 8008d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d32:	601a      	str	r2, [r3, #0]
 8008d34:	2300      	movs	r3, #0
 8008d36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	f383 8811 	msr	BASEPRI, r3
}
 8008d3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d40:	bf00      	nop
 8008d42:	3708      	adds	r7, #8
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	e000ed04 	.word	0xe000ed04

08008d4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d50:	4b0b      	ldr	r3, [pc, #44]	; (8008d80 <vPortSetupTimerInterrupt+0x34>)
 8008d52:	2200      	movs	r2, #0
 8008d54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d56:	4b0b      	ldr	r3, [pc, #44]	; (8008d84 <vPortSetupTimerInterrupt+0x38>)
 8008d58:	2200      	movs	r2, #0
 8008d5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d5c:	4b0a      	ldr	r3, [pc, #40]	; (8008d88 <vPortSetupTimerInterrupt+0x3c>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a0a      	ldr	r2, [pc, #40]	; (8008d8c <vPortSetupTimerInterrupt+0x40>)
 8008d62:	fba2 2303 	umull	r2, r3, r2, r3
 8008d66:	099b      	lsrs	r3, r3, #6
 8008d68:	4a09      	ldr	r2, [pc, #36]	; (8008d90 <vPortSetupTimerInterrupt+0x44>)
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d6e:	4b04      	ldr	r3, [pc, #16]	; (8008d80 <vPortSetupTimerInterrupt+0x34>)
 8008d70:	2207      	movs	r2, #7
 8008d72:	601a      	str	r2, [r3, #0]
}
 8008d74:	bf00      	nop
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr
 8008d7e:	bf00      	nop
 8008d80:	e000e010 	.word	0xe000e010
 8008d84:	e000e018 	.word	0xe000e018
 8008d88:	20000018 	.word	0x20000018
 8008d8c:	10624dd3 	.word	0x10624dd3
 8008d90:	e000e014 	.word	0xe000e014

08008d94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008da4 <vPortEnableVFP+0x10>
 8008d98:	6801      	ldr	r1, [r0, #0]
 8008d9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008d9e:	6001      	str	r1, [r0, #0]
 8008da0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008da2:	bf00      	nop
 8008da4:	e000ed88 	.word	0xe000ed88

08008da8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008da8:	b480      	push	{r7}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008dae:	f3ef 8305 	mrs	r3, IPSR
 8008db2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2b0f      	cmp	r3, #15
 8008db8:	d914      	bls.n	8008de4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008dba:	4a17      	ldr	r2, [pc, #92]	; (8008e18 <vPortValidateInterruptPriority+0x70>)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	4413      	add	r3, r2
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008dc4:	4b15      	ldr	r3, [pc, #84]	; (8008e1c <vPortValidateInterruptPriority+0x74>)
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	7afa      	ldrb	r2, [r7, #11]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d20a      	bcs.n	8008de4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd2:	f383 8811 	msr	BASEPRI, r3
 8008dd6:	f3bf 8f6f 	isb	sy
 8008dda:	f3bf 8f4f 	dsb	sy
 8008dde:	607b      	str	r3, [r7, #4]
}
 8008de0:	bf00      	nop
 8008de2:	e7fe      	b.n	8008de2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008de4:	4b0e      	ldr	r3, [pc, #56]	; (8008e20 <vPortValidateInterruptPriority+0x78>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008dec:	4b0d      	ldr	r3, [pc, #52]	; (8008e24 <vPortValidateInterruptPriority+0x7c>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d90a      	bls.n	8008e0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df8:	f383 8811 	msr	BASEPRI, r3
 8008dfc:	f3bf 8f6f 	isb	sy
 8008e00:	f3bf 8f4f 	dsb	sy
 8008e04:	603b      	str	r3, [r7, #0]
}
 8008e06:	bf00      	nop
 8008e08:	e7fe      	b.n	8008e08 <vPortValidateInterruptPriority+0x60>
	}
 8008e0a:	bf00      	nop
 8008e0c:	3714      	adds	r7, #20
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr
 8008e16:	bf00      	nop
 8008e18:	e000e3f0 	.word	0xe000e3f0
 8008e1c:	20000d98 	.word	0x20000d98
 8008e20:	e000ed0c 	.word	0xe000ed0c
 8008e24:	20000d9c 	.word	0x20000d9c

08008e28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b08a      	sub	sp, #40	; 0x28
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008e30:	2300      	movs	r3, #0
 8008e32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008e34:	f7fe fd9a 	bl	800796c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008e38:	4b5b      	ldr	r3, [pc, #364]	; (8008fa8 <pvPortMalloc+0x180>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d101      	bne.n	8008e44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e40:	f000 f920 	bl	8009084 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e44:	4b59      	ldr	r3, [pc, #356]	; (8008fac <pvPortMalloc+0x184>)
 8008e46:	681a      	ldr	r2, [r3, #0]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4013      	ands	r3, r2
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	f040 8093 	bne.w	8008f78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d01d      	beq.n	8008e94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008e58:	2208      	movs	r2, #8
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f003 0307 	and.w	r3, r3, #7
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d014      	beq.n	8008e94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f023 0307 	bic.w	r3, r3, #7
 8008e70:	3308      	adds	r3, #8
 8008e72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f003 0307 	and.w	r3, r3, #7
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00a      	beq.n	8008e94 <pvPortMalloc+0x6c>
	__asm volatile
 8008e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e82:	f383 8811 	msr	BASEPRI, r3
 8008e86:	f3bf 8f6f 	isb	sy
 8008e8a:	f3bf 8f4f 	dsb	sy
 8008e8e:	617b      	str	r3, [r7, #20]
}
 8008e90:	bf00      	nop
 8008e92:	e7fe      	b.n	8008e92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d06e      	beq.n	8008f78 <pvPortMalloc+0x150>
 8008e9a:	4b45      	ldr	r3, [pc, #276]	; (8008fb0 <pvPortMalloc+0x188>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d869      	bhi.n	8008f78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008ea4:	4b43      	ldr	r3, [pc, #268]	; (8008fb4 <pvPortMalloc+0x18c>)
 8008ea6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ea8:	4b42      	ldr	r3, [pc, #264]	; (8008fb4 <pvPortMalloc+0x18c>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008eae:	e004      	b.n	8008eba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d903      	bls.n	8008ecc <pvPortMalloc+0xa4>
 8008ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d1f1      	bne.n	8008eb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008ecc:	4b36      	ldr	r3, [pc, #216]	; (8008fa8 <pvPortMalloc+0x180>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d050      	beq.n	8008f78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ed6:	6a3b      	ldr	r3, [r7, #32]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2208      	movs	r2, #8
 8008edc:	4413      	add	r3, r2
 8008ede:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	6a3b      	ldr	r3, [r7, #32]
 8008ee6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	1ad2      	subs	r2, r2, r3
 8008ef0:	2308      	movs	r3, #8
 8008ef2:	005b      	lsls	r3, r3, #1
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d91f      	bls.n	8008f38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4413      	add	r3, r2
 8008efe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	f003 0307 	and.w	r3, r3, #7
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00a      	beq.n	8008f20 <pvPortMalloc+0xf8>
	__asm volatile
 8008f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0e:	f383 8811 	msr	BASEPRI, r3
 8008f12:	f3bf 8f6f 	isb	sy
 8008f16:	f3bf 8f4f 	dsb	sy
 8008f1a:	613b      	str	r3, [r7, #16]
}
 8008f1c:	bf00      	nop
 8008f1e:	e7fe      	b.n	8008f1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f22:	685a      	ldr	r2, [r3, #4]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	1ad2      	subs	r2, r2, r3
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f32:	69b8      	ldr	r0, [r7, #24]
 8008f34:	f000 f908 	bl	8009148 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f38:	4b1d      	ldr	r3, [pc, #116]	; (8008fb0 <pvPortMalloc+0x188>)
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	4a1b      	ldr	r2, [pc, #108]	; (8008fb0 <pvPortMalloc+0x188>)
 8008f44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f46:	4b1a      	ldr	r3, [pc, #104]	; (8008fb0 <pvPortMalloc+0x188>)
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	4b1b      	ldr	r3, [pc, #108]	; (8008fb8 <pvPortMalloc+0x190>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d203      	bcs.n	8008f5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f52:	4b17      	ldr	r3, [pc, #92]	; (8008fb0 <pvPortMalloc+0x188>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a18      	ldr	r2, [pc, #96]	; (8008fb8 <pvPortMalloc+0x190>)
 8008f58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5c:	685a      	ldr	r2, [r3, #4]
 8008f5e:	4b13      	ldr	r3, [pc, #76]	; (8008fac <pvPortMalloc+0x184>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	431a      	orrs	r2, r3
 8008f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008f6e:	4b13      	ldr	r3, [pc, #76]	; (8008fbc <pvPortMalloc+0x194>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	3301      	adds	r3, #1
 8008f74:	4a11      	ldr	r2, [pc, #68]	; (8008fbc <pvPortMalloc+0x194>)
 8008f76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f78:	f7fe fd06 	bl	8007988 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	f003 0307 	and.w	r3, r3, #7
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00a      	beq.n	8008f9c <pvPortMalloc+0x174>
	__asm volatile
 8008f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8a:	f383 8811 	msr	BASEPRI, r3
 8008f8e:	f3bf 8f6f 	isb	sy
 8008f92:	f3bf 8f4f 	dsb	sy
 8008f96:	60fb      	str	r3, [r7, #12]
}
 8008f98:	bf00      	nop
 8008f9a:	e7fe      	b.n	8008f9a <pvPortMalloc+0x172>
	return pvReturn;
 8008f9c:	69fb      	ldr	r3, [r7, #28]
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3728      	adds	r7, #40	; 0x28
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	20001960 	.word	0x20001960
 8008fac:	20001974 	.word	0x20001974
 8008fb0:	20001964 	.word	0x20001964
 8008fb4:	20001958 	.word	0x20001958
 8008fb8:	20001968 	.word	0x20001968
 8008fbc:	2000196c 	.word	0x2000196c

08008fc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b086      	sub	sp, #24
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d04d      	beq.n	800906e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008fd2:	2308      	movs	r3, #8
 8008fd4:	425b      	negs	r3, r3
 8008fd6:	697a      	ldr	r2, [r7, #20]
 8008fd8:	4413      	add	r3, r2
 8008fda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	685a      	ldr	r2, [r3, #4]
 8008fe4:	4b24      	ldr	r3, [pc, #144]	; (8009078 <vPortFree+0xb8>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4013      	ands	r3, r2
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d10a      	bne.n	8009004 <vPortFree+0x44>
	__asm volatile
 8008fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff2:	f383 8811 	msr	BASEPRI, r3
 8008ff6:	f3bf 8f6f 	isb	sy
 8008ffa:	f3bf 8f4f 	dsb	sy
 8008ffe:	60fb      	str	r3, [r7, #12]
}
 8009000:	bf00      	nop
 8009002:	e7fe      	b.n	8009002 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d00a      	beq.n	8009022 <vPortFree+0x62>
	__asm volatile
 800900c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009010:	f383 8811 	msr	BASEPRI, r3
 8009014:	f3bf 8f6f 	isb	sy
 8009018:	f3bf 8f4f 	dsb	sy
 800901c:	60bb      	str	r3, [r7, #8]
}
 800901e:	bf00      	nop
 8009020:	e7fe      	b.n	8009020 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	685a      	ldr	r2, [r3, #4]
 8009026:	4b14      	ldr	r3, [pc, #80]	; (8009078 <vPortFree+0xb8>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4013      	ands	r3, r2
 800902c:	2b00      	cmp	r3, #0
 800902e:	d01e      	beq.n	800906e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d11a      	bne.n	800906e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	685a      	ldr	r2, [r3, #4]
 800903c:	4b0e      	ldr	r3, [pc, #56]	; (8009078 <vPortFree+0xb8>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	43db      	mvns	r3, r3
 8009042:	401a      	ands	r2, r3
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009048:	f7fe fc90 	bl	800796c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	685a      	ldr	r2, [r3, #4]
 8009050:	4b0a      	ldr	r3, [pc, #40]	; (800907c <vPortFree+0xbc>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4413      	add	r3, r2
 8009056:	4a09      	ldr	r2, [pc, #36]	; (800907c <vPortFree+0xbc>)
 8009058:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800905a:	6938      	ldr	r0, [r7, #16]
 800905c:	f000 f874 	bl	8009148 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009060:	4b07      	ldr	r3, [pc, #28]	; (8009080 <vPortFree+0xc0>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	3301      	adds	r3, #1
 8009066:	4a06      	ldr	r2, [pc, #24]	; (8009080 <vPortFree+0xc0>)
 8009068:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800906a:	f7fe fc8d 	bl	8007988 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800906e:	bf00      	nop
 8009070:	3718      	adds	r7, #24
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	20001974 	.word	0x20001974
 800907c:	20001964 	.word	0x20001964
 8009080:	20001970 	.word	0x20001970

08009084 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009084:	b480      	push	{r7}
 8009086:	b085      	sub	sp, #20
 8009088:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800908a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800908e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009090:	4b27      	ldr	r3, [pc, #156]	; (8009130 <prvHeapInit+0xac>)
 8009092:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f003 0307 	and.w	r3, r3, #7
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00c      	beq.n	80090b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	3307      	adds	r3, #7
 80090a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f023 0307 	bic.w	r3, r3, #7
 80090aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80090ac:	68ba      	ldr	r2, [r7, #8]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	1ad3      	subs	r3, r2, r3
 80090b2:	4a1f      	ldr	r2, [pc, #124]	; (8009130 <prvHeapInit+0xac>)
 80090b4:	4413      	add	r3, r2
 80090b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80090bc:	4a1d      	ldr	r2, [pc, #116]	; (8009134 <prvHeapInit+0xb0>)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80090c2:	4b1c      	ldr	r3, [pc, #112]	; (8009134 <prvHeapInit+0xb0>)
 80090c4:	2200      	movs	r2, #0
 80090c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	68ba      	ldr	r2, [r7, #8]
 80090cc:	4413      	add	r3, r2
 80090ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80090d0:	2208      	movs	r2, #8
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	1a9b      	subs	r3, r3, r2
 80090d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f023 0307 	bic.w	r3, r3, #7
 80090de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	4a15      	ldr	r2, [pc, #84]	; (8009138 <prvHeapInit+0xb4>)
 80090e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80090e6:	4b14      	ldr	r3, [pc, #80]	; (8009138 <prvHeapInit+0xb4>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2200      	movs	r2, #0
 80090ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80090ee:	4b12      	ldr	r3, [pc, #72]	; (8009138 <prvHeapInit+0xb4>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2200      	movs	r2, #0
 80090f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	1ad2      	subs	r2, r2, r3
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009104:	4b0c      	ldr	r3, [pc, #48]	; (8009138 <prvHeapInit+0xb4>)
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	4a0a      	ldr	r2, [pc, #40]	; (800913c <prvHeapInit+0xb8>)
 8009112:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	4a09      	ldr	r2, [pc, #36]	; (8009140 <prvHeapInit+0xbc>)
 800911a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800911c:	4b09      	ldr	r3, [pc, #36]	; (8009144 <prvHeapInit+0xc0>)
 800911e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009122:	601a      	str	r2, [r3, #0]
}
 8009124:	bf00      	nop
 8009126:	3714      	adds	r7, #20
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr
 8009130:	20000da0 	.word	0x20000da0
 8009134:	20001958 	.word	0x20001958
 8009138:	20001960 	.word	0x20001960
 800913c:	20001968 	.word	0x20001968
 8009140:	20001964 	.word	0x20001964
 8009144:	20001974 	.word	0x20001974

08009148 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009148:	b480      	push	{r7}
 800914a:	b085      	sub	sp, #20
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009150:	4b28      	ldr	r3, [pc, #160]	; (80091f4 <prvInsertBlockIntoFreeList+0xac>)
 8009152:	60fb      	str	r3, [r7, #12]
 8009154:	e002      	b.n	800915c <prvInsertBlockIntoFreeList+0x14>
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	60fb      	str	r3, [r7, #12]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	429a      	cmp	r2, r3
 8009164:	d8f7      	bhi.n	8009156 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	68ba      	ldr	r2, [r7, #8]
 8009170:	4413      	add	r3, r2
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	429a      	cmp	r2, r3
 8009176:	d108      	bne.n	800918a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	685a      	ldr	r2, [r3, #4]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	441a      	add	r2, r3
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	68ba      	ldr	r2, [r7, #8]
 8009194:	441a      	add	r2, r3
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	429a      	cmp	r2, r3
 800919c:	d118      	bne.n	80091d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	4b15      	ldr	r3, [pc, #84]	; (80091f8 <prvInsertBlockIntoFreeList+0xb0>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d00d      	beq.n	80091c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	685a      	ldr	r2, [r3, #4]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	441a      	add	r2, r3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	601a      	str	r2, [r3, #0]
 80091c4:	e008      	b.n	80091d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80091c6:	4b0c      	ldr	r3, [pc, #48]	; (80091f8 <prvInsertBlockIntoFreeList+0xb0>)
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	601a      	str	r2, [r3, #0]
 80091ce:	e003      	b.n	80091d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	429a      	cmp	r2, r3
 80091de:	d002      	beq.n	80091e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091e6:	bf00      	nop
 80091e8:	3714      	adds	r7, #20
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	20001958 	.word	0x20001958
 80091f8:	20001960 	.word	0x20001960

080091fc <__libc_init_array>:
 80091fc:	b570      	push	{r4, r5, r6, lr}
 80091fe:	4d0d      	ldr	r5, [pc, #52]	; (8009234 <__libc_init_array+0x38>)
 8009200:	4c0d      	ldr	r4, [pc, #52]	; (8009238 <__libc_init_array+0x3c>)
 8009202:	1b64      	subs	r4, r4, r5
 8009204:	10a4      	asrs	r4, r4, #2
 8009206:	2600      	movs	r6, #0
 8009208:	42a6      	cmp	r6, r4
 800920a:	d109      	bne.n	8009220 <__libc_init_array+0x24>
 800920c:	4d0b      	ldr	r5, [pc, #44]	; (800923c <__libc_init_array+0x40>)
 800920e:	4c0c      	ldr	r4, [pc, #48]	; (8009240 <__libc_init_array+0x44>)
 8009210:	f000 f88a 	bl	8009328 <_init>
 8009214:	1b64      	subs	r4, r4, r5
 8009216:	10a4      	asrs	r4, r4, #2
 8009218:	2600      	movs	r6, #0
 800921a:	42a6      	cmp	r6, r4
 800921c:	d105      	bne.n	800922a <__libc_init_array+0x2e>
 800921e:	bd70      	pop	{r4, r5, r6, pc}
 8009220:	f855 3b04 	ldr.w	r3, [r5], #4
 8009224:	4798      	blx	r3
 8009226:	3601      	adds	r6, #1
 8009228:	e7ee      	b.n	8009208 <__libc_init_array+0xc>
 800922a:	f855 3b04 	ldr.w	r3, [r5], #4
 800922e:	4798      	blx	r3
 8009230:	3601      	adds	r6, #1
 8009232:	e7f2      	b.n	800921a <__libc_init_array+0x1e>
 8009234:	08009dc4 	.word	0x08009dc4
 8009238:	08009dc4 	.word	0x08009dc4
 800923c:	08009dc4 	.word	0x08009dc4
 8009240:	08009dc8 	.word	0x08009dc8

08009244 <__itoa>:
 8009244:	1e93      	subs	r3, r2, #2
 8009246:	2b22      	cmp	r3, #34	; 0x22
 8009248:	b510      	push	{r4, lr}
 800924a:	460c      	mov	r4, r1
 800924c:	d904      	bls.n	8009258 <__itoa+0x14>
 800924e:	2300      	movs	r3, #0
 8009250:	700b      	strb	r3, [r1, #0]
 8009252:	461c      	mov	r4, r3
 8009254:	4620      	mov	r0, r4
 8009256:	bd10      	pop	{r4, pc}
 8009258:	2a0a      	cmp	r2, #10
 800925a:	d109      	bne.n	8009270 <__itoa+0x2c>
 800925c:	2800      	cmp	r0, #0
 800925e:	da07      	bge.n	8009270 <__itoa+0x2c>
 8009260:	232d      	movs	r3, #45	; 0x2d
 8009262:	700b      	strb	r3, [r1, #0]
 8009264:	4240      	negs	r0, r0
 8009266:	2101      	movs	r1, #1
 8009268:	4421      	add	r1, r4
 800926a:	f000 f81b 	bl	80092a4 <__utoa>
 800926e:	e7f1      	b.n	8009254 <__itoa+0x10>
 8009270:	2100      	movs	r1, #0
 8009272:	e7f9      	b.n	8009268 <__itoa+0x24>

08009274 <itoa>:
 8009274:	f7ff bfe6 	b.w	8009244 <__itoa>

08009278 <memcpy>:
 8009278:	440a      	add	r2, r1
 800927a:	4291      	cmp	r1, r2
 800927c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009280:	d100      	bne.n	8009284 <memcpy+0xc>
 8009282:	4770      	bx	lr
 8009284:	b510      	push	{r4, lr}
 8009286:	f811 4b01 	ldrb.w	r4, [r1], #1
 800928a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800928e:	4291      	cmp	r1, r2
 8009290:	d1f9      	bne.n	8009286 <memcpy+0xe>
 8009292:	bd10      	pop	{r4, pc}

08009294 <memset>:
 8009294:	4402      	add	r2, r0
 8009296:	4603      	mov	r3, r0
 8009298:	4293      	cmp	r3, r2
 800929a:	d100      	bne.n	800929e <memset+0xa>
 800929c:	4770      	bx	lr
 800929e:	f803 1b01 	strb.w	r1, [r3], #1
 80092a2:	e7f9      	b.n	8009298 <memset+0x4>

080092a4 <__utoa>:
 80092a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092a6:	4c1f      	ldr	r4, [pc, #124]	; (8009324 <__utoa+0x80>)
 80092a8:	b08b      	sub	sp, #44	; 0x2c
 80092aa:	4605      	mov	r5, r0
 80092ac:	460b      	mov	r3, r1
 80092ae:	466e      	mov	r6, sp
 80092b0:	f104 0c20 	add.w	ip, r4, #32
 80092b4:	6820      	ldr	r0, [r4, #0]
 80092b6:	6861      	ldr	r1, [r4, #4]
 80092b8:	4637      	mov	r7, r6
 80092ba:	c703      	stmia	r7!, {r0, r1}
 80092bc:	3408      	adds	r4, #8
 80092be:	4564      	cmp	r4, ip
 80092c0:	463e      	mov	r6, r7
 80092c2:	d1f7      	bne.n	80092b4 <__utoa+0x10>
 80092c4:	7921      	ldrb	r1, [r4, #4]
 80092c6:	7139      	strb	r1, [r7, #4]
 80092c8:	1e91      	subs	r1, r2, #2
 80092ca:	6820      	ldr	r0, [r4, #0]
 80092cc:	6038      	str	r0, [r7, #0]
 80092ce:	2922      	cmp	r1, #34	; 0x22
 80092d0:	f04f 0100 	mov.w	r1, #0
 80092d4:	d904      	bls.n	80092e0 <__utoa+0x3c>
 80092d6:	7019      	strb	r1, [r3, #0]
 80092d8:	460b      	mov	r3, r1
 80092da:	4618      	mov	r0, r3
 80092dc:	b00b      	add	sp, #44	; 0x2c
 80092de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092e0:	1e58      	subs	r0, r3, #1
 80092e2:	4684      	mov	ip, r0
 80092e4:	fbb5 f7f2 	udiv	r7, r5, r2
 80092e8:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80092ec:	fb02 5617 	mls	r6, r2, r7, r5
 80092f0:	4476      	add	r6, lr
 80092f2:	460c      	mov	r4, r1
 80092f4:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80092f8:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80092fc:	462e      	mov	r6, r5
 80092fe:	42b2      	cmp	r2, r6
 8009300:	f101 0101 	add.w	r1, r1, #1
 8009304:	463d      	mov	r5, r7
 8009306:	d9ed      	bls.n	80092e4 <__utoa+0x40>
 8009308:	2200      	movs	r2, #0
 800930a:	545a      	strb	r2, [r3, r1]
 800930c:	1919      	adds	r1, r3, r4
 800930e:	1aa5      	subs	r5, r4, r2
 8009310:	42aa      	cmp	r2, r5
 8009312:	dae2      	bge.n	80092da <__utoa+0x36>
 8009314:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8009318:	780e      	ldrb	r6, [r1, #0]
 800931a:	7006      	strb	r6, [r0, #0]
 800931c:	3201      	adds	r2, #1
 800931e:	f801 5901 	strb.w	r5, [r1], #-1
 8009322:	e7f4      	b.n	800930e <__utoa+0x6a>
 8009324:	08009d94 	.word	0x08009d94

08009328 <_init>:
 8009328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800932a:	bf00      	nop
 800932c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800932e:	bc08      	pop	{r3}
 8009330:	469e      	mov	lr, r3
 8009332:	4770      	bx	lr

08009334 <_fini>:
 8009334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009336:	bf00      	nop
 8009338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800933a:	bc08      	pop	{r3}
 800933c:	469e      	mov	lr, r3
 800933e:	4770      	bx	lr
