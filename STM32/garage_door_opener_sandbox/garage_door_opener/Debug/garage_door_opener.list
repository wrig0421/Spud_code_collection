
garage_door_opener.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d04  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000950  08007e94  08007e94  00017e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087e4  080087e4  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  080087e4  080087e4  000187e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087ec  080087ec  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087ec  080087ec  000187ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087f0  080087f0  000187f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080087f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a72c  20000020  08008814  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a74c  08008814  0002a74c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ceef  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003bd5  00000000  00000000  0003cf3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015f8  00000000  00000000  00040b18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001408  00000000  00000000  00042110  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024e2a  00000000  00000000  00043518  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013832  00000000  00000000  00068342  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d96f0  00000000  00000000  0007bb74  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00155264  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005830  00000000  00000000  001552e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000020 	.word	0x20000020
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007e7c 	.word	0x08007e7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000024 	.word	0x20000024
 80001cc:	08007e7c 	.word	0x08007e7c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <board_wakeup>:
void board_wakeup(void);
void port_wakeup(void);


void board_wakeup(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	SystemClock_Config();
 80004e4:	f000 f81c 	bl	8000520 <SystemClock_Config>
	HAL_Init();
 80004e8:	f001 fb0d 	bl	8001b06 <HAL_Init>
}
 80004ec:	bf00      	nop
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <port_wakeup>:


void port_wakeup(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 80004f4:	f000 f908 	bl	8000708 <MX_GPIO_Init>
	MX_DMA_Init();
 80004f8:	f000 f8e0 	bl	80006bc <MX_DMA_Init>
	MX_SPI2_Init();
 80004fc:	f000 f870 	bl	80005e0 <MX_SPI2_Init>
	MX_USART1_UART_Init();
 8000500:	f000 f8ac 	bl	800065c <MX_USART1_UART_Init>
}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}

08000508 <board_init>:


void board_init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	board_wakeup();
 800050c:	f7ff ffe8 	bl	80004e0 <board_wakeup>
	port_wakeup();
 8000510:	f7ff ffee 	bl	80004f0 <port_wakeup>

	ssd1351_init();
 8000514:	f000 fe44 	bl	80011a0 <ssd1351_init>
	gt521fx_fingerprint_init();
 8000518:	f000 f9ee 	bl	80008f8 <gt521fx_fingerprint_init>
}
 800051c:	bf00      	nop
 800051e:	bd80      	pop	{r7, pc}

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b0ae      	sub	sp, #184	; 0xb8
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800052a:	2244      	movs	r2, #68	; 0x44
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f007 fc9b 	bl	8007e6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000544:	463b      	mov	r3, r7
 8000546:	2260      	movs	r2, #96	; 0x60
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f007 fc8d 	bl	8007e6a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000550:	2310      	movs	r3, #16
 8000552:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000554:	2301      	movs	r3, #1
 8000556:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800055a:	2300      	movs	r3, #0
 800055c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000560:	2360      	movs	r3, #96	; 0x60
 8000562:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000566:	2300      	movs	r3, #0
 8000568:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000570:	4618      	mov	r0, r3
 8000572:	f002 f89f 	bl	80026b4 <HAL_RCC_OscConfig>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <SystemClock_Config+0x60>
  {
    Error_Handler();
 800057c:	f000 f93c 	bl	80007f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000580:	230f      	movs	r3, #15
 8000582:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000584:	2300      	movs	r3, #0
 8000586:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000594:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f002 fcaa 	bl	8002ef4 <HAL_RCC_ClockConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80005a6:	f000 f927 	bl	80007f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80005aa:	2301      	movs	r3, #1
 80005ac:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005ae:	2300      	movs	r3, #0
 80005b0:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005b2:	463b      	mov	r3, r7
 80005b4:	4618      	mov	r0, r3
 80005b6:	f002 fea1 	bl	80032fc <HAL_RCCEx_PeriphCLKConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80005c0:	f000 f91a 	bl	80007f8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005c4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005c8:	f002 f81e 	bl	8002608 <HAL_PWREx_ControlVoltageScaling>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005d2:	f000 f911 	bl	80007f8 <Error_Handler>
  }
}
 80005d6:	bf00      	nop
 80005d8:	37b8      	adds	r7, #184	; 0xb8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI2_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80005e4:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <MX_SPI2_Init+0x74>)
 80005e6:	4a1c      	ldr	r2, [pc, #112]	; (8000658 <MX_SPI2_Init+0x78>)
 80005e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80005ea:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <MX_SPI2_Init+0x74>)
 80005ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80005f2:	4b18      	ldr	r3, [pc, #96]	; (8000654 <MX_SPI2_Init+0x74>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80005f8:	4b16      	ldr	r3, [pc, #88]	; (8000654 <MX_SPI2_Init+0x74>)
 80005fa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80005fe:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000600:	4b14      	ldr	r3, [pc, #80]	; (8000654 <MX_SPI2_Init+0x74>)
 8000602:	2200      	movs	r2, #0
 8000604:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000606:	4b13      	ldr	r3, [pc, #76]	; (8000654 <MX_SPI2_Init+0x74>)
 8000608:	2200      	movs	r2, #0
 800060a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_SPI2_Init+0x74>)
 800060e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000612:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <MX_SPI2_Init+0x74>)
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_SPI2_Init+0x74>)
 800061c:	2200      	movs	r2, #0
 800061e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <MX_SPI2_Init+0x74>)
 8000622:	2200      	movs	r2, #0
 8000624:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <MX_SPI2_Init+0x74>)
 8000628:	2200      	movs	r2, #0
 800062a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <MX_SPI2_Init+0x74>)
 800062e:	2207      	movs	r2, #7
 8000630:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <MX_SPI2_Init+0x74>)
 8000634:	2200      	movs	r2, #0
 8000636:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_SPI2_Init+0x74>)
 800063a:	2208      	movs	r2, #8
 800063c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <MX_SPI2_Init+0x74>)
 8000640:	f003 f990 	bl	8003964 <HAL_SPI_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800064a:	f000 f8d5 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20001918 	.word	0x20001918
 8000658:	40003800 	.word	0x40003800

0800065c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000660:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <MX_USART1_UART_Init+0x58>)
 8000662:	4a15      	ldr	r2, [pc, #84]	; (80006b8 <MX_USART1_UART_Init+0x5c>)
 8000664:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000666:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <MX_USART1_UART_Init+0x58>)
 8000668:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800066c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_USART1_UART_Init+0x58>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MX_USART1_UART_Init+0x58>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_USART1_UART_Init+0x58>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_USART1_UART_Init+0x58>)
 8000682:	220c      	movs	r2, #12
 8000684:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <MX_USART1_UART_Init+0x58>)
 8000688:	2200      	movs	r2, #0
 800068a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_USART1_UART_Init+0x58>)
 800068e:	2200      	movs	r2, #0
 8000690:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <MX_USART1_UART_Init+0x58>)
 8000694:	2200      	movs	r2, #0
 8000696:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_USART1_UART_Init+0x58>)
 800069a:	2200      	movs	r2, #0
 800069c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_USART1_UART_Init+0x58>)
 80006a0:	f003 fcce 	bl	8004040 <HAL_UART_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006aa:	f000 f8a5 	bl	80007f8 <Error_Handler>
	*/
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20001a0c 	.word	0x20001a0c
 80006b8:	40013800 	.word	0x40013800

080006bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <MX_DMA_Init+0x48>)
 80006c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006c6:	4a0f      	ldr	r2, [pc, #60]	; (8000704 <MX_DMA_Init+0x48>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	6493      	str	r3, [r2, #72]	; 0x48
 80006ce:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <MX_DMA_Init+0x48>)
 80006d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2100      	movs	r1, #0
 80006de:	200e      	movs	r0, #14
 80006e0:	f001 fb83 	bl	8001dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80006e4:	200e      	movs	r0, #14
 80006e6:	f001 fb9c 	bl	8001e22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2100      	movs	r1, #0
 80006ee:	200f      	movs	r0, #15
 80006f0:	f001 fb7b 	bl	8001dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80006f4:	200f      	movs	r0, #15
 80006f6:	f001 fb94 	bl	8001e22 <HAL_NVIC_EnableIRQ>

}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40021000 	.word	0x40021000

08000708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	f107 030c 	add.w	r3, r7, #12
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071e:	4b33      	ldr	r3, [pc, #204]	; (80007ec <MX_GPIO_Init+0xe4>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000722:	4a32      	ldr	r2, [pc, #200]	; (80007ec <MX_GPIO_Init+0xe4>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072a:	4b30      	ldr	r3, [pc, #192]	; (80007ec <MX_GPIO_Init+0xe4>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	4b2d      	ldr	r3, [pc, #180]	; (80007ec <MX_GPIO_Init+0xe4>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	4a2c      	ldr	r2, [pc, #176]	; (80007ec <MX_GPIO_Init+0xe4>)
 800073c:	f043 0302 	orr.w	r3, r3, #2
 8000740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000742:	4b2a      	ldr	r3, [pc, #168]	; (80007ec <MX_GPIO_Init+0xe4>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	4b27      	ldr	r3, [pc, #156]	; (80007ec <MX_GPIO_Init+0xe4>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	4a26      	ldr	r2, [pc, #152]	; (80007ec <MX_GPIO_Init+0xe4>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075a:	4b24      	ldr	r3, [pc, #144]	; (80007ec <MX_GPIO_Init+0xe4>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076c:	4820      	ldr	r0, [pc, #128]	; (80007f0 <MX_GPIO_Init+0xe8>)
 800076e:	f001 ff25 	bl	80025bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8000778:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077c:	f001 ff1e 	bl	80025bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	2140      	movs	r1, #64	; 0x40
 8000784:	481b      	ldr	r0, [pc, #108]	; (80007f4 <MX_GPIO_Init+0xec>)
 8000786:	f001 ff19 	bl	80025bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800078a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800078e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000790:	2301      	movs	r3, #1
 8000792:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	4619      	mov	r1, r3
 80007a2:	4813      	ldr	r0, [pc, #76]	; (80007f0 <MX_GPIO_Init+0xe8>)
 80007a4:	f001 fd90 	bl	80022c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 80007a8:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80007ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	2301      	movs	r3, #1
 80007b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	4619      	mov	r1, r3
 80007c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c4:	f001 fd80 	bl	80022c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007c8:	2340      	movs	r3, #64	; 0x40
 80007ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	4619      	mov	r1, r3
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_GPIO_Init+0xec>)
 80007e0:	f001 fd72 	bl	80022c8 <HAL_GPIO_Init>

}
 80007e4:	bf00      	nop
 80007e6:	3720      	adds	r7, #32
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40021000 	.word	0x40021000
 80007f0:	48000800 	.word	0x48000800
 80007f4:	48000400 	.word	0x48000400

080007f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
	...

08000808 <gt521fx_nack_flag_set>:
bool g_nack_flag = false;
gt_521fx_error_e g_nack_state = GT521FX_NO_ERROR_ACK;


void gt521fx_nack_flag_set(bool flag)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	71fb      	strb	r3, [r7, #7]
	g_nack_flag = flag;
 8000812:	4a04      	ldr	r2, [pc, #16]	; (8000824 <gt521fx_nack_flag_set+0x1c>)
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	7013      	strb	r3, [r2, #0]
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	20000043 	.word	0x20000043

08000828 <gt521fx_nack_state_set>:


void gt521fx_nack_state_set(gt_521fx_error_e err)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	80fb      	strh	r3, [r7, #6]
	g_nack_state = err;
 8000832:	4a04      	ldr	r2, [pc, #16]	; (8000844 <gt521fx_nack_state_set+0x1c>)
 8000834:	88fb      	ldrh	r3, [r7, #6]
 8000836:	8013      	strh	r3, [r2, #0]
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	20000008 	.word	0x20000008

08000848 <gt521fx_nack_flag>:


bool gt521fx_nack_flag(void);
bool gt521fx_nack_flag(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
	return g_nack_flag;
 800084c:	4b03      	ldr	r3, [pc, #12]	; (800085c <gt521fx_nack_flag+0x14>)
 800084e:	781b      	ldrb	r3, [r3, #0]
	//return g_nack_state;
}
 8000850:	4618      	mov	r0, r3
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	20000043 	.word	0x20000043

08000860 <gt521fx_enrolled_fingerprint_count_set>:
	return g_enrolled_fingerprint_count;
}


void gt521fx_enrolled_fingerprint_count_set(uint16_t count)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	80fb      	strh	r3, [r7, #6]
	g_enrolled_fingerprint_count = count;
 800086a:	4a04      	ldr	r2, [pc, #16]	; (800087c <gt521fx_enrolled_fingerprint_count_set+0x1c>)
 800086c:	88fb      	ldrh	r3, [r7, #6]
 800086e:	8013      	strh	r3, [r2, #0]
}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	2000003c 	.word	0x2000003c

08000880 <gt521fx_finger_is_pressed_set>:


void gt521fx_finger_is_pressed_set(bool flag)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	71fb      	strb	r3, [r7, #7]
	g_finger_is_pressed = flag;
 800088a:	4a04      	ldr	r2, [pc, #16]	; (800089c <gt521fx_finger_is_pressed_set+0x1c>)
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	7013      	strb	r3, [r2, #0]
}
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	2000003e 	.word	0x2000003e

080008a0 <gt521fx_finger_is_pressed_flag>:


bool gt521fx_finger_is_pressed_flag(void);
bool gt521fx_finger_is_pressed_flag(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
	return g_finger_is_pressed;
 80008a4:	4b03      	ldr	r3, [pc, #12]	; (80008b4 <gt521fx_finger_is_pressed_flag+0x14>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	2000003e 	.word	0x2000003e

080008b8 <gt521fx_security_lvl_set>:


void gt521fx_security_lvl_set(uint8_t lvl)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	71fb      	strb	r3, [r7, #7]
	g_security_lvl = lvl;
 80008c2:	4a04      	ldr	r2, [pc, #16]	; (80008d4 <gt521fx_security_lvl_set+0x1c>)
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	7013      	strb	r3, [r2, #0]
}
 80008c8:	bf00      	nop
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	20000042 	.word	0x20000042

080008d8 <gt521fx_identified_id_set>:


void gt521fx_identified_id_set(uint16_t id)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	80fb      	strh	r3, [r7, #6]
	g_identified_id = id;
 80008e2:	4a04      	ldr	r2, [pc, #16]	; (80008f4 <gt521fx_identified_id_set+0x1c>)
 80008e4:	88fb      	ldrh	r3, [r7, #6]
 80008e6:	8013      	strh	r3, [r2, #0]
}
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	20000040 	.word	0x20000040

080008f8 <gt521fx_fingerprint_init>:
	return g_identified_id;
}


void gt521fx_fingerprint_init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
	gt521fx_open();
 80008fc:	f000 f8e2 	bl	8000ac4 <gt521fx_open>
	gt521fx_led_on();
 8000900:	f000 f8ca 	bl	8000a98 <gt521fx_led_on>
	//packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_OPEN, 0);
	//while (!packet_rsp_was_received());
}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}

08000908 <gt521fx_enroll_finger>:


gt_521fx_error_e gt521fx_enroll_finger(uint16_t id)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	80fb      	strh	r3, [r7, #6]
	gt_521fx_error_e return_val = GT521FX_NO_ERROR;
 8000912:	2300      	movs	r3, #0
 8000914:	81fb      	strh	r3, [r7, #14]
	ssd1351_printf("GT521FX enroll state");
 8000916:	485b      	ldr	r0, [pc, #364]	; (8000a84 <gt521fx_enroll_finger+0x17c>)
 8000918:	f000 fe04 	bl	8001524 <ssd1351_printf>
	gt521fx_start_enrollment(id);
 800091c:	88fb      	ldrh	r3, [r7, #6]
 800091e:	4618      	mov	r0, r3
 8000920:	f000 f8e6 	bl	8000af0 <gt521fx_start_enrollment>
	ssd1351_printf("\nPlace finger on sensor");
 8000924:	4858      	ldr	r0, [pc, #352]	; (8000a88 <gt521fx_enroll_finger+0x180>)
 8000926:	f000 fdfd 	bl	8001524 <ssd1351_printf>
	while (!gt521fx_finger_is_pressed())
 800092a:	e003      	b.n	8000934 <gt521fx_enroll_finger+0x2c>
	{
		HAL_Delay(1000);
 800092c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000930:	f001 f95e 	bl	8001bf0 <HAL_Delay>
	while (!gt521fx_finger_is_pressed())
 8000934:	f000 f934 	bl	8000ba0 <gt521fx_finger_is_pressed>
 8000938:	4603      	mov	r3, r0
 800093a:	f083 0301 	eor.w	r3, r3, #1
 800093e:	b2db      	uxtb	r3, r3
 8000940:	2b00      	cmp	r3, #0
 8000942:	d1f3      	bne.n	800092c <gt521fx_enroll_finger+0x24>
	}
	ssd1351_printf("\ncapturing...");
 8000944:	4851      	ldr	r0, [pc, #324]	; (8000a8c <gt521fx_enroll_finger+0x184>)
 8000946:	f000 fded 	bl	8001524 <ssd1351_printf>
	if (!gt521fx_capture_finger())
 800094a:	f000 f945 	bl	8000bd8 <gt521fx_capture_finger>
 800094e:	4603      	mov	r3, r0
 8000950:	f083 0301 	eor.w	r3, r3, #1
 8000954:	b2db      	uxtb	r3, r3
 8000956:	2b00      	cmp	r3, #0
 8000958:	d002      	beq.n	8000960 <gt521fx_enroll_finger+0x58>
	{
		return GT521FX_ERROR_SRW_ENROLL_FAILURE;
 800095a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800095e:	e08d      	b.n	8000a7c <gt521fx_enroll_finger+0x174>
	}
	ssd1351_clear_screen();
 8000960:	f000 fd32 	bl	80013c8 <ssd1351_clear_screen>
	ssd1351_printf("\nprior to enroll...");
 8000964:	484a      	ldr	r0, [pc, #296]	; (8000a90 <gt521fx_enroll_finger+0x188>)
 8000966:	f000 fddd 	bl	8001524 <ssd1351_printf>
	if (!gt521fx_enrollment(GT521FX_ENROLLMENT_STAGE_FIRST)) return GT521FX_ERROR_SRW_ENROLL_FAILURE;
 800096a:	2000      	movs	r0, #0
 800096c:	f000 f8e2 	bl	8000b34 <gt521fx_enrollment>
 8000970:	4603      	mov	r3, r0
 8000972:	f083 0301 	eor.w	r3, r3, #1
 8000976:	b2db      	uxtb	r3, r3
 8000978:	2b00      	cmp	r3, #0
 800097a:	d002      	beq.n	8000982 <gt521fx_enroll_finger+0x7a>
 800097c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000980:	e07c      	b.n	8000a7c <gt521fx_enroll_finger+0x174>
	ssd1351_printf("\nRemove finger");
 8000982:	4844      	ldr	r0, [pc, #272]	; (8000a94 <gt521fx_enroll_finger+0x18c>)
 8000984:	f000 fdce 	bl	8001524 <ssd1351_printf>
	while (gt521fx_finger_is_pressed()) HAL_Delay(500);
 8000988:	e003      	b.n	8000992 <gt521fx_enroll_finger+0x8a>
 800098a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800098e:	f001 f92f 	bl	8001bf0 <HAL_Delay>
 8000992:	f000 f905 	bl	8000ba0 <gt521fx_finger_is_pressed>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d1f6      	bne.n	800098a <gt521fx_enroll_finger+0x82>
	ssd1351_printf("\nPlace finger on sensor");
 800099c:	483a      	ldr	r0, [pc, #232]	; (8000a88 <gt521fx_enroll_finger+0x180>)
 800099e:	f000 fdc1 	bl	8001524 <ssd1351_printf>
	while (!gt521fx_finger_is_pressed()) HAL_Delay(500);
 80009a2:	e003      	b.n	80009ac <gt521fx_enroll_finger+0xa4>
 80009a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009a8:	f001 f922 	bl	8001bf0 <HAL_Delay>
 80009ac:	f000 f8f8 	bl	8000ba0 <gt521fx_finger_is_pressed>
 80009b0:	4603      	mov	r3, r0
 80009b2:	f083 0301 	eor.w	r3, r3, #1
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d1f3      	bne.n	80009a4 <gt521fx_enroll_finger+0x9c>
	ssd1351_printf("\ncapturing...");
 80009bc:	4833      	ldr	r0, [pc, #204]	; (8000a8c <gt521fx_enroll_finger+0x184>)
 80009be:	f000 fdb1 	bl	8001524 <ssd1351_printf>
	if (!gt521fx_capture_finger()) return GT521FX_ERROR_SRW_ENROLL_FAILURE;
 80009c2:	f000 f909 	bl	8000bd8 <gt521fx_capture_finger>
 80009c6:	4603      	mov	r3, r0
 80009c8:	f083 0301 	eor.w	r3, r3, #1
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d002      	beq.n	80009d8 <gt521fx_enroll_finger+0xd0>
 80009d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009d6:	e051      	b.n	8000a7c <gt521fx_enroll_finger+0x174>
	if (!gt521fx_enrollment(GT521FX_ENROLLMENT_STAGE_SECOND)) return GT521FX_ERROR_SRW_ENROLL_FAILURE;
 80009d8:	2001      	movs	r0, #1
 80009da:	f000 f8ab 	bl	8000b34 <gt521fx_enrollment>
 80009de:	4603      	mov	r3, r0
 80009e0:	f083 0301 	eor.w	r3, r3, #1
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d002      	beq.n	80009f0 <gt521fx_enroll_finger+0xe8>
 80009ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ee:	e045      	b.n	8000a7c <gt521fx_enroll_finger+0x174>
	ssd1351_printf("\nRemove finger");
 80009f0:	4828      	ldr	r0, [pc, #160]	; (8000a94 <gt521fx_enroll_finger+0x18c>)
 80009f2:	f000 fd97 	bl	8001524 <ssd1351_printf>
	while (gt521fx_finger_is_pressed()) HAL_Delay(500);
 80009f6:	e003      	b.n	8000a00 <gt521fx_enroll_finger+0xf8>
 80009f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009fc:	f001 f8f8 	bl	8001bf0 <HAL_Delay>
 8000a00:	f000 f8ce 	bl	8000ba0 <gt521fx_finger_is_pressed>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d1f6      	bne.n	80009f8 <gt521fx_enroll_finger+0xf0>
	ssd1351_clear_screen();
 8000a0a:	f000 fcdd 	bl	80013c8 <ssd1351_clear_screen>
	ssd1351_printf("\nPlace finger on sensor");
 8000a0e:	481e      	ldr	r0, [pc, #120]	; (8000a88 <gt521fx_enroll_finger+0x180>)
 8000a10:	f000 fd88 	bl	8001524 <ssd1351_printf>
	while (!gt521fx_finger_is_pressed())
 8000a14:	e003      	b.n	8000a1e <gt521fx_enroll_finger+0x116>
	{
		HAL_Delay(1000);
 8000a16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a1a:	f001 f8e9 	bl	8001bf0 <HAL_Delay>
	while (!gt521fx_finger_is_pressed())
 8000a1e:	f000 f8bf 	bl	8000ba0 <gt521fx_finger_is_pressed>
 8000a22:	4603      	mov	r3, r0
 8000a24:	f083 0301 	eor.w	r3, r3, #1
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d1f3      	bne.n	8000a16 <gt521fx_enroll_finger+0x10e>
	}
	ssd1351_printf("\ncapturing...");
 8000a2e:	4817      	ldr	r0, [pc, #92]	; (8000a8c <gt521fx_enroll_finger+0x184>)
 8000a30:	f000 fd78 	bl	8001524 <ssd1351_printf>
	if (!gt521fx_capture_finger()) return GT521FX_ERROR_SRW_ENROLL_FAILURE;
 8000a34:	f000 f8d0 	bl	8000bd8 <gt521fx_capture_finger>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	f083 0301 	eor.w	r3, r3, #1
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d002      	beq.n	8000a4a <gt521fx_enroll_finger+0x142>
 8000a44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a48:	e018      	b.n	8000a7c <gt521fx_enroll_finger+0x174>
	if (!gt521fx_enrollment(GT521FX_ENROLLMENT_STAGE_THIRD)) return GT521FX_ERROR_SRW_ENROLL_FAILURE;
 8000a4a:	2002      	movs	r0, #2
 8000a4c:	f000 f872 	bl	8000b34 <gt521fx_enrollment>
 8000a50:	4603      	mov	r3, r0
 8000a52:	f083 0301 	eor.w	r3, r3, #1
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d002      	beq.n	8000a62 <gt521fx_enroll_finger+0x15a>
 8000a5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a60:	e00c      	b.n	8000a7c <gt521fx_enroll_finger+0x174>
	ssd1351_printf("\nRemove finger");
 8000a62:	480c      	ldr	r0, [pc, #48]	; (8000a94 <gt521fx_enroll_finger+0x18c>)
 8000a64:	f000 fd5e 	bl	8001524 <ssd1351_printf>
	while (gt521fx_finger_is_pressed()) HAL_Delay(500);
 8000a68:	e003      	b.n	8000a72 <gt521fx_enroll_finger+0x16a>
 8000a6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a6e:	f001 f8bf 	bl	8001bf0 <HAL_Delay>
 8000a72:	f000 f895 	bl	8000ba0 <gt521fx_finger_is_pressed>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d1f6      	bne.n	8000a6a <gt521fx_enroll_finger+0x162>
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	08007e94 	.word	0x08007e94
 8000a88:	08007eac 	.word	0x08007eac
 8000a8c:	08007ec4 	.word	0x08007ec4
 8000a90:	08007ed4 	.word	0x08007ed4
 8000a94:	08007ee8 	.word	0x08007ee8

08000a98 <gt521fx_led_on>:


gt_521fx_error_e gt521fx_led_on(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_CMOS_LED, LED_ON);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	2112      	movs	r1, #18
 8000aa0:	4807      	ldr	r0, [pc, #28]	; (8000ac0 <gt521fx_led_on+0x28>)
 8000aa2:	f000 f9f3 	bl	8000e8c <packet_create_cmd_and_send>
	while (!packet_rsp_was_received());
 8000aa6:	bf00      	nop
 8000aa8:	f000 f9d0 	bl	8000e4c <packet_rsp_was_received>
 8000aac:	4603      	mov	r3, r0
 8000aae:	f083 0301 	eor.w	r3, r3, #1
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d1f7      	bne.n	8000aa8 <gt521fx_led_on+0x10>
}
 8000ab8:	bf00      	nop
 8000aba:	4618      	mov	r0, r3
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20009a90 	.word	0x20009a90

08000ac4 <gt521fx_open>:
	while (!packet_rsp_was_received());
}


gt_521fx_error_e gt521fx_open(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_OPEN, 0);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2101      	movs	r1, #1
 8000acc:	4807      	ldr	r0, [pc, #28]	; (8000aec <gt521fx_open+0x28>)
 8000ace:	f000 f9dd 	bl	8000e8c <packet_create_cmd_and_send>
	while (!packet_rsp_was_received());
 8000ad2:	bf00      	nop
 8000ad4:	f000 f9ba 	bl	8000e4c <packet_rsp_was_received>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	f083 0301 	eor.w	r3, r3, #1
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d1f7      	bne.n	8000ad4 <gt521fx_open+0x10>
}
 8000ae4:	bf00      	nop
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20009a90 	.word	0x20009a90

08000af0 <gt521fx_start_enrollment>:
	else return true;
}


bool gt521fx_start_enrollment(uint16_t id)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	80fb      	strh	r3, [r7, #6]
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_ENROLL_START, id);
 8000afa:	88fb      	ldrh	r3, [r7, #6]
 8000afc:	461a      	mov	r2, r3
 8000afe:	2122      	movs	r1, #34	; 0x22
 8000b00:	480b      	ldr	r0, [pc, #44]	; (8000b30 <gt521fx_start_enrollment+0x40>)
 8000b02:	f000 f9c3 	bl	8000e8c <packet_create_cmd_and_send>
	while (!packet_rsp_was_received());
 8000b06:	bf00      	nop
 8000b08:	f000 f9a0 	bl	8000e4c <packet_rsp_was_received>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	f083 0301 	eor.w	r3, r3, #1
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d1f7      	bne.n	8000b08 <gt521fx_start_enrollment+0x18>
	if (gt521fx_nack_flag()) return false;
 8000b18:	f7ff fe96 	bl	8000848 <gt521fx_nack_flag>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <gt521fx_start_enrollment+0x36>
 8000b22:	2300      	movs	r3, #0
 8000b24:	e000      	b.n	8000b28 <gt521fx_start_enrollment+0x38>
	else return true;
 8000b26:	2301      	movs	r3, #1
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20009a90 	.word	0x20009a90

08000b34 <gt521fx_enrollment>:


bool gt521fx_enrollment(gt_521fx_enrollment_stage_e stage)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
	gt_521fx_cmd_e cmd_stage = GT521FX_CMD_ENROLL_1;
 8000b3e:	2323      	movs	r3, #35	; 0x23
 8000b40:	73fb      	strb	r3, [r7, #15]
	switch (stage)
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d007      	beq.n	8000b58 <gt521fx_enrollment+0x24>
 8000b48:	2b02      	cmp	r3, #2
 8000b4a:	d008      	beq.n	8000b5e <gt521fx_enrollment+0x2a>
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d000      	beq.n	8000b52 <gt521fx_enrollment+0x1e>
 8000b50:	e008      	b.n	8000b64 <gt521fx_enrollment+0x30>
	{
		case GT521FX_ENROLLMENT_STAGE_FIRST: // intentionally fall through
			cmd_stage = GT521FX_CMD_ENROLL_1;
 8000b52:	2323      	movs	r3, #35	; 0x23
 8000b54:	73fb      	strb	r3, [r7, #15]
		break;
 8000b56:	e006      	b.n	8000b66 <gt521fx_enrollment+0x32>
		case GT521FX_ENROLLMENT_STAGE_SECOND: // intentionally fall through
			cmd_stage = GT521FX_CMD_ENROLL_2;
 8000b58:	2324      	movs	r3, #36	; 0x24
 8000b5a:	73fb      	strb	r3, [r7, #15]
		break;
 8000b5c:	e003      	b.n	8000b66 <gt521fx_enrollment+0x32>
		case GT521FX_ENROLLMENT_STAGE_THIRD: // intentionally fall through
			cmd_stage = GT521FX_CMD_ENROLL_3;
 8000b5e:	2325      	movs	r3, #37	; 0x25
 8000b60:	73fb      	strb	r3, [r7, #15]
		break;
 8000b62:	e000      	b.n	8000b66 <gt521fx_enrollment+0x32>
		default:
			while(1);
 8000b64:	e7fe      	b.n	8000b64 <gt521fx_enrollment+0x30>
		break;
	}
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, cmd_stage, 0);
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
 8000b68:	2200      	movs	r2, #0
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	480b      	ldr	r0, [pc, #44]	; (8000b9c <gt521fx_enrollment+0x68>)
 8000b6e:	f000 f98d 	bl	8000e8c <packet_create_cmd_and_send>
	while (!packet_rsp_was_received());
 8000b72:	bf00      	nop
 8000b74:	f000 f96a 	bl	8000e4c <packet_rsp_was_received>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	f083 0301 	eor.w	r3, r3, #1
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d1f7      	bne.n	8000b74 <gt521fx_enrollment+0x40>
	if (gt521fx_nack_flag()) return false;
 8000b84:	f7ff fe60 	bl	8000848 <gt521fx_nack_flag>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <gt521fx_enrollment+0x5e>
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e000      	b.n	8000b94 <gt521fx_enrollment+0x60>
	else return true;
 8000b92:	2301      	movs	r3, #1
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20009a90 	.word	0x20009a90

08000ba0 <gt521fx_finger_is_pressed>:
	else return true;
}


bool gt521fx_finger_is_pressed(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_IS_PRESS_FINGER, 0);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2126      	movs	r1, #38	; 0x26
 8000ba8:	480a      	ldr	r0, [pc, #40]	; (8000bd4 <gt521fx_finger_is_pressed+0x34>)
 8000baa:	f000 f96f 	bl	8000e8c <packet_create_cmd_and_send>
	while (!packet_rsp_was_received());
 8000bae:	bf00      	nop
 8000bb0:	f000 f94c 	bl	8000e4c <packet_rsp_was_received>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	f083 0301 	eor.w	r3, r3, #1
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d1f7      	bne.n	8000bb0 <gt521fx_finger_is_pressed+0x10>
	if (gt521fx_finger_is_pressed_flag()) return true;
 8000bc0:	f7ff fe6e 	bl	80008a0 <gt521fx_finger_is_pressed_flag>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <gt521fx_finger_is_pressed+0x2e>
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e000      	b.n	8000bd0 <gt521fx_finger_is_pressed+0x30>
	else return false;
 8000bce:	2300      	movs	r3, #0
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20009a90 	.word	0x20009a90

08000bd8 <gt521fx_capture_finger>:
	else return true;
}


bool gt521fx_capture_finger(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	packet_create_cmd_and_send((p_packet_handle_t)&gt521fx_tx_pkt, GT521FX_CMD_CAPTURE_FINGER, 0);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2160      	movs	r1, #96	; 0x60
 8000be0:	480a      	ldr	r0, [pc, #40]	; (8000c0c <gt521fx_capture_finger+0x34>)
 8000be2:	f000 f953 	bl	8000e8c <packet_create_cmd_and_send>
	while (!packet_rsp_was_received());
 8000be6:	bf00      	nop
 8000be8:	f000 f930 	bl	8000e4c <packet_rsp_was_received>
 8000bec:	4603      	mov	r3, r0
 8000bee:	f083 0301 	eor.w	r3, r3, #1
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d1f7      	bne.n	8000be8 <gt521fx_capture_finger+0x10>
	if (gt521fx_nack_flag())
 8000bf8:	f7ff fe26 	bl	8000848 <gt521fx_nack_flag>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <gt521fx_capture_finger+0x2e>
	{
		return false;
 8000c02:	2300      	movs	r3, #0
 8000c04:	e000      	b.n	8000c08 <gt521fx_capture_finger+0x30>
	}
	else return true;
 8000c06:	2301      	movs	r3, #1
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20009a90 	.word	0x20009a90

08000c10 <main>:
#include "board_init.h"
#include "task_create.h"


int main(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
	board_init();
 8000c14:	f7ff fc78 	bl	8000508 <board_init>

	osKernelInitialize();
 8000c18:	f004 f994 	bl	8004f44 <osKernelInitialize>
	task_create();
 8000c1c:	f000 fee2 	bl	80019e4 <task_create>
	osKernelStart();
 8000c20:	f004 f9c4 	bl	8004fac <osKernelStart>

	while(1); // should never reach this...
 8000c24:	e7fe      	b.n	8000c24 <main+0x14>
	...

08000c28 <packet_queue_init>:

void packet_rsp_set(void);


void packet_queue_init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
	/* creation of sensor_rx_queue */
	  sensor_rx_queueHandle = osMessageQueueNew (16, sizeof( pkt_t ), &sensor_rx_queue_attributes);
 8000c2c:	4a08      	ldr	r2, [pc, #32]	; (8000c50 <packet_queue_init+0x28>)
 8000c2e:	210c      	movs	r1, #12
 8000c30:	2010      	movs	r0, #16
 8000c32:	f004 fac5 	bl	80051c0 <osMessageQueueNew>
 8000c36:	4602      	mov	r2, r0
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <packet_queue_init+0x2c>)
 8000c3a:	601a      	str	r2, [r3, #0]

	  /* creation of sensor_tx_queue */
	  sensor_tx_queueHandle = osMessageQueueNew (16, sizeof( pkt_t ), &sensor_tx_queue_attributes);
 8000c3c:	4a06      	ldr	r2, [pc, #24]	; (8000c58 <packet_queue_init+0x30>)
 8000c3e:	210c      	movs	r1, #12
 8000c40:	2010      	movs	r0, #16
 8000c42:	f004 fabd 	bl	80051c0 <osMessageQueueNew>
 8000c46:	4602      	mov	r2, r0
 8000c48:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <packet_queue_init+0x34>)
 8000c4a:	601a      	str	r2, [r3, #0]
	//sensor_rx_queueHandle = osMessageQueueNew (SNS_RX_QUEUE_DEPTH, sizeof(pkt_t), &sensor_rx_queue_attributes);

	/* creation of sensor_tx_queue */
	//sensor_tx_queueHandle = osMessageQueueNew (SNS_TX_QUEUE_DEPTH, sizeof(pkt_t), &sensor_tx_queue_attributes);

}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	080086dc 	.word	0x080086dc
 8000c54:	20009cc0 	.word	0x20009cc0
 8000c58:	080086f4 	.word	0x080086f4
 8000c5c:	20009c6c 	.word	0x20009c6c

08000c60 <packet_enqueue>:

void packet_enqueue(p_packet_handle_t pkt_handle, pkt_src_dst_t dst)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	70fb      	strb	r3, [r7, #3]
	// todo add blocking w/ parameter
	switch (dst)
 8000c6c:	78fb      	ldrb	r3, [r7, #3]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d002      	beq.n	8000c78 <packet_enqueue+0x18>
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d00b      	beq.n	8000c8e <packet_enqueue+0x2e>
 8000c76:	e015      	b.n	8000ca4 <packet_enqueue+0x44>
	{
		case PKT_SRC_DST_SNS_TX:
			if (osOK != osMessageQueuePut(sensor_tx_queueHandle, pkt_handle, 0, 0))
 8000c78:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <packet_enqueue+0x54>)
 8000c7a:	6818      	ldr	r0, [r3, #0]
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	2200      	movs	r2, #0
 8000c80:	6879      	ldr	r1, [r7, #4]
 8000c82:	f004 fb23 	bl	80052cc <osMessageQueuePut>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d00c      	beq.n	8000ca6 <packet_enqueue+0x46>
			{
				while(1); // queue full?
 8000c8c:	e7fe      	b.n	8000c8c <packet_enqueue+0x2c>
			}
		break;
		case PKT_SRC_DST_SNS_RX:
			if (osOK != osMessageQueuePut(sensor_rx_queueHandle, pkt_handle, 0, 0))
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <packet_enqueue+0x58>)
 8000c90:	6818      	ldr	r0, [r3, #0]
 8000c92:	2300      	movs	r3, #0
 8000c94:	2200      	movs	r2, #0
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	f004 fb18 	bl	80052cc <osMessageQueuePut>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d003      	beq.n	8000caa <packet_enqueue+0x4a>
			{
				while(1); // queue full?
 8000ca2:	e7fe      	b.n	8000ca2 <packet_enqueue+0x42>
			}
		break;
		default:
			while(1); // wtf
 8000ca4:	e7fe      	b.n	8000ca4 <packet_enqueue+0x44>
		break;
 8000ca6:	bf00      	nop
 8000ca8:	e000      	b.n	8000cac <packet_enqueue+0x4c>
		break;
 8000caa:	bf00      	nop
		break;
	}
}
 8000cac:	bf00      	nop
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20009c6c 	.word	0x20009c6c
 8000cb8:	20009cc0 	.word	0x20009cc0

08000cbc <packet_dequeue>:


void packet_dequeue(p_packet_handle_t pkt_handle, pkt_src_dst_t src)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	70fb      	strb	r3, [r7, #3]
	switch(src)
 8000cc8:	78fb      	ldrb	r3, [r7, #3]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d002      	beq.n	8000cd4 <packet_dequeue+0x18>
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d00c      	beq.n	8000cec <packet_dequeue+0x30>
				while(1); // wtf
			}
			//packet_rsp_set();
		break;
		default:
		break;
 8000cd2:	e01a      	b.n	8000d0a <packet_dequeue+0x4e>
			if (osOK != osMessageQueueGet(sensor_tx_queueHandle, (uint8_t *)pkt_handle, NULL, osWaitForever))
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <packet_dequeue+0x58>)
 8000cd6:	6818      	ldr	r0, [r3, #0]
 8000cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cdc:	2200      	movs	r2, #0
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	f004 fb68 	bl	80053b4 <osMessageQueueGet>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d00c      	beq.n	8000d04 <packet_dequeue+0x48>
				while(1); // wtf
 8000cea:	e7fe      	b.n	8000cea <packet_dequeue+0x2e>
			if (osOK != osMessageQueueGet(sensor_rx_queueHandle, pkt_handle, NULL, osWaitForever))
 8000cec:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <packet_dequeue+0x5c>)
 8000cee:	6818      	ldr	r0, [r3, #0]
 8000cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	6879      	ldr	r1, [r7, #4]
 8000cf8:	f004 fb5c 	bl	80053b4 <osMessageQueueGet>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d002      	beq.n	8000d08 <packet_dequeue+0x4c>
				while(1); // wtf
 8000d02:	e7fe      	b.n	8000d02 <packet_dequeue+0x46>
		break;
 8000d04:	bf00      	nop
 8000d06:	e000      	b.n	8000d0a <packet_dequeue+0x4e>
		break;
 8000d08:	bf00      	nop
	}
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20009c6c 	.word	0x20009c6c
 8000d18:	20009cc0 	.word	0x20009cc0

08000d1c <packet_enqueue_to_sensor_tx>:


void packet_enqueue_to_sensor_tx(p_packet_handle_t pkt_handle)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	packet_enqueue(pkt_handle, PKT_SRC_DST_SNS_TX);
 8000d24:	2100      	movs	r1, #0
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff ff9a 	bl	8000c60 <packet_enqueue>
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <packet_dequeue_from_sensor_tx>:


void packet_dequeue_from_sensor_tx(p_packet_handle_t pkt_handle)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	packet_dequeue(pkt_handle, PKT_SRC_DST_SNS_TX);
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ffbc 	bl	8000cbc <packet_dequeue>
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <packet_enqueue_to_sensor_rx>:


void packet_enqueue_to_sensor_rx(p_packet_handle_t pkt_handle)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	packet_enqueue(pkt_handle, PKT_SRC_DST_SNS_RX);
 8000d54:	2101      	movs	r1, #1
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f7ff ff82 	bl	8000c60 <packet_enqueue>
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <packet_dequeue_from_sensor_rx>:


void packet_dequeue_from_sensor_rx(p_packet_handle_t pkt_handle)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	packet_dequeue(pkt_handle, PKT_SRC_DST_SNS_RX);
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff ffa4 	bl	8000cbc <packet_dequeue>
}
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <packet_parse_rsp>:

//gt_521fx_error_e g_nack_state = GT521FX_NO_ERROR;


void packet_parse_rsp(p_packet_handle_t pkt_handle)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	if (RSP_RSP_ACK == pkt_handle->rsp_rsp)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	891b      	ldrh	r3, [r3, #8]
 8000d88:	2b30      	cmp	r3, #48	; 0x30
 8000d8a:	d103      	bne.n	8000d94 <packet_parse_rsp+0x18>
	{
		gt521fx_nack_flag_set(false);
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f7ff fd3b 	bl	8000808 <gt521fx_nack_flag_set>
 8000d92:	e00c      	b.n	8000dae <packet_parse_rsp+0x32>
	}
	else if (RSP_RSP_NACK == pkt_handle->rsp_rsp)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	891b      	ldrh	r3, [r3, #8]
 8000d98:	2b31      	cmp	r3, #49	; 0x31
 8000d9a:	d108      	bne.n	8000dae <packet_parse_rsp+0x32>
	{
		gt521fx_nack_flag_set(true);
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	f7ff fd33 	bl	8000808 <gt521fx_nack_flag_set>
		gt521fx_nack_state_set((gt_521fx_error_e)pkt_handle->rsp_error_code);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fd3d 	bl	8000828 <gt521fx_nack_state_set>
	}
	switch(cmd_in_flight())
 8000dae:	f000 f861 	bl	8000e74 <cmd_in_flight>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b26      	cmp	r3, #38	; 0x26
 8000db6:	d010      	beq.n	8000dda <packet_parse_rsp+0x5e>
 8000db8:	2b26      	cmp	r3, #38	; 0x26
 8000dba:	dc02      	bgt.n	8000dc2 <packet_parse_rsp+0x46>
 8000dbc:	2b20      	cmp	r3, #32
 8000dbe:	d005      	beq.n	8000dcc <packet_parse_rsp+0x50>
		break;
		case GT521FX_CMD_GET_SECURITY_LEVEL:
			gt521fx_security_lvl_set(pkt_handle->cmd_input_param);
		break;
		default:
		break;
 8000dc0:	e025      	b.n	8000e0e <packet_parse_rsp+0x92>
	switch(cmd_in_flight())
 8000dc2:	2b51      	cmp	r3, #81	; 0x51
 8000dc4:	d015      	beq.n	8000df2 <packet_parse_rsp+0x76>
 8000dc6:	2bf1      	cmp	r3, #241	; 0xf1
 8000dc8:	d01a      	beq.n	8000e00 <packet_parse_rsp+0x84>
		break;
 8000dca:	e020      	b.n	8000e0e <packet_parse_rsp+0x92>
			gt521fx_enrolled_fingerprint_count_set(pkt_handle->cmd_input_param);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fd44 	bl	8000860 <gt521fx_enrolled_fingerprint_count_set>
		break;
 8000dd8:	e019      	b.n	8000e0e <packet_parse_rsp+0x92>
			if (0 == (pkt_handle->rsp_output_param))
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d103      	bne.n	8000dea <packet_parse_rsp+0x6e>
				gt521fx_finger_is_pressed_set(true);
 8000de2:	2001      	movs	r0, #1
 8000de4:	f7ff fd4c 	bl	8000880 <gt521fx_finger_is_pressed_set>
		break;
 8000de8:	e011      	b.n	8000e0e <packet_parse_rsp+0x92>
			else gt521fx_finger_is_pressed_set(false);
 8000dea:	2000      	movs	r0, #0
 8000dec:	f7ff fd48 	bl	8000880 <gt521fx_finger_is_pressed_set>
		break;
 8000df0:	e00d      	b.n	8000e0e <packet_parse_rsp+0x92>
			gt521fx_identified_id_set(pkt_handle->cmd_input_param);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fd6d 	bl	80008d8 <gt521fx_identified_id_set>
		break;
 8000dfe:	e006      	b.n	8000e0e <packet_parse_rsp+0x92>
			gt521fx_security_lvl_set(pkt_handle->cmd_input_param);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fd56 	bl	80008b8 <gt521fx_security_lvl_set>
		break;
 8000e0c:	bf00      	nop
	}
	packet_rsp_set();
 8000e0e:	f000 f811 	bl	8000e34 <packet_rsp_set>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <packet_rsp_clear>:


bool packet_rsp_received = false;

void packet_rsp_clear(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
	packet_rsp_received = false;
 8000e20:	4b03      	ldr	r3, [pc, #12]	; (8000e30 <packet_rsp_clear+0x14>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	701a      	strb	r2, [r3, #0]
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	20000044 	.word	0x20000044

08000e34 <packet_rsp_set>:


void packet_rsp_set(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
	packet_rsp_received = true;
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <packet_rsp_set+0x14>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	701a      	strb	r2, [r3, #0]
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	20000044 	.word	0x20000044

08000e4c <packet_rsp_was_received>:


bool packet_rsp_was_received(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
	if (packet_rsp_received)
 8000e50:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <packet_rsp_was_received+0x24>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d004      	beq.n	8000e62 <packet_rsp_was_received+0x16>
	{
		packet_rsp_received = false;
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <packet_rsp_was_received+0x24>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	701a      	strb	r2, [r3, #0]
		return true;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e000      	b.n	8000e64 <packet_rsp_was_received+0x18>
	}
	else
	{
		return false;
 8000e62:	2300      	movs	r3, #0
	}
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	20000044 	.word	0x20000044

08000e74 <cmd_in_flight>:


gt_521fx_cmd_e g_cmd_in_flight = GT521FX_CMD_OPEN;

gt_521fx_cmd_e cmd_in_flight(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
	return g_cmd_in_flight;
 8000e78:	4b03      	ldr	r3, [pc, #12]	; (8000e88 <cmd_in_flight+0x14>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	2000000a 	.word	0x2000000a

08000e8c <packet_create_cmd_and_send>:

void packet_create_cmd_and_send(p_packet_handle_t pkt_handle, gt_521fx_cmd_e cmd, uint32_t input_param)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	460b      	mov	r3, r1
 8000e96:	607a      	str	r2, [r7, #4]
 8000e98:	72fb      	strb	r3, [r7, #11]
	packet_rsp_clear();
 8000e9a:	f7ff ffbf 	bl	8000e1c <packet_rsp_clear>
	g_cmd_in_flight = cmd;
 8000e9e:	4a10      	ldr	r2, [pc, #64]	; (8000ee0 <packet_create_cmd_and_send+0x54>)
 8000ea0:	7afb      	ldrb	r3, [r7, #11]
 8000ea2:	7013      	strb	r3, [r2, #0]
	pkt_handle->start_code[0] = 0x55; // default
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2255      	movs	r2, #85	; 0x55
 8000ea8:	701a      	strb	r2, [r3, #0]
	pkt_handle->start_code[1] = 0xAA; // default
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	22aa      	movs	r2, #170	; 0xaa
 8000eae:	705a      	strb	r2, [r3, #1]
	pkt_handle->dev_id = 0x0001; // default
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	805a      	strh	r2, [r3, #2]
	pkt_handle->cmd_input_param = input_param;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	605a      	str	r2, [r3, #4]
	pkt_handle->cmd_code = cmd;
 8000ebc:	7afb      	ldrb	r3, [r7, #11]
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	811a      	strh	r2, [r3, #8]
	pkt_handle->check_sum = packet_calc_check_sum(pkt_handle);
 8000ec4:	68f8      	ldr	r0, [r7, #12]
 8000ec6:	f000 f80d 	bl	8000ee4 <packet_calc_check_sum>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	461a      	mov	r2, r3
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	815a      	strh	r2, [r3, #10]
	packet_enqueue_to_sensor_tx(pkt_handle);
 8000ed2:	68f8      	ldr	r0, [r7, #12]
 8000ed4:	f7ff ff22 	bl	8000d1c <packet_enqueue_to_sensor_tx>
}
 8000ed8:	bf00      	nop
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	2000000a 	.word	0x2000000a

08000ee4 <packet_calc_check_sum>:


uint16_t packet_calc_check_sum(p_packet_handle_t pkt_handle)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	uint16_t check_sum = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	81fb      	strh	r3, [r7, #14]
	check_sum += pkt_handle->start_code[0];
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	89fb      	ldrh	r3, [r7, #14]
 8000ef8:	4413      	add	r3, r2
 8000efa:	81fb      	strh	r3, [r7, #14]
	check_sum += pkt_handle->start_code[1];
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	785b      	ldrb	r3, [r3, #1]
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	89fb      	ldrh	r3, [r7, #14]
 8000f04:	4413      	add	r3, r2
 8000f06:	81fb      	strh	r3, [r7, #14]
	check_sum += pkt_handle->dev_id;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	885a      	ldrh	r2, [r3, #2]
 8000f0c:	89fb      	ldrh	r3, [r7, #14]
 8000f0e:	4413      	add	r3, r2
 8000f10:	81fb      	strh	r3, [r7, #14]
	check_sum += pkt_handle->cmd_input_param;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	89fb      	ldrh	r3, [r7, #14]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	81fb      	strh	r3, [r7, #14]
	check_sum += pkt_handle->cmd_code;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	891a      	ldrh	r2, [r3, #8]
 8000f22:	89fb      	ldrh	r3, [r7, #14]
 8000f24:	4413      	add	r3, r2
 8000f26:	81fb      	strh	r3, [r7, #14]
	return check_sum;
 8000f28:	89fb      	ldrh	r3, [r7, #14]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <USART3_IRQHandler>:

uint16_t g_free_buffer_index = 0;
uint8_t rx_data[sizeof(pkt_t)] = {0};

void USART3_IRQHandler()
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	HAL_UART_RxCpltCallback(&huart1);
 8000f3c:	4802      	ldr	r0, [pc, #8]	; (8000f48 <USART3_IRQHandler+0x10>)
 8000f3e:	f000 f805 	bl	8000f4c <HAL_UART_RxCpltCallback>
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20001a0c 	.word	0x20001a0c

08000f4c <HAL_UART_RxCpltCallback>:


bool uart_rx_flag = false;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_DMA(&huart1, rx_data, sizeof(pkt_t));
	memcpy(rsp_buffer.flat_data, rx_data, sizeof(pkt_t));
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_UART_RxCpltCallback+0x24>)
 8000f56:	4a07      	ldr	r2, [pc, #28]	; (8000f74 <HAL_UART_RxCpltCallback+0x28>)
 8000f58:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	uart_rx_flag = true;
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_UART_RxCpltCallback+0x2c>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	701a      	strb	r2, [r3, #0]

}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	20009d20 	.word	0x20009d20
 8000f74:	20000048 	.word	0x20000048
 8000f78:	20000054 	.word	0x20000054

08000f7c <task_sensor_tx_entry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_sensor_tx_entry */
void task_sensor_tx_entry(void *argument)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_sensor_tx_entry */
  /* Infinite loop */
  for(;;)
  {
	  packet_dequeue_from_sensor_tx(&sns_tx_pkt);
 8000f84:	4806      	ldr	r0, [pc, #24]	; (8000fa0 <task_sensor_tx_entry+0x24>)
 8000f86:	f7ff fed5 	bl	8000d34 <packet_dequeue_from_sensor_tx>
	  HAL_UART_Receive_DMA(&huart1, rx_data, sizeof(pkt_t));
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	4905      	ldr	r1, [pc, #20]	; (8000fa4 <task_sensor_tx_entry+0x28>)
 8000f8e:	4806      	ldr	r0, [pc, #24]	; (8000fa8 <task_sensor_tx_entry+0x2c>)
 8000f90:	f003 f920 	bl	80041d4 <HAL_UART_Receive_DMA>
	  HAL_UART_Transmit_DMA(&huart1, (uint8_t *)&sns_tx_pkt, sizeof(sns_tx_pkt));
 8000f94:	220c      	movs	r2, #12
 8000f96:	4902      	ldr	r1, [pc, #8]	; (8000fa0 <task_sensor_tx_entry+0x24>)
 8000f98:	4803      	ldr	r0, [pc, #12]	; (8000fa8 <task_sensor_tx_entry+0x2c>)
 8000f9a:	f003 f89f 	bl	80040dc <HAL_UART_Transmit_DMA>
	  packet_dequeue_from_sensor_tx(&sns_tx_pkt);
 8000f9e:	e7f1      	b.n	8000f84 <task_sensor_tx_entry+0x8>
 8000fa0:	20009cc4 	.word	0x20009cc4
 8000fa4:	20000048 	.word	0x20000048
 8000fa8:	20001a0c 	.word	0x20001a0c

08000fac <sensor_rx_entry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensor_rx_entry */
void sensor_rx_entry(void *argument)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensor_rx_entry */
  /* Infinite loop */
	do
	{
		if(uart_rx_flag)
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <sensor_rx_entry+0x2c>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d0fb      	beq.n	8000fb4 <sensor_rx_entry+0x8>
		{
			uart_rx_flag = false;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <sensor_rx_entry+0x2c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
			packet_enqueue_to_sensor_rx(&rsp_buffer);
 8000fc2:	4806      	ldr	r0, [pc, #24]	; (8000fdc <sensor_rx_entry+0x30>)
 8000fc4:	f7ff fec2 	bl	8000d4c <packet_enqueue_to_sensor_rx>
			packet_dequeue_from_sensor_rx(&sns_rx_pkt);
 8000fc8:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <sensor_rx_entry+0x34>)
 8000fca:	f7ff fecb 	bl	8000d64 <packet_dequeue_from_sensor_rx>
			packet_parse_rsp(&sns_rx_pkt);
 8000fce:	4804      	ldr	r0, [pc, #16]	; (8000fe0 <sensor_rx_entry+0x34>)
 8000fd0:	f7ff fed4 	bl	8000d7c <packet_parse_rsp>
		if(uart_rx_flag)
 8000fd4:	e7ee      	b.n	8000fb4 <sensor_rx_entry+0x8>
 8000fd6:	bf00      	nop
 8000fd8:	20000054 	.word	0x20000054
 8000fdc:	20009d20 	.word	0x20009d20
 8000fe0:	20009d7c 	.word	0x20009d7c

08000fe4 <ssd1351_spi_byte_write>:
void ssd1351_clear_pin(ssd1351_pins pin);
void ssd1351_reset_pixel_address(void);


static void ssd1351_spi_byte_write(uint8_t val)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
	uint8_t data = val;
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &data, 1, 10000);
 8000ff2:	f107 010f 	add.w	r1, r7, #15
 8000ff6:	f242 7310 	movw	r3, #10000	; 0x2710
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	4803      	ldr	r0, [pc, #12]	; (800100c <ssd1351_spi_byte_write+0x28>)
 8000ffe:	f002 fd54 	bl	8003aaa <HAL_SPI_Transmit>
}
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20001918 	.word	0x20001918

08001010 <ssd1351_spi_block_write>:


static void ssd1351_spi_block_write(uint8_t *data, uint32_t len)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&hspi2, data, len, 10000);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	b29a      	uxth	r2, r3
 800101e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	4803      	ldr	r0, [pc, #12]	; (8001034 <ssd1351_spi_block_write+0x24>)
 8001026:	f002 fd40 	bl	8003aaa <HAL_SPI_Transmit>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20001918 	.word	0x20001918

08001038 <ssd1351_byte_write_data>:


void ssd1351_byte_write_data(uint8_t data)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
	ssd1351_set_pin(SSD1351_PIN_DC); // set DC (data mode)
 8001042:	2001      	movs	r0, #1
 8001044:	f000 f880 	bl	8001148 <ssd1351_set_pin>
	ssd1351_clear_pin(SSD1351_PIN_CS); // select chip (active low)
 8001048:	2000      	movs	r0, #0
 800104a:	f000 f851 	bl	80010f0 <ssd1351_clear_pin>
	ssd1351_spi_byte_write(data); // byte write
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ffc7 	bl	8000fe4 <ssd1351_spi_byte_write>
	ssd1351_set_pin(SSD1351_PIN_CS); // deselect chip
 8001056:	2000      	movs	r0, #0
 8001058:	f000 f876 	bl	8001148 <ssd1351_set_pin>
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <ssd1351_block_write_data>:


void ssd1351_block_write_data(uint8_t *data, uint32_t len)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
	ssd1351_set_pin(SSD1351_PIN_DC); // set DC (data mode)
 800106e:	2001      	movs	r0, #1
 8001070:	f000 f86a 	bl	8001148 <ssd1351_set_pin>
	ssd1351_clear_pin(SSD1351_PIN_CS); // select chip (active low)
 8001074:	2000      	movs	r0, #0
 8001076:	f000 f83b 	bl	80010f0 <ssd1351_clear_pin>
	ssd1351_spi_block_write(data, len); // byte write
 800107a:	6839      	ldr	r1, [r7, #0]
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ffc7 	bl	8001010 <ssd1351_spi_block_write>
	ssd1351_set_pin(SSD1351_PIN_CS); // deselect chip
 8001082:	2000      	movs	r0, #0
 8001084:	f000 f860 	bl	8001148 <ssd1351_set_pin>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <ssd1351_write_cmd>:


void ssd1351_write_cmd(ssd1351_cmd_e cmd)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
	ssd1351_clear_pin(SSD1351_PIN_DC); // clear DC (cmd mode)
 800109a:	2001      	movs	r0, #1
 800109c:	f000 f828 	bl	80010f0 <ssd1351_clear_pin>
	ssd1351_clear_pin(SSD1351_PIN_CS); // select chip (active low)
 80010a0:	2000      	movs	r0, #0
 80010a2:	f000 f825 	bl	80010f0 <ssd1351_clear_pin>
	ssd1351_spi_byte_write(cmd); // send cmd
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff9b 	bl	8000fe4 <ssd1351_spi_byte_write>
	ssd1351_set_pin(SSD1351_PIN_CS); // deselect chip
 80010ae:	2000      	movs	r0, #0
 80010b0:	f000 f84a 	bl	8001148 <ssd1351_set_pin>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <ssd1351_write_buffer_to_display>:


void ssd1351_write_buffer_to_display(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	ssd1351_write_cmd(SSD1351_CMD_WRITE_RAM);
 80010c0:	205c      	movs	r0, #92	; 0x5c
 80010c2:	f7ff ffe5 	bl	8001090 <ssd1351_write_cmd>
	ssd1351_block_write_data(ssd1351_buffer.ssd1351_disp_buffer_uint8, sizeof(ssd1351_buffer.ssd1351_disp_buffer_uint8));
 80010c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ca:	4802      	ldr	r0, [pc, #8]	; (80010d4 <ssd1351_write_buffer_to_display+0x18>)
 80010cc:	f7ff ffca 	bl	8001064 <ssd1351_block_write_data>
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20001a90 	.word	0x20001a90

080010d8 <ssd1351_delay_ms>:


void ssd1351_delay_ms(uint32_t delay_ms)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay_ms);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f000 fd85 	bl	8001bf0 <HAL_Delay>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <ssd1351_clear_pin>:


void ssd1351_clear_pin(ssd1351_pins pin)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
	GPIO_TypeDef *hal_port;
	uint16_t hal_pin;
	switch(pin)
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d00a      	beq.n	8001116 <ssd1351_clear_pin+0x26>
 8001100:	2b02      	cmp	r3, #2
 8001102:	d00f      	beq.n	8001124 <ssd1351_clear_pin+0x34>
 8001104:	2b00      	cmp	r3, #0
 8001106:	d112      	bne.n	800112e <ssd1351_clear_pin+0x3e>
	{
		case SSD1351_PIN_CS:
			hal_port = GPIOA;
 8001108:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800110c:	60fb      	str	r3, [r7, #12]
			hal_pin = GPIO_PIN_11;
 800110e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001112:	817b      	strh	r3, [r7, #10]
		break;
 8001114:	e00b      	b.n	800112e <ssd1351_clear_pin+0x3e>
		case SSD1351_PIN_DC:
			hal_port = GPIOA;
 8001116:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800111a:	60fb      	str	r3, [r7, #12]
			hal_pin = GPIO_PIN_8;
 800111c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001120:	817b      	strh	r3, [r7, #10]
		break;
 8001122:	e004      	b.n	800112e <ssd1351_clear_pin+0x3e>
		case SSD1351_PIN_RST:
			hal_port = GPIOB;
 8001124:	4b07      	ldr	r3, [pc, #28]	; (8001144 <ssd1351_clear_pin+0x54>)
 8001126:	60fb      	str	r3, [r7, #12]
			hal_pin = GPIO_PIN_6;
 8001128:	2340      	movs	r3, #64	; 0x40
 800112a:	817b      	strh	r3, [r7, #10]
		break;
 800112c:	bf00      	nop
	}
	HAL_GPIO_WritePin(hal_port, hal_pin, GPIO_PIN_RESET);
 800112e:	897b      	ldrh	r3, [r7, #10]
 8001130:	2200      	movs	r2, #0
 8001132:	4619      	mov	r1, r3
 8001134:	68f8      	ldr	r0, [r7, #12]
 8001136:	f001 fa41 	bl	80025bc <HAL_GPIO_WritePin>
}
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	48000400 	.word	0x48000400

08001148 <ssd1351_set_pin>:


void ssd1351_set_pin(ssd1351_pins pin)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
	GPIO_TypeDef *hal_port;
	uint16_t hal_pin;
	switch(pin)
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d00a      	beq.n	800116e <ssd1351_set_pin+0x26>
 8001158:	2b02      	cmp	r3, #2
 800115a:	d00f      	beq.n	800117c <ssd1351_set_pin+0x34>
 800115c:	2b00      	cmp	r3, #0
 800115e:	d112      	bne.n	8001186 <ssd1351_set_pin+0x3e>
	{
		case SSD1351_PIN_CS:
			hal_port = GPIOA;
 8001160:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001164:	60fb      	str	r3, [r7, #12]
			hal_pin = GPIO_PIN_11;
 8001166:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800116a:	817b      	strh	r3, [r7, #10]
		break;
 800116c:	e00b      	b.n	8001186 <ssd1351_set_pin+0x3e>
		case SSD1351_PIN_DC:
			hal_port = GPIOA;
 800116e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001172:	60fb      	str	r3, [r7, #12]
			hal_pin = GPIO_PIN_8;
 8001174:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001178:	817b      	strh	r3, [r7, #10]
		break;
 800117a:	e004      	b.n	8001186 <ssd1351_set_pin+0x3e>
		case SSD1351_PIN_RST:
			hal_port = GPIOB;
 800117c:	4b07      	ldr	r3, [pc, #28]	; (800119c <ssd1351_set_pin+0x54>)
 800117e:	60fb      	str	r3, [r7, #12]
			hal_pin = GPIO_PIN_6;
 8001180:	2340      	movs	r3, #64	; 0x40
 8001182:	817b      	strh	r3, [r7, #10]
		break;
 8001184:	bf00      	nop
	}
	HAL_GPIO_WritePin(hal_port, hal_pin, GPIO_PIN_SET);
 8001186:	897b      	ldrh	r3, [r7, #10]
 8001188:	2201      	movs	r2, #1
 800118a:	4619      	mov	r1, r3
 800118c:	68f8      	ldr	r0, [r7, #12]
 800118e:	f001 fa15 	bl	80025bc <HAL_GPIO_WritePin>
}
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	48000400 	.word	0x48000400

080011a0 <ssd1351_init>:


void ssd1351_init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	ssd1351_set_pin(SSD1351_PIN_RST); // clear DC (cmd mode)
 80011a4:	2002      	movs	r0, #2
 80011a6:	f7ff ffcf 	bl	8001148 <ssd1351_set_pin>
	ssd1351_delay_ms(100); // how long to hold reset?
 80011aa:	2064      	movs	r0, #100	; 0x64
 80011ac:	f7ff ff94 	bl	80010d8 <ssd1351_delay_ms>
	ssd1351_clear_pin(SSD1351_PIN_RST); // clear DC (cmd mode)
 80011b0:	2002      	movs	r0, #2
 80011b2:	f7ff ff9d 	bl	80010f0 <ssd1351_clear_pin>
	ssd1351_delay_ms(100); // how long to pause after reset?
 80011b6:	2064      	movs	r0, #100	; 0x64
 80011b8:	f7ff ff8e 	bl	80010d8 <ssd1351_delay_ms>
	ssd1351_set_pin(SSD1351_PIN_RST); // clear DC (cmd mode)
 80011bc:	2002      	movs	r0, #2
 80011be:	f7ff ffc3 	bl	8001148 <ssd1351_set_pin>

	ssd1351_write_cmd(SSD1351_CMD_SET_CMD_LOCK);
 80011c2:	20fd      	movs	r0, #253	; 0xfd
 80011c4:	f7ff ff64 	bl	8001090 <ssd1351_write_cmd>
	ssd1351_byte_write_data(SSD1351_CMD_UNLOCK_BYTE);
 80011c8:	2012      	movs	r0, #18
 80011ca:	f7ff ff35 	bl	8001038 <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_SET_CMD_LOCK);
 80011ce:	20fd      	movs	r0, #253	; 0xfd
 80011d0:	f7ff ff5e 	bl	8001090 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0xB1); // WHY?????
 80011d4:	20b1      	movs	r0, #177	; 0xb1
 80011d6:	f7ff ff2f 	bl	8001038 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_SLEEP_MODE_ON);
 80011da:	20ae      	movs	r0, #174	; 0xae
 80011dc:	f7ff ff58 	bl	8001090 <ssd1351_write_cmd>
	ssd1351_write_cmd(SSD1351_CMD_SET_DISP_MODE_OFF);
 80011e0:	20a4      	movs	r0, #164	; 0xa4
 80011e2:	f7ff ff55 	bl	8001090 <ssd1351_write_cmd>

	ssd1351_write_cmd(SSD1351_CMD_SET_COLUMN_ADDRESS);
 80011e6:	2015      	movs	r0, #21
 80011e8:	f7ff ff52 	bl	8001090 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x00);
 80011ec:	2000      	movs	r0, #0
 80011ee:	f7ff ff23 	bl	8001038 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0x7F);
 80011f2:	207f      	movs	r0, #127	; 0x7f
 80011f4:	f7ff ff20 	bl	8001038 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_ROW_ADDRESS);
 80011f8:	2075      	movs	r0, #117	; 0x75
 80011fa:	f7ff ff49 	bl	8001090 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x00);
 80011fe:	2000      	movs	r0, #0
 8001200:	f7ff ff1a 	bl	8001038 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0x7F);
 8001204:	207f      	movs	r0, #127	; 0x7f
 8001206:	f7ff ff17 	bl	8001038 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_FRONT_CLOCK_DIVIDER);
 800120a:	20b3      	movs	r0, #179	; 0xb3
 800120c:	f7ff ff40 	bl	8001090 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0xF1); // highest frequency (div by 1)
 8001210:	20f1      	movs	r0, #241	; 0xf1
 8001212:	f7ff ff11 	bl	8001038 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_MUX_RATIO);
 8001216:	20ca      	movs	r0, #202	; 0xca
 8001218:	f7ff ff3a 	bl	8001090 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x7F); // 128 MUX (Reset value)
 800121c:	207f      	movs	r0, #127	; 0x7f
 800121e:	f7ff ff0b 	bl	8001038 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_REMAP_COLOR_DEPTH);
 8001222:	20a0      	movs	r0, #160	; 0xa0
 8001224:	f7ff ff34 	bl	8001090 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x74);
 8001228:	2074      	movs	r0, #116	; 0x74
 800122a:	f7ff ff05 	bl	8001038 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_DISP_START_LINE);
 800122e:	20a1      	movs	r0, #161	; 0xa1
 8001230:	f7ff ff2e 	bl	8001090 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x00);
 8001234:	2000      	movs	r0, #0
 8001236:	f7ff feff 	bl	8001038 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_DISP_OFFSET);
 800123a:	20a2      	movs	r0, #162	; 0xa2
 800123c:	f7ff ff28 	bl	8001090 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x00);
 8001240:	2000      	movs	r0, #0
 8001242:	f7ff fef9 	bl	8001038 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_FUNCTION_SELECTION);
 8001246:	20ab      	movs	r0, #171	; 0xab
 8001248:	f7ff ff22 	bl	8001090 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x01);
 800124c:	2001      	movs	r0, #1
 800124e:	f7ff fef3 	bl	8001038 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_SEGMENT_LOW_VOLTAGE);
 8001252:	20b4      	movs	r0, #180	; 0xb4
 8001254:	f7ff ff1c 	bl	8001090 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0xA0);
 8001258:	20a0      	movs	r0, #160	; 0xa0
 800125a:	f7ff feed 	bl	8001038 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0xB5);
 800125e:	20b5      	movs	r0, #181	; 0xb5
 8001260:	f7ff feea 	bl	8001038 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0x55);
 8001264:	2055      	movs	r0, #85	; 0x55
 8001266:	f7ff fee7 	bl	8001038 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_CONTRAST_CURRENT);
 800126a:	20c1      	movs	r0, #193	; 0xc1
 800126c:	f7ff ff10 	bl	8001090 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0xC8);
 8001270:	20c8      	movs	r0, #200	; 0xc8
 8001272:	f7ff fee1 	bl	8001038 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0x80);
 8001276:	2080      	movs	r0, #128	; 0x80
 8001278:	f7ff fede 	bl	8001038 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0xC0);
 800127c:	20c0      	movs	r0, #192	; 0xc0
 800127e:	f7ff fedb 	bl	8001038 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_MASTER_CONTRAST_CURRENT_CTRL);
 8001282:	20c7      	movs	r0, #199	; 0xc7
 8001284:	f7ff ff04 	bl	8001090 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x0F);
 8001288:	200f      	movs	r0, #15
 800128a:	f7ff fed5 	bl	8001038 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_RESET_PRECHARGE_PERIOD);
 800128e:	20b1      	movs	r0, #177	; 0xb1
 8001290:	f7ff fefe 	bl	8001090 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x32);
 8001294:	2032      	movs	r0, #50	; 0x32
 8001296:	f7ff fecf 	bl	8001038 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_DISP_ENHANCEMENT);
 800129a:	20b2      	movs	r0, #178	; 0xb2
 800129c:	f7ff fef8 	bl	8001090 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0xA4);
 80012a0:	20a4      	movs	r0, #164	; 0xa4
 80012a2:	f7ff fec9 	bl	8001038 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0x00);
 80012a6:	2000      	movs	r0, #0
 80012a8:	f7ff fec6 	bl	8001038 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0x00);
 80012ac:	2000      	movs	r0, #0
 80012ae:	f7ff fec3 	bl	8001038 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_PRECHARGE_VOLTAGE);
 80012b2:	20bb      	movs	r0, #187	; 0xbb
 80012b4:	f7ff feec 	bl	8001090 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x17);
 80012b8:	2017      	movs	r0, #23
 80012ba:	f7ff febd 	bl	8001038 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_SECOND_PRECHARGE_PERIOD);
 80012be:	20b6      	movs	r0, #182	; 0xb6
 80012c0:	f7ff fee6 	bl	8001090 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x01);
 80012c4:	2001      	movs	r0, #1
 80012c6:	f7ff feb7 	bl	8001038 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_VCOMH_VOLTAGE);
 80012ca:	20be      	movs	r0, #190	; 0xbe
 80012cc:	f7ff fee0 	bl	8001090 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x05);
 80012d0:	2005      	movs	r0, #5
 80012d2:	f7ff feb1 	bl	8001038 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_DISP_MODE_NORMAL);
 80012d6:	20a6      	movs	r0, #166	; 0xa6
 80012d8:	f7ff feda 	bl	8001090 <ssd1351_write_cmd>

	ssd1351_clear_screen();
 80012dc:	f000 f874 	bl	80013c8 <ssd1351_clear_screen>
	ssd1351_write_cmd(SSD1351_CMD_SET_SLEEP_MODE_OFF);
 80012e0:	20af      	movs	r0, #175	; 0xaf
 80012e2:	f7ff fed5 	bl	8001090 <ssd1351_write_cmd>

	ssd1351_clear_screen();
 80012e6:	f000 f86f 	bl	80013c8 <ssd1351_clear_screen>
	ssd1351_reset_ram_address();
 80012ea:	f000 f865 	bl	80013b8 <ssd1351_reset_ram_address>

	ssd1351_clear_screen();
 80012ee:	f000 f86b 	bl	80013c8 <ssd1351_clear_screen>
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <ssd1351_draw_pixel>:
	ssd1351_write_cmd(SSD1351_CMD_SET_DISP_MODE_OFF);
}


void ssd1351_draw_pixel(uint8_t x, uint8_t y, color_16bit_e color)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
 8001302:	460b      	mov	r3, r1
 8001304:	71bb      	strb	r3, [r7, #6]
 8001306:	4613      	mov	r3, r2
 8001308:	80bb      	strh	r3, [r7, #4]
	if((x >= SSD1351_PIXEL_WIDTH - 1) || (y >= SSD1351_PIXEL_HEIGHT - 1)) return;
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	2b7e      	cmp	r3, #126	; 0x7e
 800130e:	d810      	bhi.n	8001332 <ssd1351_draw_pixel+0x3a>
 8001310:	79bb      	ldrb	r3, [r7, #6]
 8001312:	2b7e      	cmp	r3, #126	; 0x7e
 8001314:	d80d      	bhi.n	8001332 <ssd1351_draw_pixel+0x3a>
	else if((x < 0) || (y < 0)) return;
	// there are 128 columns and 128 row.  2 bytes stored per pixel
	//uint16_t index = ((SSD1351_PIXEL_WIDTH - 1) - x) + (y * (SSD1351_PIXEL_WIDTH - 1))
	uint16_t index = x + y * 128;
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	b29a      	uxth	r2, r3
 800131a:	79bb      	ldrb	r3, [r7, #6]
 800131c:	b29b      	uxth	r3, r3
 800131e:	01db      	lsls	r3, r3, #7
 8001320:	b29b      	uxth	r3, r3
 8001322:	4413      	add	r3, r2
 8001324:	81fb      	strh	r3, [r7, #14]
	ssd1351_buffer.ssd1351_disp_buffer_uint16[index] = color;
 8001326:	89fb      	ldrh	r3, [r7, #14]
 8001328:	4905      	ldr	r1, [pc, #20]	; (8001340 <ssd1351_draw_pixel+0x48>)
 800132a:	88ba      	ldrh	r2, [r7, #4]
 800132c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8001330:	e000      	b.n	8001334 <ssd1351_draw_pixel+0x3c>
	if((x >= SSD1351_PIXEL_WIDTH - 1) || (y >= SSD1351_PIXEL_HEIGHT - 1)) return;
 8001332:	bf00      	nop
}
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	20001a90 	.word	0x20001a90

08001344 <ssd1351_reset_pixel_address>:
	ssd1351_coordinates.y = row;
}


void ssd1351_reset_pixel_address(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
	ssd1351_coordinates.x = 0;
 8001348:	4b05      	ldr	r3, [pc, #20]	; (8001360 <ssd1351_reset_pixel_address+0x1c>)
 800134a:	2200      	movs	r2, #0
 800134c:	701a      	strb	r2, [r3, #0]
	ssd1351_coordinates.y = 0;
 800134e:	4b04      	ldr	r3, [pc, #16]	; (8001360 <ssd1351_reset_pixel_address+0x1c>)
 8001350:	2200      	movs	r2, #0
 8001352:	705a      	strb	r2, [r3, #1]
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20001a8c 	.word	0x20001a8c

08001364 <ssd1351_set_ram_address>:


void ssd1351_set_ram_address(uint16_t column, uint16_t row)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	460a      	mov	r2, r1
 800136e:	80fb      	strh	r3, [r7, #6]
 8001370:	4613      	mov	r3, r2
 8001372:	80bb      	strh	r3, [r7, #4]
	ssd1351_write_cmd(SSD1351_CMD_SET_COLUMN_ADDRESS);
 8001374:	2015      	movs	r0, #21
 8001376:	f7ff fe8b 	bl	8001090 <ssd1351_write_cmd>
	ssd1351_byte_write_data((column & 0xFF00) >> 8);
 800137a:	88fb      	ldrh	r3, [r7, #6]
 800137c:	0a1b      	lsrs	r3, r3, #8
 800137e:	b29b      	uxth	r3, r3
 8001380:	b2db      	uxtb	r3, r3
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fe58 	bl	8001038 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(column & 0x00FF);
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	b2db      	uxtb	r3, r3
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fe53 	bl	8001038 <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_SET_ROW_ADDRESS);
 8001392:	2075      	movs	r0, #117	; 0x75
 8001394:	f7ff fe7c 	bl	8001090 <ssd1351_write_cmd>
	ssd1351_byte_write_data((row & 0xFF00) >> 8);
 8001398:	88bb      	ldrh	r3, [r7, #4]
 800139a:	0a1b      	lsrs	r3, r3, #8
 800139c:	b29b      	uxth	r3, r3
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff fe49 	bl	8001038 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(row & 0x00FF);
 80013a6:	88bb      	ldrh	r3, [r7, #4]
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fe44 	bl	8001038 <ssd1351_byte_write_data>
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <ssd1351_reset_ram_address>:


void ssd1351_reset_ram_address(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
	ssd1351_set_ram_address(0x007F, 0x007F);
 80013bc:	217f      	movs	r1, #127	; 0x7f
 80013be:	207f      	movs	r0, #127	; 0x7f
 80013c0:	f7ff ffd0 	bl	8001364 <ssd1351_set_ram_address>
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <ssd1351_clear_screen>:
	ssd1351_write_cmd(SSD1351_CMD_SET_SLEEP_MODE_OFF);
}


void ssd1351_clear_screen(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
	//uint8_t clear_byte[128*128] = {0x00, 0x00};
	ssd1351_reset_ram_address();
 80013cc:	f7ff fff4 	bl	80013b8 <ssd1351_reset_ram_address>
	ssd1351_write_cmd(SSD1351_CMD_WRITE_RAM);
 80013d0:	205c      	movs	r0, #92	; 0x5c
 80013d2:	f7ff fe5d 	bl	8001090 <ssd1351_write_cmd>
	memset(ssd1351_buffer.ssd1351_disp_buffer_uint8, 0, sizeof(ssd1351_buffer.ssd1351_disp_buffer_uint8));
 80013d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013da:	2100      	movs	r1, #0
 80013dc:	4805      	ldr	r0, [pc, #20]	; (80013f4 <ssd1351_clear_screen+0x2c>)
 80013de:	f006 fd44 	bl	8007e6a <memset>
	ssd1351_block_write_data(ssd1351_buffer.ssd1351_disp_buffer_uint8, sizeof(ssd1351_buffer));
 80013e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013e6:	4803      	ldr	r0, [pc, #12]	; (80013f4 <ssd1351_clear_screen+0x2c>)
 80013e8:	f7ff fe3c 	bl	8001064 <ssd1351_block_write_data>
	//ssd1351_reset_ram_address();
	ssd1351_reset_pixel_address();
 80013ec:	f7ff ffaa 	bl	8001344 <ssd1351_reset_pixel_address>
}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20001a90 	.word	0x20001a90

080013f8 <ssd1351_write_char>:


#define SPECIAL_CHAR_OFFSET 	32
void ssd1351_write_char(color_16bit_e color, font_t font, char c)
{
 80013f8:	b590      	push	{r4, r7, lr}
 80013fa:	b089      	sub	sp, #36	; 0x24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4604      	mov	r4, r0
 8001400:	1d38      	adds	r0, r7, #4
 8001402:	e880 0006 	stmia.w	r0, {r1, r2}
 8001406:	461a      	mov	r2, r3
 8001408:	4623      	mov	r3, r4
 800140a:	81fb      	strh	r3, [r7, #14]
 800140c:	4613      	mov	r3, r2
 800140e:	737b      	strb	r3, [r7, #13]
	// basic idea for writing a character is as follows:
	// 1x 16-bit value is returned for each row in pixel height.  For example if the pixel height is
	// 10 then 10x 16-bit values make up that character
	uint16_t char_pix_row_data;
	uint16_t char_pix_vert_pos = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	83fb      	strh	r3, [r7, #30]
	uint16_t char_pix_horiz_pos = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	83bb      	strh	r3, [r7, #28]
	uint16_t height = font.height;
 8001418:	797b      	ldrb	r3, [r7, #5]
 800141a:	837b      	strh	r3, [r7, #26]
	uint16_t width = font.width;
 800141c:	793b      	ldrb	r3, [r7, #4]
 800141e:	833b      	strh	r3, [r7, #24]

	if((SSD1351_PIXEL_WIDTH <= ssd1351_coordinates.x + width) || (SSD1351_PIXEL_HEIGHT <= ssd1351_coordinates.y + height))
 8001420:	4b3f      	ldr	r3, [pc, #252]	; (8001520 <ssd1351_write_char+0x128>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	461a      	mov	r2, r3
 8001426:	8b3b      	ldrh	r3, [r7, #24]
 8001428:	4413      	add	r3, r2
 800142a:	2b7f      	cmp	r3, #127	; 0x7f
 800142c:	dc71      	bgt.n	8001512 <ssd1351_write_char+0x11a>
 800142e:	4b3c      	ldr	r3, [pc, #240]	; (8001520 <ssd1351_write_char+0x128>)
 8001430:	785b      	ldrb	r3, [r3, #1]
 8001432:	461a      	mov	r2, r3
 8001434:	8b7b      	ldrh	r3, [r7, #26]
 8001436:	4413      	add	r3, r2
 8001438:	2b7f      	cmp	r3, #127	; 0x7f
 800143a:	dc6a      	bgt.n	8001512 <ssd1351_write_char+0x11a>
	{
		return;
	}
	if (c == '\n') ssd1351_coordinates.x = SSD1351_PIXEL_WIDTH - 1; // if new line simply
 800143c:	7b7b      	ldrb	r3, [r7, #13]
 800143e:	2b0a      	cmp	r3, #10
 8001440:	d134      	bne.n	80014ac <ssd1351_write_char+0xb4>
 8001442:	4b37      	ldr	r3, [pc, #220]	; (8001520 <ssd1351_write_char+0x128>)
 8001444:	227f      	movs	r2, #127	; 0x7f
 8001446:	701a      	strb	r2, [r3, #0]
 8001448:	e034      	b.n	80014b4 <ssd1351_write_char+0xbc>
	else
	{
		while(char_pix_vert_pos < height)
		{
			char_pix_row_data = font.data[(c - SPECIAL_CHAR_OFFSET) * height + char_pix_vert_pos]; // "* font.height" to skip over rows and "+ i" to get the 2 byte value for the row
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	7b7b      	ldrb	r3, [r7, #13]
 800144e:	3b20      	subs	r3, #32
 8001450:	8b79      	ldrh	r1, [r7, #26]
 8001452:	fb01 f103 	mul.w	r1, r1, r3
 8001456:	8bfb      	ldrh	r3, [r7, #30]
 8001458:	440b      	add	r3, r1
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	4413      	add	r3, r2
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	82fb      	strh	r3, [r7, #22]
			while(char_pix_horiz_pos < width)
 8001462:	e01a      	b.n	800149a <ssd1351_write_char+0xa2>
			{
				if ((char_pix_row_data << char_pix_horiz_pos) & 0x8000) // if bit is set then draw
 8001464:	8afa      	ldrh	r2, [r7, #22]
 8001466:	8bbb      	ldrh	r3, [r7, #28]
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d00f      	beq.n	8001494 <ssd1351_write_char+0x9c>
				{
					ssd1351_draw_pixel(ssd1351_coordinates.x + char_pix_horiz_pos, ssd1351_coordinates.y + char_pix_vert_pos, color);
 8001474:	4b2a      	ldr	r3, [pc, #168]	; (8001520 <ssd1351_write_char+0x128>)
 8001476:	781a      	ldrb	r2, [r3, #0]
 8001478:	8bbb      	ldrh	r3, [r7, #28]
 800147a:	b2db      	uxtb	r3, r3
 800147c:	4413      	add	r3, r2
 800147e:	b2d8      	uxtb	r0, r3
 8001480:	4b27      	ldr	r3, [pc, #156]	; (8001520 <ssd1351_write_char+0x128>)
 8001482:	785a      	ldrb	r2, [r3, #1]
 8001484:	8bfb      	ldrh	r3, [r7, #30]
 8001486:	b2db      	uxtb	r3, r3
 8001488:	4413      	add	r3, r2
 800148a:	b2db      	uxtb	r3, r3
 800148c:	89fa      	ldrh	r2, [r7, #14]
 800148e:	4619      	mov	r1, r3
 8001490:	f7ff ff32 	bl	80012f8 <ssd1351_draw_pixel>
				}
				char_pix_horiz_pos++;
 8001494:	8bbb      	ldrh	r3, [r7, #28]
 8001496:	3301      	adds	r3, #1
 8001498:	83bb      	strh	r3, [r7, #28]
			while(char_pix_horiz_pos < width)
 800149a:	8bba      	ldrh	r2, [r7, #28]
 800149c:	8b3b      	ldrh	r3, [r7, #24]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d3e0      	bcc.n	8001464 <ssd1351_write_char+0x6c>
			}
			char_pix_vert_pos++;
 80014a2:	8bfb      	ldrh	r3, [r7, #30]
 80014a4:	3301      	adds	r3, #1
 80014a6:	83fb      	strh	r3, [r7, #30]
			char_pix_horiz_pos = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	83bb      	strh	r3, [r7, #28]
		while(char_pix_vert_pos < height)
 80014ac:	8bfa      	ldrh	r2, [r7, #30]
 80014ae:	8b7b      	ldrh	r3, [r7, #26]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d3ca      	bcc.n	800144a <ssd1351_write_char+0x52>
		}

	}
	ssd1351_coordinates.x += width; // we just wrote a char increment x coordinate by font width
 80014b4:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <ssd1351_write_char+0x128>)
 80014b6:	781a      	ldrb	r2, [r3, #0]
 80014b8:	8b3b      	ldrh	r3, [r7, #24]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	4413      	add	r3, r2
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	4b17      	ldr	r3, [pc, #92]	; (8001520 <ssd1351_write_char+0x128>)
 80014c2:	701a      	strb	r2, [r3, #0]
	if ((ssd1351_coordinates.x + width >= 127) & (ssd1351_coordinates.y + height <= 127)) // check if we need to go to new line
 80014c4:	4b16      	ldr	r3, [pc, #88]	; (8001520 <ssd1351_write_char+0x128>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	461a      	mov	r2, r3
 80014ca:	8b3b      	ldrh	r3, [r7, #24]
 80014cc:	4413      	add	r3, r2
 80014ce:	2b7e      	cmp	r3, #126	; 0x7e
 80014d0:	bfcc      	ite	gt
 80014d2:	2301      	movgt	r3, #1
 80014d4:	2300      	movle	r3, #0
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <ssd1351_write_char+0x128>)
 80014da:	785b      	ldrb	r3, [r3, #1]
 80014dc:	4619      	mov	r1, r3
 80014de:	8b7b      	ldrh	r3, [r7, #26]
 80014e0:	440b      	add	r3, r1
 80014e2:	2b7f      	cmp	r3, #127	; 0x7f
 80014e4:	bfd4      	ite	le
 80014e6:	2301      	movle	r3, #1
 80014e8:	2300      	movgt	r3, #0
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	4013      	ands	r3, r2
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d010      	beq.n	8001516 <ssd1351_write_char+0x11e>
	{
		ssd1351_coordinates.y = ssd1351_coordinates.y + height + 2; // the +2 is simply additional space between lines
 80014f4:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <ssd1351_write_char+0x128>)
 80014f6:	785a      	ldrb	r2, [r3, #1]
 80014f8:	8b7b      	ldrh	r3, [r7, #26]
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	4413      	add	r3, r2
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	3302      	adds	r3, #2
 8001502:	b2da      	uxtb	r2, r3
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <ssd1351_write_char+0x128>)
 8001506:	705a      	strb	r2, [r3, #1]
		ssd1351_coordinates.x = 0; // reset x coordinate to 0 for new line!
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <ssd1351_write_char+0x128>)
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
	}
	return;
 800150e:	bf00      	nop
 8001510:	e001      	b.n	8001516 <ssd1351_write_char+0x11e>
		return;
 8001512:	bf00      	nop
 8001514:	e000      	b.n	8001518 <ssd1351_write_char+0x120>
	return;
 8001516:	bf00      	nop
}
 8001518:	3724      	adds	r7, #36	; 0x24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd90      	pop	{r4, r7, pc}
 800151e:	bf00      	nop
 8001520:	20001a8c 	.word	0x20001a8c

08001524 <ssd1351_printf>:


color_16bit_e g_background_color = COLOR_16BIT_BLACK;
color_16bit_e g_font_color = COLOR_16BIT_RED;
void ssd1351_printf(char *string)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	; 0x28
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	char mem_string[18] = "";
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	f107 0310 	add.w	r3, r7, #16
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	819a      	strh	r2, [r3, #12]
	uint8_t mem_string_cnt = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t row_num = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	row_num = 0; // careful may be starting on a new row
 800154a:	2300      	movs	r3, #0
 800154c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	bool new_word_flag = true;
 8001550:	2301      	movs	r3, #1
 8001552:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	bool print_flag = false;
 8001556:	2300      	movs	r3, #0
 8001558:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	// find all spaces first...
	if (NULL == string) return;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 808e 	beq.w	8001680 <ssd1351_printf+0x15c>
	for(int i = 0; i < strlen(string); i++)
 8001564:	2300      	movs	r3, #0
 8001566:	623b      	str	r3, [r7, #32]
 8001568:	e081      	b.n	800166e <ssd1351_printf+0x14a>
	{
		if (new_word_flag)
 800156a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00b      	beq.n	800158a <ssd1351_printf+0x66>
		{
			new_word_flag = false;
 8001572:	2300      	movs	r3, #0
 8001574:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			row_num = i / 19;
 8001578:	6a3b      	ldr	r3, [r7, #32]
 800157a:	4a43      	ldr	r2, [pc, #268]	; (8001688 <ssd1351_printf+0x164>)
 800157c:	fb82 1203 	smull	r1, r2, r2, r3
 8001580:	10d2      	asrs	r2, r2, #3
 8001582:	17db      	asrs	r3, r3, #31
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}
		if (strlen(string) - 1 == i) print_flag = true;
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7fe fe20 	bl	80001d0 <strlen>
 8001590:	4603      	mov	r3, r0
 8001592:	1e5a      	subs	r2, r3, #1
 8001594:	6a3b      	ldr	r3, [r7, #32]
 8001596:	429a      	cmp	r2, r3
 8001598:	d102      	bne.n	80015a0 <ssd1351_printf+0x7c>
 800159a:	2301      	movs	r3, #1
 800159c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		if (string[i] != ' ') mem_string[mem_string_cnt++] = string[i];
 80015a0:	6a3b      	ldr	r3, [r7, #32]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	4413      	add	r3, r2
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b20      	cmp	r3, #32
 80015aa:	d00e      	beq.n	80015ca <ssd1351_printf+0xa6>
 80015ac:	6a3b      	ldr	r3, [r7, #32]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	441a      	add	r2, r3
 80015b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015b6:	1c59      	adds	r1, r3, #1
 80015b8:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 80015bc:	7812      	ldrb	r2, [r2, #0]
 80015be:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80015c2:	440b      	add	r3, r1
 80015c4:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80015c8:	e002      	b.n	80015d0 <ssd1351_printf+0xac>
		else print_flag = true;
 80015ca:	2301      	movs	r3, #1
 80015cc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		if(print_flag)
 80015d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d047      	beq.n	8001668 <ssd1351_printf+0x144>
		{
			mem_string_cnt = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if ((i / 19) != row_num)
 80015de:	6a3b      	ldr	r3, [r7, #32]
 80015e0:	4a29      	ldr	r2, [pc, #164]	; (8001688 <ssd1351_printf+0x164>)
 80015e2:	fb82 1203 	smull	r1, r2, r2, r3
 80015e6:	10d2      	asrs	r2, r2, #3
 80015e8:	17db      	asrs	r3, r3, #31
 80015ea:	1ad2      	subs	r2, r2, r3
 80015ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d017      	beq.n	8001624 <ssd1351_printf+0x100>
			{
				ssd1351_write_char(g_font_color, Font_7x10, '\n');
 80015f4:	4b25      	ldr	r3, [pc, #148]	; (800168c <ssd1351_printf+0x168>)
 80015f6:	8818      	ldrh	r0, [r3, #0]
 80015f8:	4a25      	ldr	r2, [pc, #148]	; (8001690 <ssd1351_printf+0x16c>)
 80015fa:	230a      	movs	r3, #10
 80015fc:	ca06      	ldmia	r2, {r1, r2}
 80015fe:	f7ff fefb 	bl	80013f8 <ssd1351_write_char>
			}
			while(mem_string[mem_string_cnt] != 0)
 8001602:	e00f      	b.n	8001624 <ssd1351_printf+0x100>
			{
				ssd1351_write_char(g_font_color, Font_7x10, mem_string[mem_string_cnt++]);
 8001604:	4b21      	ldr	r3, [pc, #132]	; (800168c <ssd1351_printf+0x168>)
 8001606:	8818      	ldrh	r0, [r3, #0]
 8001608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800160c:	1c5a      	adds	r2, r3, #1
 800160e:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8001612:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001616:	4413      	add	r3, r2
 8001618:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800161c:	4a1c      	ldr	r2, [pc, #112]	; (8001690 <ssd1351_printf+0x16c>)
 800161e:	ca06      	ldmia	r2, {r1, r2}
 8001620:	f7ff feea 	bl	80013f8 <ssd1351_write_char>
			while(mem_string[mem_string_cnt] != 0)
 8001624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001628:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800162c:	4413      	add	r3, r2
 800162e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1e6      	bne.n	8001604 <ssd1351_printf+0xe0>
			}
			ssd1351_write_char(g_font_color, Font_7x10, ' ');
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <ssd1351_printf+0x168>)
 8001638:	8818      	ldrh	r0, [r3, #0]
 800163a:	4a15      	ldr	r2, [pc, #84]	; (8001690 <ssd1351_printf+0x16c>)
 800163c:	2320      	movs	r3, #32
 800163e:	ca06      	ldmia	r2, {r1, r2}
 8001640:	f7ff feda 	bl	80013f8 <ssd1351_write_char>
			ssd1351_write_buffer_to_display();
 8001644:	f7ff fd3a 	bl	80010bc <ssd1351_write_buffer_to_display>
			memset(mem_string, 0, sizeof(mem_string));
 8001648:	f107 030c 	add.w	r3, r7, #12
 800164c:	2212      	movs	r2, #18
 800164e:	2100      	movs	r1, #0
 8001650:	4618      	mov	r0, r3
 8001652:	f006 fc0a 	bl	8007e6a <memset>
			mem_string_cnt = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			new_word_flag = true;
 800165c:	2301      	movs	r3, #1
 800165e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			print_flag = false;
 8001662:	2300      	movs	r3, #0
 8001664:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	for(int i = 0; i < strlen(string); i++)
 8001668:	6a3b      	ldr	r3, [r7, #32]
 800166a:	3301      	adds	r3, #1
 800166c:	623b      	str	r3, [r7, #32]
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7fe fdae 	bl	80001d0 <strlen>
 8001674:	4602      	mov	r2, r0
 8001676:	6a3b      	ldr	r3, [r7, #32]
 8001678:	429a      	cmp	r2, r3
 800167a:	f63f af76 	bhi.w	800156a <ssd1351_printf+0x46>
 800167e:	e000      	b.n	8001682 <ssd1351_printf+0x15e>
	if (NULL == string) return;
 8001680:	bf00      	nop
		string++;
	}
	*/
	//ssd1351_write_buffer_to_display();

}
 8001682:	3728      	adds	r7, #40	; 0x28
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	6bca1af3 	.word	0x6bca1af3
 800168c:	2000000c 	.word	0x2000000c
 8001690:	20000000 	.word	0x20000000

08001694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169a:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <HAL_MspInit+0x44>)
 800169c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800169e:	4a0e      	ldr	r2, [pc, #56]	; (80016d8 <HAL_MspInit+0x44>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6613      	str	r3, [r2, #96]	; 0x60
 80016a6:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <HAL_MspInit+0x44>)
 80016a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <HAL_MspInit+0x44>)
 80016b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b6:	4a08      	ldr	r2, [pc, #32]	; (80016d8 <HAL_MspInit+0x44>)
 80016b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016bc:	6593      	str	r3, [r2, #88]	; 0x58
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_MspInit+0x44>)
 80016c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c6:	603b      	str	r3, [r7, #0]
 80016c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	40021000 	.word	0x40021000

080016dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	; 0x28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a25      	ldr	r2, [pc, #148]	; (8001790 <HAL_SPI_MspInit+0xb4>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d144      	bne.n	8001788 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016fe:	4b25      	ldr	r3, [pc, #148]	; (8001794 <HAL_SPI_MspInit+0xb8>)
 8001700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001702:	4a24      	ldr	r2, [pc, #144]	; (8001794 <HAL_SPI_MspInit+0xb8>)
 8001704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001708:	6593      	str	r3, [r2, #88]	; 0x58
 800170a:	4b22      	ldr	r3, [pc, #136]	; (8001794 <HAL_SPI_MspInit+0xb8>)
 800170c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001716:	4b1f      	ldr	r3, [pc, #124]	; (8001794 <HAL_SPI_MspInit+0xb8>)
 8001718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171a:	4a1e      	ldr	r2, [pc, #120]	; (8001794 <HAL_SPI_MspInit+0xb8>)
 800171c:	f043 0304 	orr.w	r3, r3, #4
 8001720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001722:	4b1c      	ldr	r3, [pc, #112]	; (8001794 <HAL_SPI_MspInit+0xb8>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001726:	f003 0304 	and.w	r3, r3, #4
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800172e:	4b19      	ldr	r3, [pc, #100]	; (8001794 <HAL_SPI_MspInit+0xb8>)
 8001730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001732:	4a18      	ldr	r2, [pc, #96]	; (8001794 <HAL_SPI_MspInit+0xb8>)
 8001734:	f043 0302 	orr.w	r3, r3, #2
 8001738:	64d3      	str	r3, [r2, #76]	; 0x4c
 800173a:	4b16      	ldr	r3, [pc, #88]	; (8001794 <HAL_SPI_MspInit+0xb8>)
 800173c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001746:	2304      	movs	r3, #4
 8001748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	2302      	movs	r3, #2
 800174c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001752:	2303      	movs	r3, #3
 8001754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001756:	2305      	movs	r3, #5
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	4619      	mov	r1, r3
 8001760:	480d      	ldr	r0, [pc, #52]	; (8001798 <HAL_SPI_MspInit+0xbc>)
 8001762:	f000 fdb1 	bl	80022c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001766:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800176a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176c:	2302      	movs	r3, #2
 800176e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001774:	2303      	movs	r3, #3
 8001776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001778:	2305      	movs	r3, #5
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	4619      	mov	r1, r3
 8001782:	4806      	ldr	r0, [pc, #24]	; (800179c <HAL_SPI_MspInit+0xc0>)
 8001784:	f000 fda0 	bl	80022c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001788:	bf00      	nop
 800178a:	3728      	adds	r7, #40	; 0x28
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40003800 	.word	0x40003800
 8001794:	40021000 	.word	0x40021000
 8001798:	48000800 	.word	0x48000800
 800179c:	48000400 	.word	0x48000400

080017a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08a      	sub	sp, #40	; 0x28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a45      	ldr	r2, [pc, #276]	; (80018d4 <HAL_UART_MspInit+0x134>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	f040 8084 	bne.w	80018cc <HAL_UART_MspInit+0x12c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017c4:	4b44      	ldr	r3, [pc, #272]	; (80018d8 <HAL_UART_MspInit+0x138>)
 80017c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017c8:	4a43      	ldr	r2, [pc, #268]	; (80018d8 <HAL_UART_MspInit+0x138>)
 80017ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ce:	6613      	str	r3, [r2, #96]	; 0x60
 80017d0:	4b41      	ldr	r3, [pc, #260]	; (80018d8 <HAL_UART_MspInit+0x138>)
 80017d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017dc:	4b3e      	ldr	r3, [pc, #248]	; (80018d8 <HAL_UART_MspInit+0x138>)
 80017de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e0:	4a3d      	ldr	r2, [pc, #244]	; (80018d8 <HAL_UART_MspInit+0x138>)
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017e8:	4b3b      	ldr	r3, [pc, #236]	; (80018d8 <HAL_UART_MspInit+0x138>)
 80017ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017f4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fa:	2302      	movs	r3, #2
 80017fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001802:	2303      	movs	r3, #3
 8001804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001806:	2307      	movs	r3, #7
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180a:	f107 0314 	add.w	r3, r7, #20
 800180e:	4619      	mov	r1, r3
 8001810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001814:	f000 fd58 	bl	80022c8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001818:	4b30      	ldr	r3, [pc, #192]	; (80018dc <HAL_UART_MspInit+0x13c>)
 800181a:	4a31      	ldr	r2, [pc, #196]	; (80018e0 <HAL_UART_MspInit+0x140>)
 800181c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 800181e:	4b2f      	ldr	r3, [pc, #188]	; (80018dc <HAL_UART_MspInit+0x13c>)
 8001820:	2202      	movs	r2, #2
 8001822:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001824:	4b2d      	ldr	r3, [pc, #180]	; (80018dc <HAL_UART_MspInit+0x13c>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800182a:	4b2c      	ldr	r3, [pc, #176]	; (80018dc <HAL_UART_MspInit+0x13c>)
 800182c:	2200      	movs	r2, #0
 800182e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001830:	4b2a      	ldr	r3, [pc, #168]	; (80018dc <HAL_UART_MspInit+0x13c>)
 8001832:	2280      	movs	r2, #128	; 0x80
 8001834:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001836:	4b29      	ldr	r3, [pc, #164]	; (80018dc <HAL_UART_MspInit+0x13c>)
 8001838:	2200      	movs	r2, #0
 800183a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800183c:	4b27      	ldr	r3, [pc, #156]	; (80018dc <HAL_UART_MspInit+0x13c>)
 800183e:	2200      	movs	r2, #0
 8001840:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001842:	4b26      	ldr	r3, [pc, #152]	; (80018dc <HAL_UART_MspInit+0x13c>)
 8001844:	2200      	movs	r2, #0
 8001846:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001848:	4b24      	ldr	r3, [pc, #144]	; (80018dc <HAL_UART_MspInit+0x13c>)
 800184a:	2200      	movs	r2, #0
 800184c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800184e:	4823      	ldr	r0, [pc, #140]	; (80018dc <HAL_UART_MspInit+0x13c>)
 8001850:	f000 fb02 	bl	8001e58 <HAL_DMA_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 800185a:	f7fe ffcd 	bl	80007f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a1e      	ldr	r2, [pc, #120]	; (80018dc <HAL_UART_MspInit+0x13c>)
 8001862:	66da      	str	r2, [r3, #108]	; 0x6c
 8001864:	4a1d      	ldr	r2, [pc, #116]	; (80018dc <HAL_UART_MspInit+0x13c>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800186a:	4b1e      	ldr	r3, [pc, #120]	; (80018e4 <HAL_UART_MspInit+0x144>)
 800186c:	4a1e      	ldr	r2, [pc, #120]	; (80018e8 <HAL_UART_MspInit+0x148>)
 800186e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8001870:	4b1c      	ldr	r3, [pc, #112]	; (80018e4 <HAL_UART_MspInit+0x144>)
 8001872:	2202      	movs	r2, #2
 8001874:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001876:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <HAL_UART_MspInit+0x144>)
 8001878:	2210      	movs	r2, #16
 800187a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800187c:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <HAL_UART_MspInit+0x144>)
 800187e:	2200      	movs	r2, #0
 8001880:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001882:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <HAL_UART_MspInit+0x144>)
 8001884:	2280      	movs	r2, #128	; 0x80
 8001886:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001888:	4b16      	ldr	r3, [pc, #88]	; (80018e4 <HAL_UART_MspInit+0x144>)
 800188a:	2200      	movs	r2, #0
 800188c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800188e:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <HAL_UART_MspInit+0x144>)
 8001890:	2200      	movs	r2, #0
 8001892:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001894:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <HAL_UART_MspInit+0x144>)
 8001896:	2200      	movs	r2, #0
 8001898:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800189a:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <HAL_UART_MspInit+0x144>)
 800189c:	2200      	movs	r2, #0
 800189e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80018a0:	4810      	ldr	r0, [pc, #64]	; (80018e4 <HAL_UART_MspInit+0x144>)
 80018a2:	f000 fad9 	bl	8001e58 <HAL_DMA_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 80018ac:	f7fe ffa4 	bl	80007f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a0c      	ldr	r2, [pc, #48]	; (80018e4 <HAL_UART_MspInit+0x144>)
 80018b4:	669a      	str	r2, [r3, #104]	; 0x68
 80018b6:	4a0b      	ldr	r2, [pc, #44]	; (80018e4 <HAL_UART_MspInit+0x144>)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80018bc:	2200      	movs	r2, #0
 80018be:	2100      	movs	r1, #0
 80018c0:	2025      	movs	r0, #37	; 0x25
 80018c2:	f000 fa92 	bl	8001dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018c6:	2025      	movs	r0, #37	; 0x25
 80018c8:	f000 faab 	bl	8001e22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80018cc:	bf00      	nop
 80018ce:	3728      	adds	r7, #40	; 0x28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40013800 	.word	0x40013800
 80018d8:	40021000 	.word	0x40021000
 80018dc:	200019c4 	.word	0x200019c4
 80018e0:	40020058 	.word	0x40020058
 80018e4:	2000197c 	.word	0x2000197c
 80018e8:	40020044 	.word	0x40020044

080018ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018fe:	e7fe      	b.n	80018fe <HardFault_Handler+0x4>

08001900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001904:	e7fe      	b.n	8001904 <MemManage_Handler+0x4>

08001906 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800190a:	e7fe      	b.n	800190a <BusFault_Handler+0x4>

0800190c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001910:	e7fe      	b.n	8001910 <UsageFault_Handler+0x4>

08001912 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001924:	f000 f944 	bl	8001bb0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001928:	f005 fa38 	bl	8006d9c <xTaskGetSchedulerState>
 800192c:	4603      	mov	r3, r0
 800192e:	2b01      	cmp	r3, #1
 8001930:	d001      	beq.n	8001936 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001932:	f006 f809 	bl	8007948 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
	...

0800193c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001940:	4802      	ldr	r0, [pc, #8]	; (800194c <DMA1_Channel4_IRQHandler+0x10>)
 8001942:	f000 fbe2 	bl	800210a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	2000197c 	.word	0x2000197c

08001950 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001954:	4802      	ldr	r0, [pc, #8]	; (8001960 <DMA1_Channel5_IRQHandler+0x10>)
 8001956:	f000 fbd8 	bl	800210a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	200019c4 	.word	0x200019c4

08001964 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001968:	4802      	ldr	r0, [pc, #8]	; (8001974 <USART1_IRQHandler+0x10>)
 800196a:	f002 fcb7 	bl	80042dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20001a0c 	.word	0x20001a0c

08001978 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800197c:	4b17      	ldr	r3, [pc, #92]	; (80019dc <SystemInit+0x64>)
 800197e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001982:	4a16      	ldr	r2, [pc, #88]	; (80019dc <SystemInit+0x64>)
 8001984:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001988:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800198c:	4b14      	ldr	r3, [pc, #80]	; (80019e0 <SystemInit+0x68>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a13      	ldr	r2, [pc, #76]	; (80019e0 <SystemInit+0x68>)
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001998:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <SystemInit+0x68>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <SystemInit+0x68>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a0f      	ldr	r2, [pc, #60]	; (80019e0 <SystemInit+0x68>)
 80019a4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80019a8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80019ac:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80019ae:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <SystemInit+0x68>)
 80019b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019b4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019b6:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <SystemInit+0x68>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a09      	ldr	r2, [pc, #36]	; (80019e0 <SystemInit+0x68>)
 80019bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019c0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80019c2:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <SystemInit+0x68>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019c8:	4b04      	ldr	r3, [pc, #16]	; (80019dc <SystemInit+0x64>)
 80019ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019ce:	609a      	str	r2, [r3, #8]
#endif
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	e000ed00 	.word	0xe000ed00
 80019e0:	40021000 	.word	0x40021000

080019e4 <task_create>:
  .priority = (osPriority_t) osPriorityNormal,
};


void task_create(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
	packet_queue_init();
 80019e8:	f7ff f91e 	bl	8000c28 <packet_queue_init>
	task_sensor_rxHandle = osThreadNew(sensor_rx_entry, NULL, &task_sensor_rx_attributes);
 80019ec:	4a10      	ldr	r2, [pc, #64]	; (8001a30 <task_create+0x4c>)
 80019ee:	2100      	movs	r1, #0
 80019f0:	4810      	ldr	r0, [pc, #64]	; (8001a34 <task_create+0x50>)
 80019f2:	f003 fb11 	bl	8005018 <osThreadNew>
 80019f6:	4602      	mov	r2, r0
 80019f8:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <task_create+0x54>)
 80019fa:	601a      	str	r2, [r3, #0]
	task_sensor_txHandle = osThreadNew(task_sensor_tx_entry, NULL, &task_sensor_tx_attributes);
 80019fc:	4a0f      	ldr	r2, [pc, #60]	; (8001a3c <task_create+0x58>)
 80019fe:	2100      	movs	r1, #0
 8001a00:	480f      	ldr	r0, [pc, #60]	; (8001a40 <task_create+0x5c>)
 8001a02:	f003 fb09 	bl	8005018 <osThreadNew>
 8001a06:	4602      	mov	r2, r0
 8001a08:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <task_create+0x60>)
 8001a0a:	601a      	str	r2, [r3, #0]
	task_sensor_accHandle = osThreadNew(task_sensor_access_entry, NULL, &task_sensor_acc_attributes);
 8001a0c:	4a0e      	ldr	r2, [pc, #56]	; (8001a48 <task_create+0x64>)
 8001a0e:	2100      	movs	r1, #0
 8001a10:	480e      	ldr	r0, [pc, #56]	; (8001a4c <task_create+0x68>)
 8001a12:	f003 fb01 	bl	8005018 <osThreadNew>
 8001a16:	4602      	mov	r2, r0
 8001a18:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <task_create+0x6c>)
 8001a1a:	601a      	str	r2, [r3, #0]
	task_display_upHandle = osThreadNew(task_display_update_entry, NULL, &task_display_up_attributes);
 8001a1c:	4a0d      	ldr	r2, [pc, #52]	; (8001a54 <task_create+0x70>)
 8001a1e:	2100      	movs	r1, #0
 8001a20:	480d      	ldr	r0, [pc, #52]	; (8001a58 <task_create+0x74>)
 8001a22:	f003 faf9 	bl	8005018 <osThreadNew>
 8001a26:	4602      	mov	r2, r0
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <task_create+0x78>)
 8001a2a:	601a      	str	r2, [r3, #0]
}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	08008754 	.word	0x08008754
 8001a34:	08000fad 	.word	0x08000fad
 8001a38:	20009fe4 	.word	0x20009fe4
 8001a3c:	08008778 	.word	0x08008778
 8001a40:	08000f7d 	.word	0x08000f7d
 8001a44:	2000a2a4 	.word	0x2000a2a4
 8001a48:	0800879c 	.word	0x0800879c
 8001a4c:	08001a75 	.word	0x08001a75
 8001a50:	2000a504 	.word	0x2000a504
 8001a54:	080087c0 	.word	0x080087c0
 8001a58:	08001a61 	.word	0x08001a61
 8001a5c:	20009fe8 	.word	0x20009fe8

08001a60 <task_display_update_entry>:
#include "cmsis_os.h"
#include "task_sensor_access.h"


void task_display_update_entry(void *argument)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_sensor_access_entry */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1000);
 8001a68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a6c:	f003 fb7a 	bl	8005164 <osDelay>
 8001a70:	e7fa      	b.n	8001a68 <task_display_update_entry+0x8>
	...

08001a74 <task_sensor_access_entry>:

gt521fx_state_e gt521fx_state = GT521FX_STATE_ENROLL;


void task_sensor_access_entry(void *argument)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]

	while(1)
	{
		switch(gt521fx_state)
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <task_sensor_access_entry+0x3c>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b03      	cmp	r3, #3
 8001a82:	d8fb      	bhi.n	8001a7c <task_sensor_access_entry+0x8>
 8001a84:	a201      	add	r2, pc, #4	; (adr r2, 8001a8c <task_sensor_access_entry+0x18>)
 8001a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a8a:	bf00      	nop
 8001a8c:	08001a9d 	.word	0x08001a9d
 8001a90:	08001a7d 	.word	0x08001a7d
 8001a94:	08001a7d 	.word	0x08001a7d
 8001a98:	08001aa5 	.word	0x08001aa5
		{
			case GT521FX_STATE_ENROLL:
				gt521fx_enroll_finger(5);
 8001a9c:	2005      	movs	r0, #5
 8001a9e:	f7fe ff33 	bl	8000908 <gt521fx_enroll_finger>
			break;
 8001aa2:	e004      	b.n	8001aae <task_sensor_access_entry+0x3a>
			case GT521FX_STATE_VERIFY:
			break;
			case GT521FX_STATE_DELETE:
			break;
			case GT521FX_STATE_NOTHING_TO_DO:
				osDelay(1000);
 8001aa4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001aa8:	f003 fb5c 	bl	8005164 <osDelay>
			break;
 8001aac:	bf00      	nop
		switch(gt521fx_state)
 8001aae:	e7e5      	b.n	8001a7c <task_sensor_access_entry+0x8>
 8001ab0:	20000055 	.word	0x20000055

08001ab4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ab4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ab8:	f7ff ff5e 	bl	8001978 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001abc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001abe:	e003      	b.n	8001ac8 <LoopCopyDataInit>

08001ac0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001ac2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001ac4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001ac6:	3104      	adds	r1, #4

08001ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001ac8:	480a      	ldr	r0, [pc, #40]	; (8001af4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001aca:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001acc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001ace:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001ad0:	d3f6      	bcc.n	8001ac0 <CopyDataInit>
	ldr	r2, =_sbss
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <LoopForever+0x12>)
	b	LoopFillZerobss
 8001ad4:	e002      	b.n	8001adc <LoopFillZerobss>

08001ad6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001ad6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001ad8:	f842 3b04 	str.w	r3, [r2], #4

08001adc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001adc:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <LoopForever+0x16>)
	cmp	r2, r3
 8001ade:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001ae0:	d3f9      	bcc.n	8001ad6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ae2:	f006 f993 	bl	8007e0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ae6:	f7ff f893 	bl	8000c10 <main>

08001aea <LoopForever>:

LoopForever:
    b LoopForever
 8001aea:	e7fe      	b.n	8001aea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001aec:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001af0:	080087f4 	.word	0x080087f4
	ldr	r0, =_sdata
 8001af4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001af8:	20000020 	.word	0x20000020
	ldr	r2, =_sbss
 8001afc:	20000020 	.word	0x20000020
	ldr	r3, = _ebss
 8001b00:	2000a74c 	.word	0x2000a74c

08001b04 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b04:	e7fe      	b.n	8001b04 <ADC1_IRQHandler>

08001b06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b10:	2003      	movs	r0, #3
 8001b12:	f000 f95f 	bl	8001dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b16:	2000      	movs	r0, #0
 8001b18:	f000 f80e 	bl	8001b38 <HAL_InitTick>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d002      	beq.n	8001b28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	71fb      	strb	r3, [r7, #7]
 8001b26:	e001      	b.n	8001b2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b28:	f7ff fdb4 	bl	8001694 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b40:	2300      	movs	r3, #0
 8001b42:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b44:	4b17      	ldr	r3, [pc, #92]	; (8001ba4 <HAL_InitTick+0x6c>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d023      	beq.n	8001b94 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b4c:	4b16      	ldr	r3, [pc, #88]	; (8001ba8 <HAL_InitTick+0x70>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4b14      	ldr	r3, [pc, #80]	; (8001ba4 <HAL_InitTick+0x6c>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	4619      	mov	r1, r3
 8001b56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b62:	4618      	mov	r0, r3
 8001b64:	f000 f96b 	bl	8001e3e <HAL_SYSTICK_Config>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10f      	bne.n	8001b8e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b0f      	cmp	r3, #15
 8001b72:	d809      	bhi.n	8001b88 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b74:	2200      	movs	r2, #0
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	f04f 30ff 	mov.w	r0, #4294967295
 8001b7c:	f000 f935 	bl	8001dea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b80:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <HAL_InitTick+0x74>)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	e007      	b.n	8001b98 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	73fb      	strb	r3, [r7, #15]
 8001b8c:	e004      	b.n	8001b98 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	73fb      	strb	r3, [r7, #15]
 8001b92:	e001      	b.n	8001b98 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000018 	.word	0x20000018
 8001ba8:	20000010 	.word	0x20000010
 8001bac:	20000014 	.word	0x20000014

08001bb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <HAL_IncTick+0x20>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <HAL_IncTick+0x24>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <HAL_IncTick+0x24>)
 8001bc2:	6013      	str	r3, [r2, #0]
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	20000018 	.word	0x20000018
 8001bd4:	2000a708 	.word	0x2000a708

08001bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return uwTick;
 8001bdc:	4b03      	ldr	r3, [pc, #12]	; (8001bec <HAL_GetTick+0x14>)
 8001bde:	681b      	ldr	r3, [r3, #0]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	2000a708 	.word	0x2000a708

08001bf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bf8:	f7ff ffee 	bl	8001bd8 <HAL_GetTick>
 8001bfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c08:	d005      	beq.n	8001c16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <HAL_Delay+0x40>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4413      	add	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c16:	bf00      	nop
 8001c18:	f7ff ffde 	bl	8001bd8 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d8f7      	bhi.n	8001c18 <HAL_Delay+0x28>
  {
  }
}
 8001c28:	bf00      	nop
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20000018 	.word	0x20000018

08001c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c44:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <__NVIC_SetPriorityGrouping+0x44>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c50:	4013      	ands	r3, r2
 8001c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c66:	4a04      	ldr	r2, [pc, #16]	; (8001c78 <__NVIC_SetPriorityGrouping+0x44>)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	60d3      	str	r3, [r2, #12]
}
 8001c6c:	bf00      	nop
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c80:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <__NVIC_GetPriorityGrouping+0x18>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	0a1b      	lsrs	r3, r3, #8
 8001c86:	f003 0307 	and.w	r3, r3, #7
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	db0b      	blt.n	8001cc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	f003 021f 	and.w	r2, r3, #31
 8001cb0:	4907      	ldr	r1, [pc, #28]	; (8001cd0 <__NVIC_EnableIRQ+0x38>)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	095b      	lsrs	r3, r3, #5
 8001cb8:	2001      	movs	r0, #1
 8001cba:	fa00 f202 	lsl.w	r2, r0, r2
 8001cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e000e100 	.word	0xe000e100

08001cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	6039      	str	r1, [r7, #0]
 8001cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	db0a      	blt.n	8001cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	490c      	ldr	r1, [pc, #48]	; (8001d20 <__NVIC_SetPriority+0x4c>)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	0112      	lsls	r2, r2, #4
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cfc:	e00a      	b.n	8001d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	4908      	ldr	r1, [pc, #32]	; (8001d24 <__NVIC_SetPriority+0x50>)
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	3b04      	subs	r3, #4
 8001d0c:	0112      	lsls	r2, r2, #4
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	440b      	add	r3, r1
 8001d12:	761a      	strb	r2, [r3, #24]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000e100 	.word	0xe000e100
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b089      	sub	sp, #36	; 0x24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f1c3 0307 	rsb	r3, r3, #7
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	bf28      	it	cs
 8001d46:	2304      	movcs	r3, #4
 8001d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	2b06      	cmp	r3, #6
 8001d50:	d902      	bls.n	8001d58 <NVIC_EncodePriority+0x30>
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3b03      	subs	r3, #3
 8001d56:	e000      	b.n	8001d5a <NVIC_EncodePriority+0x32>
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43da      	mvns	r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	401a      	ands	r2, r3
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d70:	f04f 31ff 	mov.w	r1, #4294967295
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7a:	43d9      	mvns	r1, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d80:	4313      	orrs	r3, r2
         );
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3724      	adds	r7, #36	; 0x24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da0:	d301      	bcc.n	8001da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001da2:	2301      	movs	r3, #1
 8001da4:	e00f      	b.n	8001dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001da6:	4a0a      	ldr	r2, [pc, #40]	; (8001dd0 <SysTick_Config+0x40>)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dae:	210f      	movs	r1, #15
 8001db0:	f04f 30ff 	mov.w	r0, #4294967295
 8001db4:	f7ff ff8e 	bl	8001cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <SysTick_Config+0x40>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dbe:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <SysTick_Config+0x40>)
 8001dc0:	2207      	movs	r2, #7
 8001dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	e000e010 	.word	0xe000e010

08001dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff ff29 	bl	8001c34 <__NVIC_SetPriorityGrouping>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b086      	sub	sp, #24
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	4603      	mov	r3, r0
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	607a      	str	r2, [r7, #4]
 8001df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dfc:	f7ff ff3e 	bl	8001c7c <__NVIC_GetPriorityGrouping>
 8001e00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	68b9      	ldr	r1, [r7, #8]
 8001e06:	6978      	ldr	r0, [r7, #20]
 8001e08:	f7ff ff8e 	bl	8001d28 <NVIC_EncodePriority>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e12:	4611      	mov	r1, r2
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ff5d 	bl	8001cd4 <__NVIC_SetPriority>
}
 8001e1a:	bf00      	nop
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	4603      	mov	r3, r0
 8001e2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff31 	bl	8001c98 <__NVIC_EnableIRQ>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff ffa2 	bl	8001d90 <SysTick_Config>
 8001e4c:	4603      	mov	r3, r0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
	...

08001e58 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e098      	b.n	8001f9c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	4b4d      	ldr	r3, [pc, #308]	; (8001fa8 <HAL_DMA_Init+0x150>)
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d80f      	bhi.n	8001e96 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4b4b      	ldr	r3, [pc, #300]	; (8001fac <HAL_DMA_Init+0x154>)
 8001e7e:	4413      	add	r3, r2
 8001e80:	4a4b      	ldr	r2, [pc, #300]	; (8001fb0 <HAL_DMA_Init+0x158>)
 8001e82:	fba2 2303 	umull	r2, r3, r2, r3
 8001e86:	091b      	lsrs	r3, r3, #4
 8001e88:	009a      	lsls	r2, r3, #2
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a48      	ldr	r2, [pc, #288]	; (8001fb4 <HAL_DMA_Init+0x15c>)
 8001e92:	641a      	str	r2, [r3, #64]	; 0x40
 8001e94:	e00e      	b.n	8001eb4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	4b46      	ldr	r3, [pc, #280]	; (8001fb8 <HAL_DMA_Init+0x160>)
 8001e9e:	4413      	add	r3, r2
 8001ea0:	4a43      	ldr	r2, [pc, #268]	; (8001fb0 <HAL_DMA_Init+0x158>)
 8001ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea6:	091b      	lsrs	r3, r3, #4
 8001ea8:	009a      	lsls	r2, r3, #2
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a42      	ldr	r2, [pc, #264]	; (8001fbc <HAL_DMA_Init+0x164>)
 8001eb2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ece:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001ed8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ee4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ef0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f0e:	d039      	beq.n	8001f84 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f14:	4a27      	ldr	r2, [pc, #156]	; (8001fb4 <HAL_DMA_Init+0x15c>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d11a      	bne.n	8001f50 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001f1a:	4b29      	ldr	r3, [pc, #164]	; (8001fc0 <HAL_DMA_Init+0x168>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	f003 031c 	and.w	r3, r3, #28
 8001f26:	210f      	movs	r1, #15
 8001f28:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	4924      	ldr	r1, [pc, #144]	; (8001fc0 <HAL_DMA_Init+0x168>)
 8001f30:	4013      	ands	r3, r2
 8001f32:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001f34:	4b22      	ldr	r3, [pc, #136]	; (8001fc0 <HAL_DMA_Init+0x168>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6859      	ldr	r1, [r3, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f40:	f003 031c 	and.w	r3, r3, #28
 8001f44:	fa01 f303 	lsl.w	r3, r1, r3
 8001f48:	491d      	ldr	r1, [pc, #116]	; (8001fc0 <HAL_DMA_Init+0x168>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	600b      	str	r3, [r1, #0]
 8001f4e:	e019      	b.n	8001f84 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001f50:	4b1c      	ldr	r3, [pc, #112]	; (8001fc4 <HAL_DMA_Init+0x16c>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f58:	f003 031c 	and.w	r3, r3, #28
 8001f5c:	210f      	movs	r1, #15
 8001f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	4917      	ldr	r1, [pc, #92]	; (8001fc4 <HAL_DMA_Init+0x16c>)
 8001f66:	4013      	ands	r3, r2
 8001f68:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001f6a:	4b16      	ldr	r3, [pc, #88]	; (8001fc4 <HAL_DMA_Init+0x16c>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6859      	ldr	r1, [r3, #4]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f76:	f003 031c 	and.w	r3, r3, #28
 8001f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7e:	4911      	ldr	r1, [pc, #68]	; (8001fc4 <HAL_DMA_Init+0x16c>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	40020407 	.word	0x40020407
 8001fac:	bffdfff8 	.word	0xbffdfff8
 8001fb0:	cccccccd 	.word	0xcccccccd
 8001fb4:	40020000 	.word	0x40020000
 8001fb8:	bffdfbf8 	.word	0xbffdfbf8
 8001fbc:	40020400 	.word	0x40020400
 8001fc0:	400200a8 	.word	0x400200a8
 8001fc4:	400204a8 	.word	0x400204a8

08001fc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
 8001fd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d101      	bne.n	8001fe8 <HAL_DMA_Start_IT+0x20>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	e04b      	b.n	8002080 <HAL_DMA_Start_IT+0xb8>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d13a      	bne.n	8002072 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2202      	movs	r2, #2
 8002000:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 0201 	bic.w	r2, r2, #1
 8002018:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	68b9      	ldr	r1, [r7, #8]
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f000 f921 	bl	8002268 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	2b00      	cmp	r3, #0
 800202c:	d008      	beq.n	8002040 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f042 020e 	orr.w	r2, r2, #14
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	e00f      	b.n	8002060 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0204 	bic.w	r2, r2, #4
 800204e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 020a 	orr.w	r2, r2, #10
 800205e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f042 0201 	orr.w	r2, r2, #1
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	e005      	b.n	800207e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800207a:	2302      	movs	r3, #2
 800207c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800207e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002090:	2300      	movs	r3, #0
 8002092:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d005      	beq.n	80020ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2204      	movs	r2, #4
 80020a4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	73fb      	strb	r3, [r7, #15]
 80020aa:	e029      	b.n	8002100 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 020e 	bic.w	r2, r2, #14
 80020ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0201 	bic.w	r2, r2, #1
 80020ca:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d0:	f003 021c 	and.w	r2, r3, #28
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	2101      	movs	r1, #1
 80020da:	fa01 f202 	lsl.w	r2, r1, r2
 80020de:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	4798      	blx	r3
    }
  }
  return status;
 8002100:	7bfb      	ldrb	r3, [r7, #15]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b084      	sub	sp, #16
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	f003 031c 	and.w	r3, r3, #28
 800212a:	2204      	movs	r2, #4
 800212c:	409a      	lsls	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	4013      	ands	r3, r2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d026      	beq.n	8002184 <HAL_DMA_IRQHandler+0x7a>
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	d021      	beq.n	8002184 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0320 	and.w	r3, r3, #32
 800214a:	2b00      	cmp	r3, #0
 800214c:	d107      	bne.n	800215e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0204 	bic.w	r2, r2, #4
 800215c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002162:	f003 021c 	and.w	r2, r3, #28
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	2104      	movs	r1, #4
 800216c:	fa01 f202 	lsl.w	r2, r1, r2
 8002170:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	2b00      	cmp	r3, #0
 8002178:	d071      	beq.n	800225e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002182:	e06c      	b.n	800225e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002188:	f003 031c 	and.w	r3, r3, #28
 800218c:	2202      	movs	r2, #2
 800218e:	409a      	lsls	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4013      	ands	r3, r2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d02e      	beq.n	80021f6 <HAL_DMA_IRQHandler+0xec>
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d029      	beq.n	80021f6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0320 	and.w	r3, r3, #32
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10b      	bne.n	80021c8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 020a 	bic.w	r2, r2, #10
 80021be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021cc:	f003 021c 	and.w	r2, r3, #28
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	2102      	movs	r1, #2
 80021d6:	fa01 f202 	lsl.w	r2, r1, r2
 80021da:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d038      	beq.n	800225e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80021f4:	e033      	b.n	800225e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fa:	f003 031c 	and.w	r3, r3, #28
 80021fe:	2208      	movs	r2, #8
 8002200:	409a      	lsls	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4013      	ands	r3, r2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d02a      	beq.n	8002260 <HAL_DMA_IRQHandler+0x156>
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	f003 0308 	and.w	r3, r3, #8
 8002210:	2b00      	cmp	r3, #0
 8002212:	d025      	beq.n	8002260 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 020e 	bic.w	r2, r2, #14
 8002222:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002228:	f003 021c 	and.w	r2, r3, #28
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	2101      	movs	r1, #1
 8002232:	fa01 f202 	lsl.w	r2, r1, r2
 8002236:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002252:	2b00      	cmp	r3, #0
 8002254:	d004      	beq.n	8002260 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800225e:	bf00      	nop
 8002260:	bf00      	nop
}
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
 8002274:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	f003 021c 	and.w	r2, r3, #28
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	2101      	movs	r1, #1
 8002284:	fa01 f202 	lsl.w	r2, r1, r2
 8002288:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2b10      	cmp	r3, #16
 8002298:	d108      	bne.n	80022ac <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80022aa:	e007      	b.n	80022bc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68ba      	ldr	r2, [r7, #8]
 80022b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	60da      	str	r2, [r3, #12]
}
 80022bc:	bf00      	nop
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b087      	sub	sp, #28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022d6:	e154      	b.n	8002582 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	2101      	movs	r1, #1
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	fa01 f303 	lsl.w	r3, r1, r3
 80022e4:	4013      	ands	r3, r2
 80022e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 8146 	beq.w	800257c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d00b      	beq.n	8002310 <HAL_GPIO_Init+0x48>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d007      	beq.n	8002310 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002304:	2b11      	cmp	r3, #17
 8002306:	d003      	beq.n	8002310 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b12      	cmp	r3, #18
 800230e:	d130      	bne.n	8002372 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	2203      	movs	r2, #3
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	4013      	ands	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	4313      	orrs	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002346:	2201      	movs	r2, #1
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43db      	mvns	r3, r3
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4013      	ands	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	091b      	lsrs	r3, r3, #4
 800235c:	f003 0201 	and.w	r2, r3, #1
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	2203      	movs	r2, #3
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43db      	mvns	r3, r3
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4013      	ands	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	4313      	orrs	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d003      	beq.n	80023b2 <HAL_GPIO_Init+0xea>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b12      	cmp	r3, #18
 80023b0:	d123      	bne.n	80023fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	08da      	lsrs	r2, r3, #3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	3208      	adds	r2, #8
 80023ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	220f      	movs	r2, #15
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4013      	ands	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	691a      	ldr	r2, [r3, #16]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	08da      	lsrs	r2, r3, #3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3208      	adds	r2, #8
 80023f4:	6939      	ldr	r1, [r7, #16]
 80023f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	2203      	movs	r2, #3
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43db      	mvns	r3, r3
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	4013      	ands	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f003 0203 	and.w	r2, r3, #3
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	4313      	orrs	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	f000 80a0 	beq.w	800257c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800243c:	4b58      	ldr	r3, [pc, #352]	; (80025a0 <HAL_GPIO_Init+0x2d8>)
 800243e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002440:	4a57      	ldr	r2, [pc, #348]	; (80025a0 <HAL_GPIO_Init+0x2d8>)
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	6613      	str	r3, [r2, #96]	; 0x60
 8002448:	4b55      	ldr	r3, [pc, #340]	; (80025a0 <HAL_GPIO_Init+0x2d8>)
 800244a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	60bb      	str	r3, [r7, #8]
 8002452:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002454:	4a53      	ldr	r2, [pc, #332]	; (80025a4 <HAL_GPIO_Init+0x2dc>)
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	089b      	lsrs	r3, r3, #2
 800245a:	3302      	adds	r3, #2
 800245c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002460:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	220f      	movs	r2, #15
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	4013      	ands	r3, r2
 8002476:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800247e:	d019      	beq.n	80024b4 <HAL_GPIO_Init+0x1ec>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a49      	ldr	r2, [pc, #292]	; (80025a8 <HAL_GPIO_Init+0x2e0>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d013      	beq.n	80024b0 <HAL_GPIO_Init+0x1e8>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a48      	ldr	r2, [pc, #288]	; (80025ac <HAL_GPIO_Init+0x2e4>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d00d      	beq.n	80024ac <HAL_GPIO_Init+0x1e4>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a47      	ldr	r2, [pc, #284]	; (80025b0 <HAL_GPIO_Init+0x2e8>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d007      	beq.n	80024a8 <HAL_GPIO_Init+0x1e0>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a46      	ldr	r2, [pc, #280]	; (80025b4 <HAL_GPIO_Init+0x2ec>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d101      	bne.n	80024a4 <HAL_GPIO_Init+0x1dc>
 80024a0:	2304      	movs	r3, #4
 80024a2:	e008      	b.n	80024b6 <HAL_GPIO_Init+0x1ee>
 80024a4:	2307      	movs	r3, #7
 80024a6:	e006      	b.n	80024b6 <HAL_GPIO_Init+0x1ee>
 80024a8:	2303      	movs	r3, #3
 80024aa:	e004      	b.n	80024b6 <HAL_GPIO_Init+0x1ee>
 80024ac:	2302      	movs	r3, #2
 80024ae:	e002      	b.n	80024b6 <HAL_GPIO_Init+0x1ee>
 80024b0:	2301      	movs	r3, #1
 80024b2:	e000      	b.n	80024b6 <HAL_GPIO_Init+0x1ee>
 80024b4:	2300      	movs	r3, #0
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	f002 0203 	and.w	r2, r2, #3
 80024bc:	0092      	lsls	r2, r2, #2
 80024be:	4093      	lsls	r3, r2
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024c6:	4937      	ldr	r1, [pc, #220]	; (80025a4 <HAL_GPIO_Init+0x2dc>)
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	089b      	lsrs	r3, r3, #2
 80024cc:	3302      	adds	r3, #2
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80024d4:	4b38      	ldr	r3, [pc, #224]	; (80025b8 <HAL_GPIO_Init+0x2f0>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	43db      	mvns	r3, r3
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4013      	ands	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024f8:	4a2f      	ldr	r2, [pc, #188]	; (80025b8 <HAL_GPIO_Init+0x2f0>)
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80024fe:	4b2e      	ldr	r3, [pc, #184]	; (80025b8 <HAL_GPIO_Init+0x2f0>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	43db      	mvns	r3, r3
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	4013      	ands	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4313      	orrs	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002522:	4a25      	ldr	r2, [pc, #148]	; (80025b8 <HAL_GPIO_Init+0x2f0>)
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002528:	4b23      	ldr	r3, [pc, #140]	; (80025b8 <HAL_GPIO_Init+0x2f0>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	43db      	mvns	r3, r3
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	4013      	ands	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	4313      	orrs	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800254c:	4a1a      	ldr	r2, [pc, #104]	; (80025b8 <HAL_GPIO_Init+0x2f0>)
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002552:	4b19      	ldr	r3, [pc, #100]	; (80025b8 <HAL_GPIO_Init+0x2f0>)
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	43db      	mvns	r3, r3
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	4013      	ands	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4313      	orrs	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002576:	4a10      	ldr	r2, [pc, #64]	; (80025b8 <HAL_GPIO_Init+0x2f0>)
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	3301      	adds	r3, #1
 8002580:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	fa22 f303 	lsr.w	r3, r2, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	f47f aea3 	bne.w	80022d8 <HAL_GPIO_Init+0x10>
  }
}
 8002592:	bf00      	nop
 8002594:	371c      	adds	r7, #28
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40010000 	.word	0x40010000
 80025a8:	48000400 	.word	0x48000400
 80025ac:	48000800 	.word	0x48000800
 80025b0:	48000c00 	.word	0x48000c00
 80025b4:	48001000 	.word	0x48001000
 80025b8:	40010400 	.word	0x40010400

080025bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	807b      	strh	r3, [r7, #2]
 80025c8:	4613      	mov	r3, r2
 80025ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025cc:	787b      	ldrb	r3, [r7, #1]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025d2:	887a      	ldrh	r2, [r7, #2]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025d8:	e002      	b.n	80025e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025da:	887a      	ldrh	r2, [r7, #2]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80025f0:	4b04      	ldr	r3, [pc, #16]	; (8002604 <HAL_PWREx_GetVoltageRange+0x18>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	40007000 	.word	0x40007000

08002608 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002616:	d130      	bne.n	800267a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002618:	4b23      	ldr	r3, [pc, #140]	; (80026a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002624:	d038      	beq.n	8002698 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002626:	4b20      	ldr	r3, [pc, #128]	; (80026a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800262e:	4a1e      	ldr	r2, [pc, #120]	; (80026a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002630:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002634:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002636:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2232      	movs	r2, #50	; 0x32
 800263c:	fb02 f303 	mul.w	r3, r2, r3
 8002640:	4a1b      	ldr	r2, [pc, #108]	; (80026b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002642:	fba2 2303 	umull	r2, r3, r2, r3
 8002646:	0c9b      	lsrs	r3, r3, #18
 8002648:	3301      	adds	r3, #1
 800264a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800264c:	e002      	b.n	8002654 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	3b01      	subs	r3, #1
 8002652:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002654:	4b14      	ldr	r3, [pc, #80]	; (80026a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800265c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002660:	d102      	bne.n	8002668 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1f2      	bne.n	800264e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002668:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002674:	d110      	bne.n	8002698 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e00f      	b.n	800269a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800267a:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002686:	d007      	beq.n	8002698 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002688:	4b07      	ldr	r3, [pc, #28]	; (80026a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002690:	4a05      	ldr	r2, [pc, #20]	; (80026a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002692:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002696:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	40007000 	.word	0x40007000
 80026ac:	20000010 	.word	0x20000010
 80026b0:	431bde83 	.word	0x431bde83

080026b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b088      	sub	sp, #32
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d102      	bne.n	80026c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	f000 bc11 	b.w	8002eea <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026c8:	4ba0      	ldr	r3, [pc, #640]	; (800294c <HAL_RCC_OscConfig+0x298>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 030c 	and.w	r3, r3, #12
 80026d0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026d2:	4b9e      	ldr	r3, [pc, #632]	; (800294c <HAL_RCC_OscConfig+0x298>)
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0310 	and.w	r3, r3, #16
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 80e4 	beq.w	80028b2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d007      	beq.n	8002700 <HAL_RCC_OscConfig+0x4c>
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	2b0c      	cmp	r3, #12
 80026f4:	f040 808b 	bne.w	800280e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	f040 8087 	bne.w	800280e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002700:	4b92      	ldr	r3, [pc, #584]	; (800294c <HAL_RCC_OscConfig+0x298>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d005      	beq.n	8002718 <HAL_RCC_OscConfig+0x64>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e3e8      	b.n	8002eea <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a1a      	ldr	r2, [r3, #32]
 800271c:	4b8b      	ldr	r3, [pc, #556]	; (800294c <HAL_RCC_OscConfig+0x298>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b00      	cmp	r3, #0
 8002726:	d004      	beq.n	8002732 <HAL_RCC_OscConfig+0x7e>
 8002728:	4b88      	ldr	r3, [pc, #544]	; (800294c <HAL_RCC_OscConfig+0x298>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002730:	e005      	b.n	800273e <HAL_RCC_OscConfig+0x8a>
 8002732:	4b86      	ldr	r3, [pc, #536]	; (800294c <HAL_RCC_OscConfig+0x298>)
 8002734:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002738:	091b      	lsrs	r3, r3, #4
 800273a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800273e:	4293      	cmp	r3, r2
 8002740:	d223      	bcs.n	800278a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	4618      	mov	r0, r3
 8002748:	f000 fd78 	bl	800323c <RCC_SetFlashLatencyFromMSIRange>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e3c9      	b.n	8002eea <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002756:	4b7d      	ldr	r3, [pc, #500]	; (800294c <HAL_RCC_OscConfig+0x298>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a7c      	ldr	r2, [pc, #496]	; (800294c <HAL_RCC_OscConfig+0x298>)
 800275c:	f043 0308 	orr.w	r3, r3, #8
 8002760:	6013      	str	r3, [r2, #0]
 8002762:	4b7a      	ldr	r3, [pc, #488]	; (800294c <HAL_RCC_OscConfig+0x298>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	4977      	ldr	r1, [pc, #476]	; (800294c <HAL_RCC_OscConfig+0x298>)
 8002770:	4313      	orrs	r3, r2
 8002772:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002774:	4b75      	ldr	r3, [pc, #468]	; (800294c <HAL_RCC_OscConfig+0x298>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	69db      	ldr	r3, [r3, #28]
 8002780:	021b      	lsls	r3, r3, #8
 8002782:	4972      	ldr	r1, [pc, #456]	; (800294c <HAL_RCC_OscConfig+0x298>)
 8002784:	4313      	orrs	r3, r2
 8002786:	604b      	str	r3, [r1, #4]
 8002788:	e025      	b.n	80027d6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800278a:	4b70      	ldr	r3, [pc, #448]	; (800294c <HAL_RCC_OscConfig+0x298>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a6f      	ldr	r2, [pc, #444]	; (800294c <HAL_RCC_OscConfig+0x298>)
 8002790:	f043 0308 	orr.w	r3, r3, #8
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	4b6d      	ldr	r3, [pc, #436]	; (800294c <HAL_RCC_OscConfig+0x298>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	496a      	ldr	r1, [pc, #424]	; (800294c <HAL_RCC_OscConfig+0x298>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027a8:	4b68      	ldr	r3, [pc, #416]	; (800294c <HAL_RCC_OscConfig+0x298>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	021b      	lsls	r3, r3, #8
 80027b6:	4965      	ldr	r1, [pc, #404]	; (800294c <HAL_RCC_OscConfig+0x298>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d109      	bne.n	80027d6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 fd38 	bl	800323c <RCC_SetFlashLatencyFromMSIRange>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e389      	b.n	8002eea <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027d6:	f000 fc6f 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 80027da:	4601      	mov	r1, r0
 80027dc:	4b5b      	ldr	r3, [pc, #364]	; (800294c <HAL_RCC_OscConfig+0x298>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	091b      	lsrs	r3, r3, #4
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	4a5a      	ldr	r2, [pc, #360]	; (8002950 <HAL_RCC_OscConfig+0x29c>)
 80027e8:	5cd3      	ldrb	r3, [r2, r3]
 80027ea:	f003 031f 	and.w	r3, r3, #31
 80027ee:	fa21 f303 	lsr.w	r3, r1, r3
 80027f2:	4a58      	ldr	r2, [pc, #352]	; (8002954 <HAL_RCC_OscConfig+0x2a0>)
 80027f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80027f6:	4b58      	ldr	r3, [pc, #352]	; (8002958 <HAL_RCC_OscConfig+0x2a4>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff f99c 	bl	8001b38 <HAL_InitTick>
 8002800:	4603      	mov	r3, r0
 8002802:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002804:	7bfb      	ldrb	r3, [r7, #15]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d052      	beq.n	80028b0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800280a:	7bfb      	ldrb	r3, [r7, #15]
 800280c:	e36d      	b.n	8002eea <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d032      	beq.n	800287c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002816:	4b4d      	ldr	r3, [pc, #308]	; (800294c <HAL_RCC_OscConfig+0x298>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a4c      	ldr	r2, [pc, #304]	; (800294c <HAL_RCC_OscConfig+0x298>)
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002822:	f7ff f9d9 	bl	8001bd8 <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800282a:	f7ff f9d5 	bl	8001bd8 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e356      	b.n	8002eea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800283c:	4b43      	ldr	r3, [pc, #268]	; (800294c <HAL_RCC_OscConfig+0x298>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0f0      	beq.n	800282a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002848:	4b40      	ldr	r3, [pc, #256]	; (800294c <HAL_RCC_OscConfig+0x298>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a3f      	ldr	r2, [pc, #252]	; (800294c <HAL_RCC_OscConfig+0x298>)
 800284e:	f043 0308 	orr.w	r3, r3, #8
 8002852:	6013      	str	r3, [r2, #0]
 8002854:	4b3d      	ldr	r3, [pc, #244]	; (800294c <HAL_RCC_OscConfig+0x298>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	493a      	ldr	r1, [pc, #232]	; (800294c <HAL_RCC_OscConfig+0x298>)
 8002862:	4313      	orrs	r3, r2
 8002864:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002866:	4b39      	ldr	r3, [pc, #228]	; (800294c <HAL_RCC_OscConfig+0x298>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	021b      	lsls	r3, r3, #8
 8002874:	4935      	ldr	r1, [pc, #212]	; (800294c <HAL_RCC_OscConfig+0x298>)
 8002876:	4313      	orrs	r3, r2
 8002878:	604b      	str	r3, [r1, #4]
 800287a:	e01a      	b.n	80028b2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800287c:	4b33      	ldr	r3, [pc, #204]	; (800294c <HAL_RCC_OscConfig+0x298>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a32      	ldr	r2, [pc, #200]	; (800294c <HAL_RCC_OscConfig+0x298>)
 8002882:	f023 0301 	bic.w	r3, r3, #1
 8002886:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002888:	f7ff f9a6 	bl	8001bd8 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002890:	f7ff f9a2 	bl	8001bd8 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e323      	b.n	8002eea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028a2:	4b2a      	ldr	r3, [pc, #168]	; (800294c <HAL_RCC_OscConfig+0x298>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0x1dc>
 80028ae:	e000      	b.n	80028b2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d073      	beq.n	80029a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	2b08      	cmp	r3, #8
 80028c2:	d005      	beq.n	80028d0 <HAL_RCC_OscConfig+0x21c>
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	2b0c      	cmp	r3, #12
 80028c8:	d10e      	bne.n	80028e8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2b03      	cmp	r3, #3
 80028ce:	d10b      	bne.n	80028e8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d0:	4b1e      	ldr	r3, [pc, #120]	; (800294c <HAL_RCC_OscConfig+0x298>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d063      	beq.n	80029a4 <HAL_RCC_OscConfig+0x2f0>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d15f      	bne.n	80029a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e300      	b.n	8002eea <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f0:	d106      	bne.n	8002900 <HAL_RCC_OscConfig+0x24c>
 80028f2:	4b16      	ldr	r3, [pc, #88]	; (800294c <HAL_RCC_OscConfig+0x298>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a15      	ldr	r2, [pc, #84]	; (800294c <HAL_RCC_OscConfig+0x298>)
 80028f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	e01d      	b.n	800293c <HAL_RCC_OscConfig+0x288>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002908:	d10c      	bne.n	8002924 <HAL_RCC_OscConfig+0x270>
 800290a:	4b10      	ldr	r3, [pc, #64]	; (800294c <HAL_RCC_OscConfig+0x298>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a0f      	ldr	r2, [pc, #60]	; (800294c <HAL_RCC_OscConfig+0x298>)
 8002910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	4b0d      	ldr	r3, [pc, #52]	; (800294c <HAL_RCC_OscConfig+0x298>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a0c      	ldr	r2, [pc, #48]	; (800294c <HAL_RCC_OscConfig+0x298>)
 800291c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	e00b      	b.n	800293c <HAL_RCC_OscConfig+0x288>
 8002924:	4b09      	ldr	r3, [pc, #36]	; (800294c <HAL_RCC_OscConfig+0x298>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a08      	ldr	r2, [pc, #32]	; (800294c <HAL_RCC_OscConfig+0x298>)
 800292a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800292e:	6013      	str	r3, [r2, #0]
 8002930:	4b06      	ldr	r3, [pc, #24]	; (800294c <HAL_RCC_OscConfig+0x298>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a05      	ldr	r2, [pc, #20]	; (800294c <HAL_RCC_OscConfig+0x298>)
 8002936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800293a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d01b      	beq.n	800297c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002944:	f7ff f948 	bl	8001bd8 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800294a:	e010      	b.n	800296e <HAL_RCC_OscConfig+0x2ba>
 800294c:	40021000 	.word	0x40021000
 8002950:	0800870c 	.word	0x0800870c
 8002954:	20000010 	.word	0x20000010
 8002958:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800295c:	f7ff f93c 	bl	8001bd8 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b64      	cmp	r3, #100	; 0x64
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e2bd      	b.n	8002eea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800296e:	4baf      	ldr	r3, [pc, #700]	; (8002c2c <HAL_RCC_OscConfig+0x578>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0f0      	beq.n	800295c <HAL_RCC_OscConfig+0x2a8>
 800297a:	e014      	b.n	80029a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297c:	f7ff f92c 	bl	8001bd8 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002984:	f7ff f928 	bl	8001bd8 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b64      	cmp	r3, #100	; 0x64
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e2a9      	b.n	8002eea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002996:	4ba5      	ldr	r3, [pc, #660]	; (8002c2c <HAL_RCC_OscConfig+0x578>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1f0      	bne.n	8002984 <HAL_RCC_OscConfig+0x2d0>
 80029a2:	e000      	b.n	80029a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d060      	beq.n	8002a74 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	2b04      	cmp	r3, #4
 80029b6:	d005      	beq.n	80029c4 <HAL_RCC_OscConfig+0x310>
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	2b0c      	cmp	r3, #12
 80029bc:	d119      	bne.n	80029f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d116      	bne.n	80029f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029c4:	4b99      	ldr	r3, [pc, #612]	; (8002c2c <HAL_RCC_OscConfig+0x578>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d005      	beq.n	80029dc <HAL_RCC_OscConfig+0x328>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e286      	b.n	8002eea <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029dc:	4b93      	ldr	r3, [pc, #588]	; (8002c2c <HAL_RCC_OscConfig+0x578>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	061b      	lsls	r3, r3, #24
 80029ea:	4990      	ldr	r1, [pc, #576]	; (8002c2c <HAL_RCC_OscConfig+0x578>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029f0:	e040      	b.n	8002a74 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d023      	beq.n	8002a42 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029fa:	4b8c      	ldr	r3, [pc, #560]	; (8002c2c <HAL_RCC_OscConfig+0x578>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a8b      	ldr	r2, [pc, #556]	; (8002c2c <HAL_RCC_OscConfig+0x578>)
 8002a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a06:	f7ff f8e7 	bl	8001bd8 <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a0e:	f7ff f8e3 	bl	8001bd8 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e264      	b.n	8002eea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a20:	4b82      	ldr	r3, [pc, #520]	; (8002c2c <HAL_RCC_OscConfig+0x578>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0f0      	beq.n	8002a0e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a2c:	4b7f      	ldr	r3, [pc, #508]	; (8002c2c <HAL_RCC_OscConfig+0x578>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	061b      	lsls	r3, r3, #24
 8002a3a:	497c      	ldr	r1, [pc, #496]	; (8002c2c <HAL_RCC_OscConfig+0x578>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	604b      	str	r3, [r1, #4]
 8002a40:	e018      	b.n	8002a74 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a42:	4b7a      	ldr	r3, [pc, #488]	; (8002c2c <HAL_RCC_OscConfig+0x578>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a79      	ldr	r2, [pc, #484]	; (8002c2c <HAL_RCC_OscConfig+0x578>)
 8002a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4e:	f7ff f8c3 	bl	8001bd8 <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a54:	e008      	b.n	8002a68 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a56:	f7ff f8bf 	bl	8001bd8 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e240      	b.n	8002eea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a68:	4b70      	ldr	r3, [pc, #448]	; (8002c2c <HAL_RCC_OscConfig+0x578>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1f0      	bne.n	8002a56 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0308 	and.w	r3, r3, #8
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d03c      	beq.n	8002afa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d01c      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a88:	4b68      	ldr	r3, [pc, #416]	; (8002c2c <HAL_RCC_OscConfig+0x578>)
 8002a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a8e:	4a67      	ldr	r2, [pc, #412]	; (8002c2c <HAL_RCC_OscConfig+0x578>)
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a98:	f7ff f89e 	bl	8001bd8 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aa0:	f7ff f89a 	bl	8001bd8 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e21b      	b.n	8002eea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ab2:	4b5e      	ldr	r3, [pc, #376]	; (8002c2c <HAL_RCC_OscConfig+0x578>)
 8002ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0ef      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x3ec>
 8002ac0:	e01b      	b.n	8002afa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ac2:	4b5a      	ldr	r3, [pc, #360]	; (8002c2c <HAL_RCC_OscConfig+0x578>)
 8002ac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ac8:	4a58      	ldr	r2, [pc, #352]	; (8002c2c <HAL_RCC_OscConfig+0x578>)
 8002aca:	f023 0301 	bic.w	r3, r3, #1
 8002ace:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad2:	f7ff f881 	bl	8001bd8 <HAL_GetTick>
 8002ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ada:	f7ff f87d 	bl	8001bd8 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e1fe      	b.n	8002eea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002aec:	4b4f      	ldr	r3, [pc, #316]	; (8002c2c <HAL_RCC_OscConfig+0x578>)
 8002aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1ef      	bne.n	8002ada <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0304 	and.w	r3, r3, #4
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f000 80a6 	beq.w	8002c54 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b0c:	4b47      	ldr	r3, [pc, #284]	; (8002c2c <HAL_RCC_OscConfig+0x578>)
 8002b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d10d      	bne.n	8002b34 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b18:	4b44      	ldr	r3, [pc, #272]	; (8002c2c <HAL_RCC_OscConfig+0x578>)
 8002b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1c:	4a43      	ldr	r2, [pc, #268]	; (8002c2c <HAL_RCC_OscConfig+0x578>)
 8002b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b22:	6593      	str	r3, [r2, #88]	; 0x58
 8002b24:	4b41      	ldr	r3, [pc, #260]	; (8002c2c <HAL_RCC_OscConfig+0x578>)
 8002b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2c:	60bb      	str	r3, [r7, #8]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b30:	2301      	movs	r3, #1
 8002b32:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b34:	4b3e      	ldr	r3, [pc, #248]	; (8002c30 <HAL_RCC_OscConfig+0x57c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d118      	bne.n	8002b72 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b40:	4b3b      	ldr	r3, [pc, #236]	; (8002c30 <HAL_RCC_OscConfig+0x57c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a3a      	ldr	r2, [pc, #232]	; (8002c30 <HAL_RCC_OscConfig+0x57c>)
 8002b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b4c:	f7ff f844 	bl	8001bd8 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b54:	f7ff f840 	bl	8001bd8 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e1c1      	b.n	8002eea <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b66:	4b32      	ldr	r3, [pc, #200]	; (8002c30 <HAL_RCC_OscConfig+0x57c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f0      	beq.n	8002b54 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d108      	bne.n	8002b8c <HAL_RCC_OscConfig+0x4d8>
 8002b7a:	4b2c      	ldr	r3, [pc, #176]	; (8002c2c <HAL_RCC_OscConfig+0x578>)
 8002b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b80:	4a2a      	ldr	r2, [pc, #168]	; (8002c2c <HAL_RCC_OscConfig+0x578>)
 8002b82:	f043 0301 	orr.w	r3, r3, #1
 8002b86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b8a:	e024      	b.n	8002bd6 <HAL_RCC_OscConfig+0x522>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	2b05      	cmp	r3, #5
 8002b92:	d110      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x502>
 8002b94:	4b25      	ldr	r3, [pc, #148]	; (8002c2c <HAL_RCC_OscConfig+0x578>)
 8002b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9a:	4a24      	ldr	r2, [pc, #144]	; (8002c2c <HAL_RCC_OscConfig+0x578>)
 8002b9c:	f043 0304 	orr.w	r3, r3, #4
 8002ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ba4:	4b21      	ldr	r3, [pc, #132]	; (8002c2c <HAL_RCC_OscConfig+0x578>)
 8002ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002baa:	4a20      	ldr	r2, [pc, #128]	; (8002c2c <HAL_RCC_OscConfig+0x578>)
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bb4:	e00f      	b.n	8002bd6 <HAL_RCC_OscConfig+0x522>
 8002bb6:	4b1d      	ldr	r3, [pc, #116]	; (8002c2c <HAL_RCC_OscConfig+0x578>)
 8002bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bbc:	4a1b      	ldr	r2, [pc, #108]	; (8002c2c <HAL_RCC_OscConfig+0x578>)
 8002bbe:	f023 0301 	bic.w	r3, r3, #1
 8002bc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bc6:	4b19      	ldr	r3, [pc, #100]	; (8002c2c <HAL_RCC_OscConfig+0x578>)
 8002bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bcc:	4a17      	ldr	r2, [pc, #92]	; (8002c2c <HAL_RCC_OscConfig+0x578>)
 8002bce:	f023 0304 	bic.w	r3, r3, #4
 8002bd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d016      	beq.n	8002c0c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bde:	f7fe fffb 	bl	8001bd8 <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002be4:	e00a      	b.n	8002bfc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be6:	f7fe fff7 	bl	8001bd8 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e176      	b.n	8002eea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bfc:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <HAL_RCC_OscConfig+0x578>)
 8002bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0ed      	beq.n	8002be6 <HAL_RCC_OscConfig+0x532>
 8002c0a:	e01a      	b.n	8002c42 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c0c:	f7fe ffe4 	bl	8001bd8 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c12:	e00f      	b.n	8002c34 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c14:	f7fe ffe0 	bl	8001bd8 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d906      	bls.n	8002c34 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e15f      	b.n	8002eea <HAL_RCC_OscConfig+0x836>
 8002c2a:	bf00      	nop
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c34:	4baa      	ldr	r3, [pc, #680]	; (8002ee0 <HAL_RCC_OscConfig+0x82c>)
 8002c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1e8      	bne.n	8002c14 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c42:	7ffb      	ldrb	r3, [r7, #31]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d105      	bne.n	8002c54 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c48:	4ba5      	ldr	r3, [pc, #660]	; (8002ee0 <HAL_RCC_OscConfig+0x82c>)
 8002c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4c:	4aa4      	ldr	r2, [pc, #656]	; (8002ee0 <HAL_RCC_OscConfig+0x82c>)
 8002c4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c52:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0320 	and.w	r3, r3, #32
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d03c      	beq.n	8002cda <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d01c      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c68:	4b9d      	ldr	r3, [pc, #628]	; (8002ee0 <HAL_RCC_OscConfig+0x82c>)
 8002c6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c6e:	4a9c      	ldr	r2, [pc, #624]	; (8002ee0 <HAL_RCC_OscConfig+0x82c>)
 8002c70:	f043 0301 	orr.w	r3, r3, #1
 8002c74:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c78:	f7fe ffae 	bl	8001bd8 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c80:	f7fe ffaa 	bl	8001bd8 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e12b      	b.n	8002eea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c92:	4b93      	ldr	r3, [pc, #588]	; (8002ee0 <HAL_RCC_OscConfig+0x82c>)
 8002c94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0ef      	beq.n	8002c80 <HAL_RCC_OscConfig+0x5cc>
 8002ca0:	e01b      	b.n	8002cda <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ca2:	4b8f      	ldr	r3, [pc, #572]	; (8002ee0 <HAL_RCC_OscConfig+0x82c>)
 8002ca4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ca8:	4a8d      	ldr	r2, [pc, #564]	; (8002ee0 <HAL_RCC_OscConfig+0x82c>)
 8002caa:	f023 0301 	bic.w	r3, r3, #1
 8002cae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb2:	f7fe ff91 	bl	8001bd8 <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002cb8:	e008      	b.n	8002ccc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cba:	f7fe ff8d 	bl	8001bd8 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e10e      	b.n	8002eea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ccc:	4b84      	ldr	r3, [pc, #528]	; (8002ee0 <HAL_RCC_OscConfig+0x82c>)
 8002cce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1ef      	bne.n	8002cba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 8102 	beq.w	8002ee8 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	f040 80c5 	bne.w	8002e78 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002cee:	4b7c      	ldr	r3, [pc, #496]	; (8002ee0 <HAL_RCC_OscConfig+0x82c>)
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f003 0203 	and.w	r2, r3, #3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d12c      	bne.n	8002d5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d123      	bne.n	8002d5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d1e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d11b      	bne.n	8002d5c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d113      	bne.n	8002d5c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3e:	085b      	lsrs	r3, r3, #1
 8002d40:	3b01      	subs	r3, #1
 8002d42:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d109      	bne.n	8002d5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	085b      	lsrs	r3, r3, #1
 8002d54:	3b01      	subs	r3, #1
 8002d56:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d067      	beq.n	8002e2c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	2b0c      	cmp	r3, #12
 8002d60:	d062      	beq.n	8002e28 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d62:	4b5f      	ldr	r3, [pc, #380]	; (8002ee0 <HAL_RCC_OscConfig+0x82c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e0bb      	b.n	8002eea <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d72:	4b5b      	ldr	r3, [pc, #364]	; (8002ee0 <HAL_RCC_OscConfig+0x82c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a5a      	ldr	r2, [pc, #360]	; (8002ee0 <HAL_RCC_OscConfig+0x82c>)
 8002d78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d7c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d7e:	f7fe ff2b 	bl	8001bd8 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d86:	f7fe ff27 	bl	8001bd8 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e0a8      	b.n	8002eea <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d98:	4b51      	ldr	r3, [pc, #324]	; (8002ee0 <HAL_RCC_OscConfig+0x82c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1f0      	bne.n	8002d86 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002da4:	4b4e      	ldr	r3, [pc, #312]	; (8002ee0 <HAL_RCC_OscConfig+0x82c>)
 8002da6:	68da      	ldr	r2, [r3, #12]
 8002da8:	4b4e      	ldr	r3, [pc, #312]	; (8002ee4 <HAL_RCC_OscConfig+0x830>)
 8002daa:	4013      	ands	r3, r2
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002db4:	3a01      	subs	r2, #1
 8002db6:	0112      	lsls	r2, r2, #4
 8002db8:	4311      	orrs	r1, r2
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002dbe:	0212      	lsls	r2, r2, #8
 8002dc0:	4311      	orrs	r1, r2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002dc6:	0852      	lsrs	r2, r2, #1
 8002dc8:	3a01      	subs	r2, #1
 8002dca:	0552      	lsls	r2, r2, #21
 8002dcc:	4311      	orrs	r1, r2
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002dd2:	0852      	lsrs	r2, r2, #1
 8002dd4:	3a01      	subs	r2, #1
 8002dd6:	0652      	lsls	r2, r2, #25
 8002dd8:	4311      	orrs	r1, r2
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002dde:	06d2      	lsls	r2, r2, #27
 8002de0:	430a      	orrs	r2, r1
 8002de2:	493f      	ldr	r1, [pc, #252]	; (8002ee0 <HAL_RCC_OscConfig+0x82c>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002de8:	4b3d      	ldr	r3, [pc, #244]	; (8002ee0 <HAL_RCC_OscConfig+0x82c>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a3c      	ldr	r2, [pc, #240]	; (8002ee0 <HAL_RCC_OscConfig+0x82c>)
 8002dee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002df2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002df4:	4b3a      	ldr	r3, [pc, #232]	; (8002ee0 <HAL_RCC_OscConfig+0x82c>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	4a39      	ldr	r2, [pc, #228]	; (8002ee0 <HAL_RCC_OscConfig+0x82c>)
 8002dfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dfe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e00:	f7fe feea 	bl	8001bd8 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e08:	f7fe fee6 	bl	8001bd8 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e067      	b.n	8002eea <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e1a:	4b31      	ldr	r3, [pc, #196]	; (8002ee0 <HAL_RCC_OscConfig+0x82c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0f0      	beq.n	8002e08 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e26:	e05f      	b.n	8002ee8 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e05e      	b.n	8002eea <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e2c:	4b2c      	ldr	r3, [pc, #176]	; (8002ee0 <HAL_RCC_OscConfig+0x82c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d157      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e38:	4b29      	ldr	r3, [pc, #164]	; (8002ee0 <HAL_RCC_OscConfig+0x82c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a28      	ldr	r2, [pc, #160]	; (8002ee0 <HAL_RCC_OscConfig+0x82c>)
 8002e3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e42:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e44:	4b26      	ldr	r3, [pc, #152]	; (8002ee0 <HAL_RCC_OscConfig+0x82c>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	4a25      	ldr	r2, [pc, #148]	; (8002ee0 <HAL_RCC_OscConfig+0x82c>)
 8002e4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e4e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e50:	f7fe fec2 	bl	8001bd8 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e58:	f7fe febe 	bl	8001bd8 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e03f      	b.n	8002eea <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ee0 <HAL_RCC_OscConfig+0x82c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0f0      	beq.n	8002e58 <HAL_RCC_OscConfig+0x7a4>
 8002e76:	e037      	b.n	8002ee8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	2b0c      	cmp	r3, #12
 8002e7c:	d02d      	beq.n	8002eda <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e7e:	4b18      	ldr	r3, [pc, #96]	; (8002ee0 <HAL_RCC_OscConfig+0x82c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a17      	ldr	r2, [pc, #92]	; (8002ee0 <HAL_RCC_OscConfig+0x82c>)
 8002e84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e88:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e8a:	4b15      	ldr	r3, [pc, #84]	; (8002ee0 <HAL_RCC_OscConfig+0x82c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d105      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002e96:	4b12      	ldr	r3, [pc, #72]	; (8002ee0 <HAL_RCC_OscConfig+0x82c>)
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	4a11      	ldr	r2, [pc, #68]	; (8002ee0 <HAL_RCC_OscConfig+0x82c>)
 8002e9c:	f023 0303 	bic.w	r3, r3, #3
 8002ea0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002ea2:	4b0f      	ldr	r3, [pc, #60]	; (8002ee0 <HAL_RCC_OscConfig+0x82c>)
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	4a0e      	ldr	r2, [pc, #56]	; (8002ee0 <HAL_RCC_OscConfig+0x82c>)
 8002ea8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002eac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eb0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb2:	f7fe fe91 	bl	8001bd8 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eba:	f7fe fe8d 	bl	8001bd8 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e00e      	b.n	8002eea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ecc:	4b04      	ldr	r3, [pc, #16]	; (8002ee0 <HAL_RCC_OscConfig+0x82c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1f0      	bne.n	8002eba <HAL_RCC_OscConfig+0x806>
 8002ed8:	e006      	b.n	8002ee8 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e005      	b.n	8002eea <HAL_RCC_OscConfig+0x836>
 8002ede:	bf00      	nop
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3720      	adds	r7, #32
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop

08002ef4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0c8      	b.n	800309a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f08:	4b66      	ldr	r3, [pc, #408]	; (80030a4 <HAL_RCC_ClockConfig+0x1b0>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d910      	bls.n	8002f38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f16:	4b63      	ldr	r3, [pc, #396]	; (80030a4 <HAL_RCC_ClockConfig+0x1b0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f023 0207 	bic.w	r2, r3, #7
 8002f1e:	4961      	ldr	r1, [pc, #388]	; (80030a4 <HAL_RCC_ClockConfig+0x1b0>)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f26:	4b5f      	ldr	r3, [pc, #380]	; (80030a4 <HAL_RCC_ClockConfig+0x1b0>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d001      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0b0      	b.n	800309a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d04c      	beq.n	8002fde <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b03      	cmp	r3, #3
 8002f4a:	d107      	bne.n	8002f5c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f4c:	4b56      	ldr	r3, [pc, #344]	; (80030a8 <HAL_RCC_ClockConfig+0x1b4>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d121      	bne.n	8002f9c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e09e      	b.n	800309a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d107      	bne.n	8002f74 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f64:	4b50      	ldr	r3, [pc, #320]	; (80030a8 <HAL_RCC_ClockConfig+0x1b4>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d115      	bne.n	8002f9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e092      	b.n	800309a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d107      	bne.n	8002f8c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f7c:	4b4a      	ldr	r3, [pc, #296]	; (80030a8 <HAL_RCC_ClockConfig+0x1b4>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d109      	bne.n	8002f9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e086      	b.n	800309a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f8c:	4b46      	ldr	r3, [pc, #280]	; (80030a8 <HAL_RCC_ClockConfig+0x1b4>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e07e      	b.n	800309a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f9c:	4b42      	ldr	r3, [pc, #264]	; (80030a8 <HAL_RCC_ClockConfig+0x1b4>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f023 0203 	bic.w	r2, r3, #3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	493f      	ldr	r1, [pc, #252]	; (80030a8 <HAL_RCC_ClockConfig+0x1b4>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fae:	f7fe fe13 	bl	8001bd8 <HAL_GetTick>
 8002fb2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb4:	e00a      	b.n	8002fcc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fb6:	f7fe fe0f 	bl	8001bd8 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e066      	b.n	800309a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fcc:	4b36      	ldr	r3, [pc, #216]	; (80030a8 <HAL_RCC_ClockConfig+0x1b4>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 020c 	and.w	r2, r3, #12
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d1eb      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d008      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fea:	4b2f      	ldr	r3, [pc, #188]	; (80030a8 <HAL_RCC_ClockConfig+0x1b4>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	492c      	ldr	r1, [pc, #176]	; (80030a8 <HAL_RCC_ClockConfig+0x1b4>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ffc:	4b29      	ldr	r3, [pc, #164]	; (80030a4 <HAL_RCC_ClockConfig+0x1b0>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	429a      	cmp	r2, r3
 8003008:	d210      	bcs.n	800302c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300a:	4b26      	ldr	r3, [pc, #152]	; (80030a4 <HAL_RCC_ClockConfig+0x1b0>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f023 0207 	bic.w	r2, r3, #7
 8003012:	4924      	ldr	r1, [pc, #144]	; (80030a4 <HAL_RCC_ClockConfig+0x1b0>)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	4313      	orrs	r3, r2
 8003018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800301a:	4b22      	ldr	r3, [pc, #136]	; (80030a4 <HAL_RCC_ClockConfig+0x1b0>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	429a      	cmp	r2, r3
 8003026:	d001      	beq.n	800302c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e036      	b.n	800309a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	2b00      	cmp	r3, #0
 8003036:	d008      	beq.n	800304a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003038:	4b1b      	ldr	r3, [pc, #108]	; (80030a8 <HAL_RCC_ClockConfig+0x1b4>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	4918      	ldr	r1, [pc, #96]	; (80030a8 <HAL_RCC_ClockConfig+0x1b4>)
 8003046:	4313      	orrs	r3, r2
 8003048:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	2b00      	cmp	r3, #0
 8003054:	d009      	beq.n	800306a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003056:	4b14      	ldr	r3, [pc, #80]	; (80030a8 <HAL_RCC_ClockConfig+0x1b4>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	4910      	ldr	r1, [pc, #64]	; (80030a8 <HAL_RCC_ClockConfig+0x1b4>)
 8003066:	4313      	orrs	r3, r2
 8003068:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800306a:	f000 f825 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 800306e:	4601      	mov	r1, r0
 8003070:	4b0d      	ldr	r3, [pc, #52]	; (80030a8 <HAL_RCC_ClockConfig+0x1b4>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	091b      	lsrs	r3, r3, #4
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	4a0c      	ldr	r2, [pc, #48]	; (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 800307c:	5cd3      	ldrb	r3, [r2, r3]
 800307e:	f003 031f 	and.w	r3, r3, #31
 8003082:	fa21 f303 	lsr.w	r3, r1, r3
 8003086:	4a0a      	ldr	r2, [pc, #40]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003088:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800308a:	4b0a      	ldr	r3, [pc, #40]	; (80030b4 <HAL_RCC_ClockConfig+0x1c0>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	f7fe fd52 	bl	8001b38 <HAL_InitTick>
 8003094:	4603      	mov	r3, r0
 8003096:	72fb      	strb	r3, [r7, #11]

  return status;
 8003098:	7afb      	ldrb	r3, [r7, #11]
}
 800309a:	4618      	mov	r0, r3
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	40022000 	.word	0x40022000
 80030a8:	40021000 	.word	0x40021000
 80030ac:	0800870c 	.word	0x0800870c
 80030b0:	20000010 	.word	0x20000010
 80030b4:	20000014 	.word	0x20000014

080030b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b089      	sub	sp, #36	; 0x24
 80030bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80030be:	2300      	movs	r3, #0
 80030c0:	61fb      	str	r3, [r7, #28]
 80030c2:	2300      	movs	r3, #0
 80030c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030c6:	4b3d      	ldr	r3, [pc, #244]	; (80031bc <HAL_RCC_GetSysClockFreq+0x104>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 030c 	and.w	r3, r3, #12
 80030ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030d0:	4b3a      	ldr	r3, [pc, #232]	; (80031bc <HAL_RCC_GetSysClockFreq+0x104>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	f003 0303 	and.w	r3, r3, #3
 80030d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d005      	beq.n	80030ec <HAL_RCC_GetSysClockFreq+0x34>
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	2b0c      	cmp	r3, #12
 80030e4:	d121      	bne.n	800312a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d11e      	bne.n	800312a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030ec:	4b33      	ldr	r3, [pc, #204]	; (80031bc <HAL_RCC_GetSysClockFreq+0x104>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0308 	and.w	r3, r3, #8
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d107      	bne.n	8003108 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030f8:	4b30      	ldr	r3, [pc, #192]	; (80031bc <HAL_RCC_GetSysClockFreq+0x104>)
 80030fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030fe:	0a1b      	lsrs	r3, r3, #8
 8003100:	f003 030f 	and.w	r3, r3, #15
 8003104:	61fb      	str	r3, [r7, #28]
 8003106:	e005      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003108:	4b2c      	ldr	r3, [pc, #176]	; (80031bc <HAL_RCC_GetSysClockFreq+0x104>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	091b      	lsrs	r3, r3, #4
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003114:	4a2a      	ldr	r2, [pc, #168]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800311c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10d      	bne.n	8003140 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003128:	e00a      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	2b04      	cmp	r3, #4
 800312e:	d102      	bne.n	8003136 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003130:	4b24      	ldr	r3, [pc, #144]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003132:	61bb      	str	r3, [r7, #24]
 8003134:	e004      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	2b08      	cmp	r3, #8
 800313a:	d101      	bne.n	8003140 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800313c:	4b22      	ldr	r3, [pc, #136]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x110>)
 800313e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	2b0c      	cmp	r3, #12
 8003144:	d133      	bne.n	80031ae <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003146:	4b1d      	ldr	r3, [pc, #116]	; (80031bc <HAL_RCC_GetSysClockFreq+0x104>)
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f003 0303 	and.w	r3, r3, #3
 800314e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d002      	beq.n	800315c <HAL_RCC_GetSysClockFreq+0xa4>
 8003156:	2b03      	cmp	r3, #3
 8003158:	d003      	beq.n	8003162 <HAL_RCC_GetSysClockFreq+0xaa>
 800315a:	e005      	b.n	8003168 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800315c:	4b19      	ldr	r3, [pc, #100]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800315e:	617b      	str	r3, [r7, #20]
      break;
 8003160:	e005      	b.n	800316e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003162:	4b19      	ldr	r3, [pc, #100]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003164:	617b      	str	r3, [r7, #20]
      break;
 8003166:	e002      	b.n	800316e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	617b      	str	r3, [r7, #20]
      break;
 800316c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800316e:	4b13      	ldr	r3, [pc, #76]	; (80031bc <HAL_RCC_GetSysClockFreq+0x104>)
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	091b      	lsrs	r3, r3, #4
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	3301      	adds	r3, #1
 800317a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800317c:	4b0f      	ldr	r3, [pc, #60]	; (80031bc <HAL_RCC_GetSysClockFreq+0x104>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	0a1b      	lsrs	r3, r3, #8
 8003182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	fb02 f203 	mul.w	r2, r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003192:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003194:	4b09      	ldr	r3, [pc, #36]	; (80031bc <HAL_RCC_GetSysClockFreq+0x104>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	0e5b      	lsrs	r3, r3, #25
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	3301      	adds	r3, #1
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ac:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80031ae:	69bb      	ldr	r3, [r7, #24]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3724      	adds	r7, #36	; 0x24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	40021000 	.word	0x40021000
 80031c0:	08008724 	.word	0x08008724
 80031c4:	00f42400 	.word	0x00f42400
 80031c8:	007a1200 	.word	0x007a1200

080031cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031d0:	4b03      	ldr	r3, [pc, #12]	; (80031e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80031d2:	681b      	ldr	r3, [r3, #0]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	20000010 	.word	0x20000010

080031e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031e8:	f7ff fff0 	bl	80031cc <HAL_RCC_GetHCLKFreq>
 80031ec:	4601      	mov	r1, r0
 80031ee:	4b06      	ldr	r3, [pc, #24]	; (8003208 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	0a1b      	lsrs	r3, r3, #8
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	4a04      	ldr	r2, [pc, #16]	; (800320c <HAL_RCC_GetPCLK1Freq+0x28>)
 80031fa:	5cd3      	ldrb	r3, [r2, r3]
 80031fc:	f003 031f 	and.w	r3, r3, #31
 8003200:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003204:	4618      	mov	r0, r3
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40021000 	.word	0x40021000
 800320c:	0800871c 	.word	0x0800871c

08003210 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003214:	f7ff ffda 	bl	80031cc <HAL_RCC_GetHCLKFreq>
 8003218:	4601      	mov	r1, r0
 800321a:	4b06      	ldr	r3, [pc, #24]	; (8003234 <HAL_RCC_GetPCLK2Freq+0x24>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	0adb      	lsrs	r3, r3, #11
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	4a04      	ldr	r2, [pc, #16]	; (8003238 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003226:	5cd3      	ldrb	r3, [r2, r3]
 8003228:	f003 031f 	and.w	r3, r3, #31
 800322c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003230:	4618      	mov	r0, r3
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40021000 	.word	0x40021000
 8003238:	0800871c 	.word	0x0800871c

0800323c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003244:	2300      	movs	r3, #0
 8003246:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003248:	4b2a      	ldr	r3, [pc, #168]	; (80032f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800324a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d003      	beq.n	800325c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003254:	f7ff f9ca 	bl	80025ec <HAL_PWREx_GetVoltageRange>
 8003258:	6178      	str	r0, [r7, #20]
 800325a:	e014      	b.n	8003286 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800325c:	4b25      	ldr	r3, [pc, #148]	; (80032f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800325e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003260:	4a24      	ldr	r2, [pc, #144]	; (80032f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003266:	6593      	str	r3, [r2, #88]	; 0x58
 8003268:	4b22      	ldr	r3, [pc, #136]	; (80032f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800326a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003274:	f7ff f9ba 	bl	80025ec <HAL_PWREx_GetVoltageRange>
 8003278:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800327a:	4b1e      	ldr	r3, [pc, #120]	; (80032f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800327c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327e:	4a1d      	ldr	r2, [pc, #116]	; (80032f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003284:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800328c:	d10b      	bne.n	80032a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b80      	cmp	r3, #128	; 0x80
 8003292:	d919      	bls.n	80032c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2ba0      	cmp	r3, #160	; 0xa0
 8003298:	d902      	bls.n	80032a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800329a:	2302      	movs	r3, #2
 800329c:	613b      	str	r3, [r7, #16]
 800329e:	e013      	b.n	80032c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032a0:	2301      	movs	r3, #1
 80032a2:	613b      	str	r3, [r7, #16]
 80032a4:	e010      	b.n	80032c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b80      	cmp	r3, #128	; 0x80
 80032aa:	d902      	bls.n	80032b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80032ac:	2303      	movs	r3, #3
 80032ae:	613b      	str	r3, [r7, #16]
 80032b0:	e00a      	b.n	80032c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b80      	cmp	r3, #128	; 0x80
 80032b6:	d102      	bne.n	80032be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032b8:	2302      	movs	r3, #2
 80032ba:	613b      	str	r3, [r7, #16]
 80032bc:	e004      	b.n	80032c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b70      	cmp	r3, #112	; 0x70
 80032c2:	d101      	bne.n	80032c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032c4:	2301      	movs	r3, #1
 80032c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80032c8:	4b0b      	ldr	r3, [pc, #44]	; (80032f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f023 0207 	bic.w	r2, r3, #7
 80032d0:	4909      	ldr	r1, [pc, #36]	; (80032f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80032d8:	4b07      	ldr	r3, [pc, #28]	; (80032f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d001      	beq.n	80032ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e000      	b.n	80032ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3718      	adds	r7, #24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40021000 	.word	0x40021000
 80032f8:	40022000 	.word	0x40022000

080032fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003304:	2300      	movs	r3, #0
 8003306:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003308:	2300      	movs	r3, #0
 800330a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003314:	2b00      	cmp	r3, #0
 8003316:	d02f      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003320:	d005      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003322:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003326:	d015      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8003328:	2b00      	cmp	r3, #0
 800332a:	d007      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800332c:	e00f      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800332e:	4b5d      	ldr	r3, [pc, #372]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	4a5c      	ldr	r2, [pc, #368]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003338:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800333a:	e00c      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3304      	adds	r3, #4
 8003340:	2100      	movs	r1, #0
 8003342:	4618      	mov	r0, r3
 8003344:	f000 fa1e 	bl	8003784 <RCCEx_PLLSAI1_Config>
 8003348:	4603      	mov	r3, r0
 800334a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800334c:	e003      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	74fb      	strb	r3, [r7, #19]
      break;
 8003352:	e000      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8003354:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003356:	7cfb      	ldrb	r3, [r7, #19]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10b      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800335c:	4b51      	ldr	r3, [pc, #324]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800335e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003362:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336a:	494e      	ldr	r1, [pc, #312]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800336c:	4313      	orrs	r3, r2
 800336e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003372:	e001      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003374:	7cfb      	ldrb	r3, [r7, #19]
 8003376:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 809e 	beq.w	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003386:	2300      	movs	r3, #0
 8003388:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800338a:	4b46      	ldr	r3, [pc, #280]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800338c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8003396:	2301      	movs	r3, #1
 8003398:	e000      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800339a:	2300      	movs	r3, #0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00d      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033a0:	4b40      	ldr	r3, [pc, #256]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80033a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a4:	4a3f      	ldr	r2, [pc, #252]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80033a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033aa:	6593      	str	r3, [r2, #88]	; 0x58
 80033ac:	4b3d      	ldr	r3, [pc, #244]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80033ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b4:	60bb      	str	r3, [r7, #8]
 80033b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033b8:	2301      	movs	r3, #1
 80033ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033bc:	4b3a      	ldr	r3, [pc, #232]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a39      	ldr	r2, [pc, #228]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033c8:	f7fe fc06 	bl	8001bd8 <HAL_GetTick>
 80033cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033ce:	e009      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d0:	f7fe fc02 	bl	8001bd8 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d902      	bls.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	74fb      	strb	r3, [r7, #19]
        break;
 80033e2:	e005      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033e4:	4b30      	ldr	r3, [pc, #192]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0ef      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 80033f0:	7cfb      	ldrb	r3, [r7, #19]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d15a      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033f6:	4b2b      	ldr	r3, [pc, #172]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80033f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003400:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d01e      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	429a      	cmp	r2, r3
 8003410:	d019      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003412:	4b24      	ldr	r3, [pc, #144]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003418:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800341c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800341e:	4b21      	ldr	r3, [pc, #132]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003424:	4a1f      	ldr	r2, [pc, #124]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800342a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800342e:	4b1d      	ldr	r3, [pc, #116]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003434:	4a1b      	ldr	r2, [pc, #108]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800343a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800343e:	4a19      	ldr	r2, [pc, #100]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b00      	cmp	r3, #0
 800344e:	d016      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003450:	f7fe fbc2 	bl	8001bd8 <HAL_GetTick>
 8003454:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003456:	e00b      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003458:	f7fe fbbe 	bl	8001bd8 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	f241 3288 	movw	r2, #5000	; 0x1388
 8003466:	4293      	cmp	r3, r2
 8003468:	d902      	bls.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	74fb      	strb	r3, [r7, #19]
            break;
 800346e:	e006      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003470:	4b0c      	ldr	r3, [pc, #48]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0ec      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 800347e:	7cfb      	ldrb	r3, [r7, #19]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10b      	bne.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003484:	4b07      	ldr	r3, [pc, #28]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003492:	4904      	ldr	r1, [pc, #16]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003494:	4313      	orrs	r3, r2
 8003496:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800349a:	e009      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800349c:	7cfb      	ldrb	r3, [r7, #19]
 800349e:	74bb      	strb	r3, [r7, #18]
 80034a0:	e006      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80034a2:	bf00      	nop
 80034a4:	40021000 	.word	0x40021000
 80034a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ac:	7cfb      	ldrb	r3, [r7, #19]
 80034ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034b0:	7c7b      	ldrb	r3, [r7, #17]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d105      	bne.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034b6:	4bb2      	ldr	r3, [pc, #712]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80034b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ba:	4ab1      	ldr	r2, [pc, #708]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80034bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00a      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034ce:	4bac      	ldr	r3, [pc, #688]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80034d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d4:	f023 0203 	bic.w	r2, r3, #3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	49a8      	ldr	r1, [pc, #672]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00a      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034f0:	4ba3      	ldr	r3, [pc, #652]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80034f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f6:	f023 020c 	bic.w	r2, r3, #12
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	49a0      	ldr	r1, [pc, #640]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8003500:	4313      	orrs	r3, r2
 8003502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0304 	and.w	r3, r3, #4
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00a      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003512:	4b9b      	ldr	r3, [pc, #620]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8003514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003518:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003520:	4997      	ldr	r1, [pc, #604]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8003522:	4313      	orrs	r3, r2
 8003524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0320 	and.w	r3, r3, #32
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00a      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003534:	4b92      	ldr	r3, [pc, #584]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8003536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003542:	498f      	ldr	r1, [pc, #572]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8003544:	4313      	orrs	r3, r2
 8003546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00a      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003556:	4b8a      	ldr	r3, [pc, #552]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8003558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003564:	4986      	ldr	r1, [pc, #536]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8003566:	4313      	orrs	r3, r2
 8003568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00a      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003578:	4b81      	ldr	r3, [pc, #516]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800357a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	497e      	ldr	r1, [pc, #504]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8003588:	4313      	orrs	r3, r2
 800358a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00a      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800359a:	4b79      	ldr	r3, [pc, #484]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800359c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a8:	4975      	ldr	r1, [pc, #468]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00a      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035bc:	4b70      	ldr	r3, [pc, #448]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80035be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ca:	496d      	ldr	r1, [pc, #436]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00a      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035de:	4b68      	ldr	r3, [pc, #416]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80035e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ec:	4964      	ldr	r1, [pc, #400]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d028      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003600:	4b5f      	ldr	r3, [pc, #380]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8003602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003606:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800360e:	495c      	ldr	r1, [pc, #368]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8003610:	4313      	orrs	r3, r2
 8003612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800361a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800361e:	d106      	bne.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x332>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003620:	4b57      	ldr	r3, [pc, #348]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	4a56      	ldr	r2, [pc, #344]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8003626:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800362a:	60d3      	str	r3, [r2, #12]
 800362c:	e011      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x356>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003632:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003636:	d10c      	bne.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x356>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3304      	adds	r3, #4
 800363c:	2101      	movs	r1, #1
 800363e:	4618      	mov	r0, r3
 8003640:	f000 f8a0 	bl	8003784 <RCCEx_PLLSAI1_Config>
 8003644:	4603      	mov	r3, r0
 8003646:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003648:	7cfb      	ldrb	r3, [r7, #19]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x356>
        {
          /* set overall return value */
          status = ret;
 800364e:	7cfb      	ldrb	r3, [r7, #19]
 8003650:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d028      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800365e:	4b48      	ldr	r3, [pc, #288]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8003660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003664:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800366c:	4944      	ldr	r1, [pc, #272]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800366e:	4313      	orrs	r3, r2
 8003670:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003678:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800367c:	d106      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x390>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800367e:	4b40      	ldr	r3, [pc, #256]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	4a3f      	ldr	r2, [pc, #252]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8003684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003688:	60d3      	str	r3, [r2, #12]
 800368a:	e011      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003690:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003694:	d10c      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	3304      	adds	r3, #4
 800369a:	2101      	movs	r1, #1
 800369c:	4618      	mov	r0, r3
 800369e:	f000 f871 	bl	8003784 <RCCEx_PLLSAI1_Config>
 80036a2:	4603      	mov	r3, r0
 80036a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036a6:	7cfb      	ldrb	r3, [r7, #19]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 80036ac:	7cfb      	ldrb	r3, [r7, #19]
 80036ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d028      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036bc:	4b30      	ldr	r3, [pc, #192]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80036be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ca:	492d      	ldr	r1, [pc, #180]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036da:	d106      	bne.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036dc:	4b28      	ldr	r3, [pc, #160]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	4a27      	ldr	r2, [pc, #156]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80036e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036e6:	60d3      	str	r3, [r2, #12]
 80036e8:	e011      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x412>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036f2:	d10c      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3304      	adds	r3, #4
 80036f8:	2101      	movs	r1, #1
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 f842 	bl	8003784 <RCCEx_PLLSAI1_Config>
 8003700:	4603      	mov	r3, r0
 8003702:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003704:	7cfb      	ldrb	r3, [r7, #19]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x412>
      {
        /* set overall return value */
        status = ret;
 800370a:	7cfb      	ldrb	r3, [r7, #19]
 800370c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d01c      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800371a:	4b19      	ldr	r3, [pc, #100]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800371c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003720:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003728:	4915      	ldr	r1, [pc, #84]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003734:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003738:	d10c      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	3304      	adds	r3, #4
 800373e:	2102      	movs	r1, #2
 8003740:	4618      	mov	r0, r3
 8003742:	f000 f81f 	bl	8003784 <RCCEx_PLLSAI1_Config>
 8003746:	4603      	mov	r3, r0
 8003748:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800374a:	7cfb      	ldrb	r3, [r7, #19]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x458>
      {
        /* set overall return value */
        status = ret;
 8003750:	7cfb      	ldrb	r3, [r7, #19]
 8003752:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00a      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x47a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003760:	4b07      	ldr	r3, [pc, #28]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8003762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003766:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376e:	4904      	ldr	r1, [pc, #16]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8003770:	4313      	orrs	r3, r2
 8003772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003776:	7cbb      	ldrb	r3, [r7, #18]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	40021000 	.word	0x40021000

08003784 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800378e:	2300      	movs	r3, #0
 8003790:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003792:	4b73      	ldr	r3, [pc, #460]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d018      	beq.n	80037d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800379e:	4b70      	ldr	r3, [pc, #448]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f003 0203 	and.w	r2, r3, #3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d10d      	bne.n	80037ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
       ||
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d009      	beq.n	80037ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80037b6:	4b6a      	ldr	r3, [pc, #424]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	091b      	lsrs	r3, r3, #4
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	1c5a      	adds	r2, r3, #1
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
       ||
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d044      	beq.n	8003854 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	73fb      	strb	r3, [r7, #15]
 80037ce:	e041      	b.n	8003854 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d00c      	beq.n	80037f2 <RCCEx_PLLSAI1_Config+0x6e>
 80037d8:	2b03      	cmp	r3, #3
 80037da:	d013      	beq.n	8003804 <RCCEx_PLLSAI1_Config+0x80>
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d120      	bne.n	8003822 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037e0:	4b5f      	ldr	r3, [pc, #380]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d11d      	bne.n	8003828 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037f0:	e01a      	b.n	8003828 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037f2:	4b5b      	ldr	r3, [pc, #364]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d116      	bne.n	800382c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003802:	e013      	b.n	800382c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003804:	4b56      	ldr	r3, [pc, #344]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10f      	bne.n	8003830 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003810:	4b53      	ldr	r3, [pc, #332]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d109      	bne.n	8003830 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003820:	e006      	b.n	8003830 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	73fb      	strb	r3, [r7, #15]
      break;
 8003826:	e004      	b.n	8003832 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003828:	bf00      	nop
 800382a:	e002      	b.n	8003832 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800382c:	bf00      	nop
 800382e:	e000      	b.n	8003832 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003830:	bf00      	nop
    }

    if(status == HAL_OK)
 8003832:	7bfb      	ldrb	r3, [r7, #15]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10d      	bne.n	8003854 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003838:	4b49      	ldr	r3, [pc, #292]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6819      	ldr	r1, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	3b01      	subs	r3, #1
 800384a:	011b      	lsls	r3, r3, #4
 800384c:	430b      	orrs	r3, r1
 800384e:	4944      	ldr	r1, [pc, #272]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003850:	4313      	orrs	r3, r2
 8003852:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003854:	7bfb      	ldrb	r3, [r7, #15]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d17c      	bne.n	8003954 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800385a:	4b41      	ldr	r3, [pc, #260]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a40      	ldr	r2, [pc, #256]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003860:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003864:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003866:	f7fe f9b7 	bl	8001bd8 <HAL_GetTick>
 800386a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800386c:	e009      	b.n	8003882 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800386e:	f7fe f9b3 	bl	8001bd8 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d902      	bls.n	8003882 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	73fb      	strb	r3, [r7, #15]
        break;
 8003880:	e005      	b.n	800388e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003882:	4b37      	ldr	r3, [pc, #220]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1ef      	bne.n	800386e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800388e:	7bfb      	ldrb	r3, [r7, #15]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d15f      	bne.n	8003954 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d110      	bne.n	80038bc <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800389a:	4b31      	ldr	r3, [pc, #196]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80038a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6892      	ldr	r2, [r2, #8]
 80038aa:	0211      	lsls	r1, r2, #8
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	68d2      	ldr	r2, [r2, #12]
 80038b0:	06d2      	lsls	r2, r2, #27
 80038b2:	430a      	orrs	r2, r1
 80038b4:	492a      	ldr	r1, [pc, #168]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	610b      	str	r3, [r1, #16]
 80038ba:	e027      	b.n	800390c <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d112      	bne.n	80038e8 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038c2:	4b27      	ldr	r3, [pc, #156]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80038ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6892      	ldr	r2, [r2, #8]
 80038d2:	0211      	lsls	r1, r2, #8
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	6912      	ldr	r2, [r2, #16]
 80038d8:	0852      	lsrs	r2, r2, #1
 80038da:	3a01      	subs	r2, #1
 80038dc:	0552      	lsls	r2, r2, #21
 80038de:	430a      	orrs	r2, r1
 80038e0:	491f      	ldr	r1, [pc, #124]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	610b      	str	r3, [r1, #16]
 80038e6:	e011      	b.n	800390c <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038e8:	4b1d      	ldr	r3, [pc, #116]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	6892      	ldr	r2, [r2, #8]
 80038f8:	0211      	lsls	r1, r2, #8
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	6952      	ldr	r2, [r2, #20]
 80038fe:	0852      	lsrs	r2, r2, #1
 8003900:	3a01      	subs	r2, #1
 8003902:	0652      	lsls	r2, r2, #25
 8003904:	430a      	orrs	r2, r1
 8003906:	4916      	ldr	r1, [pc, #88]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003908:	4313      	orrs	r3, r2
 800390a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800390c:	4b14      	ldr	r3, [pc, #80]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a13      	ldr	r2, [pc, #76]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003912:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003916:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003918:	f7fe f95e 	bl	8001bd8 <HAL_GetTick>
 800391c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800391e:	e009      	b.n	8003934 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003920:	f7fe f95a 	bl	8001bd8 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d902      	bls.n	8003934 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	73fb      	strb	r3, [r7, #15]
          break;
 8003932:	e005      	b.n	8003940 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003934:	4b0a      	ldr	r3, [pc, #40]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0ef      	beq.n	8003920 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8003940:	7bfb      	ldrb	r3, [r7, #15]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d106      	bne.n	8003954 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003946:	4b06      	ldr	r3, [pc, #24]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003948:	691a      	ldr	r2, [r3, #16]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	4904      	ldr	r1, [pc, #16]	; (8003960 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003950:	4313      	orrs	r3, r2
 8003952:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003954:	7bfb      	ldrb	r3, [r7, #15]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40021000 	.word	0x40021000

08003964 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e095      	b.n	8003aa2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	2b00      	cmp	r3, #0
 800397c:	d108      	bne.n	8003990 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003986:	d009      	beq.n	800399c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	61da      	str	r2, [r3, #28]
 800398e:	e005      	b.n	800399c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d106      	bne.n	80039bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7fd fe90 	bl	80016dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2202      	movs	r2, #2
 80039c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039d2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039dc:	d902      	bls.n	80039e4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80039de:	2300      	movs	r3, #0
 80039e0:	60fb      	str	r3, [r7, #12]
 80039e2:	e002      	b.n	80039ea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80039e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039e8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80039f2:	d007      	beq.n	8003a04 <HAL_SPI_Init+0xa0>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039fc:	d002      	beq.n	8003a04 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a14:	431a      	orrs	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a32:	431a      	orrs	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a46:	ea42 0103 	orr.w	r1, r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	0c1b      	lsrs	r3, r3, #16
 8003a60:	f003 0204 	and.w	r2, r3, #4
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a68:	f003 0310 	and.w	r3, r3, #16
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a72:	f003 0308 	and.w	r3, r3, #8
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003a80:	ea42 0103 	orr.w	r1, r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b088      	sub	sp, #32
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	60f8      	str	r0, [r7, #12]
 8003ab2:	60b9      	str	r1, [r7, #8]
 8003ab4:	603b      	str	r3, [r7, #0]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003aba:	2300      	movs	r3, #0
 8003abc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d101      	bne.n	8003acc <HAL_SPI_Transmit+0x22>
 8003ac8:	2302      	movs	r3, #2
 8003aca:	e158      	b.n	8003d7e <HAL_SPI_Transmit+0x2d4>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ad4:	f7fe f880 	bl	8001bd8 <HAL_GetTick>
 8003ad8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003ada:	88fb      	ldrh	r3, [r7, #6]
 8003adc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d002      	beq.n	8003af0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003aea:	2302      	movs	r3, #2
 8003aec:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003aee:	e13d      	b.n	8003d6c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d002      	beq.n	8003afc <HAL_SPI_Transmit+0x52>
 8003af6:	88fb      	ldrh	r3, [r7, #6]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d102      	bne.n	8003b02 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b00:	e134      	b.n	8003d6c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2203      	movs	r2, #3
 8003b06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	88fa      	ldrh	r2, [r7, #6]
 8003b1a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	88fa      	ldrh	r2, [r7, #6]
 8003b20:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b4c:	d10f      	bne.n	8003b6e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b6c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b78:	2b40      	cmp	r3, #64	; 0x40
 8003b7a:	d007      	beq.n	8003b8c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b94:	d94b      	bls.n	8003c2e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d002      	beq.n	8003ba4 <HAL_SPI_Transmit+0xfa>
 8003b9e:	8afb      	ldrh	r3, [r7, #22]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d13e      	bne.n	8003c22 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba8:	881a      	ldrh	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb4:	1c9a      	adds	r2, r3, #2
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003bc8:	e02b      	b.n	8003c22 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d112      	bne.n	8003bfe <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bdc:	881a      	ldrh	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be8:	1c9a      	adds	r2, r3, #2
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003bfc:	e011      	b.n	8003c22 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bfe:	f7fd ffeb 	bl	8001bd8 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d803      	bhi.n	8003c16 <HAL_SPI_Transmit+0x16c>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c14:	d102      	bne.n	8003c1c <HAL_SPI_Transmit+0x172>
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d102      	bne.n	8003c22 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c20:	e0a4      	b.n	8003d6c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1ce      	bne.n	8003bca <HAL_SPI_Transmit+0x120>
 8003c2c:	e07c      	b.n	8003d28 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d002      	beq.n	8003c3c <HAL_SPI_Transmit+0x192>
 8003c36:	8afb      	ldrh	r3, [r7, #22]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d170      	bne.n	8003d1e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d912      	bls.n	8003c6c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4a:	881a      	ldrh	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c56:	1c9a      	adds	r2, r3, #2
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	3b02      	subs	r3, #2
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c6a:	e058      	b.n	8003d1e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	330c      	adds	r3, #12
 8003c76:	7812      	ldrb	r2, [r2, #0]
 8003c78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7e:	1c5a      	adds	r2, r3, #1
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003c92:	e044      	b.n	8003d1e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d12b      	bne.n	8003cfa <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d912      	bls.n	8003cd2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb0:	881a      	ldrh	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cbc:	1c9a      	adds	r2, r3, #2
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	3b02      	subs	r3, #2
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cd0:	e025      	b.n	8003d1e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	330c      	adds	r3, #12
 8003cdc:	7812      	ldrb	r2, [r2, #0]
 8003cde:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cf8:	e011      	b.n	8003d1e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cfa:	f7fd ff6d 	bl	8001bd8 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d803      	bhi.n	8003d12 <HAL_SPI_Transmit+0x268>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d10:	d102      	bne.n	8003d18 <HAL_SPI_Transmit+0x26e>
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d102      	bne.n	8003d1e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d1c:	e026      	b.n	8003d6c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1b5      	bne.n	8003c94 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	6839      	ldr	r1, [r7, #0]
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 f941 	bl	8003fb4 <SPI_EndRxTxTransaction>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d002      	beq.n	8003d3e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10a      	bne.n	8003d5c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d46:	2300      	movs	r3, #0
 8003d48:	613b      	str	r3, [r7, #16]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	613b      	str	r3, [r7, #16]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	613b      	str	r3, [r7, #16]
 8003d5a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d002      	beq.n	8003d6a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	77fb      	strb	r3, [r7, #31]
 8003d68:	e000      	b.n	8003d6c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003d6a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003d7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3720      	adds	r7, #32
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
	...

08003d88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b088      	sub	sp, #32
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	603b      	str	r3, [r7, #0]
 8003d94:	4613      	mov	r3, r2
 8003d96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d98:	f7fd ff1e 	bl	8001bd8 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da0:	1a9b      	subs	r3, r3, r2
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	4413      	add	r3, r2
 8003da6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003da8:	f7fd ff16 	bl	8001bd8 <HAL_GetTick>
 8003dac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003dae:	4b39      	ldr	r3, [pc, #228]	; (8003e94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	015b      	lsls	r3, r3, #5
 8003db4:	0d1b      	lsrs	r3, r3, #20
 8003db6:	69fa      	ldr	r2, [r7, #28]
 8003db8:	fb02 f303 	mul.w	r3, r2, r3
 8003dbc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dbe:	e054      	b.n	8003e6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc6:	d050      	beq.n	8003e6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003dc8:	f7fd ff06 	bl	8001bd8 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	69fa      	ldr	r2, [r7, #28]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d902      	bls.n	8003dde <SPI_WaitFlagStateUntilTimeout+0x56>
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d13d      	bne.n	8003e5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003dec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003df6:	d111      	bne.n	8003e1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e00:	d004      	beq.n	8003e0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e0a:	d107      	bne.n	8003e1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e24:	d10f      	bne.n	8003e46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e017      	b.n	8003e8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e60:	2300      	movs	r3, #0
 8003e62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	3b01      	subs	r3, #1
 8003e68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	4013      	ands	r3, r2
 8003e74:	68ba      	ldr	r2, [r7, #8]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	bf0c      	ite	eq
 8003e7a:	2301      	moveq	r3, #1
 8003e7c:	2300      	movne	r3, #0
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	461a      	mov	r2, r3
 8003e82:	79fb      	ldrb	r3, [r7, #7]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d19b      	bne.n	8003dc0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3720      	adds	r7, #32
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	20000010 	.word	0x20000010

08003e98 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b088      	sub	sp, #32
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
 8003ea4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003ea6:	f7fd fe97 	bl	8001bd8 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eae:	1a9b      	subs	r3, r3, r2
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003eb6:	f7fd fe8f 	bl	8001bd8 <HAL_GetTick>
 8003eba:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003ebc:	4b3c      	ldr	r3, [pc, #240]	; (8003fb0 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	00da      	lsls	r2, r3, #3
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	0d1b      	lsrs	r3, r3, #20
 8003ecc:	69fa      	ldr	r2, [r7, #28]
 8003ece:	fb02 f303 	mul.w	r3, r2, r3
 8003ed2:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8003ed4:	e05f      	b.n	8003f96 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003edc:	d106      	bne.n	8003eec <SPI_WaitFifoStateUntilTimeout+0x54>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d103      	bne.n	8003eec <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	330c      	adds	r3, #12
 8003eea:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef2:	d050      	beq.n	8003f96 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ef4:	f7fd fe70 	bl	8001bd8 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	69fa      	ldr	r2, [r7, #28]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d902      	bls.n	8003f0a <SPI_WaitFifoStateUntilTimeout+0x72>
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d13d      	bne.n	8003f86 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f22:	d111      	bne.n	8003f48 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f2c:	d004      	beq.n	8003f38 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f36:	d107      	bne.n	8003f48 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f50:	d10f      	bne.n	8003f72 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e010      	b.n	8003fa8 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	3b01      	subs	r3, #1
 8003f94:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d197      	bne.n	8003ed6 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3720      	adds	r7, #32
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	20000010 	.word	0x20000010

08003fb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af02      	add	r7, sp, #8
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f7ff ff63 	bl	8003e98 <SPI_WaitFifoStateUntilTimeout>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d007      	beq.n	8003fe8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fdc:	f043 0220 	orr.w	r2, r3, #32
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e027      	b.n	8004038 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	2180      	movs	r1, #128	; 0x80
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f7ff fec8 	bl	8003d88 <SPI_WaitFlagStateUntilTimeout>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d007      	beq.n	800400e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004002:	f043 0220 	orr.w	r2, r3, #32
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e014      	b.n	8004038 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	2200      	movs	r2, #0
 8004016:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f7ff ff3c 	bl	8003e98 <SPI_WaitFifoStateUntilTimeout>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d007      	beq.n	8004036 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800402a:	f043 0220 	orr.w	r2, r3, #32
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e000      	b.n	8004038 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e040      	b.n	80040d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004056:	2b00      	cmp	r3, #0
 8004058:	d106      	bne.n	8004068 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7fd fb9c 	bl	80017a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2224      	movs	r2, #36	; 0x24
 800406c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0201 	bic.w	r2, r2, #1
 800407c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 fa9c 	bl	80045bc <UART_SetConfig>
 8004084:	4603      	mov	r3, r0
 8004086:	2b01      	cmp	r3, #1
 8004088:	d101      	bne.n	800408e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e022      	b.n	80040d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	2b00      	cmp	r3, #0
 8004094:	d002      	beq.n	800409c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 fcc6 	bl	8004a28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689a      	ldr	r2, [r3, #8]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f042 0201 	orr.w	r2, r2, #1
 80040ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 fd4d 	bl	8004b6c <UART_CheckIdleState>
 80040d2:	4603      	mov	r3, r0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	4613      	mov	r3, r2
 80040e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ee:	2b20      	cmp	r3, #32
 80040f0:	d164      	bne.n	80041bc <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d002      	beq.n	80040fe <HAL_UART_Transmit_DMA+0x22>
 80040f8:	88fb      	ldrh	r3, [r7, #6]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e05d      	b.n	80041be <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004108:	2b01      	cmp	r3, #1
 800410a:	d101      	bne.n	8004110 <HAL_UART_Transmit_DMA+0x34>
 800410c:	2302      	movs	r3, #2
 800410e:	e056      	b.n	80041be <HAL_UART_Transmit_DMA+0xe2>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	88fa      	ldrh	r2, [r7, #6]
 8004122:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	88fa      	ldrh	r2, [r7, #6]
 800412a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2221      	movs	r2, #33	; 0x21
 8004138:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800413e:	2b00      	cmp	r3, #0
 8004140:	d02a      	beq.n	8004198 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004146:	4a20      	ldr	r2, [pc, #128]	; (80041c8 <HAL_UART_Transmit_DMA+0xec>)
 8004148:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800414e:	4a1f      	ldr	r2, [pc, #124]	; (80041cc <HAL_UART_Transmit_DMA+0xf0>)
 8004150:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004156:	4a1e      	ldr	r2, [pc, #120]	; (80041d0 <HAL_UART_Transmit_DMA+0xf4>)
 8004158:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800415e:	2200      	movs	r2, #0
 8004160:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800416a:	4619      	mov	r1, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3328      	adds	r3, #40	; 0x28
 8004172:	461a      	mov	r2, r3
 8004174:	88fb      	ldrh	r3, [r7, #6]
 8004176:	f7fd ff27 	bl	8001fc8 <HAL_DMA_Start_IT>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00b      	beq.n	8004198 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2210      	movs	r2, #16
 8004184:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2220      	movs	r2, #32
 8004192:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e012      	b.n	80041be <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2240      	movs	r2, #64	; 0x40
 800419e:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689a      	ldr	r2, [r3, #8]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80041b6:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80041b8:	2300      	movs	r3, #0
 80041ba:	e000      	b.n	80041be <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 80041bc:	2302      	movs	r3, #2
  }
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	08004d57 	.word	0x08004d57
 80041cc:	08004dab 	.word	0x08004dab
 80041d0:	08004e4b 	.word	0x08004e4b

080041d4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	4613      	mov	r3, r2
 80041e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041e6:	2b20      	cmp	r3, #32
 80041e8:	d16c      	bne.n	80042c4 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <HAL_UART_Receive_DMA+0x22>
 80041f0:	88fb      	ldrh	r3, [r7, #6]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e065      	b.n	80042c6 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004200:	2b01      	cmp	r3, #1
 8004202:	d101      	bne.n	8004208 <HAL_UART_Receive_DMA+0x34>
 8004204:	2302      	movs	r3, #2
 8004206:	e05e      	b.n	80042c6 <HAL_UART_Receive_DMA+0xf2>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	88fa      	ldrh	r2, [r7, #6]
 800421a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2222      	movs	r2, #34	; 0x22
 8004228:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800422e:	2b00      	cmp	r3, #0
 8004230:	d02a      	beq.n	8004288 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004236:	4a26      	ldr	r2, [pc, #152]	; (80042d0 <HAL_UART_Receive_DMA+0xfc>)
 8004238:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800423e:	4a25      	ldr	r2, [pc, #148]	; (80042d4 <HAL_UART_Receive_DMA+0x100>)
 8004240:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004246:	4a24      	ldr	r2, [pc, #144]	; (80042d8 <HAL_UART_Receive_DMA+0x104>)
 8004248:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800424e:	2200      	movs	r2, #0
 8004250:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	3324      	adds	r3, #36	; 0x24
 800425c:	4619      	mov	r1, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004262:	461a      	mov	r2, r3
 8004264:	88fb      	ldrh	r3, [r7, #6]
 8004266:	f7fd feaf 	bl	8001fc8 <HAL_DMA_Start_IT>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00b      	beq.n	8004288 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2210      	movs	r2, #16
 8004274:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2220      	movs	r2, #32
 8004282:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e01e      	b.n	80042c6 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800429e:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689a      	ldr	r2, [r3, #8]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0201 	orr.w	r2, r2, #1
 80042ae:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689a      	ldr	r2, [r3, #8]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042be:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80042c0:	2300      	movs	r3, #0
 80042c2:	e000      	b.n	80042c6 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 80042c4:	2302      	movs	r3, #2
  }
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	08004dc7 	.word	0x08004dc7
 80042d4:	08004e2f 	.word	0x08004e2f
 80042d8:	08004e4b 	.word	0x08004e4b

080042dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b088      	sub	sp, #32
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80042fc:	69fa      	ldr	r2, [r7, #28]
 80042fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8004302:	4013      	ands	r3, r2
 8004304:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d113      	bne.n	8004334 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	f003 0320 	and.w	r3, r3, #32
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00e      	beq.n	8004334 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	f003 0320 	and.w	r3, r3, #32
 800431c:	2b00      	cmp	r3, #0
 800431e:	d009      	beq.n	8004334 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 8114 	beq.w	8004552 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	4798      	blx	r3
      }
      return;
 8004332:	e10e      	b.n	8004552 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 80d6 	beq.w	80044e8 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d105      	bne.n	8004352 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	4b86      	ldr	r3, [pc, #536]	; (8004564 <HAL_UART_IRQHandler+0x288>)
 800434a:	4013      	ands	r3, r2
 800434c:	2b00      	cmp	r3, #0
 800434e:	f000 80cb 	beq.w	80044e8 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00e      	beq.n	800437a <HAL_UART_IRQHandler+0x9e>
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004362:	2b00      	cmp	r3, #0
 8004364:	d009      	beq.n	800437a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2201      	movs	r2, #1
 800436c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004372:	f043 0201 	orr.w	r2, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00e      	beq.n	80043a2 <HAL_UART_IRQHandler+0xc6>
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d009      	beq.n	80043a2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2202      	movs	r2, #2
 8004394:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800439a:	f043 0204 	orr.w	r2, r3, #4
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	f003 0304 	and.w	r3, r3, #4
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00e      	beq.n	80043ca <HAL_UART_IRQHandler+0xee>
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d009      	beq.n	80043ca <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2204      	movs	r2, #4
 80043bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043c2:	f043 0202 	orr.w	r2, r3, #2
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	f003 0308 	and.w	r3, r3, #8
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d013      	beq.n	80043fc <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	f003 0320 	and.w	r3, r3, #32
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d104      	bne.n	80043e8 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d009      	beq.n	80043fc <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2208      	movs	r2, #8
 80043ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043f4:	f043 0208 	orr.w	r2, r3, #8
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00f      	beq.n	8004426 <HAL_UART_IRQHandler+0x14a>
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00a      	beq.n	8004426 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004418:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800441e:	f043 0220 	orr.w	r2, r3, #32
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 8093 	beq.w	8004556 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	f003 0320 	and.w	r3, r3, #32
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00c      	beq.n	8004454 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	f003 0320 	and.w	r3, r3, #32
 8004440:	2b00      	cmp	r3, #0
 8004442:	d007      	beq.n	8004454 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004458:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004464:	2b40      	cmp	r3, #64	; 0x40
 8004466:	d004      	beq.n	8004472 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800446e:	2b00      	cmp	r3, #0
 8004470:	d031      	beq.n	80044d6 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 fc4f 	bl	8004d16 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004482:	2b40      	cmp	r3, #64	; 0x40
 8004484:	d123      	bne.n	80044ce <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004494:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800449a:	2b00      	cmp	r3, #0
 800449c:	d013      	beq.n	80044c6 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044a2:	4a31      	ldr	r2, [pc, #196]	; (8004568 <HAL_UART_IRQHandler+0x28c>)
 80044a4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7fd fdec 	bl	8002088 <HAL_DMA_Abort_IT>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d016      	beq.n	80044e4 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80044c0:	4610      	mov	r0, r2
 80044c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044c4:	e00e      	b.n	80044e4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f86e 	bl	80045a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044cc:	e00a      	b.n	80044e4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f86a 	bl	80045a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d4:	e006      	b.n	80044e4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f866 	bl	80045a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80044e2:	e038      	b.n	8004556 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044e4:	bf00      	nop
    return;
 80044e6:	e036      	b.n	8004556 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00d      	beq.n	800450e <HAL_UART_IRQHandler+0x232>
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d008      	beq.n	800450e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004504:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fd0a 	bl	8004f20 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800450c:	e026      	b.n	800455c <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00d      	beq.n	8004534 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800451e:	2b00      	cmp	r3, #0
 8004520:	d008      	beq.n	8004534 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004526:	2b00      	cmp	r3, #0
 8004528:	d017      	beq.n	800455a <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	4798      	blx	r3
    }
    return;
 8004532:	e012      	b.n	800455a <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00e      	beq.n	800455c <HAL_UART_IRQHandler+0x280>
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004544:	2b00      	cmp	r3, #0
 8004546:	d009      	beq.n	800455c <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 fcd0 	bl	8004eee <UART_EndTransmit_IT>
    return;
 800454e:	bf00      	nop
 8004550:	e004      	b.n	800455c <HAL_UART_IRQHandler+0x280>
      return;
 8004552:	bf00      	nop
 8004554:	e002      	b.n	800455c <HAL_UART_IRQHandler+0x280>
    return;
 8004556:	bf00      	nop
 8004558:	e000      	b.n	800455c <HAL_UART_IRQHandler+0x280>
    return;
 800455a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800455c:	3720      	adds	r7, #32
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	04000120 	.word	0x04000120
 8004568:	08004ec3 	.word	0x08004ec3

0800456c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045bc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80045c0:	b088      	sub	sp, #32
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045c6:	2300      	movs	r3, #0
 80045c8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689a      	ldr	r2, [r3, #8]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	431a      	orrs	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	4313      	orrs	r3, r2
 80045e0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	4baa      	ldr	r3, [pc, #680]	; (8004894 <UART_SetConfig+0x2d8>)
 80045ea:	4013      	ands	r3, r2
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	6812      	ldr	r2, [r2, #0]
 80045f0:	69f9      	ldr	r1, [r7, #28]
 80045f2:	430b      	orrs	r3, r1
 80045f4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	68da      	ldr	r2, [r3, #12]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	430a      	orrs	r2, r1
 800460a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4aa0      	ldr	r2, [pc, #640]	; (8004898 <UART_SetConfig+0x2dc>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d004      	beq.n	8004626 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	69fa      	ldr	r2, [r7, #28]
 8004622:	4313      	orrs	r3, r2
 8004624:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	69fa      	ldr	r2, [r7, #28]
 8004636:	430a      	orrs	r2, r1
 8004638:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a97      	ldr	r2, [pc, #604]	; (800489c <UART_SetConfig+0x2e0>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d121      	bne.n	8004688 <UART_SetConfig+0xcc>
 8004644:	4b96      	ldr	r3, [pc, #600]	; (80048a0 <UART_SetConfig+0x2e4>)
 8004646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	2b03      	cmp	r3, #3
 8004650:	d816      	bhi.n	8004680 <UART_SetConfig+0xc4>
 8004652:	a201      	add	r2, pc, #4	; (adr r2, 8004658 <UART_SetConfig+0x9c>)
 8004654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004658:	08004669 	.word	0x08004669
 800465c:	08004675 	.word	0x08004675
 8004660:	0800466f 	.word	0x0800466f
 8004664:	0800467b 	.word	0x0800467b
 8004668:	2301      	movs	r3, #1
 800466a:	76fb      	strb	r3, [r7, #27]
 800466c:	e098      	b.n	80047a0 <UART_SetConfig+0x1e4>
 800466e:	2302      	movs	r3, #2
 8004670:	76fb      	strb	r3, [r7, #27]
 8004672:	e095      	b.n	80047a0 <UART_SetConfig+0x1e4>
 8004674:	2304      	movs	r3, #4
 8004676:	76fb      	strb	r3, [r7, #27]
 8004678:	e092      	b.n	80047a0 <UART_SetConfig+0x1e4>
 800467a:	2308      	movs	r3, #8
 800467c:	76fb      	strb	r3, [r7, #27]
 800467e:	e08f      	b.n	80047a0 <UART_SetConfig+0x1e4>
 8004680:	2310      	movs	r3, #16
 8004682:	76fb      	strb	r3, [r7, #27]
 8004684:	bf00      	nop
 8004686:	e08b      	b.n	80047a0 <UART_SetConfig+0x1e4>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a85      	ldr	r2, [pc, #532]	; (80048a4 <UART_SetConfig+0x2e8>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d134      	bne.n	80046fc <UART_SetConfig+0x140>
 8004692:	4b83      	ldr	r3, [pc, #524]	; (80048a0 <UART_SetConfig+0x2e4>)
 8004694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004698:	f003 030c 	and.w	r3, r3, #12
 800469c:	2b0c      	cmp	r3, #12
 800469e:	d829      	bhi.n	80046f4 <UART_SetConfig+0x138>
 80046a0:	a201      	add	r2, pc, #4	; (adr r2, 80046a8 <UART_SetConfig+0xec>)
 80046a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a6:	bf00      	nop
 80046a8:	080046dd 	.word	0x080046dd
 80046ac:	080046f5 	.word	0x080046f5
 80046b0:	080046f5 	.word	0x080046f5
 80046b4:	080046f5 	.word	0x080046f5
 80046b8:	080046e9 	.word	0x080046e9
 80046bc:	080046f5 	.word	0x080046f5
 80046c0:	080046f5 	.word	0x080046f5
 80046c4:	080046f5 	.word	0x080046f5
 80046c8:	080046e3 	.word	0x080046e3
 80046cc:	080046f5 	.word	0x080046f5
 80046d0:	080046f5 	.word	0x080046f5
 80046d4:	080046f5 	.word	0x080046f5
 80046d8:	080046ef 	.word	0x080046ef
 80046dc:	2300      	movs	r3, #0
 80046de:	76fb      	strb	r3, [r7, #27]
 80046e0:	e05e      	b.n	80047a0 <UART_SetConfig+0x1e4>
 80046e2:	2302      	movs	r3, #2
 80046e4:	76fb      	strb	r3, [r7, #27]
 80046e6:	e05b      	b.n	80047a0 <UART_SetConfig+0x1e4>
 80046e8:	2304      	movs	r3, #4
 80046ea:	76fb      	strb	r3, [r7, #27]
 80046ec:	e058      	b.n	80047a0 <UART_SetConfig+0x1e4>
 80046ee:	2308      	movs	r3, #8
 80046f0:	76fb      	strb	r3, [r7, #27]
 80046f2:	e055      	b.n	80047a0 <UART_SetConfig+0x1e4>
 80046f4:	2310      	movs	r3, #16
 80046f6:	76fb      	strb	r3, [r7, #27]
 80046f8:	bf00      	nop
 80046fa:	e051      	b.n	80047a0 <UART_SetConfig+0x1e4>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a69      	ldr	r2, [pc, #420]	; (80048a8 <UART_SetConfig+0x2ec>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d120      	bne.n	8004748 <UART_SetConfig+0x18c>
 8004706:	4b66      	ldr	r3, [pc, #408]	; (80048a0 <UART_SetConfig+0x2e4>)
 8004708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004710:	2b10      	cmp	r3, #16
 8004712:	d00f      	beq.n	8004734 <UART_SetConfig+0x178>
 8004714:	2b10      	cmp	r3, #16
 8004716:	d802      	bhi.n	800471e <UART_SetConfig+0x162>
 8004718:	2b00      	cmp	r3, #0
 800471a:	d005      	beq.n	8004728 <UART_SetConfig+0x16c>
 800471c:	e010      	b.n	8004740 <UART_SetConfig+0x184>
 800471e:	2b20      	cmp	r3, #32
 8004720:	d005      	beq.n	800472e <UART_SetConfig+0x172>
 8004722:	2b30      	cmp	r3, #48	; 0x30
 8004724:	d009      	beq.n	800473a <UART_SetConfig+0x17e>
 8004726:	e00b      	b.n	8004740 <UART_SetConfig+0x184>
 8004728:	2300      	movs	r3, #0
 800472a:	76fb      	strb	r3, [r7, #27]
 800472c:	e038      	b.n	80047a0 <UART_SetConfig+0x1e4>
 800472e:	2302      	movs	r3, #2
 8004730:	76fb      	strb	r3, [r7, #27]
 8004732:	e035      	b.n	80047a0 <UART_SetConfig+0x1e4>
 8004734:	2304      	movs	r3, #4
 8004736:	76fb      	strb	r3, [r7, #27]
 8004738:	e032      	b.n	80047a0 <UART_SetConfig+0x1e4>
 800473a:	2308      	movs	r3, #8
 800473c:	76fb      	strb	r3, [r7, #27]
 800473e:	e02f      	b.n	80047a0 <UART_SetConfig+0x1e4>
 8004740:	2310      	movs	r3, #16
 8004742:	76fb      	strb	r3, [r7, #27]
 8004744:	bf00      	nop
 8004746:	e02b      	b.n	80047a0 <UART_SetConfig+0x1e4>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a52      	ldr	r2, [pc, #328]	; (8004898 <UART_SetConfig+0x2dc>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d124      	bne.n	800479c <UART_SetConfig+0x1e0>
 8004752:	4b53      	ldr	r3, [pc, #332]	; (80048a0 <UART_SetConfig+0x2e4>)
 8004754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004758:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800475c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004760:	d012      	beq.n	8004788 <UART_SetConfig+0x1cc>
 8004762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004766:	d802      	bhi.n	800476e <UART_SetConfig+0x1b2>
 8004768:	2b00      	cmp	r3, #0
 800476a:	d007      	beq.n	800477c <UART_SetConfig+0x1c0>
 800476c:	e012      	b.n	8004794 <UART_SetConfig+0x1d8>
 800476e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004772:	d006      	beq.n	8004782 <UART_SetConfig+0x1c6>
 8004774:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004778:	d009      	beq.n	800478e <UART_SetConfig+0x1d2>
 800477a:	e00b      	b.n	8004794 <UART_SetConfig+0x1d8>
 800477c:	2300      	movs	r3, #0
 800477e:	76fb      	strb	r3, [r7, #27]
 8004780:	e00e      	b.n	80047a0 <UART_SetConfig+0x1e4>
 8004782:	2302      	movs	r3, #2
 8004784:	76fb      	strb	r3, [r7, #27]
 8004786:	e00b      	b.n	80047a0 <UART_SetConfig+0x1e4>
 8004788:	2304      	movs	r3, #4
 800478a:	76fb      	strb	r3, [r7, #27]
 800478c:	e008      	b.n	80047a0 <UART_SetConfig+0x1e4>
 800478e:	2308      	movs	r3, #8
 8004790:	76fb      	strb	r3, [r7, #27]
 8004792:	e005      	b.n	80047a0 <UART_SetConfig+0x1e4>
 8004794:	2310      	movs	r3, #16
 8004796:	76fb      	strb	r3, [r7, #27]
 8004798:	bf00      	nop
 800479a:	e001      	b.n	80047a0 <UART_SetConfig+0x1e4>
 800479c:	2310      	movs	r3, #16
 800479e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a3c      	ldr	r2, [pc, #240]	; (8004898 <UART_SetConfig+0x2dc>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	f040 8082 	bne.w	80048b0 <UART_SetConfig+0x2f4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047ac:	7efb      	ldrb	r3, [r7, #27]
 80047ae:	2b08      	cmp	r3, #8
 80047b0:	d823      	bhi.n	80047fa <UART_SetConfig+0x23e>
 80047b2:	a201      	add	r2, pc, #4	; (adr r2, 80047b8 <UART_SetConfig+0x1fc>)
 80047b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b8:	080047dd 	.word	0x080047dd
 80047bc:	080047fb 	.word	0x080047fb
 80047c0:	080047e5 	.word	0x080047e5
 80047c4:	080047fb 	.word	0x080047fb
 80047c8:	080047eb 	.word	0x080047eb
 80047cc:	080047fb 	.word	0x080047fb
 80047d0:	080047fb 	.word	0x080047fb
 80047d4:	080047fb 	.word	0x080047fb
 80047d8:	080047f3 	.word	0x080047f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047dc:	f7fe fd02 	bl	80031e4 <HAL_RCC_GetPCLK1Freq>
 80047e0:	6178      	str	r0, [r7, #20]
        break;
 80047e2:	e00f      	b.n	8004804 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047e4:	4b31      	ldr	r3, [pc, #196]	; (80048ac <UART_SetConfig+0x2f0>)
 80047e6:	617b      	str	r3, [r7, #20]
        break;
 80047e8:	e00c      	b.n	8004804 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ea:	f7fe fc65 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 80047ee:	6178      	str	r0, [r7, #20]
        break;
 80047f0:	e008      	b.n	8004804 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047f6:	617b      	str	r3, [r7, #20]
        break;
 80047f8:	e004      	b.n	8004804 <UART_SetConfig+0x248>
      default:
        pclk = 0U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	76bb      	strb	r3, [r7, #26]
        break;
 8004802:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	2b00      	cmp	r3, #0
 8004808:	f000 8100 	beq.w	8004a0c <UART_SetConfig+0x450>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	4613      	mov	r3, r2
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	4413      	add	r3, r2
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	429a      	cmp	r2, r3
 800481a:	d305      	bcc.n	8004828 <UART_SetConfig+0x26c>
          (pclk > (4096U * huart->Init.BaudRate)))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	429a      	cmp	r2, r3
 8004826:	d902      	bls.n	800482e <UART_SetConfig+0x272>
      {
        ret = HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	76bb      	strb	r3, [r7, #26]
 800482c:	e0ee      	b.n	8004a0c <UART_SetConfig+0x450>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	4619      	mov	r1, r3
 8004832:	f04f 0200 	mov.w	r2, #0
 8004836:	f04f 0300 	mov.w	r3, #0
 800483a:	f04f 0400 	mov.w	r4, #0
 800483e:	0214      	lsls	r4, r2, #8
 8004840:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004844:	020b      	lsls	r3, r1, #8
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	6852      	ldr	r2, [r2, #4]
 800484a:	0852      	lsrs	r2, r2, #1
 800484c:	4611      	mov	r1, r2
 800484e:	f04f 0200 	mov.w	r2, #0
 8004852:	eb13 0b01 	adds.w	fp, r3, r1
 8004856:	eb44 0c02 	adc.w	ip, r4, r2
 800485a:	4658      	mov	r0, fp
 800485c:	4661      	mov	r1, ip
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f04f 0400 	mov.w	r4, #0
 8004866:	461a      	mov	r2, r3
 8004868:	4623      	mov	r3, r4
 800486a:	f7fb fcb9 	bl	80001e0 <__aeabi_uldivmod>
 800486e:	4603      	mov	r3, r0
 8004870:	460c      	mov	r4, r1
 8004872:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800487a:	d308      	bcc.n	800488e <UART_SetConfig+0x2d2>
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004882:	d204      	bcs.n	800488e <UART_SetConfig+0x2d2>
        {
          huart->Instance->BRR = usartdiv;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	60da      	str	r2, [r3, #12]
 800488c:	e0be      	b.n	8004a0c <UART_SetConfig+0x450>
        }
        else
        {
          ret = HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	76bb      	strb	r3, [r7, #26]
 8004892:	e0bb      	b.n	8004a0c <UART_SetConfig+0x450>
 8004894:	efff69f3 	.word	0xefff69f3
 8004898:	40008000 	.word	0x40008000
 800489c:	40013800 	.word	0x40013800
 80048a0:	40021000 	.word	0x40021000
 80048a4:	40004400 	.word	0x40004400
 80048a8:	40004800 	.word	0x40004800
 80048ac:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b8:	d15c      	bne.n	8004974 <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 80048ba:	7efb      	ldrb	r3, [r7, #27]
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d828      	bhi.n	8004912 <UART_SetConfig+0x356>
 80048c0:	a201      	add	r2, pc, #4	; (adr r2, 80048c8 <UART_SetConfig+0x30c>)
 80048c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c6:	bf00      	nop
 80048c8:	080048ed 	.word	0x080048ed
 80048cc:	080048f5 	.word	0x080048f5
 80048d0:	080048fd 	.word	0x080048fd
 80048d4:	08004913 	.word	0x08004913
 80048d8:	08004903 	.word	0x08004903
 80048dc:	08004913 	.word	0x08004913
 80048e0:	08004913 	.word	0x08004913
 80048e4:	08004913 	.word	0x08004913
 80048e8:	0800490b 	.word	0x0800490b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048ec:	f7fe fc7a 	bl	80031e4 <HAL_RCC_GetPCLK1Freq>
 80048f0:	6178      	str	r0, [r7, #20]
        break;
 80048f2:	e013      	b.n	800491c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048f4:	f7fe fc8c 	bl	8003210 <HAL_RCC_GetPCLK2Freq>
 80048f8:	6178      	str	r0, [r7, #20]
        break;
 80048fa:	e00f      	b.n	800491c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048fc:	4b49      	ldr	r3, [pc, #292]	; (8004a24 <UART_SetConfig+0x468>)
 80048fe:	617b      	str	r3, [r7, #20]
        break;
 8004900:	e00c      	b.n	800491c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004902:	f7fe fbd9 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 8004906:	6178      	str	r0, [r7, #20]
        break;
 8004908:	e008      	b.n	800491c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800490a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800490e:	617b      	str	r3, [r7, #20]
        break;
 8004910:	e004      	b.n	800491c <UART_SetConfig+0x360>
      default:
        pclk = 0U;
 8004912:	2300      	movs	r3, #0
 8004914:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	76bb      	strb	r3, [r7, #26]
        break;
 800491a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d074      	beq.n	8004a0c <UART_SetConfig+0x450>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	005a      	lsls	r2, r3, #1
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	085b      	lsrs	r3, r3, #1
 800492c:	441a      	add	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	fbb2 f3f3 	udiv	r3, r2, r3
 8004936:	b29b      	uxth	r3, r3
 8004938:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	2b0f      	cmp	r3, #15
 800493e:	d916      	bls.n	800496e <UART_SetConfig+0x3b2>
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004946:	d212      	bcs.n	800496e <UART_SetConfig+0x3b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	b29b      	uxth	r3, r3
 800494c:	f023 030f 	bic.w	r3, r3, #15
 8004950:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	085b      	lsrs	r3, r3, #1
 8004956:	b29b      	uxth	r3, r3
 8004958:	f003 0307 	and.w	r3, r3, #7
 800495c:	b29a      	uxth	r2, r3
 800495e:	89fb      	ldrh	r3, [r7, #14]
 8004960:	4313      	orrs	r3, r2
 8004962:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	89fa      	ldrh	r2, [r7, #14]
 800496a:	60da      	str	r2, [r3, #12]
 800496c:	e04e      	b.n	8004a0c <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	76bb      	strb	r3, [r7, #26]
 8004972:	e04b      	b.n	8004a0c <UART_SetConfig+0x450>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004974:	7efb      	ldrb	r3, [r7, #27]
 8004976:	2b08      	cmp	r3, #8
 8004978:	d827      	bhi.n	80049ca <UART_SetConfig+0x40e>
 800497a:	a201      	add	r2, pc, #4	; (adr r2, 8004980 <UART_SetConfig+0x3c4>)
 800497c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004980:	080049a5 	.word	0x080049a5
 8004984:	080049ad 	.word	0x080049ad
 8004988:	080049b5 	.word	0x080049b5
 800498c:	080049cb 	.word	0x080049cb
 8004990:	080049bb 	.word	0x080049bb
 8004994:	080049cb 	.word	0x080049cb
 8004998:	080049cb 	.word	0x080049cb
 800499c:	080049cb 	.word	0x080049cb
 80049a0:	080049c3 	.word	0x080049c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049a4:	f7fe fc1e 	bl	80031e4 <HAL_RCC_GetPCLK1Freq>
 80049a8:	6178      	str	r0, [r7, #20]
        break;
 80049aa:	e013      	b.n	80049d4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049ac:	f7fe fc30 	bl	8003210 <HAL_RCC_GetPCLK2Freq>
 80049b0:	6178      	str	r0, [r7, #20]
        break;
 80049b2:	e00f      	b.n	80049d4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049b4:	4b1b      	ldr	r3, [pc, #108]	; (8004a24 <UART_SetConfig+0x468>)
 80049b6:	617b      	str	r3, [r7, #20]
        break;
 80049b8:	e00c      	b.n	80049d4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ba:	f7fe fb7d 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 80049be:	6178      	str	r0, [r7, #20]
        break;
 80049c0:	e008      	b.n	80049d4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049c6:	617b      	str	r3, [r7, #20]
        break;
 80049c8:	e004      	b.n	80049d4 <UART_SetConfig+0x418>
      default:
        pclk = 0U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	76bb      	strb	r3, [r7, #26]
        break;
 80049d2:	bf00      	nop
    }

    if (pclk != 0U)
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d018      	beq.n	8004a0c <UART_SetConfig+0x450>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	085a      	lsrs	r2, r3, #1
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	441a      	add	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	2b0f      	cmp	r3, #15
 80049f4:	d908      	bls.n	8004a08 <UART_SetConfig+0x44c>
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049fc:	d204      	bcs.n	8004a08 <UART_SetConfig+0x44c>
      {
        huart->Instance->BRR = usartdiv;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	60da      	str	r2, [r3, #12]
 8004a06:	e001      	b.n	8004a0c <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004a18:	7ebb      	ldrb	r3, [r7, #26]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3720      	adds	r7, #32
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004a24:	00f42400 	.word	0x00f42400

08004a28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00a      	beq.n	8004a52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a78:	f003 0304 	and.w	r3, r3, #4
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00a      	beq.n	8004a96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9a:	f003 0308 	and.w	r3, r3, #8
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00a      	beq.n	8004ab8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	f003 0310 	and.w	r3, r3, #16
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00a      	beq.n	8004ada <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	f003 0320 	and.w	r3, r3, #32
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00a      	beq.n	8004afc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d01a      	beq.n	8004b3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b26:	d10a      	bne.n	8004b3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	605a      	str	r2, [r3, #4]
  }
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af02      	add	r7, sp, #8
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004b7a:	f7fd f82d 	bl	8001bd8 <HAL_GetTick>
 8004b7e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0308 	and.w	r3, r3, #8
 8004b8a:	2b08      	cmp	r3, #8
 8004b8c:	d10e      	bne.n	8004bac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b8e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 f82a 	bl	8004bf6 <UART_WaitOnFlagUntilTimeout>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d001      	beq.n	8004bac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e020      	b.n	8004bee <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0304 	and.w	r3, r3, #4
 8004bb6:	2b04      	cmp	r3, #4
 8004bb8:	d10e      	bne.n	8004bd8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bbe:	9300      	str	r3, [sp, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 f814 	bl	8004bf6 <UART_WaitOnFlagUntilTimeout>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d001      	beq.n	8004bd8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e00a      	b.n	8004bee <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2220      	movs	r2, #32
 8004be2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b084      	sub	sp, #16
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	60f8      	str	r0, [r7, #12]
 8004bfe:	60b9      	str	r1, [r7, #8]
 8004c00:	603b      	str	r3, [r7, #0]
 8004c02:	4613      	mov	r3, r2
 8004c04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c06:	e05d      	b.n	8004cc4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0e:	d059      	beq.n	8004cc4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c10:	f7fc ffe2 	bl	8001bd8 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	69ba      	ldr	r2, [r7, #24]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d302      	bcc.n	8004c26 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d11b      	bne.n	8004c5e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c34:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	689a      	ldr	r2, [r3, #8]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 0201 	bic.w	r2, r2, #1
 8004c44:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2220      	movs	r2, #32
 8004c4a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e042      	b.n	8004ce4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0304 	and.w	r3, r3, #4
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d02b      	beq.n	8004cc4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c7a:	d123      	bne.n	8004cc4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c84:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c94:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f022 0201 	bic.w	r2, r2, #1
 8004ca4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2220      	movs	r2, #32
 8004caa:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e00f      	b.n	8004ce4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	69da      	ldr	r2, [r3, #28]
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	4013      	ands	r3, r2
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	bf0c      	ite	eq
 8004cd4:	2301      	moveq	r3, #1
 8004cd6:	2300      	movne	r3, #0
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	461a      	mov	r2, r3
 8004cdc:	79fb      	ldrb	r3, [r7, #7]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d092      	beq.n	8004c08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004d02:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2220      	movs	r2, #32
 8004d08:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b083      	sub	sp, #12
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004d2c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 0201 	bic.w	r2, r2, #1
 8004d3c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2220      	movs	r2, #32
 8004d42:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004d4a:	bf00      	nop
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b084      	sub	sp, #16
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d62:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0320 	and.w	r3, r3, #32
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d114      	bne.n	8004d9c <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d88:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d98:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d9a:	e002      	b.n	8004da2 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f7ff fbe5 	bl	800456c <HAL_UART_TxCpltCallback>
}
 8004da2:	bf00      	nop
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b084      	sub	sp, #16
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f7ff fbe1 	bl	8004580 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dbe:	bf00      	nop
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b084      	sub	sp, #16
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0320 	and.w	r3, r3, #32
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d11e      	bne.n	8004e20 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004df8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f022 0201 	bic.w	r2, r2, #1
 8004e08:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e18:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	f7fc f893 	bl	8000f4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e26:	bf00      	nop
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b084      	sub	sp, #16
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f7ff fba9 	bl	8004594 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e42:	bf00      	nop
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b086      	sub	sp, #24
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e56:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e5c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6e:	2b80      	cmp	r3, #128	; 0x80
 8004e70:	d109      	bne.n	8004e86 <UART_DMAError+0x3c>
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	2b21      	cmp	r3, #33	; 0x21
 8004e76:	d106      	bne.n	8004e86 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004e80:	6978      	ldr	r0, [r7, #20]
 8004e82:	f7ff ff33 	bl	8004cec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e90:	2b40      	cmp	r3, #64	; 0x40
 8004e92:	d109      	bne.n	8004ea8 <UART_DMAError+0x5e>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2b22      	cmp	r3, #34	; 0x22
 8004e98:	d106      	bne.n	8004ea8 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004ea2:	6978      	ldr	r0, [r7, #20]
 8004ea4:	f7ff ff37 	bl	8004d16 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004eac:	f043 0210 	orr.w	r2, r3, #16
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004eb4:	6978      	ldr	r0, [r7, #20]
 8004eb6:	f7ff fb77 	bl	80045a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004eba:	bf00      	nop
 8004ebc:	3718      	adds	r7, #24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b084      	sub	sp, #16
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ece:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f7ff fb61 	bl	80045a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ee6:	bf00      	nop
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b082      	sub	sp, #8
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f04:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2220      	movs	r2, #32
 8004f0a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7ff fb2a 	bl	800456c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f18:	bf00      	nop
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004f34:	b480      	push	{r7}
 8004f36:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004f38:	bf00      	nop
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
	...

08004f44 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f4a:	f3ef 8305 	mrs	r3, IPSR
 8004f4e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f50:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10f      	bne.n	8004f76 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f56:	f3ef 8310 	mrs	r3, PRIMASK
 8004f5a:	607b      	str	r3, [r7, #4]
  return(result);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d105      	bne.n	8004f6e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f62:	f3ef 8311 	mrs	r3, BASEPRI
 8004f66:	603b      	str	r3, [r7, #0]
  return(result);
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d007      	beq.n	8004f7e <osKernelInitialize+0x3a>
 8004f6e:	4b0e      	ldr	r3, [pc, #56]	; (8004fa8 <osKernelInitialize+0x64>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d103      	bne.n	8004f7e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004f76:	f06f 0305 	mvn.w	r3, #5
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	e00c      	b.n	8004f98 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004f7e:	4b0a      	ldr	r3, [pc, #40]	; (8004fa8 <osKernelInitialize+0x64>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d105      	bne.n	8004f92 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004f86:	4b08      	ldr	r3, [pc, #32]	; (8004fa8 <osKernelInitialize+0x64>)
 8004f88:	2201      	movs	r2, #1
 8004f8a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	60fb      	str	r3, [r7, #12]
 8004f90:	e002      	b.n	8004f98 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004f92:	f04f 33ff 	mov.w	r3, #4294967295
 8004f96:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004f98:	68fb      	ldr	r3, [r7, #12]
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	20000058 	.word	0x20000058

08004fac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fb2:	f3ef 8305 	mrs	r3, IPSR
 8004fb6:	60bb      	str	r3, [r7, #8]
  return(result);
 8004fb8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10f      	bne.n	8004fde <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fbe:	f3ef 8310 	mrs	r3, PRIMASK
 8004fc2:	607b      	str	r3, [r7, #4]
  return(result);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d105      	bne.n	8004fd6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004fca:	f3ef 8311 	mrs	r3, BASEPRI
 8004fce:	603b      	str	r3, [r7, #0]
  return(result);
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d007      	beq.n	8004fe6 <osKernelStart+0x3a>
 8004fd6:	4b0f      	ldr	r3, [pc, #60]	; (8005014 <osKernelStart+0x68>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d103      	bne.n	8004fe6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8004fde:	f06f 0305 	mvn.w	r3, #5
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	e010      	b.n	8005008 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004fe6:	4b0b      	ldr	r3, [pc, #44]	; (8005014 <osKernelStart+0x68>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d109      	bne.n	8005002 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004fee:	f7ff ffa1 	bl	8004f34 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004ff2:	4b08      	ldr	r3, [pc, #32]	; (8005014 <osKernelStart+0x68>)
 8004ff4:	2202      	movs	r2, #2
 8004ff6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004ff8:	f001 fa9a 	bl	8006530 <vTaskStartScheduler>
      stat = osOK;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	e002      	b.n	8005008 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005002:	f04f 33ff 	mov.w	r3, #4294967295
 8005006:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005008:	68fb      	ldr	r3, [r7, #12]
}
 800500a:	4618      	mov	r0, r3
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	20000058 	.word	0x20000058

08005018 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005018:	b580      	push	{r7, lr}
 800501a:	b090      	sub	sp, #64	; 0x40
 800501c:	af04      	add	r7, sp, #16
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005024:	2300      	movs	r3, #0
 8005026:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005028:	f3ef 8305 	mrs	r3, IPSR
 800502c:	61fb      	str	r3, [r7, #28]
  return(result);
 800502e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005030:	2b00      	cmp	r3, #0
 8005032:	f040 808f 	bne.w	8005154 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005036:	f3ef 8310 	mrs	r3, PRIMASK
 800503a:	61bb      	str	r3, [r7, #24]
  return(result);
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d105      	bne.n	800504e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005042:	f3ef 8311 	mrs	r3, BASEPRI
 8005046:	617b      	str	r3, [r7, #20]
  return(result);
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d003      	beq.n	8005056 <osThreadNew+0x3e>
 800504e:	4b44      	ldr	r3, [pc, #272]	; (8005160 <osThreadNew+0x148>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2b02      	cmp	r3, #2
 8005054:	d07e      	beq.n	8005154 <osThreadNew+0x13c>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d07b      	beq.n	8005154 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800505c:	2380      	movs	r3, #128	; 0x80
 800505e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005060:	2318      	movs	r3, #24
 8005062:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8005064:	2300      	movs	r3, #0
 8005066:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005068:	f04f 33ff 	mov.w	r3, #4294967295
 800506c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d045      	beq.n	8005100 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d002      	beq.n	8005082 <osThreadNew+0x6a>
        name = attr->name;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d002      	beq.n	8005090 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005092:	2b00      	cmp	r3, #0
 8005094:	d008      	beq.n	80050a8 <osThreadNew+0x90>
 8005096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005098:	2b38      	cmp	r3, #56	; 0x38
 800509a:	d805      	bhi.n	80050a8 <osThreadNew+0x90>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d001      	beq.n	80050ac <osThreadNew+0x94>
        return (NULL);
 80050a8:	2300      	movs	r3, #0
 80050aa:	e054      	b.n	8005156 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	695b      	ldr	r3, [r3, #20]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d003      	beq.n	80050bc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	089b      	lsrs	r3, r3, #2
 80050ba:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00e      	beq.n	80050e2 <osThreadNew+0xca>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	2b5b      	cmp	r3, #91	; 0x5b
 80050ca:	d90a      	bls.n	80050e2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d006      	beq.n	80050e2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d002      	beq.n	80050e2 <osThreadNew+0xca>
        mem = 1;
 80050dc:	2301      	movs	r3, #1
 80050de:	623b      	str	r3, [r7, #32]
 80050e0:	e010      	b.n	8005104 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10c      	bne.n	8005104 <osThreadNew+0xec>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d108      	bne.n	8005104 <osThreadNew+0xec>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d104      	bne.n	8005104 <osThreadNew+0xec>
          mem = 0;
 80050fa:	2300      	movs	r3, #0
 80050fc:	623b      	str	r3, [r7, #32]
 80050fe:	e001      	b.n	8005104 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005100:	2300      	movs	r3, #0
 8005102:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005104:	6a3b      	ldr	r3, [r7, #32]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d110      	bne.n	800512c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005112:	9202      	str	r2, [sp, #8]
 8005114:	9301      	str	r3, [sp, #4]
 8005116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800511e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f001 f833 	bl	800618c <xTaskCreateStatic>
 8005126:	4603      	mov	r3, r0
 8005128:	613b      	str	r3, [r7, #16]
 800512a:	e013      	b.n	8005154 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800512c:	6a3b      	ldr	r3, [r7, #32]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d110      	bne.n	8005154 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005134:	b29a      	uxth	r2, r3
 8005136:	f107 0310 	add.w	r3, r7, #16
 800513a:	9301      	str	r3, [sp, #4]
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f001 f87b 	bl	8006240 <xTaskCreate>
 800514a:	4603      	mov	r3, r0
 800514c:	2b01      	cmp	r3, #1
 800514e:	d001      	beq.n	8005154 <osThreadNew+0x13c>
          hTask = NULL;
 8005150:	2300      	movs	r3, #0
 8005152:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005154:	693b      	ldr	r3, [r7, #16]
}
 8005156:	4618      	mov	r0, r3
 8005158:	3730      	adds	r7, #48	; 0x30
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	20000058 	.word	0x20000058

08005164 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800516c:	f3ef 8305 	mrs	r3, IPSR
 8005170:	613b      	str	r3, [r7, #16]
  return(result);
 8005172:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10f      	bne.n	8005198 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005178:	f3ef 8310 	mrs	r3, PRIMASK
 800517c:	60fb      	str	r3, [r7, #12]
  return(result);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d105      	bne.n	8005190 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005184:	f3ef 8311 	mrs	r3, BASEPRI
 8005188:	60bb      	str	r3, [r7, #8]
  return(result);
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d007      	beq.n	80051a0 <osDelay+0x3c>
 8005190:	4b0a      	ldr	r3, [pc, #40]	; (80051bc <osDelay+0x58>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2b02      	cmp	r3, #2
 8005196:	d103      	bne.n	80051a0 <osDelay+0x3c>
    stat = osErrorISR;
 8005198:	f06f 0305 	mvn.w	r3, #5
 800519c:	617b      	str	r3, [r7, #20]
 800519e:	e007      	b.n	80051b0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80051a0:	2300      	movs	r3, #0
 80051a2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d002      	beq.n	80051b0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f001 f98c 	bl	80064c8 <vTaskDelay>
    }
  }

  return (stat);
 80051b0:	697b      	ldr	r3, [r7, #20]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3718      	adds	r7, #24
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	20000058 	.word	0x20000058

080051c0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b08c      	sub	sp, #48	; 0x30
 80051c4:	af02      	add	r7, sp, #8
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80051cc:	2300      	movs	r3, #0
 80051ce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051d0:	f3ef 8305 	mrs	r3, IPSR
 80051d4:	61bb      	str	r3, [r7, #24]
  return(result);
 80051d6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d170      	bne.n	80052be <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051dc:	f3ef 8310 	mrs	r3, PRIMASK
 80051e0:	617b      	str	r3, [r7, #20]
  return(result);
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d105      	bne.n	80051f4 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80051e8:	f3ef 8311 	mrs	r3, BASEPRI
 80051ec:	613b      	str	r3, [r7, #16]
  return(result);
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d003      	beq.n	80051fc <osMessageQueueNew+0x3c>
 80051f4:	4b34      	ldr	r3, [pc, #208]	; (80052c8 <osMessageQueueNew+0x108>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d060      	beq.n	80052be <osMessageQueueNew+0xfe>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d05d      	beq.n	80052be <osMessageQueueNew+0xfe>
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d05a      	beq.n	80052be <osMessageQueueNew+0xfe>
    mem = -1;
 8005208:	f04f 33ff 	mov.w	r3, #4294967295
 800520c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d029      	beq.n	8005268 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d012      	beq.n	8005242 <osMessageQueueNew+0x82>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	2b4f      	cmp	r3, #79	; 0x4f
 8005222:	d90e      	bls.n	8005242 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00a      	beq.n	8005242 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	695a      	ldr	r2, [r3, #20]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	68b9      	ldr	r1, [r7, #8]
 8005234:	fb01 f303 	mul.w	r3, r1, r3
 8005238:	429a      	cmp	r2, r3
 800523a:	d302      	bcc.n	8005242 <osMessageQueueNew+0x82>
        mem = 1;
 800523c:	2301      	movs	r3, #1
 800523e:	623b      	str	r3, [r7, #32]
 8005240:	e014      	b.n	800526c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d110      	bne.n	800526c <osMessageQueueNew+0xac>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10c      	bne.n	800526c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005256:	2b00      	cmp	r3, #0
 8005258:	d108      	bne.n	800526c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d104      	bne.n	800526c <osMessageQueueNew+0xac>
          mem = 0;
 8005262:	2300      	movs	r3, #0
 8005264:	623b      	str	r3, [r7, #32]
 8005266:	e001      	b.n	800526c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005268:	2300      	movs	r3, #0
 800526a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800526c:	6a3b      	ldr	r3, [r7, #32]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d10c      	bne.n	800528c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	691a      	ldr	r2, [r3, #16]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6899      	ldr	r1, [r3, #8]
 800527a:	2300      	movs	r3, #0
 800527c:	9300      	str	r3, [sp, #0]
 800527e:	460b      	mov	r3, r1
 8005280:	68b9      	ldr	r1, [r7, #8]
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f000 fa58 	bl	8005738 <xQueueGenericCreateStatic>
 8005288:	6278      	str	r0, [r7, #36]	; 0x24
 800528a:	e008      	b.n	800529e <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800528c:	6a3b      	ldr	r3, [r7, #32]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d105      	bne.n	800529e <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8005292:	2200      	movs	r2, #0
 8005294:	68b9      	ldr	r1, [r7, #8]
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f000 fac1 	bl	800581e <xQueueGenericCreate>
 800529c:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00c      	beq.n	80052be <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <osMessageQueueNew+0xf2>
        name = attr->name;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	61fb      	str	r3, [r7, #28]
 80052b0:	e001      	b.n	80052b6 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 80052b2:	2300      	movs	r3, #0
 80052b4:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80052b6:	69f9      	ldr	r1, [r7, #28]
 80052b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052ba:	f000 ff0b 	bl	80060d4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80052be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3728      	adds	r7, #40	; 0x28
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	20000058 	.word	0x20000058

080052cc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b08a      	sub	sp, #40	; 0x28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	603b      	str	r3, [r7, #0]
 80052d8:	4613      	mov	r3, r2
 80052da:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80052e0:	2300      	movs	r3, #0
 80052e2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052e4:	f3ef 8305 	mrs	r3, IPSR
 80052e8:	61fb      	str	r3, [r7, #28]
  return(result);
 80052ea:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10f      	bne.n	8005310 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052f0:	f3ef 8310 	mrs	r3, PRIMASK
 80052f4:	61bb      	str	r3, [r7, #24]
  return(result);
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d105      	bne.n	8005308 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80052fc:	f3ef 8311 	mrs	r3, BASEPRI
 8005300:	617b      	str	r3, [r7, #20]
  return(result);
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d02c      	beq.n	8005362 <osMessageQueuePut+0x96>
 8005308:	4b28      	ldr	r3, [pc, #160]	; (80053ac <osMessageQueuePut+0xe0>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2b02      	cmp	r3, #2
 800530e:	d128      	bne.n	8005362 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005310:	6a3b      	ldr	r3, [r7, #32]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d005      	beq.n	8005322 <osMessageQueuePut+0x56>
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d002      	beq.n	8005322 <osMessageQueuePut+0x56>
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8005322:	f06f 0303 	mvn.w	r3, #3
 8005326:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005328:	e039      	b.n	800539e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800532a:	2300      	movs	r3, #0
 800532c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800532e:	f107 0210 	add.w	r2, r7, #16
 8005332:	2300      	movs	r3, #0
 8005334:	68b9      	ldr	r1, [r7, #8]
 8005336:	6a38      	ldr	r0, [r7, #32]
 8005338:	f000 fbce 	bl	8005ad8 <xQueueGenericSendFromISR>
 800533c:	4603      	mov	r3, r0
 800533e:	2b01      	cmp	r3, #1
 8005340:	d003      	beq.n	800534a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8005342:	f06f 0302 	mvn.w	r3, #2
 8005346:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005348:	e029      	b.n	800539e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d026      	beq.n	800539e <osMessageQueuePut+0xd2>
 8005350:	4b17      	ldr	r3, [pc, #92]	; (80053b0 <osMessageQueuePut+0xe4>)
 8005352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005356:	601a      	str	r2, [r3, #0]
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005360:	e01d      	b.n	800539e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005362:	6a3b      	ldr	r3, [r7, #32]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d002      	beq.n	800536e <osMessageQueuePut+0xa2>
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d103      	bne.n	8005376 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800536e:	f06f 0303 	mvn.w	r3, #3
 8005372:	627b      	str	r3, [r7, #36]	; 0x24
 8005374:	e014      	b.n	80053a0 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005376:	2300      	movs	r3, #0
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	68b9      	ldr	r1, [r7, #8]
 800537c:	6a38      	ldr	r0, [r7, #32]
 800537e:	f000 fab1 	bl	80058e4 <xQueueGenericSend>
 8005382:	4603      	mov	r3, r0
 8005384:	2b01      	cmp	r3, #1
 8005386:	d00b      	beq.n	80053a0 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d003      	beq.n	8005396 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800538e:	f06f 0301 	mvn.w	r3, #1
 8005392:	627b      	str	r3, [r7, #36]	; 0x24
 8005394:	e004      	b.n	80053a0 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8005396:	f06f 0302 	mvn.w	r3, #2
 800539a:	627b      	str	r3, [r7, #36]	; 0x24
 800539c:	e000      	b.n	80053a0 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800539e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80053a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3728      	adds	r7, #40	; 0x28
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	20000058 	.word	0x20000058
 80053b0:	e000ed04 	.word	0xe000ed04

080053b4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b08a      	sub	sp, #40	; 0x28
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
 80053c0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80053c6:	2300      	movs	r3, #0
 80053c8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053ca:	f3ef 8305 	mrs	r3, IPSR
 80053ce:	61fb      	str	r3, [r7, #28]
  return(result);
 80053d0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10f      	bne.n	80053f6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053d6:	f3ef 8310 	mrs	r3, PRIMASK
 80053da:	61bb      	str	r3, [r7, #24]
  return(result);
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d105      	bne.n	80053ee <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80053e2:	f3ef 8311 	mrs	r3, BASEPRI
 80053e6:	617b      	str	r3, [r7, #20]
  return(result);
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d02c      	beq.n	8005448 <osMessageQueueGet+0x94>
 80053ee:	4b28      	ldr	r3, [pc, #160]	; (8005490 <osMessageQueueGet+0xdc>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d128      	bne.n	8005448 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80053f6:	6a3b      	ldr	r3, [r7, #32]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d005      	beq.n	8005408 <osMessageQueueGet+0x54>
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d002      	beq.n	8005408 <osMessageQueueGet+0x54>
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d003      	beq.n	8005410 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8005408:	f06f 0303 	mvn.w	r3, #3
 800540c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800540e:	e038      	b.n	8005482 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8005410:	2300      	movs	r3, #0
 8005412:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005414:	f107 0310 	add.w	r3, r7, #16
 8005418:	461a      	mov	r2, r3
 800541a:	68b9      	ldr	r1, [r7, #8]
 800541c:	6a38      	ldr	r0, [r7, #32]
 800541e:	f000 fccb 	bl	8005db8 <xQueueReceiveFromISR>
 8005422:	4603      	mov	r3, r0
 8005424:	2b01      	cmp	r3, #1
 8005426:	d003      	beq.n	8005430 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8005428:	f06f 0302 	mvn.w	r3, #2
 800542c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800542e:	e028      	b.n	8005482 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d025      	beq.n	8005482 <osMessageQueueGet+0xce>
 8005436:	4b17      	ldr	r3, [pc, #92]	; (8005494 <osMessageQueueGet+0xe0>)
 8005438:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800543c:	601a      	str	r2, [r3, #0]
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005446:	e01c      	b.n	8005482 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005448:	6a3b      	ldr	r3, [r7, #32]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d002      	beq.n	8005454 <osMessageQueueGet+0xa0>
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d103      	bne.n	800545c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8005454:	f06f 0303 	mvn.w	r3, #3
 8005458:	627b      	str	r3, [r7, #36]	; 0x24
 800545a:	e013      	b.n	8005484 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	68b9      	ldr	r1, [r7, #8]
 8005460:	6a38      	ldr	r0, [r7, #32]
 8005462:	f000 fbcd 	bl	8005c00 <xQueueReceive>
 8005466:	4603      	mov	r3, r0
 8005468:	2b01      	cmp	r3, #1
 800546a:	d00b      	beq.n	8005484 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d003      	beq.n	800547a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8005472:	f06f 0301 	mvn.w	r3, #1
 8005476:	627b      	str	r3, [r7, #36]	; 0x24
 8005478:	e004      	b.n	8005484 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800547a:	f06f 0302 	mvn.w	r3, #2
 800547e:	627b      	str	r3, [r7, #36]	; 0x24
 8005480:	e000      	b.n	8005484 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005482:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005486:	4618      	mov	r0, r3
 8005488:	3728      	adds	r7, #40	; 0x28
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	20000058 	.word	0x20000058
 8005494:	e000ed04 	.word	0xe000ed04

08005498 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	4a07      	ldr	r2, [pc, #28]	; (80054c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80054a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	4a06      	ldr	r2, [pc, #24]	; (80054c8 <vApplicationGetIdleTaskMemory+0x30>)
 80054ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2280      	movs	r2, #128	; 0x80
 80054b4:	601a      	str	r2, [r3, #0]
}
 80054b6:	bf00      	nop
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	2000005c 	.word	0x2000005c
 80054c8:	200000b8 	.word	0x200000b8

080054cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4a07      	ldr	r2, [pc, #28]	; (80054f8 <vApplicationGetTimerTaskMemory+0x2c>)
 80054dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	4a06      	ldr	r2, [pc, #24]	; (80054fc <vApplicationGetTimerTaskMemory+0x30>)
 80054e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054ea:	601a      	str	r2, [r3, #0]
}
 80054ec:	bf00      	nop
 80054ee:	3714      	adds	r7, #20
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr
 80054f8:	200002b8 	.word	0x200002b8
 80054fc:	20000314 	.word	0x20000314

08005500 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f103 0208 	add.w	r2, r3, #8
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f04f 32ff 	mov.w	r2, #4294967295
 8005518:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f103 0208 	add.w	r2, r3, #8
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f103 0208 	add.w	r2, r3, #8
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800554e:	bf00      	nop
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800555a:	b480      	push	{r7}
 800555c:	b085      	sub	sp, #20
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
 8005562:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	689a      	ldr	r2, [r3, #8]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	683a      	ldr	r2, [r7, #0]
 800557e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	683a      	ldr	r2, [r7, #0]
 8005584:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	1c5a      	adds	r2, r3, #1
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	601a      	str	r2, [r3, #0]
}
 8005596:	bf00      	nop
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055a2:	b480      	push	{r7}
 80055a4:	b085      	sub	sp, #20
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
 80055aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b8:	d103      	bne.n	80055c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	60fb      	str	r3, [r7, #12]
 80055c0:	e00c      	b.n	80055dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	3308      	adds	r3, #8
 80055c6:	60fb      	str	r3, [r7, #12]
 80055c8:	e002      	b.n	80055d0 <vListInsert+0x2e>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	60fb      	str	r3, [r7, #12]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d2f6      	bcs.n	80055ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	683a      	ldr	r2, [r7, #0]
 80055ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	683a      	ldr	r2, [r7, #0]
 80055f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	1c5a      	adds	r2, r3, #1
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	601a      	str	r2, [r3, #0]
}
 8005608:	bf00      	nop
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	6892      	ldr	r2, [r2, #8]
 800562a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	6852      	ldr	r2, [r2, #4]
 8005634:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	429a      	cmp	r2, r3
 800563e:	d103      	bne.n	8005648 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	1e5a      	subs	r2, r3, #1
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
}
 800565c:	4618      	mov	r0, r3
 800565e:	3714      	adds	r7, #20
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d109      	bne.n	8005690 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800567c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005680:	f383 8811 	msr	BASEPRI, r3
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	f3bf 8f4f 	dsb	sy
 800568c:	60bb      	str	r3, [r7, #8]
 800568e:	e7fe      	b.n	800568e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005690:	f002 f8cc 	bl	800782c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800569c:	68f9      	ldr	r1, [r7, #12]
 800569e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80056a0:	fb01 f303 	mul.w	r3, r1, r3
 80056a4:	441a      	add	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c0:	3b01      	subs	r3, #1
 80056c2:	68f9      	ldr	r1, [r7, #12]
 80056c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80056c6:	fb01 f303 	mul.w	r3, r1, r3
 80056ca:	441a      	add	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	22ff      	movs	r2, #255	; 0xff
 80056d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	22ff      	movs	r2, #255	; 0xff
 80056dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d114      	bne.n	8005710 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d01a      	beq.n	8005724 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	3310      	adds	r3, #16
 80056f2:	4618      	mov	r0, r3
 80056f4:	f001 f99c 	bl	8006a30 <xTaskRemoveFromEventList>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d012      	beq.n	8005724 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80056fe:	4b0d      	ldr	r3, [pc, #52]	; (8005734 <xQueueGenericReset+0xcc>)
 8005700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005704:	601a      	str	r2, [r3, #0]
 8005706:	f3bf 8f4f 	dsb	sy
 800570a:	f3bf 8f6f 	isb	sy
 800570e:	e009      	b.n	8005724 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	3310      	adds	r3, #16
 8005714:	4618      	mov	r0, r3
 8005716:	f7ff fef3 	bl	8005500 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	3324      	adds	r3, #36	; 0x24
 800571e:	4618      	mov	r0, r3
 8005720:	f7ff feee 	bl	8005500 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005724:	f002 f8b0 	bl	8007888 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005728:	2301      	movs	r3, #1
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	e000ed04 	.word	0xe000ed04

08005738 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005738:	b580      	push	{r7, lr}
 800573a:	b08e      	sub	sp, #56	; 0x38
 800573c:	af02      	add	r7, sp, #8
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
 8005744:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d109      	bne.n	8005760 <xQueueGenericCreateStatic+0x28>
 800574c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005750:	f383 8811 	msr	BASEPRI, r3
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	f3bf 8f4f 	dsb	sy
 800575c:	62bb      	str	r3, [r7, #40]	; 0x28
 800575e:	e7fe      	b.n	800575e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d109      	bne.n	800577a <xQueueGenericCreateStatic+0x42>
 8005766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576a:	f383 8811 	msr	BASEPRI, r3
 800576e:	f3bf 8f6f 	isb	sy
 8005772:	f3bf 8f4f 	dsb	sy
 8005776:	627b      	str	r3, [r7, #36]	; 0x24
 8005778:	e7fe      	b.n	8005778 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d002      	beq.n	8005786 <xQueueGenericCreateStatic+0x4e>
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d001      	beq.n	800578a <xQueueGenericCreateStatic+0x52>
 8005786:	2301      	movs	r3, #1
 8005788:	e000      	b.n	800578c <xQueueGenericCreateStatic+0x54>
 800578a:	2300      	movs	r3, #0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d109      	bne.n	80057a4 <xQueueGenericCreateStatic+0x6c>
 8005790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005794:	f383 8811 	msr	BASEPRI, r3
 8005798:	f3bf 8f6f 	isb	sy
 800579c:	f3bf 8f4f 	dsb	sy
 80057a0:	623b      	str	r3, [r7, #32]
 80057a2:	e7fe      	b.n	80057a2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d102      	bne.n	80057b0 <xQueueGenericCreateStatic+0x78>
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d101      	bne.n	80057b4 <xQueueGenericCreateStatic+0x7c>
 80057b0:	2301      	movs	r3, #1
 80057b2:	e000      	b.n	80057b6 <xQueueGenericCreateStatic+0x7e>
 80057b4:	2300      	movs	r3, #0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d109      	bne.n	80057ce <xQueueGenericCreateStatic+0x96>
 80057ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057be:	f383 8811 	msr	BASEPRI, r3
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	61fb      	str	r3, [r7, #28]
 80057cc:	e7fe      	b.n	80057cc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80057ce:	2350      	movs	r3, #80	; 0x50
 80057d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2b50      	cmp	r3, #80	; 0x50
 80057d6:	d009      	beq.n	80057ec <xQueueGenericCreateStatic+0xb4>
 80057d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057dc:	f383 8811 	msr	BASEPRI, r3
 80057e0:	f3bf 8f6f 	isb	sy
 80057e4:	f3bf 8f4f 	dsb	sy
 80057e8:	61bb      	str	r3, [r7, #24]
 80057ea:	e7fe      	b.n	80057ea <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80057ec:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80057f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00d      	beq.n	8005814 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80057f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005800:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	4613      	mov	r3, r2
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	68b9      	ldr	r1, [r7, #8]
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f000 f844 	bl	800589c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005816:	4618      	mov	r0, r3
 8005818:	3730      	adds	r7, #48	; 0x30
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800581e:	b580      	push	{r7, lr}
 8005820:	b08a      	sub	sp, #40	; 0x28
 8005822:	af02      	add	r7, sp, #8
 8005824:	60f8      	str	r0, [r7, #12]
 8005826:	60b9      	str	r1, [r7, #8]
 8005828:	4613      	mov	r3, r2
 800582a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d109      	bne.n	8005846 <xQueueGenericCreate+0x28>
 8005832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	613b      	str	r3, [r7, #16]
 8005844:	e7fe      	b.n	8005844 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d102      	bne.n	8005852 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800584c:	2300      	movs	r3, #0
 800584e:	61fb      	str	r3, [r7, #28]
 8005850:	e004      	b.n	800585c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	fb02 f303 	mul.w	r3, r2, r3
 800585a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	3350      	adds	r3, #80	; 0x50
 8005860:	4618      	mov	r0, r3
 8005862:	f002 f8fd 	bl	8007a60 <pvPortMalloc>
 8005866:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d011      	beq.n	8005892 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	3350      	adds	r3, #80	; 0x50
 8005876:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005880:	79fa      	ldrb	r2, [r7, #7]
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	9300      	str	r3, [sp, #0]
 8005886:	4613      	mov	r3, r2
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	68b9      	ldr	r1, [r7, #8]
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f000 f805 	bl	800589c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005892:	69bb      	ldr	r3, [r7, #24]
	}
 8005894:	4618      	mov	r0, r3
 8005896:	3720      	adds	r7, #32
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
 80058a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d103      	bne.n	80058b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	e002      	b.n	80058be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	68ba      	ldr	r2, [r7, #8]
 80058c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80058ca:	2101      	movs	r1, #1
 80058cc:	69b8      	ldr	r0, [r7, #24]
 80058ce:	f7ff fecb 	bl	8005668 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	78fa      	ldrb	r2, [r7, #3]
 80058d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80058da:	bf00      	nop
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
	...

080058e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b08e      	sub	sp, #56	; 0x38
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
 80058f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80058f2:	2300      	movs	r3, #0
 80058f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80058fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d109      	bne.n	8005914 <xQueueGenericSend+0x30>
 8005900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005904:	f383 8811 	msr	BASEPRI, r3
 8005908:	f3bf 8f6f 	isb	sy
 800590c:	f3bf 8f4f 	dsb	sy
 8005910:	62bb      	str	r3, [r7, #40]	; 0x28
 8005912:	e7fe      	b.n	8005912 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d103      	bne.n	8005922 <xQueueGenericSend+0x3e>
 800591a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <xQueueGenericSend+0x42>
 8005922:	2301      	movs	r3, #1
 8005924:	e000      	b.n	8005928 <xQueueGenericSend+0x44>
 8005926:	2300      	movs	r3, #0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d109      	bne.n	8005940 <xQueueGenericSend+0x5c>
 800592c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005930:	f383 8811 	msr	BASEPRI, r3
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	627b      	str	r3, [r7, #36]	; 0x24
 800593e:	e7fe      	b.n	800593e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	2b02      	cmp	r3, #2
 8005944:	d103      	bne.n	800594e <xQueueGenericSend+0x6a>
 8005946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800594a:	2b01      	cmp	r3, #1
 800594c:	d101      	bne.n	8005952 <xQueueGenericSend+0x6e>
 800594e:	2301      	movs	r3, #1
 8005950:	e000      	b.n	8005954 <xQueueGenericSend+0x70>
 8005952:	2300      	movs	r3, #0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d109      	bne.n	800596c <xQueueGenericSend+0x88>
 8005958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595c:	f383 8811 	msr	BASEPRI, r3
 8005960:	f3bf 8f6f 	isb	sy
 8005964:	f3bf 8f4f 	dsb	sy
 8005968:	623b      	str	r3, [r7, #32]
 800596a:	e7fe      	b.n	800596a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800596c:	f001 fa16 	bl	8006d9c <xTaskGetSchedulerState>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d102      	bne.n	800597c <xQueueGenericSend+0x98>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d101      	bne.n	8005980 <xQueueGenericSend+0x9c>
 800597c:	2301      	movs	r3, #1
 800597e:	e000      	b.n	8005982 <xQueueGenericSend+0x9e>
 8005980:	2300      	movs	r3, #0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d109      	bne.n	800599a <xQueueGenericSend+0xb6>
 8005986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	61fb      	str	r3, [r7, #28]
 8005998:	e7fe      	b.n	8005998 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800599a:	f001 ff47 	bl	800782c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800599e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d302      	bcc.n	80059b0 <xQueueGenericSend+0xcc>
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d129      	bne.n	8005a04 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	68b9      	ldr	r1, [r7, #8]
 80059b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059b6:	f000 fa7c 	bl	8005eb2 <prvCopyDataToQueue>
 80059ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d010      	beq.n	80059e6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c6:	3324      	adds	r3, #36	; 0x24
 80059c8:	4618      	mov	r0, r3
 80059ca:	f001 f831 	bl	8006a30 <xTaskRemoveFromEventList>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d013      	beq.n	80059fc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80059d4:	4b3f      	ldr	r3, [pc, #252]	; (8005ad4 <xQueueGenericSend+0x1f0>)
 80059d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059da:	601a      	str	r2, [r3, #0]
 80059dc:	f3bf 8f4f 	dsb	sy
 80059e0:	f3bf 8f6f 	isb	sy
 80059e4:	e00a      	b.n	80059fc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80059e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d007      	beq.n	80059fc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80059ec:	4b39      	ldr	r3, [pc, #228]	; (8005ad4 <xQueueGenericSend+0x1f0>)
 80059ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80059fc:	f001 ff44 	bl	8007888 <vPortExitCritical>
				return pdPASS;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e063      	b.n	8005acc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d103      	bne.n	8005a12 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a0a:	f001 ff3d 	bl	8007888 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	e05c      	b.n	8005acc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d106      	bne.n	8005a26 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a18:	f107 0314 	add.w	r3, r7, #20
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f001 f869 	bl	8006af4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a22:	2301      	movs	r3, #1
 8005a24:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a26:	f001 ff2f 	bl	8007888 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a2a:	f000 fde5 	bl	80065f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a2e:	f001 fefd 	bl	800782c <vPortEnterCritical>
 8005a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a38:	b25b      	sxtb	r3, r3
 8005a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3e:	d103      	bne.n	8005a48 <xQueueGenericSend+0x164>
 8005a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a4e:	b25b      	sxtb	r3, r3
 8005a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a54:	d103      	bne.n	8005a5e <xQueueGenericSend+0x17a>
 8005a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a5e:	f001 ff13 	bl	8007888 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a62:	1d3a      	adds	r2, r7, #4
 8005a64:	f107 0314 	add.w	r3, r7, #20
 8005a68:	4611      	mov	r1, r2
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f001 f858 	bl	8006b20 <xTaskCheckForTimeOut>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d124      	bne.n	8005ac0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005a76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a78:	f000 fb13 	bl	80060a2 <prvIsQueueFull>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d018      	beq.n	8005ab4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a84:	3310      	adds	r3, #16
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	4611      	mov	r1, r2
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f000 ff82 	bl	8006994 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005a90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a92:	f000 fa9e 	bl	8005fd2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005a96:	f000 fdbd 	bl	8006614 <xTaskResumeAll>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f47f af7c 	bne.w	800599a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005aa2:	4b0c      	ldr	r3, [pc, #48]	; (8005ad4 <xQueueGenericSend+0x1f0>)
 8005aa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aa8:	601a      	str	r2, [r3, #0]
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	f3bf 8f6f 	isb	sy
 8005ab2:	e772      	b.n	800599a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ab6:	f000 fa8c 	bl	8005fd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005aba:	f000 fdab 	bl	8006614 <xTaskResumeAll>
 8005abe:	e76c      	b.n	800599a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005ac0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ac2:	f000 fa86 	bl	8005fd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ac6:	f000 fda5 	bl	8006614 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005aca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3738      	adds	r7, #56	; 0x38
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	e000ed04 	.word	0xe000ed04

08005ad8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b08e      	sub	sp, #56	; 0x38
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
 8005ae4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d109      	bne.n	8005b04 <xQueueGenericSendFromISR+0x2c>
 8005af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af4:	f383 8811 	msr	BASEPRI, r3
 8005af8:	f3bf 8f6f 	isb	sy
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	627b      	str	r3, [r7, #36]	; 0x24
 8005b02:	e7fe      	b.n	8005b02 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d103      	bne.n	8005b12 <xQueueGenericSendFromISR+0x3a>
 8005b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <xQueueGenericSendFromISR+0x3e>
 8005b12:	2301      	movs	r3, #1
 8005b14:	e000      	b.n	8005b18 <xQueueGenericSendFromISR+0x40>
 8005b16:	2300      	movs	r3, #0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d109      	bne.n	8005b30 <xQueueGenericSendFromISR+0x58>
 8005b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b20:	f383 8811 	msr	BASEPRI, r3
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	623b      	str	r3, [r7, #32]
 8005b2e:	e7fe      	b.n	8005b2e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d103      	bne.n	8005b3e <xQueueGenericSendFromISR+0x66>
 8005b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d101      	bne.n	8005b42 <xQueueGenericSendFromISR+0x6a>
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e000      	b.n	8005b44 <xQueueGenericSendFromISR+0x6c>
 8005b42:	2300      	movs	r3, #0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d109      	bne.n	8005b5c <xQueueGenericSendFromISR+0x84>
 8005b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4c:	f383 8811 	msr	BASEPRI, r3
 8005b50:	f3bf 8f6f 	isb	sy
 8005b54:	f3bf 8f4f 	dsb	sy
 8005b58:	61fb      	str	r3, [r7, #28]
 8005b5a:	e7fe      	b.n	8005b5a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b5c:	f001 ff42 	bl	80079e4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005b60:	f3ef 8211 	mrs	r2, BASEPRI
 8005b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b68:	f383 8811 	msr	BASEPRI, r3
 8005b6c:	f3bf 8f6f 	isb	sy
 8005b70:	f3bf 8f4f 	dsb	sy
 8005b74:	61ba      	str	r2, [r7, #24]
 8005b76:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005b78:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d302      	bcc.n	8005b8e <xQueueGenericSendFromISR+0xb6>
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d12c      	bne.n	8005be8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b98:	683a      	ldr	r2, [r7, #0]
 8005b9a:	68b9      	ldr	r1, [r7, #8]
 8005b9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b9e:	f000 f988 	bl	8005eb2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ba2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005baa:	d112      	bne.n	8005bd2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d016      	beq.n	8005be2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb6:	3324      	adds	r3, #36	; 0x24
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f000 ff39 	bl	8006a30 <xTaskRemoveFromEventList>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00e      	beq.n	8005be2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00b      	beq.n	8005be2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	601a      	str	r2, [r3, #0]
 8005bd0:	e007      	b.n	8005be2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005bd2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	b25a      	sxtb	r2, r3
 8005bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005be2:	2301      	movs	r3, #1
 8005be4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005be6:	e001      	b.n	8005bec <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005be8:	2300      	movs	r3, #0
 8005bea:	637b      	str	r3, [r7, #52]	; 0x34
 8005bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bee:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3738      	adds	r7, #56	; 0x38
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b08c      	sub	sp, #48	; 0x30
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d109      	bne.n	8005c2e <xQueueReceive+0x2e>
	__asm volatile
 8005c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1e:	f383 8811 	msr	BASEPRI, r3
 8005c22:	f3bf 8f6f 	isb	sy
 8005c26:	f3bf 8f4f 	dsb	sy
 8005c2a:	623b      	str	r3, [r7, #32]
 8005c2c:	e7fe      	b.n	8005c2c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d103      	bne.n	8005c3c <xQueueReceive+0x3c>
 8005c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d101      	bne.n	8005c40 <xQueueReceive+0x40>
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e000      	b.n	8005c42 <xQueueReceive+0x42>
 8005c40:	2300      	movs	r3, #0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d109      	bne.n	8005c5a <xQueueReceive+0x5a>
 8005c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	61fb      	str	r3, [r7, #28]
 8005c58:	e7fe      	b.n	8005c58 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c5a:	f001 f89f 	bl	8006d9c <xTaskGetSchedulerState>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d102      	bne.n	8005c6a <xQueueReceive+0x6a>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <xQueueReceive+0x6e>
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e000      	b.n	8005c70 <xQueueReceive+0x70>
 8005c6e:	2300      	movs	r3, #0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d109      	bne.n	8005c88 <xQueueReceive+0x88>
 8005c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c78:	f383 8811 	msr	BASEPRI, r3
 8005c7c:	f3bf 8f6f 	isb	sy
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	61bb      	str	r3, [r7, #24]
 8005c86:	e7fe      	b.n	8005c86 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c88:	f001 fdd0 	bl	800782c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c90:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d01f      	beq.n	8005cd8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c98:	68b9      	ldr	r1, [r7, #8]
 8005c9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c9c:	f000 f973 	bl	8005f86 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca2:	1e5a      	subs	r2, r3, #1
 8005ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00f      	beq.n	8005cd0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb2:	3310      	adds	r3, #16
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f000 febb 	bl	8006a30 <xTaskRemoveFromEventList>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d007      	beq.n	8005cd0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005cc0:	4b3c      	ldr	r3, [pc, #240]	; (8005db4 <xQueueReceive+0x1b4>)
 8005cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cc6:	601a      	str	r2, [r3, #0]
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005cd0:	f001 fdda 	bl	8007888 <vPortExitCritical>
				return pdPASS;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e069      	b.n	8005dac <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d103      	bne.n	8005ce6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005cde:	f001 fdd3 	bl	8007888 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	e062      	b.n	8005dac <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d106      	bne.n	8005cfa <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005cec:	f107 0310 	add.w	r3, r7, #16
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f000 feff 	bl	8006af4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005cfa:	f001 fdc5 	bl	8007888 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005cfe:	f000 fc7b 	bl	80065f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d02:	f001 fd93 	bl	800782c <vPortEnterCritical>
 8005d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d0c:	b25b      	sxtb	r3, r3
 8005d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d12:	d103      	bne.n	8005d1c <xQueueReceive+0x11c>
 8005d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d22:	b25b      	sxtb	r3, r3
 8005d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d28:	d103      	bne.n	8005d32 <xQueueReceive+0x132>
 8005d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d32:	f001 fda9 	bl	8007888 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d36:	1d3a      	adds	r2, r7, #4
 8005d38:	f107 0310 	add.w	r3, r7, #16
 8005d3c:	4611      	mov	r1, r2
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f000 feee 	bl	8006b20 <xTaskCheckForTimeOut>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d123      	bne.n	8005d92 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d4c:	f000 f993 	bl	8006076 <prvIsQueueEmpty>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d017      	beq.n	8005d86 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d58:	3324      	adds	r3, #36	; 0x24
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	4611      	mov	r1, r2
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 fe18 	bl	8006994 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d66:	f000 f934 	bl	8005fd2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d6a:	f000 fc53 	bl	8006614 <xTaskResumeAll>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d189      	bne.n	8005c88 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005d74:	4b0f      	ldr	r3, [pc, #60]	; (8005db4 <xQueueReceive+0x1b4>)
 8005d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d7a:	601a      	str	r2, [r3, #0]
 8005d7c:	f3bf 8f4f 	dsb	sy
 8005d80:	f3bf 8f6f 	isb	sy
 8005d84:	e780      	b.n	8005c88 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005d86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d88:	f000 f923 	bl	8005fd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d8c:	f000 fc42 	bl	8006614 <xTaskResumeAll>
 8005d90:	e77a      	b.n	8005c88 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005d92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d94:	f000 f91d 	bl	8005fd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d98:	f000 fc3c 	bl	8006614 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d9e:	f000 f96a 	bl	8006076 <prvIsQueueEmpty>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f43f af6f 	beq.w	8005c88 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005daa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3730      	adds	r7, #48	; 0x30
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	e000ed04 	.word	0xe000ed04

08005db8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b08e      	sub	sp, #56	; 0x38
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d109      	bne.n	8005de2 <xQueueReceiveFromISR+0x2a>
 8005dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd2:	f383 8811 	msr	BASEPRI, r3
 8005dd6:	f3bf 8f6f 	isb	sy
 8005dda:	f3bf 8f4f 	dsb	sy
 8005dde:	623b      	str	r3, [r7, #32]
 8005de0:	e7fe      	b.n	8005de0 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d103      	bne.n	8005df0 <xQueueReceiveFromISR+0x38>
 8005de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d101      	bne.n	8005df4 <xQueueReceiveFromISR+0x3c>
 8005df0:	2301      	movs	r3, #1
 8005df2:	e000      	b.n	8005df6 <xQueueReceiveFromISR+0x3e>
 8005df4:	2300      	movs	r3, #0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d109      	bne.n	8005e0e <xQueueReceiveFromISR+0x56>
 8005dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfe:	f383 8811 	msr	BASEPRI, r3
 8005e02:	f3bf 8f6f 	isb	sy
 8005e06:	f3bf 8f4f 	dsb	sy
 8005e0a:	61fb      	str	r3, [r7, #28]
 8005e0c:	e7fe      	b.n	8005e0c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e0e:	f001 fde9 	bl	80079e4 <vPortValidateInterruptPriority>
	__asm volatile
 8005e12:	f3ef 8211 	mrs	r2, BASEPRI
 8005e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1a:	f383 8811 	msr	BASEPRI, r3
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	61ba      	str	r2, [r7, #24]
 8005e28:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005e2a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e32:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d02f      	beq.n	8005e9a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e44:	68b9      	ldr	r1, [r7, #8]
 8005e46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e48:	f000 f89d 	bl	8005f86 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4e:	1e5a      	subs	r2, r3, #1
 8005e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e52:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005e54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e5c:	d112      	bne.n	8005e84 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d016      	beq.n	8005e94 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e68:	3310      	adds	r3, #16
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 fde0 	bl	8006a30 <xTaskRemoveFromEventList>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00e      	beq.n	8005e94 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00b      	beq.n	8005e94 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	601a      	str	r2, [r3, #0]
 8005e82:	e007      	b.n	8005e94 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005e84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e88:	3301      	adds	r3, #1
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	b25a      	sxtb	r2, r3
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005e94:	2301      	movs	r3, #1
 8005e96:	637b      	str	r3, [r7, #52]	; 0x34
 8005e98:	e001      	b.n	8005e9e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	637b      	str	r3, [r7, #52]	; 0x34
 8005e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3738      	adds	r7, #56	; 0x38
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b086      	sub	sp, #24
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	60f8      	str	r0, [r7, #12]
 8005eba:	60b9      	str	r1, [r7, #8]
 8005ebc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10d      	bne.n	8005eec <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d14d      	bne.n	8005f74 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	4618      	mov	r0, r3
 8005ede:	f000 ff7b 	bl	8006dd8 <xTaskPriorityDisinherit>
 8005ee2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	609a      	str	r2, [r3, #8]
 8005eea:	e043      	b.n	8005f74 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d119      	bne.n	8005f26 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6858      	ldr	r0, [r3, #4]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efa:	461a      	mov	r2, r3
 8005efc:	68b9      	ldr	r1, [r7, #8]
 8005efe:	f001 ffa9 	bl	8007e54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	685a      	ldr	r2, [r3, #4]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0a:	441a      	add	r2, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	685a      	ldr	r2, [r3, #4]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d32b      	bcc.n	8005f74 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	605a      	str	r2, [r3, #4]
 8005f24:	e026      	b.n	8005f74 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	68d8      	ldr	r0, [r3, #12]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	461a      	mov	r2, r3
 8005f30:	68b9      	ldr	r1, [r7, #8]
 8005f32:	f001 ff8f 	bl	8007e54 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	68da      	ldr	r2, [r3, #12]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3e:	425b      	negs	r3, r3
 8005f40:	441a      	add	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	68da      	ldr	r2, [r3, #12]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d207      	bcs.n	8005f62 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	689a      	ldr	r2, [r3, #8]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5a:	425b      	negs	r3, r3
 8005f5c:	441a      	add	r2, r3
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d105      	bne.n	8005f74 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d002      	beq.n	8005f74 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	3b01      	subs	r3, #1
 8005f72:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	1c5a      	adds	r2, r3, #1
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005f7c:	697b      	ldr	r3, [r7, #20]
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3718      	adds	r7, #24
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b082      	sub	sp, #8
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
 8005f8e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d018      	beq.n	8005fca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	68da      	ldr	r2, [r3, #12]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa0:	441a      	add	r2, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	68da      	ldr	r2, [r3, #12]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d303      	bcc.n	8005fba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68d9      	ldr	r1, [r3, #12]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	6838      	ldr	r0, [r7, #0]
 8005fc6:	f001 ff45 	bl	8007e54 <memcpy>
	}
}
 8005fca:	bf00      	nop
 8005fcc:	3708      	adds	r7, #8
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b084      	sub	sp, #16
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005fda:	f001 fc27 	bl	800782c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fe4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fe6:	e011      	b.n	800600c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d012      	beq.n	8006016 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	3324      	adds	r3, #36	; 0x24
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f000 fd1b 	bl	8006a30 <xTaskRemoveFromEventList>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d001      	beq.n	8006004 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006000:	f000 fdee 	bl	8006be0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006004:	7bfb      	ldrb	r3, [r7, #15]
 8006006:	3b01      	subs	r3, #1
 8006008:	b2db      	uxtb	r3, r3
 800600a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800600c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006010:	2b00      	cmp	r3, #0
 8006012:	dce9      	bgt.n	8005fe8 <prvUnlockQueue+0x16>
 8006014:	e000      	b.n	8006018 <prvUnlockQueue+0x46>
					break;
 8006016:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	22ff      	movs	r2, #255	; 0xff
 800601c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006020:	f001 fc32 	bl	8007888 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006024:	f001 fc02 	bl	800782c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800602e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006030:	e011      	b.n	8006056 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d012      	beq.n	8006060 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	3310      	adds	r3, #16
 800603e:	4618      	mov	r0, r3
 8006040:	f000 fcf6 	bl	8006a30 <xTaskRemoveFromEventList>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d001      	beq.n	800604e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800604a:	f000 fdc9 	bl	8006be0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800604e:	7bbb      	ldrb	r3, [r7, #14]
 8006050:	3b01      	subs	r3, #1
 8006052:	b2db      	uxtb	r3, r3
 8006054:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006056:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800605a:	2b00      	cmp	r3, #0
 800605c:	dce9      	bgt.n	8006032 <prvUnlockQueue+0x60>
 800605e:	e000      	b.n	8006062 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006060:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	22ff      	movs	r2, #255	; 0xff
 8006066:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800606a:	f001 fc0d 	bl	8007888 <vPortExitCritical>
}
 800606e:	bf00      	nop
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b084      	sub	sp, #16
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800607e:	f001 fbd5 	bl	800782c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006086:	2b00      	cmp	r3, #0
 8006088:	d102      	bne.n	8006090 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800608a:	2301      	movs	r3, #1
 800608c:	60fb      	str	r3, [r7, #12]
 800608e:	e001      	b.n	8006094 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006090:	2300      	movs	r3, #0
 8006092:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006094:	f001 fbf8 	bl	8007888 <vPortExitCritical>

	return xReturn;
 8006098:	68fb      	ldr	r3, [r7, #12]
}
 800609a:	4618      	mov	r0, r3
 800609c:	3710      	adds	r7, #16
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80060a2:	b580      	push	{r7, lr}
 80060a4:	b084      	sub	sp, #16
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060aa:	f001 fbbf 	bl	800782c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d102      	bne.n	80060c0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80060ba:	2301      	movs	r3, #1
 80060bc:	60fb      	str	r3, [r7, #12]
 80060be:	e001      	b.n	80060c4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80060c0:	2300      	movs	r3, #0
 80060c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060c4:	f001 fbe0 	bl	8007888 <vPortExitCritical>

	return xReturn;
 80060c8:	68fb      	ldr	r3, [r7, #12]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
	...

080060d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060de:	2300      	movs	r3, #0
 80060e0:	60fb      	str	r3, [r7, #12]
 80060e2:	e014      	b.n	800610e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80060e4:	4a0e      	ldr	r2, [pc, #56]	; (8006120 <vQueueAddToRegistry+0x4c>)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d10b      	bne.n	8006108 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80060f0:	490b      	ldr	r1, [pc, #44]	; (8006120 <vQueueAddToRegistry+0x4c>)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	683a      	ldr	r2, [r7, #0]
 80060f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80060fa:	4a09      	ldr	r2, [pc, #36]	; (8006120 <vQueueAddToRegistry+0x4c>)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	00db      	lsls	r3, r3, #3
 8006100:	4413      	add	r3, r2
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006106:	e005      	b.n	8006114 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	3301      	adds	r3, #1
 800610c:	60fb      	str	r3, [r7, #12]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2b07      	cmp	r3, #7
 8006112:	d9e7      	bls.n	80060e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006114:	bf00      	nop
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr
 8006120:	2000a70c 	.word	0x2000a70c

08006124 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006134:	f001 fb7a 	bl	800782c <vPortEnterCritical>
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800613e:	b25b      	sxtb	r3, r3
 8006140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006144:	d103      	bne.n	800614e <vQueueWaitForMessageRestricted+0x2a>
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006154:	b25b      	sxtb	r3, r3
 8006156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800615a:	d103      	bne.n	8006164 <vQueueWaitForMessageRestricted+0x40>
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006164:	f001 fb90 	bl	8007888 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616c:	2b00      	cmp	r3, #0
 800616e:	d106      	bne.n	800617e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	3324      	adds	r3, #36	; 0x24
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	68b9      	ldr	r1, [r7, #8]
 8006178:	4618      	mov	r0, r3
 800617a:	f000 fc2f 	bl	80069dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800617e:	6978      	ldr	r0, [r7, #20]
 8006180:	f7ff ff27 	bl	8005fd2 <prvUnlockQueue>
	}
 8006184:	bf00      	nop
 8006186:	3718      	adds	r7, #24
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800618c:	b580      	push	{r7, lr}
 800618e:	b08e      	sub	sp, #56	; 0x38
 8006190:	af04      	add	r7, sp, #16
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
 8006198:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800619a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800619c:	2b00      	cmp	r3, #0
 800619e:	d109      	bne.n	80061b4 <xTaskCreateStatic+0x28>
	__asm volatile
 80061a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a4:	f383 8811 	msr	BASEPRI, r3
 80061a8:	f3bf 8f6f 	isb	sy
 80061ac:	f3bf 8f4f 	dsb	sy
 80061b0:	623b      	str	r3, [r7, #32]
 80061b2:	e7fe      	b.n	80061b2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80061b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d109      	bne.n	80061ce <xTaskCreateStatic+0x42>
 80061ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061be:	f383 8811 	msr	BASEPRI, r3
 80061c2:	f3bf 8f6f 	isb	sy
 80061c6:	f3bf 8f4f 	dsb	sy
 80061ca:	61fb      	str	r3, [r7, #28]
 80061cc:	e7fe      	b.n	80061cc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80061ce:	235c      	movs	r3, #92	; 0x5c
 80061d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	2b5c      	cmp	r3, #92	; 0x5c
 80061d6:	d009      	beq.n	80061ec <xTaskCreateStatic+0x60>
 80061d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061dc:	f383 8811 	msr	BASEPRI, r3
 80061e0:	f3bf 8f6f 	isb	sy
 80061e4:	f3bf 8f4f 	dsb	sy
 80061e8:	61bb      	str	r3, [r7, #24]
 80061ea:	e7fe      	b.n	80061ea <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80061ec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80061ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d01e      	beq.n	8006232 <xTaskCreateStatic+0xa6>
 80061f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d01b      	beq.n	8006232 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80061fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006200:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006202:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	2202      	movs	r2, #2
 8006208:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800620c:	2300      	movs	r3, #0
 800620e:	9303      	str	r3, [sp, #12]
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	9302      	str	r3, [sp, #8]
 8006214:	f107 0314 	add.w	r3, r7, #20
 8006218:	9301      	str	r3, [sp, #4]
 800621a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	68b9      	ldr	r1, [r7, #8]
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 f850 	bl	80062ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800622a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800622c:	f000 f8dc 	bl	80063e8 <prvAddNewTaskToReadyList>
 8006230:	e001      	b.n	8006236 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8006232:	2300      	movs	r3, #0
 8006234:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006236:	697b      	ldr	r3, [r7, #20]
	}
 8006238:	4618      	mov	r0, r3
 800623a:	3728      	adds	r7, #40	; 0x28
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006240:	b580      	push	{r7, lr}
 8006242:	b08c      	sub	sp, #48	; 0x30
 8006244:	af04      	add	r7, sp, #16
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	603b      	str	r3, [r7, #0]
 800624c:	4613      	mov	r3, r2
 800624e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006250:	88fb      	ldrh	r3, [r7, #6]
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	4618      	mov	r0, r3
 8006256:	f001 fc03 	bl	8007a60 <pvPortMalloc>
 800625a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00e      	beq.n	8006280 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006262:	205c      	movs	r0, #92	; 0x5c
 8006264:	f001 fbfc 	bl	8007a60 <pvPortMalloc>
 8006268:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d003      	beq.n	8006278 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	697a      	ldr	r2, [r7, #20]
 8006274:	631a      	str	r2, [r3, #48]	; 0x30
 8006276:	e005      	b.n	8006284 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006278:	6978      	ldr	r0, [r7, #20]
 800627a:	f001 fcb3 	bl	8007be4 <vPortFree>
 800627e:	e001      	b.n	8006284 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006280:	2300      	movs	r3, #0
 8006282:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d017      	beq.n	80062ba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006292:	88fa      	ldrh	r2, [r7, #6]
 8006294:	2300      	movs	r3, #0
 8006296:	9303      	str	r3, [sp, #12]
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	9302      	str	r3, [sp, #8]
 800629c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629e:	9301      	str	r3, [sp, #4]
 80062a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a2:	9300      	str	r3, [sp, #0]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	68b9      	ldr	r1, [r7, #8]
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f000 f80e 	bl	80062ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062ae:	69f8      	ldr	r0, [r7, #28]
 80062b0:	f000 f89a 	bl	80063e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80062b4:	2301      	movs	r3, #1
 80062b6:	61bb      	str	r3, [r7, #24]
 80062b8:	e002      	b.n	80062c0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80062ba:	f04f 33ff 	mov.w	r3, #4294967295
 80062be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80062c0:	69bb      	ldr	r3, [r7, #24]
	}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3720      	adds	r7, #32
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b088      	sub	sp, #32
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	60f8      	str	r0, [r7, #12]
 80062d2:	60b9      	str	r1, [r7, #8]
 80062d4:	607a      	str	r2, [r7, #4]
 80062d6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80062d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062da:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	461a      	mov	r2, r3
 80062e2:	21a5      	movs	r1, #165	; 0xa5
 80062e4:	f001 fdc1 	bl	8007e6a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80062e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80062f2:	3b01      	subs	r3, #1
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	4413      	add	r3, r2
 80062f8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	f023 0307 	bic.w	r3, r3, #7
 8006300:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	f003 0307 	and.w	r3, r3, #7
 8006308:	2b00      	cmp	r3, #0
 800630a:	d009      	beq.n	8006320 <prvInitialiseNewTask+0x56>
 800630c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006310:	f383 8811 	msr	BASEPRI, r3
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	617b      	str	r3, [r7, #20]
 800631e:	e7fe      	b.n	800631e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d01f      	beq.n	8006366 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006326:	2300      	movs	r3, #0
 8006328:	61fb      	str	r3, [r7, #28]
 800632a:	e012      	b.n	8006352 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	4413      	add	r3, r2
 8006332:	7819      	ldrb	r1, [r3, #0]
 8006334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	4413      	add	r3, r2
 800633a:	3334      	adds	r3, #52	; 0x34
 800633c:	460a      	mov	r2, r1
 800633e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006340:	68ba      	ldr	r2, [r7, #8]
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	4413      	add	r3, r2
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d006      	beq.n	800635a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	3301      	adds	r3, #1
 8006350:	61fb      	str	r3, [r7, #28]
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	2b0f      	cmp	r3, #15
 8006356:	d9e9      	bls.n	800632c <prvInitialiseNewTask+0x62>
 8006358:	e000      	b.n	800635c <prvInitialiseNewTask+0x92>
			{
				break;
 800635a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800635c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635e:	2200      	movs	r2, #0
 8006360:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006364:	e003      	b.n	800636e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006368:	2200      	movs	r2, #0
 800636a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800636e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006370:	2b37      	cmp	r3, #55	; 0x37
 8006372:	d901      	bls.n	8006378 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006374:	2337      	movs	r3, #55	; 0x37
 8006376:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800637c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800637e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006380:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006382:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006386:	2200      	movs	r2, #0
 8006388:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800638a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638c:	3304      	adds	r3, #4
 800638e:	4618      	mov	r0, r3
 8006390:	f7ff f8d6 	bl	8005540 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006396:	3318      	adds	r3, #24
 8006398:	4618      	mov	r0, r3
 800639a:	f7ff f8d1 	bl	8005540 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800639e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80063aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80063ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80063b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b6:	2200      	movs	r2, #0
 80063b8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80063ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	68f9      	ldr	r1, [r7, #12]
 80063c6:	69b8      	ldr	r0, [r7, #24]
 80063c8:	f001 f90c 	bl	80075e4 <pxPortInitialiseStack>
 80063cc:	4602      	mov	r2, r0
 80063ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80063d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d002      	beq.n	80063de <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80063d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063de:	bf00      	nop
 80063e0:	3720      	adds	r7, #32
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
	...

080063e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80063f0:	f001 fa1c 	bl	800782c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80063f4:	4b2d      	ldr	r3, [pc, #180]	; (80064ac <prvAddNewTaskToReadyList+0xc4>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	3301      	adds	r3, #1
 80063fa:	4a2c      	ldr	r2, [pc, #176]	; (80064ac <prvAddNewTaskToReadyList+0xc4>)
 80063fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80063fe:	4b2c      	ldr	r3, [pc, #176]	; (80064b0 <prvAddNewTaskToReadyList+0xc8>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d109      	bne.n	800641a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006406:	4a2a      	ldr	r2, [pc, #168]	; (80064b0 <prvAddNewTaskToReadyList+0xc8>)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800640c:	4b27      	ldr	r3, [pc, #156]	; (80064ac <prvAddNewTaskToReadyList+0xc4>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d110      	bne.n	8006436 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006414:	f000 fc08 	bl	8006c28 <prvInitialiseTaskLists>
 8006418:	e00d      	b.n	8006436 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800641a:	4b26      	ldr	r3, [pc, #152]	; (80064b4 <prvAddNewTaskToReadyList+0xcc>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d109      	bne.n	8006436 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006422:	4b23      	ldr	r3, [pc, #140]	; (80064b0 <prvAddNewTaskToReadyList+0xc8>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642c:	429a      	cmp	r2, r3
 800642e:	d802      	bhi.n	8006436 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006430:	4a1f      	ldr	r2, [pc, #124]	; (80064b0 <prvAddNewTaskToReadyList+0xc8>)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006436:	4b20      	ldr	r3, [pc, #128]	; (80064b8 <prvAddNewTaskToReadyList+0xd0>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	3301      	adds	r3, #1
 800643c:	4a1e      	ldr	r2, [pc, #120]	; (80064b8 <prvAddNewTaskToReadyList+0xd0>)
 800643e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006440:	4b1d      	ldr	r3, [pc, #116]	; (80064b8 <prvAddNewTaskToReadyList+0xd0>)
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800644c:	4b1b      	ldr	r3, [pc, #108]	; (80064bc <prvAddNewTaskToReadyList+0xd4>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	429a      	cmp	r2, r3
 8006452:	d903      	bls.n	800645c <prvAddNewTaskToReadyList+0x74>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006458:	4a18      	ldr	r2, [pc, #96]	; (80064bc <prvAddNewTaskToReadyList+0xd4>)
 800645a:	6013      	str	r3, [r2, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006460:	4613      	mov	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4413      	add	r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	4a15      	ldr	r2, [pc, #84]	; (80064c0 <prvAddNewTaskToReadyList+0xd8>)
 800646a:	441a      	add	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	3304      	adds	r3, #4
 8006470:	4619      	mov	r1, r3
 8006472:	4610      	mov	r0, r2
 8006474:	f7ff f871 	bl	800555a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006478:	f001 fa06 	bl	8007888 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800647c:	4b0d      	ldr	r3, [pc, #52]	; (80064b4 <prvAddNewTaskToReadyList+0xcc>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00e      	beq.n	80064a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006484:	4b0a      	ldr	r3, [pc, #40]	; (80064b0 <prvAddNewTaskToReadyList+0xc8>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648e:	429a      	cmp	r2, r3
 8006490:	d207      	bcs.n	80064a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006492:	4b0c      	ldr	r3, [pc, #48]	; (80064c4 <prvAddNewTaskToReadyList+0xdc>)
 8006494:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006498:	601a      	str	r2, [r3, #0]
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064a2:	bf00      	nop
 80064a4:	3708      	adds	r7, #8
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20000be8 	.word	0x20000be8
 80064b0:	20000714 	.word	0x20000714
 80064b4:	20000bf4 	.word	0x20000bf4
 80064b8:	20000c04 	.word	0x20000c04
 80064bc:	20000bf0 	.word	0x20000bf0
 80064c0:	20000718 	.word	0x20000718
 80064c4:	e000ed04 	.word	0xe000ed04

080064c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80064d0:	2300      	movs	r3, #0
 80064d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d016      	beq.n	8006508 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80064da:	4b13      	ldr	r3, [pc, #76]	; (8006528 <vTaskDelay+0x60>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d009      	beq.n	80064f6 <vTaskDelay+0x2e>
 80064e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e6:	f383 8811 	msr	BASEPRI, r3
 80064ea:	f3bf 8f6f 	isb	sy
 80064ee:	f3bf 8f4f 	dsb	sy
 80064f2:	60bb      	str	r3, [r7, #8]
 80064f4:	e7fe      	b.n	80064f4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80064f6:	f000 f87f 	bl	80065f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80064fa:	2100      	movs	r1, #0
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 fcd7 	bl	8006eb0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006502:	f000 f887 	bl	8006614 <xTaskResumeAll>
 8006506:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d107      	bne.n	800651e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800650e:	4b07      	ldr	r3, [pc, #28]	; (800652c <vTaskDelay+0x64>)
 8006510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006514:	601a      	str	r2, [r3, #0]
 8006516:	f3bf 8f4f 	dsb	sy
 800651a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800651e:	bf00      	nop
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	20000c10 	.word	0x20000c10
 800652c:	e000ed04 	.word	0xe000ed04

08006530 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b08a      	sub	sp, #40	; 0x28
 8006534:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006536:	2300      	movs	r3, #0
 8006538:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800653a:	2300      	movs	r3, #0
 800653c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800653e:	463a      	mov	r2, r7
 8006540:	1d39      	adds	r1, r7, #4
 8006542:	f107 0308 	add.w	r3, r7, #8
 8006546:	4618      	mov	r0, r3
 8006548:	f7fe ffa6 	bl	8005498 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800654c:	6839      	ldr	r1, [r7, #0]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	9202      	str	r2, [sp, #8]
 8006554:	9301      	str	r3, [sp, #4]
 8006556:	2300      	movs	r3, #0
 8006558:	9300      	str	r3, [sp, #0]
 800655a:	2300      	movs	r3, #0
 800655c:	460a      	mov	r2, r1
 800655e:	4920      	ldr	r1, [pc, #128]	; (80065e0 <vTaskStartScheduler+0xb0>)
 8006560:	4820      	ldr	r0, [pc, #128]	; (80065e4 <vTaskStartScheduler+0xb4>)
 8006562:	f7ff fe13 	bl	800618c <xTaskCreateStatic>
 8006566:	4602      	mov	r2, r0
 8006568:	4b1f      	ldr	r3, [pc, #124]	; (80065e8 <vTaskStartScheduler+0xb8>)
 800656a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800656c:	4b1e      	ldr	r3, [pc, #120]	; (80065e8 <vTaskStartScheduler+0xb8>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d002      	beq.n	800657a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006574:	2301      	movs	r3, #1
 8006576:	617b      	str	r3, [r7, #20]
 8006578:	e001      	b.n	800657e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800657a:	2300      	movs	r3, #0
 800657c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d102      	bne.n	800658a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006584:	f000 fce8 	bl	8006f58 <xTimerCreateTimerTask>
 8006588:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d115      	bne.n	80065bc <vTaskStartScheduler+0x8c>
 8006590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80065a2:	4b12      	ldr	r3, [pc, #72]	; (80065ec <vTaskStartScheduler+0xbc>)
 80065a4:	f04f 32ff 	mov.w	r2, #4294967295
 80065a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80065aa:	4b11      	ldr	r3, [pc, #68]	; (80065f0 <vTaskStartScheduler+0xc0>)
 80065ac:	2201      	movs	r2, #1
 80065ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80065b0:	4b10      	ldr	r3, [pc, #64]	; (80065f4 <vTaskStartScheduler+0xc4>)
 80065b2:	2200      	movs	r2, #0
 80065b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80065b6:	f001 f89b 	bl	80076f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80065ba:	e00d      	b.n	80065d8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c2:	d109      	bne.n	80065d8 <vTaskStartScheduler+0xa8>
 80065c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c8:	f383 8811 	msr	BASEPRI, r3
 80065cc:	f3bf 8f6f 	isb	sy
 80065d0:	f3bf 8f4f 	dsb	sy
 80065d4:	60fb      	str	r3, [r7, #12]
 80065d6:	e7fe      	b.n	80065d6 <vTaskStartScheduler+0xa6>
}
 80065d8:	bf00      	nop
 80065da:	3718      	adds	r7, #24
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	08007f58 	.word	0x08007f58
 80065e4:	08006bf9 	.word	0x08006bf9
 80065e8:	20000c0c 	.word	0x20000c0c
 80065ec:	20000c08 	.word	0x20000c08
 80065f0:	20000bf4 	.word	0x20000bf4
 80065f4:	20000bec 	.word	0x20000bec

080065f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80065f8:	b480      	push	{r7}
 80065fa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80065fc:	4b04      	ldr	r3, [pc, #16]	; (8006610 <vTaskSuspendAll+0x18>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	3301      	adds	r3, #1
 8006602:	4a03      	ldr	r2, [pc, #12]	; (8006610 <vTaskSuspendAll+0x18>)
 8006604:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006606:	bf00      	nop
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr
 8006610:	20000c10 	.word	0x20000c10

08006614 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800661a:	2300      	movs	r3, #0
 800661c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800661e:	2300      	movs	r3, #0
 8006620:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006622:	4b41      	ldr	r3, [pc, #260]	; (8006728 <xTaskResumeAll+0x114>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d109      	bne.n	800663e <xTaskResumeAll+0x2a>
 800662a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	603b      	str	r3, [r7, #0]
 800663c:	e7fe      	b.n	800663c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800663e:	f001 f8f5 	bl	800782c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006642:	4b39      	ldr	r3, [pc, #228]	; (8006728 <xTaskResumeAll+0x114>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	3b01      	subs	r3, #1
 8006648:	4a37      	ldr	r2, [pc, #220]	; (8006728 <xTaskResumeAll+0x114>)
 800664a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800664c:	4b36      	ldr	r3, [pc, #216]	; (8006728 <xTaskResumeAll+0x114>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d162      	bne.n	800671a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006654:	4b35      	ldr	r3, [pc, #212]	; (800672c <xTaskResumeAll+0x118>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d05e      	beq.n	800671a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800665c:	e02f      	b.n	80066be <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800665e:	4b34      	ldr	r3, [pc, #208]	; (8006730 <xTaskResumeAll+0x11c>)
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	3318      	adds	r3, #24
 800666a:	4618      	mov	r0, r3
 800666c:	f7fe ffd2 	bl	8005614 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	3304      	adds	r3, #4
 8006674:	4618      	mov	r0, r3
 8006676:	f7fe ffcd 	bl	8005614 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800667e:	4b2d      	ldr	r3, [pc, #180]	; (8006734 <xTaskResumeAll+0x120>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	429a      	cmp	r2, r3
 8006684:	d903      	bls.n	800668e <xTaskResumeAll+0x7a>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668a:	4a2a      	ldr	r2, [pc, #168]	; (8006734 <xTaskResumeAll+0x120>)
 800668c:	6013      	str	r3, [r2, #0]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006692:	4613      	mov	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4413      	add	r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4a27      	ldr	r2, [pc, #156]	; (8006738 <xTaskResumeAll+0x124>)
 800669c:	441a      	add	r2, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	3304      	adds	r3, #4
 80066a2:	4619      	mov	r1, r3
 80066a4:	4610      	mov	r0, r2
 80066a6:	f7fe ff58 	bl	800555a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ae:	4b23      	ldr	r3, [pc, #140]	; (800673c <xTaskResumeAll+0x128>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d302      	bcc.n	80066be <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80066b8:	4b21      	ldr	r3, [pc, #132]	; (8006740 <xTaskResumeAll+0x12c>)
 80066ba:	2201      	movs	r2, #1
 80066bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066be:	4b1c      	ldr	r3, [pc, #112]	; (8006730 <xTaskResumeAll+0x11c>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1cb      	bne.n	800665e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d001      	beq.n	80066d0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80066cc:	f000 fb46 	bl	8006d5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80066d0:	4b1c      	ldr	r3, [pc, #112]	; (8006744 <xTaskResumeAll+0x130>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d010      	beq.n	80066fe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80066dc:	f000 f846 	bl	800676c <xTaskIncrementTick>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d002      	beq.n	80066ec <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80066e6:	4b16      	ldr	r3, [pc, #88]	; (8006740 <xTaskResumeAll+0x12c>)
 80066e8:	2201      	movs	r2, #1
 80066ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	3b01      	subs	r3, #1
 80066f0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1f1      	bne.n	80066dc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80066f8:	4b12      	ldr	r3, [pc, #72]	; (8006744 <xTaskResumeAll+0x130>)
 80066fa:	2200      	movs	r2, #0
 80066fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80066fe:	4b10      	ldr	r3, [pc, #64]	; (8006740 <xTaskResumeAll+0x12c>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d009      	beq.n	800671a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006706:	2301      	movs	r3, #1
 8006708:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800670a:	4b0f      	ldr	r3, [pc, #60]	; (8006748 <xTaskResumeAll+0x134>)
 800670c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006710:	601a      	str	r2, [r3, #0]
 8006712:	f3bf 8f4f 	dsb	sy
 8006716:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800671a:	f001 f8b5 	bl	8007888 <vPortExitCritical>

	return xAlreadyYielded;
 800671e:	68bb      	ldr	r3, [r7, #8]
}
 8006720:	4618      	mov	r0, r3
 8006722:	3710      	adds	r7, #16
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}
 8006728:	20000c10 	.word	0x20000c10
 800672c:	20000be8 	.word	0x20000be8
 8006730:	20000ba8 	.word	0x20000ba8
 8006734:	20000bf0 	.word	0x20000bf0
 8006738:	20000718 	.word	0x20000718
 800673c:	20000714 	.word	0x20000714
 8006740:	20000bfc 	.word	0x20000bfc
 8006744:	20000bf8 	.word	0x20000bf8
 8006748:	e000ed04 	.word	0xe000ed04

0800674c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006752:	4b05      	ldr	r3, [pc, #20]	; (8006768 <xTaskGetTickCount+0x1c>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006758:	687b      	ldr	r3, [r7, #4]
}
 800675a:	4618      	mov	r0, r3
 800675c:	370c      	adds	r7, #12
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	20000bec 	.word	0x20000bec

0800676c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006772:	2300      	movs	r3, #0
 8006774:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006776:	4b4e      	ldr	r3, [pc, #312]	; (80068b0 <xTaskIncrementTick+0x144>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	f040 8088 	bne.w	8006890 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006780:	4b4c      	ldr	r3, [pc, #304]	; (80068b4 <xTaskIncrementTick+0x148>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	3301      	adds	r3, #1
 8006786:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006788:	4a4a      	ldr	r2, [pc, #296]	; (80068b4 <xTaskIncrementTick+0x148>)
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d11f      	bne.n	80067d4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006794:	4b48      	ldr	r3, [pc, #288]	; (80068b8 <xTaskIncrementTick+0x14c>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d009      	beq.n	80067b2 <xTaskIncrementTick+0x46>
 800679e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a2:	f383 8811 	msr	BASEPRI, r3
 80067a6:	f3bf 8f6f 	isb	sy
 80067aa:	f3bf 8f4f 	dsb	sy
 80067ae:	603b      	str	r3, [r7, #0]
 80067b0:	e7fe      	b.n	80067b0 <xTaskIncrementTick+0x44>
 80067b2:	4b41      	ldr	r3, [pc, #260]	; (80068b8 <xTaskIncrementTick+0x14c>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	60fb      	str	r3, [r7, #12]
 80067b8:	4b40      	ldr	r3, [pc, #256]	; (80068bc <xTaskIncrementTick+0x150>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a3e      	ldr	r2, [pc, #248]	; (80068b8 <xTaskIncrementTick+0x14c>)
 80067be:	6013      	str	r3, [r2, #0]
 80067c0:	4a3e      	ldr	r2, [pc, #248]	; (80068bc <xTaskIncrementTick+0x150>)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6013      	str	r3, [r2, #0]
 80067c6:	4b3e      	ldr	r3, [pc, #248]	; (80068c0 <xTaskIncrementTick+0x154>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	3301      	adds	r3, #1
 80067cc:	4a3c      	ldr	r2, [pc, #240]	; (80068c0 <xTaskIncrementTick+0x154>)
 80067ce:	6013      	str	r3, [r2, #0]
 80067d0:	f000 fac4 	bl	8006d5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80067d4:	4b3b      	ldr	r3, [pc, #236]	; (80068c4 <xTaskIncrementTick+0x158>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d349      	bcc.n	8006872 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067de:	4b36      	ldr	r3, [pc, #216]	; (80068b8 <xTaskIncrementTick+0x14c>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d104      	bne.n	80067f2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067e8:	4b36      	ldr	r3, [pc, #216]	; (80068c4 <xTaskIncrementTick+0x158>)
 80067ea:	f04f 32ff 	mov.w	r2, #4294967295
 80067ee:	601a      	str	r2, [r3, #0]
					break;
 80067f0:	e03f      	b.n	8006872 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067f2:	4b31      	ldr	r3, [pc, #196]	; (80068b8 <xTaskIncrementTick+0x14c>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006802:	693a      	ldr	r2, [r7, #16]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	429a      	cmp	r2, r3
 8006808:	d203      	bcs.n	8006812 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800680a:	4a2e      	ldr	r2, [pc, #184]	; (80068c4 <xTaskIncrementTick+0x158>)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006810:	e02f      	b.n	8006872 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	3304      	adds	r3, #4
 8006816:	4618      	mov	r0, r3
 8006818:	f7fe fefc 	bl	8005614 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006820:	2b00      	cmp	r3, #0
 8006822:	d004      	beq.n	800682e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	3318      	adds	r3, #24
 8006828:	4618      	mov	r0, r3
 800682a:	f7fe fef3 	bl	8005614 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006832:	4b25      	ldr	r3, [pc, #148]	; (80068c8 <xTaskIncrementTick+0x15c>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	429a      	cmp	r2, r3
 8006838:	d903      	bls.n	8006842 <xTaskIncrementTick+0xd6>
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683e:	4a22      	ldr	r2, [pc, #136]	; (80068c8 <xTaskIncrementTick+0x15c>)
 8006840:	6013      	str	r3, [r2, #0]
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006846:	4613      	mov	r3, r2
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	4413      	add	r3, r2
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	4a1f      	ldr	r2, [pc, #124]	; (80068cc <xTaskIncrementTick+0x160>)
 8006850:	441a      	add	r2, r3
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	3304      	adds	r3, #4
 8006856:	4619      	mov	r1, r3
 8006858:	4610      	mov	r0, r2
 800685a:	f7fe fe7e 	bl	800555a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006862:	4b1b      	ldr	r3, [pc, #108]	; (80068d0 <xTaskIncrementTick+0x164>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006868:	429a      	cmp	r2, r3
 800686a:	d3b8      	bcc.n	80067de <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800686c:	2301      	movs	r3, #1
 800686e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006870:	e7b5      	b.n	80067de <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006872:	4b17      	ldr	r3, [pc, #92]	; (80068d0 <xTaskIncrementTick+0x164>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006878:	4914      	ldr	r1, [pc, #80]	; (80068cc <xTaskIncrementTick+0x160>)
 800687a:	4613      	mov	r3, r2
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4413      	add	r3, r2
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	440b      	add	r3, r1
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d907      	bls.n	800689a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800688a:	2301      	movs	r3, #1
 800688c:	617b      	str	r3, [r7, #20]
 800688e:	e004      	b.n	800689a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006890:	4b10      	ldr	r3, [pc, #64]	; (80068d4 <xTaskIncrementTick+0x168>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	3301      	adds	r3, #1
 8006896:	4a0f      	ldr	r2, [pc, #60]	; (80068d4 <xTaskIncrementTick+0x168>)
 8006898:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800689a:	4b0f      	ldr	r3, [pc, #60]	; (80068d8 <xTaskIncrementTick+0x16c>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d001      	beq.n	80068a6 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80068a2:	2301      	movs	r3, #1
 80068a4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80068a6:	697b      	ldr	r3, [r7, #20]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3718      	adds	r7, #24
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	20000c10 	.word	0x20000c10
 80068b4:	20000bec 	.word	0x20000bec
 80068b8:	20000ba0 	.word	0x20000ba0
 80068bc:	20000ba4 	.word	0x20000ba4
 80068c0:	20000c00 	.word	0x20000c00
 80068c4:	20000c08 	.word	0x20000c08
 80068c8:	20000bf0 	.word	0x20000bf0
 80068cc:	20000718 	.word	0x20000718
 80068d0:	20000714 	.word	0x20000714
 80068d4:	20000bf8 	.word	0x20000bf8
 80068d8:	20000bfc 	.word	0x20000bfc

080068dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068e2:	4b27      	ldr	r3, [pc, #156]	; (8006980 <vTaskSwitchContext+0xa4>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d003      	beq.n	80068f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80068ea:	4b26      	ldr	r3, [pc, #152]	; (8006984 <vTaskSwitchContext+0xa8>)
 80068ec:	2201      	movs	r2, #1
 80068ee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80068f0:	e040      	b.n	8006974 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80068f2:	4b24      	ldr	r3, [pc, #144]	; (8006984 <vTaskSwitchContext+0xa8>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068f8:	4b23      	ldr	r3, [pc, #140]	; (8006988 <vTaskSwitchContext+0xac>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	60fb      	str	r3, [r7, #12]
 80068fe:	e00f      	b.n	8006920 <vTaskSwitchContext+0x44>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d109      	bne.n	800691a <vTaskSwitchContext+0x3e>
 8006906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690a:	f383 8811 	msr	BASEPRI, r3
 800690e:	f3bf 8f6f 	isb	sy
 8006912:	f3bf 8f4f 	dsb	sy
 8006916:	607b      	str	r3, [r7, #4]
 8006918:	e7fe      	b.n	8006918 <vTaskSwitchContext+0x3c>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	3b01      	subs	r3, #1
 800691e:	60fb      	str	r3, [r7, #12]
 8006920:	491a      	ldr	r1, [pc, #104]	; (800698c <vTaskSwitchContext+0xb0>)
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	4613      	mov	r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	440b      	add	r3, r1
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d0e5      	beq.n	8006900 <vTaskSwitchContext+0x24>
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	4613      	mov	r3, r2
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4413      	add	r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	4a13      	ldr	r2, [pc, #76]	; (800698c <vTaskSwitchContext+0xb0>)
 8006940:	4413      	add	r3, r2
 8006942:	60bb      	str	r3, [r7, #8]
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	685a      	ldr	r2, [r3, #4]
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	605a      	str	r2, [r3, #4]
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	3308      	adds	r3, #8
 8006956:	429a      	cmp	r2, r3
 8006958:	d104      	bne.n	8006964 <vTaskSwitchContext+0x88>
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	685a      	ldr	r2, [r3, #4]
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	605a      	str	r2, [r3, #4]
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	4a09      	ldr	r2, [pc, #36]	; (8006990 <vTaskSwitchContext+0xb4>)
 800696c:	6013      	str	r3, [r2, #0]
 800696e:	4a06      	ldr	r2, [pc, #24]	; (8006988 <vTaskSwitchContext+0xac>)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6013      	str	r3, [r2, #0]
}
 8006974:	bf00      	nop
 8006976:	3714      	adds	r7, #20
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr
 8006980:	20000c10 	.word	0x20000c10
 8006984:	20000bfc 	.word	0x20000bfc
 8006988:	20000bf0 	.word	0x20000bf0
 800698c:	20000718 	.word	0x20000718
 8006990:	20000714 	.word	0x20000714

08006994 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d109      	bne.n	80069b8 <vTaskPlaceOnEventList+0x24>
 80069a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a8:	f383 8811 	msr	BASEPRI, r3
 80069ac:	f3bf 8f6f 	isb	sy
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	60fb      	str	r3, [r7, #12]
 80069b6:	e7fe      	b.n	80069b6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069b8:	4b07      	ldr	r3, [pc, #28]	; (80069d8 <vTaskPlaceOnEventList+0x44>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	3318      	adds	r3, #24
 80069be:	4619      	mov	r1, r3
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f7fe fdee 	bl	80055a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80069c6:	2101      	movs	r1, #1
 80069c8:	6838      	ldr	r0, [r7, #0]
 80069ca:	f000 fa71 	bl	8006eb0 <prvAddCurrentTaskToDelayedList>
}
 80069ce:	bf00      	nop
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	20000714 	.word	0x20000714

080069dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b086      	sub	sp, #24
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d109      	bne.n	8006a02 <vTaskPlaceOnEventListRestricted+0x26>
 80069ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	617b      	str	r3, [r7, #20]
 8006a00:	e7fe      	b.n	8006a00 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a02:	4b0a      	ldr	r3, [pc, #40]	; (8006a2c <vTaskPlaceOnEventListRestricted+0x50>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	3318      	adds	r3, #24
 8006a08:	4619      	mov	r1, r3
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f7fe fda5 	bl	800555a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d002      	beq.n	8006a1c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8006a16:	f04f 33ff 	mov.w	r3, #4294967295
 8006a1a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006a1c:	6879      	ldr	r1, [r7, #4]
 8006a1e:	68b8      	ldr	r0, [r7, #8]
 8006a20:	f000 fa46 	bl	8006eb0 <prvAddCurrentTaskToDelayedList>
	}
 8006a24:	bf00      	nop
 8006a26:	3718      	adds	r7, #24
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	20000714 	.word	0x20000714

08006a30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d109      	bne.n	8006a5a <xTaskRemoveFromEventList+0x2a>
 8006a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4a:	f383 8811 	msr	BASEPRI, r3
 8006a4e:	f3bf 8f6f 	isb	sy
 8006a52:	f3bf 8f4f 	dsb	sy
 8006a56:	60fb      	str	r3, [r7, #12]
 8006a58:	e7fe      	b.n	8006a58 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	3318      	adds	r3, #24
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7fe fdd8 	bl	8005614 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a64:	4b1d      	ldr	r3, [pc, #116]	; (8006adc <xTaskRemoveFromEventList+0xac>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d11d      	bne.n	8006aa8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	3304      	adds	r3, #4
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7fe fdcf 	bl	8005614 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a7a:	4b19      	ldr	r3, [pc, #100]	; (8006ae0 <xTaskRemoveFromEventList+0xb0>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d903      	bls.n	8006a8a <xTaskRemoveFromEventList+0x5a>
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a86:	4a16      	ldr	r2, [pc, #88]	; (8006ae0 <xTaskRemoveFromEventList+0xb0>)
 8006a88:	6013      	str	r3, [r2, #0]
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a8e:	4613      	mov	r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4413      	add	r3, r2
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	4a13      	ldr	r2, [pc, #76]	; (8006ae4 <xTaskRemoveFromEventList+0xb4>)
 8006a98:	441a      	add	r2, r3
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	3304      	adds	r3, #4
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	4610      	mov	r0, r2
 8006aa2:	f7fe fd5a 	bl	800555a <vListInsertEnd>
 8006aa6:	e005      	b.n	8006ab4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	3318      	adds	r3, #24
 8006aac:	4619      	mov	r1, r3
 8006aae:	480e      	ldr	r0, [pc, #56]	; (8006ae8 <xTaskRemoveFromEventList+0xb8>)
 8006ab0:	f7fe fd53 	bl	800555a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab8:	4b0c      	ldr	r3, [pc, #48]	; (8006aec <xTaskRemoveFromEventList+0xbc>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d905      	bls.n	8006ace <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006ac6:	4b0a      	ldr	r3, [pc, #40]	; (8006af0 <xTaskRemoveFromEventList+0xc0>)
 8006ac8:	2201      	movs	r2, #1
 8006aca:	601a      	str	r2, [r3, #0]
 8006acc:	e001      	b.n	8006ad2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006ad2:	697b      	ldr	r3, [r7, #20]
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3718      	adds	r7, #24
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	20000c10 	.word	0x20000c10
 8006ae0:	20000bf0 	.word	0x20000bf0
 8006ae4:	20000718 	.word	0x20000718
 8006ae8:	20000ba8 	.word	0x20000ba8
 8006aec:	20000714 	.word	0x20000714
 8006af0:	20000bfc 	.word	0x20000bfc

08006af4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006afc:	4b06      	ldr	r3, [pc, #24]	; (8006b18 <vTaskInternalSetTimeOutState+0x24>)
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b04:	4b05      	ldr	r3, [pc, #20]	; (8006b1c <vTaskInternalSetTimeOutState+0x28>)
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	605a      	str	r2, [r3, #4]
}
 8006b0c:	bf00      	nop
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr
 8006b18:	20000c00 	.word	0x20000c00
 8006b1c:	20000bec 	.word	0x20000bec

08006b20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b088      	sub	sp, #32
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d109      	bne.n	8006b44 <xTaskCheckForTimeOut+0x24>
 8006b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b34:	f383 8811 	msr	BASEPRI, r3
 8006b38:	f3bf 8f6f 	isb	sy
 8006b3c:	f3bf 8f4f 	dsb	sy
 8006b40:	613b      	str	r3, [r7, #16]
 8006b42:	e7fe      	b.n	8006b42 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d109      	bne.n	8006b5e <xTaskCheckForTimeOut+0x3e>
 8006b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4e:	f383 8811 	msr	BASEPRI, r3
 8006b52:	f3bf 8f6f 	isb	sy
 8006b56:	f3bf 8f4f 	dsb	sy
 8006b5a:	60fb      	str	r3, [r7, #12]
 8006b5c:	e7fe      	b.n	8006b5c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006b5e:	f000 fe65 	bl	800782c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b62:	4b1d      	ldr	r3, [pc, #116]	; (8006bd8 <xTaskCheckForTimeOut+0xb8>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	69ba      	ldr	r2, [r7, #24]
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b7a:	d102      	bne.n	8006b82 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	61fb      	str	r3, [r7, #28]
 8006b80:	e023      	b.n	8006bca <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	4b15      	ldr	r3, [pc, #84]	; (8006bdc <xTaskCheckForTimeOut+0xbc>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d007      	beq.n	8006b9e <xTaskCheckForTimeOut+0x7e>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	69ba      	ldr	r2, [r7, #24]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d302      	bcc.n	8006b9e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	61fb      	str	r3, [r7, #28]
 8006b9c:	e015      	b.n	8006bca <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	697a      	ldr	r2, [r7, #20]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d20b      	bcs.n	8006bc0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	1ad2      	subs	r2, r2, r3
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f7ff ff9d 	bl	8006af4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	61fb      	str	r3, [r7, #28]
 8006bbe:	e004      	b.n	8006bca <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006bca:	f000 fe5d 	bl	8007888 <vPortExitCritical>

	return xReturn;
 8006bce:	69fb      	ldr	r3, [r7, #28]
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3720      	adds	r7, #32
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	20000bec 	.word	0x20000bec
 8006bdc:	20000c00 	.word	0x20000c00

08006be0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006be0:	b480      	push	{r7}
 8006be2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006be4:	4b03      	ldr	r3, [pc, #12]	; (8006bf4 <vTaskMissedYield+0x14>)
 8006be6:	2201      	movs	r2, #1
 8006be8:	601a      	str	r2, [r3, #0]
}
 8006bea:	bf00      	nop
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr
 8006bf4:	20000bfc 	.word	0x20000bfc

08006bf8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c00:	f000 f852 	bl	8006ca8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c04:	4b06      	ldr	r3, [pc, #24]	; (8006c20 <prvIdleTask+0x28>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d9f9      	bls.n	8006c00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c0c:	4b05      	ldr	r3, [pc, #20]	; (8006c24 <prvIdleTask+0x2c>)
 8006c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c12:	601a      	str	r2, [r3, #0]
 8006c14:	f3bf 8f4f 	dsb	sy
 8006c18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c1c:	e7f0      	b.n	8006c00 <prvIdleTask+0x8>
 8006c1e:	bf00      	nop
 8006c20:	20000718 	.word	0x20000718
 8006c24:	e000ed04 	.word	0xe000ed04

08006c28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c2e:	2300      	movs	r3, #0
 8006c30:	607b      	str	r3, [r7, #4]
 8006c32:	e00c      	b.n	8006c4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	4613      	mov	r3, r2
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	4413      	add	r3, r2
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	4a12      	ldr	r2, [pc, #72]	; (8006c88 <prvInitialiseTaskLists+0x60>)
 8006c40:	4413      	add	r3, r2
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7fe fc5c 	bl	8005500 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	607b      	str	r3, [r7, #4]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2b37      	cmp	r3, #55	; 0x37
 8006c52:	d9ef      	bls.n	8006c34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c54:	480d      	ldr	r0, [pc, #52]	; (8006c8c <prvInitialiseTaskLists+0x64>)
 8006c56:	f7fe fc53 	bl	8005500 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c5a:	480d      	ldr	r0, [pc, #52]	; (8006c90 <prvInitialiseTaskLists+0x68>)
 8006c5c:	f7fe fc50 	bl	8005500 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c60:	480c      	ldr	r0, [pc, #48]	; (8006c94 <prvInitialiseTaskLists+0x6c>)
 8006c62:	f7fe fc4d 	bl	8005500 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c66:	480c      	ldr	r0, [pc, #48]	; (8006c98 <prvInitialiseTaskLists+0x70>)
 8006c68:	f7fe fc4a 	bl	8005500 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c6c:	480b      	ldr	r0, [pc, #44]	; (8006c9c <prvInitialiseTaskLists+0x74>)
 8006c6e:	f7fe fc47 	bl	8005500 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c72:	4b0b      	ldr	r3, [pc, #44]	; (8006ca0 <prvInitialiseTaskLists+0x78>)
 8006c74:	4a05      	ldr	r2, [pc, #20]	; (8006c8c <prvInitialiseTaskLists+0x64>)
 8006c76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c78:	4b0a      	ldr	r3, [pc, #40]	; (8006ca4 <prvInitialiseTaskLists+0x7c>)
 8006c7a:	4a05      	ldr	r2, [pc, #20]	; (8006c90 <prvInitialiseTaskLists+0x68>)
 8006c7c:	601a      	str	r2, [r3, #0]
}
 8006c7e:	bf00      	nop
 8006c80:	3708      	adds	r7, #8
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	20000718 	.word	0x20000718
 8006c8c:	20000b78 	.word	0x20000b78
 8006c90:	20000b8c 	.word	0x20000b8c
 8006c94:	20000ba8 	.word	0x20000ba8
 8006c98:	20000bbc 	.word	0x20000bbc
 8006c9c:	20000bd4 	.word	0x20000bd4
 8006ca0:	20000ba0 	.word	0x20000ba0
 8006ca4:	20000ba4 	.word	0x20000ba4

08006ca8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006cae:	e019      	b.n	8006ce4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006cb0:	f000 fdbc 	bl	800782c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cb4:	4b0f      	ldr	r3, [pc, #60]	; (8006cf4 <prvCheckTasksWaitingTermination+0x4c>)
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	3304      	adds	r3, #4
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7fe fca7 	bl	8005614 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006cc6:	4b0c      	ldr	r3, [pc, #48]	; (8006cf8 <prvCheckTasksWaitingTermination+0x50>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	4a0a      	ldr	r2, [pc, #40]	; (8006cf8 <prvCheckTasksWaitingTermination+0x50>)
 8006cce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006cd0:	4b0a      	ldr	r3, [pc, #40]	; (8006cfc <prvCheckTasksWaitingTermination+0x54>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	4a09      	ldr	r2, [pc, #36]	; (8006cfc <prvCheckTasksWaitingTermination+0x54>)
 8006cd8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006cda:	f000 fdd5 	bl	8007888 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f80e 	bl	8006d00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ce4:	4b05      	ldr	r3, [pc, #20]	; (8006cfc <prvCheckTasksWaitingTermination+0x54>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1e1      	bne.n	8006cb0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006cec:	bf00      	nop
 8006cee:	3708      	adds	r7, #8
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	20000bbc 	.word	0x20000bbc
 8006cf8:	20000be8 	.word	0x20000be8
 8006cfc:	20000bd0 	.word	0x20000bd0

08006d00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d108      	bne.n	8006d24 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d16:	4618      	mov	r0, r3
 8006d18:	f000 ff64 	bl	8007be4 <vPortFree>
				vPortFree( pxTCB );
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 ff61 	bl	8007be4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d22:	e017      	b.n	8006d54 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d103      	bne.n	8006d36 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 ff58 	bl	8007be4 <vPortFree>
	}
 8006d34:	e00e      	b.n	8006d54 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d009      	beq.n	8006d54 <prvDeleteTCB+0x54>
 8006d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d44:	f383 8811 	msr	BASEPRI, r3
 8006d48:	f3bf 8f6f 	isb	sy
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	60fb      	str	r3, [r7, #12]
 8006d52:	e7fe      	b.n	8006d52 <prvDeleteTCB+0x52>
	}
 8006d54:	bf00      	nop
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d62:	4b0c      	ldr	r3, [pc, #48]	; (8006d94 <prvResetNextTaskUnblockTime+0x38>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d104      	bne.n	8006d76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d6c:	4b0a      	ldr	r3, [pc, #40]	; (8006d98 <prvResetNextTaskUnblockTime+0x3c>)
 8006d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d74:	e008      	b.n	8006d88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d76:	4b07      	ldr	r3, [pc, #28]	; (8006d94 <prvResetNextTaskUnblockTime+0x38>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	4a04      	ldr	r2, [pc, #16]	; (8006d98 <prvResetNextTaskUnblockTime+0x3c>)
 8006d86:	6013      	str	r3, [r2, #0]
}
 8006d88:	bf00      	nop
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr
 8006d94:	20000ba0 	.word	0x20000ba0
 8006d98:	20000c08 	.word	0x20000c08

08006d9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006da2:	4b0b      	ldr	r3, [pc, #44]	; (8006dd0 <xTaskGetSchedulerState+0x34>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d102      	bne.n	8006db0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006daa:	2301      	movs	r3, #1
 8006dac:	607b      	str	r3, [r7, #4]
 8006dae:	e008      	b.n	8006dc2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006db0:	4b08      	ldr	r3, [pc, #32]	; (8006dd4 <xTaskGetSchedulerState+0x38>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d102      	bne.n	8006dbe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006db8:	2302      	movs	r3, #2
 8006dba:	607b      	str	r3, [r7, #4]
 8006dbc:	e001      	b.n	8006dc2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006dc2:	687b      	ldr	r3, [r7, #4]
	}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr
 8006dd0:	20000bf4 	.word	0x20000bf4
 8006dd4:	20000c10 	.word	0x20000c10

08006dd8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006de4:	2300      	movs	r3, #0
 8006de6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d054      	beq.n	8006e98 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006dee:	4b2d      	ldr	r3, [pc, #180]	; (8006ea4 <xTaskPriorityDisinherit+0xcc>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	693a      	ldr	r2, [r7, #16]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d009      	beq.n	8006e0c <xTaskPriorityDisinherit+0x34>
 8006df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfc:	f383 8811 	msr	BASEPRI, r3
 8006e00:	f3bf 8f6f 	isb	sy
 8006e04:	f3bf 8f4f 	dsb	sy
 8006e08:	60fb      	str	r3, [r7, #12]
 8006e0a:	e7fe      	b.n	8006e0a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d109      	bne.n	8006e28 <xTaskPriorityDisinherit+0x50>
 8006e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e18:	f383 8811 	msr	BASEPRI, r3
 8006e1c:	f3bf 8f6f 	isb	sy
 8006e20:	f3bf 8f4f 	dsb	sy
 8006e24:	60bb      	str	r3, [r7, #8]
 8006e26:	e7fe      	b.n	8006e26 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e2c:	1e5a      	subs	r2, r3, #1
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d02c      	beq.n	8006e98 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d128      	bne.n	8006e98 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	3304      	adds	r3, #4
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7fe fbe2 	bl	8005614 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e68:	4b0f      	ldr	r3, [pc, #60]	; (8006ea8 <xTaskPriorityDisinherit+0xd0>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d903      	bls.n	8006e78 <xTaskPriorityDisinherit+0xa0>
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e74:	4a0c      	ldr	r2, [pc, #48]	; (8006ea8 <xTaskPriorityDisinherit+0xd0>)
 8006e76:	6013      	str	r3, [r2, #0]
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4413      	add	r3, r2
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	4a09      	ldr	r2, [pc, #36]	; (8006eac <xTaskPriorityDisinherit+0xd4>)
 8006e86:	441a      	add	r2, r3
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	3304      	adds	r3, #4
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	4610      	mov	r0, r2
 8006e90:	f7fe fb63 	bl	800555a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e94:	2301      	movs	r3, #1
 8006e96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e98:	697b      	ldr	r3, [r7, #20]
	}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3718      	adds	r7, #24
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	20000714 	.word	0x20000714
 8006ea8:	20000bf0 	.word	0x20000bf0
 8006eac:	20000718 	.word	0x20000718

08006eb0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006eba:	4b21      	ldr	r3, [pc, #132]	; (8006f40 <prvAddCurrentTaskToDelayedList+0x90>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ec0:	4b20      	ldr	r3, [pc, #128]	; (8006f44 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	3304      	adds	r3, #4
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7fe fba4 	bl	8005614 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed2:	d10a      	bne.n	8006eea <prvAddCurrentTaskToDelayedList+0x3a>
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d007      	beq.n	8006eea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eda:	4b1a      	ldr	r3, [pc, #104]	; (8006f44 <prvAddCurrentTaskToDelayedList+0x94>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	3304      	adds	r3, #4
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	4819      	ldr	r0, [pc, #100]	; (8006f48 <prvAddCurrentTaskToDelayedList+0x98>)
 8006ee4:	f7fe fb39 	bl	800555a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006ee8:	e026      	b.n	8006f38 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4413      	add	r3, r2
 8006ef0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ef2:	4b14      	ldr	r3, [pc, #80]	; (8006f44 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006efa:	68ba      	ldr	r2, [r7, #8]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d209      	bcs.n	8006f16 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f02:	4b12      	ldr	r3, [pc, #72]	; (8006f4c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	4b0f      	ldr	r3, [pc, #60]	; (8006f44 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	3304      	adds	r3, #4
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	4610      	mov	r0, r2
 8006f10:	f7fe fb47 	bl	80055a2 <vListInsert>
}
 8006f14:	e010      	b.n	8006f38 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f16:	4b0e      	ldr	r3, [pc, #56]	; (8006f50 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	4b0a      	ldr	r3, [pc, #40]	; (8006f44 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	3304      	adds	r3, #4
 8006f20:	4619      	mov	r1, r3
 8006f22:	4610      	mov	r0, r2
 8006f24:	f7fe fb3d 	bl	80055a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f28:	4b0a      	ldr	r3, [pc, #40]	; (8006f54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68ba      	ldr	r2, [r7, #8]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d202      	bcs.n	8006f38 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006f32:	4a08      	ldr	r2, [pc, #32]	; (8006f54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	6013      	str	r3, [r2, #0]
}
 8006f38:	bf00      	nop
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	20000bec 	.word	0x20000bec
 8006f44:	20000714 	.word	0x20000714
 8006f48:	20000bd4 	.word	0x20000bd4
 8006f4c:	20000ba4 	.word	0x20000ba4
 8006f50:	20000ba0 	.word	0x20000ba0
 8006f54:	20000c08 	.word	0x20000c08

08006f58 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b08a      	sub	sp, #40	; 0x28
 8006f5c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006f62:	f000 faff 	bl	8007564 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006f66:	4b1c      	ldr	r3, [pc, #112]	; (8006fd8 <xTimerCreateTimerTask+0x80>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d021      	beq.n	8006fb2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f72:	2300      	movs	r3, #0
 8006f74:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f76:	1d3a      	adds	r2, r7, #4
 8006f78:	f107 0108 	add.w	r1, r7, #8
 8006f7c:	f107 030c 	add.w	r3, r7, #12
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7fe faa3 	bl	80054cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006f86:	6879      	ldr	r1, [r7, #4]
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	9202      	str	r2, [sp, #8]
 8006f8e:	9301      	str	r3, [sp, #4]
 8006f90:	2302      	movs	r3, #2
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	2300      	movs	r3, #0
 8006f96:	460a      	mov	r2, r1
 8006f98:	4910      	ldr	r1, [pc, #64]	; (8006fdc <xTimerCreateTimerTask+0x84>)
 8006f9a:	4811      	ldr	r0, [pc, #68]	; (8006fe0 <xTimerCreateTimerTask+0x88>)
 8006f9c:	f7ff f8f6 	bl	800618c <xTaskCreateStatic>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	4b10      	ldr	r3, [pc, #64]	; (8006fe4 <xTimerCreateTimerTask+0x8c>)
 8006fa4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006fa6:	4b0f      	ldr	r3, [pc, #60]	; (8006fe4 <xTimerCreateTimerTask+0x8c>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d001      	beq.n	8006fb2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d109      	bne.n	8006fcc <xTimerCreateTimerTask+0x74>
 8006fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fbc:	f383 8811 	msr	BASEPRI, r3
 8006fc0:	f3bf 8f6f 	isb	sy
 8006fc4:	f3bf 8f4f 	dsb	sy
 8006fc8:	613b      	str	r3, [r7, #16]
 8006fca:	e7fe      	b.n	8006fca <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006fcc:	697b      	ldr	r3, [r7, #20]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3718      	adds	r7, #24
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	20000c44 	.word	0x20000c44
 8006fdc:	08007f60 	.word	0x08007f60
 8006fe0:	08007119 	.word	0x08007119
 8006fe4:	20000c48 	.word	0x20000c48

08006fe8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b08a      	sub	sp, #40	; 0x28
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
 8006ff4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d109      	bne.n	8007014 <xTimerGenericCommand+0x2c>
 8007000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	623b      	str	r3, [r7, #32]
 8007012:	e7fe      	b.n	8007012 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007014:	4b19      	ldr	r3, [pc, #100]	; (800707c <xTimerGenericCommand+0x94>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d02a      	beq.n	8007072 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	2b05      	cmp	r3, #5
 800702c:	dc18      	bgt.n	8007060 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800702e:	f7ff feb5 	bl	8006d9c <xTaskGetSchedulerState>
 8007032:	4603      	mov	r3, r0
 8007034:	2b02      	cmp	r3, #2
 8007036:	d109      	bne.n	800704c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007038:	4b10      	ldr	r3, [pc, #64]	; (800707c <xTimerGenericCommand+0x94>)
 800703a:	6818      	ldr	r0, [r3, #0]
 800703c:	f107 0110 	add.w	r1, r7, #16
 8007040:	2300      	movs	r3, #0
 8007042:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007044:	f7fe fc4e 	bl	80058e4 <xQueueGenericSend>
 8007048:	6278      	str	r0, [r7, #36]	; 0x24
 800704a:	e012      	b.n	8007072 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800704c:	4b0b      	ldr	r3, [pc, #44]	; (800707c <xTimerGenericCommand+0x94>)
 800704e:	6818      	ldr	r0, [r3, #0]
 8007050:	f107 0110 	add.w	r1, r7, #16
 8007054:	2300      	movs	r3, #0
 8007056:	2200      	movs	r2, #0
 8007058:	f7fe fc44 	bl	80058e4 <xQueueGenericSend>
 800705c:	6278      	str	r0, [r7, #36]	; 0x24
 800705e:	e008      	b.n	8007072 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007060:	4b06      	ldr	r3, [pc, #24]	; (800707c <xTimerGenericCommand+0x94>)
 8007062:	6818      	ldr	r0, [r3, #0]
 8007064:	f107 0110 	add.w	r1, r7, #16
 8007068:	2300      	movs	r3, #0
 800706a:	683a      	ldr	r2, [r7, #0]
 800706c:	f7fe fd34 	bl	8005ad8 <xQueueGenericSendFromISR>
 8007070:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007074:	4618      	mov	r0, r3
 8007076:	3728      	adds	r7, #40	; 0x28
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	20000c44 	.word	0x20000c44

08007080 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b088      	sub	sp, #32
 8007084:	af02      	add	r7, sp, #8
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800708a:	4b22      	ldr	r3, [pc, #136]	; (8007114 <prvProcessExpiredTimer+0x94>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	3304      	adds	r3, #4
 8007098:	4618      	mov	r0, r3
 800709a:	f7fe fabb 	bl	8005614 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070a4:	f003 0304 	and.w	r3, r3, #4
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d021      	beq.n	80070f0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	699a      	ldr	r2, [r3, #24]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	18d1      	adds	r1, r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	683a      	ldr	r2, [r7, #0]
 80070b8:	6978      	ldr	r0, [r7, #20]
 80070ba:	f000 f8d1 	bl	8007260 <prvInsertTimerInActiveList>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d01e      	beq.n	8007102 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070c4:	2300      	movs	r3, #0
 80070c6:	9300      	str	r3, [sp, #0]
 80070c8:	2300      	movs	r3, #0
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	2100      	movs	r1, #0
 80070ce:	6978      	ldr	r0, [r7, #20]
 80070d0:	f7ff ff8a 	bl	8006fe8 <xTimerGenericCommand>
 80070d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d112      	bne.n	8007102 <prvProcessExpiredTimer+0x82>
 80070dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e0:	f383 8811 	msr	BASEPRI, r3
 80070e4:	f3bf 8f6f 	isb	sy
 80070e8:	f3bf 8f4f 	dsb	sy
 80070ec:	60fb      	str	r3, [r7, #12]
 80070ee:	e7fe      	b.n	80070ee <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070f6:	f023 0301 	bic.w	r3, r3, #1
 80070fa:	b2da      	uxtb	r2, r3
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	6a1b      	ldr	r3, [r3, #32]
 8007106:	6978      	ldr	r0, [r7, #20]
 8007108:	4798      	blx	r3
}
 800710a:	bf00      	nop
 800710c:	3718      	adds	r7, #24
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	20000c3c 	.word	0x20000c3c

08007118 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007120:	f107 0308 	add.w	r3, r7, #8
 8007124:	4618      	mov	r0, r3
 8007126:	f000 f857 	bl	80071d8 <prvGetNextExpireTime>
 800712a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	4619      	mov	r1, r3
 8007130:	68f8      	ldr	r0, [r7, #12]
 8007132:	f000 f803 	bl	800713c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007136:	f000 f8d5 	bl	80072e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800713a:	e7f1      	b.n	8007120 <prvTimerTask+0x8>

0800713c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007146:	f7ff fa57 	bl	80065f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800714a:	f107 0308 	add.w	r3, r7, #8
 800714e:	4618      	mov	r0, r3
 8007150:	f000 f866 	bl	8007220 <prvSampleTimeNow>
 8007154:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d130      	bne.n	80071be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d10a      	bne.n	8007178 <prvProcessTimerOrBlockTask+0x3c>
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	429a      	cmp	r2, r3
 8007168:	d806      	bhi.n	8007178 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800716a:	f7ff fa53 	bl	8006614 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800716e:	68f9      	ldr	r1, [r7, #12]
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f7ff ff85 	bl	8007080 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007176:	e024      	b.n	80071c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d008      	beq.n	8007190 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800717e:	4b13      	ldr	r3, [pc, #76]	; (80071cc <prvProcessTimerOrBlockTask+0x90>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d101      	bne.n	800718c <prvProcessTimerOrBlockTask+0x50>
 8007188:	2301      	movs	r3, #1
 800718a:	e000      	b.n	800718e <prvProcessTimerOrBlockTask+0x52>
 800718c:	2300      	movs	r3, #0
 800718e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007190:	4b0f      	ldr	r3, [pc, #60]	; (80071d0 <prvProcessTimerOrBlockTask+0x94>)
 8007192:	6818      	ldr	r0, [r3, #0]
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	1ad3      	subs	r3, r2, r3
 800719a:	683a      	ldr	r2, [r7, #0]
 800719c:	4619      	mov	r1, r3
 800719e:	f7fe ffc1 	bl	8006124 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80071a2:	f7ff fa37 	bl	8006614 <xTaskResumeAll>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d10a      	bne.n	80071c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80071ac:	4b09      	ldr	r3, [pc, #36]	; (80071d4 <prvProcessTimerOrBlockTask+0x98>)
 80071ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071b2:	601a      	str	r2, [r3, #0]
 80071b4:	f3bf 8f4f 	dsb	sy
 80071b8:	f3bf 8f6f 	isb	sy
}
 80071bc:	e001      	b.n	80071c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80071be:	f7ff fa29 	bl	8006614 <xTaskResumeAll>
}
 80071c2:	bf00      	nop
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	20000c40 	.word	0x20000c40
 80071d0:	20000c44 	.word	0x20000c44
 80071d4:	e000ed04 	.word	0xe000ed04

080071d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80071e0:	4b0e      	ldr	r3, [pc, #56]	; (800721c <prvGetNextExpireTime+0x44>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d101      	bne.n	80071ee <prvGetNextExpireTime+0x16>
 80071ea:	2201      	movs	r2, #1
 80071ec:	e000      	b.n	80071f0 <prvGetNextExpireTime+0x18>
 80071ee:	2200      	movs	r2, #0
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d105      	bne.n	8007208 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071fc:	4b07      	ldr	r3, [pc, #28]	; (800721c <prvGetNextExpireTime+0x44>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	60fb      	str	r3, [r7, #12]
 8007206:	e001      	b.n	800720c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007208:	2300      	movs	r3, #0
 800720a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800720c:	68fb      	ldr	r3, [r7, #12]
}
 800720e:	4618      	mov	r0, r3
 8007210:	3714      	adds	r7, #20
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	20000c3c 	.word	0x20000c3c

08007220 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007228:	f7ff fa90 	bl	800674c <xTaskGetTickCount>
 800722c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800722e:	4b0b      	ldr	r3, [pc, #44]	; (800725c <prvSampleTimeNow+0x3c>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	429a      	cmp	r2, r3
 8007236:	d205      	bcs.n	8007244 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007238:	f000 f930 	bl	800749c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	601a      	str	r2, [r3, #0]
 8007242:	e002      	b.n	800724a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800724a:	4a04      	ldr	r2, [pc, #16]	; (800725c <prvSampleTimeNow+0x3c>)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007250:	68fb      	ldr	r3, [r7, #12]
}
 8007252:	4618      	mov	r0, r3
 8007254:	3710      	adds	r7, #16
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	20000c4c 	.word	0x20000c4c

08007260 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b086      	sub	sp, #24
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	607a      	str	r2, [r7, #4]
 800726c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800726e:	2300      	movs	r3, #0
 8007270:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800727e:	68ba      	ldr	r2, [r7, #8]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	429a      	cmp	r2, r3
 8007284:	d812      	bhi.n	80072ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	1ad2      	subs	r2, r2, r3
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	699b      	ldr	r3, [r3, #24]
 8007290:	429a      	cmp	r2, r3
 8007292:	d302      	bcc.n	800729a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007294:	2301      	movs	r3, #1
 8007296:	617b      	str	r3, [r7, #20]
 8007298:	e01b      	b.n	80072d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800729a:	4b10      	ldr	r3, [pc, #64]	; (80072dc <prvInsertTimerInActiveList+0x7c>)
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	3304      	adds	r3, #4
 80072a2:	4619      	mov	r1, r3
 80072a4:	4610      	mov	r0, r2
 80072a6:	f7fe f97c 	bl	80055a2 <vListInsert>
 80072aa:	e012      	b.n	80072d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d206      	bcs.n	80072c2 <prvInsertTimerInActiveList+0x62>
 80072b4:	68ba      	ldr	r2, [r7, #8]
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d302      	bcc.n	80072c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80072bc:	2301      	movs	r3, #1
 80072be:	617b      	str	r3, [r7, #20]
 80072c0:	e007      	b.n	80072d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072c2:	4b07      	ldr	r3, [pc, #28]	; (80072e0 <prvInsertTimerInActiveList+0x80>)
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	3304      	adds	r3, #4
 80072ca:	4619      	mov	r1, r3
 80072cc:	4610      	mov	r0, r2
 80072ce:	f7fe f968 	bl	80055a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80072d2:	697b      	ldr	r3, [r7, #20]
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3718      	adds	r7, #24
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	20000c40 	.word	0x20000c40
 80072e0:	20000c3c 	.word	0x20000c3c

080072e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b08e      	sub	sp, #56	; 0x38
 80072e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80072ea:	e0c6      	b.n	800747a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	da17      	bge.n	8007322 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80072f2:	1d3b      	adds	r3, r7, #4
 80072f4:	3304      	adds	r3, #4
 80072f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80072f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d109      	bne.n	8007312 <prvProcessReceivedCommands+0x2e>
 80072fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	61fb      	str	r3, [r7, #28]
 8007310:	e7fe      	b.n	8007310 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007318:	6850      	ldr	r0, [r2, #4]
 800731a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800731c:	6892      	ldr	r2, [r2, #8]
 800731e:	4611      	mov	r1, r2
 8007320:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2b00      	cmp	r3, #0
 8007326:	f2c0 80a7 	blt.w	8007478 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800732e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007330:	695b      	ldr	r3, [r3, #20]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d004      	beq.n	8007340 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007338:	3304      	adds	r3, #4
 800733a:	4618      	mov	r0, r3
 800733c:	f7fe f96a 	bl	8005614 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007340:	463b      	mov	r3, r7
 8007342:	4618      	mov	r0, r3
 8007344:	f7ff ff6c 	bl	8007220 <prvSampleTimeNow>
 8007348:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2b09      	cmp	r3, #9
 800734e:	f200 8094 	bhi.w	800747a <prvProcessReceivedCommands+0x196>
 8007352:	a201      	add	r2, pc, #4	; (adr r2, 8007358 <prvProcessReceivedCommands+0x74>)
 8007354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007358:	08007381 	.word	0x08007381
 800735c:	08007381 	.word	0x08007381
 8007360:	08007381 	.word	0x08007381
 8007364:	080073f3 	.word	0x080073f3
 8007368:	08007407 	.word	0x08007407
 800736c:	0800744f 	.word	0x0800744f
 8007370:	08007381 	.word	0x08007381
 8007374:	08007381 	.word	0x08007381
 8007378:	080073f3 	.word	0x080073f3
 800737c:	08007407 	.word	0x08007407
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007382:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007386:	f043 0301 	orr.w	r3, r3, #1
 800738a:	b2da      	uxtb	r2, r3
 800738c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007392:	68ba      	ldr	r2, [r7, #8]
 8007394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007396:	699b      	ldr	r3, [r3, #24]
 8007398:	18d1      	adds	r1, r2, r3
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800739e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073a0:	f7ff ff5e 	bl	8007260 <prvInsertTimerInActiveList>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d067      	beq.n	800747a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80073b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073b8:	f003 0304 	and.w	r3, r3, #4
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d05c      	beq.n	800747a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	441a      	add	r2, r3
 80073c8:	2300      	movs	r3, #0
 80073ca:	9300      	str	r3, [sp, #0]
 80073cc:	2300      	movs	r3, #0
 80073ce:	2100      	movs	r1, #0
 80073d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073d2:	f7ff fe09 	bl	8006fe8 <xTimerGenericCommand>
 80073d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80073d8:	6a3b      	ldr	r3, [r7, #32]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d14d      	bne.n	800747a <prvProcessReceivedCommands+0x196>
 80073de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e2:	f383 8811 	msr	BASEPRI, r3
 80073e6:	f3bf 8f6f 	isb	sy
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	61bb      	str	r3, [r7, #24]
 80073f0:	e7fe      	b.n	80073f0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80073f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073f8:	f023 0301 	bic.w	r3, r3, #1
 80073fc:	b2da      	uxtb	r2, r3
 80073fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007400:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007404:	e039      	b.n	800747a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007408:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800740c:	f043 0301 	orr.w	r3, r3, #1
 8007410:	b2da      	uxtb	r2, r3
 8007412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007414:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007418:	68ba      	ldr	r2, [r7, #8]
 800741a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800741e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007420:	699b      	ldr	r3, [r3, #24]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d109      	bne.n	800743a <prvProcessReceivedCommands+0x156>
 8007426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742a:	f383 8811 	msr	BASEPRI, r3
 800742e:	f3bf 8f6f 	isb	sy
 8007432:	f3bf 8f4f 	dsb	sy
 8007436:	617b      	str	r3, [r7, #20]
 8007438:	e7fe      	b.n	8007438 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800743a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743c:	699a      	ldr	r2, [r3, #24]
 800743e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007440:	18d1      	adds	r1, r2, r3
 8007442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007446:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007448:	f7ff ff0a 	bl	8007260 <prvInsertTimerInActiveList>
					break;
 800744c:	e015      	b.n	800747a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800744e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007450:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007454:	f003 0302 	and.w	r3, r3, #2
 8007458:	2b00      	cmp	r3, #0
 800745a:	d103      	bne.n	8007464 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800745c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800745e:	f000 fbc1 	bl	8007be4 <vPortFree>
 8007462:	e00a      	b.n	800747a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007466:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800746a:	f023 0301 	bic.w	r3, r3, #1
 800746e:	b2da      	uxtb	r2, r3
 8007470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007472:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007476:	e000      	b.n	800747a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007478:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800747a:	4b07      	ldr	r3, [pc, #28]	; (8007498 <prvProcessReceivedCommands+0x1b4>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	1d39      	adds	r1, r7, #4
 8007480:	2200      	movs	r2, #0
 8007482:	4618      	mov	r0, r3
 8007484:	f7fe fbbc 	bl	8005c00 <xQueueReceive>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	f47f af2e 	bne.w	80072ec <prvProcessReceivedCommands+0x8>
	}
}
 8007490:	bf00      	nop
 8007492:	3730      	adds	r7, #48	; 0x30
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	20000c44 	.word	0x20000c44

0800749c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b088      	sub	sp, #32
 80074a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80074a2:	e047      	b.n	8007534 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074a4:	4b2d      	ldr	r3, [pc, #180]	; (800755c <prvSwitchTimerLists+0xc0>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074ae:	4b2b      	ldr	r3, [pc, #172]	; (800755c <prvSwitchTimerLists+0xc0>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	3304      	adds	r3, #4
 80074bc:	4618      	mov	r0, r3
 80074be:	f7fe f8a9 	bl	8005614 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	68f8      	ldr	r0, [r7, #12]
 80074c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074d0:	f003 0304 	and.w	r3, r3, #4
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d02d      	beq.n	8007534 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	699b      	ldr	r3, [r3, #24]
 80074dc:	693a      	ldr	r2, [r7, #16]
 80074de:	4413      	add	r3, r2
 80074e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d90e      	bls.n	8007508 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	68ba      	ldr	r2, [r7, #8]
 80074ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	68fa      	ldr	r2, [r7, #12]
 80074f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80074f6:	4b19      	ldr	r3, [pc, #100]	; (800755c <prvSwitchTimerLists+0xc0>)
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	3304      	adds	r3, #4
 80074fe:	4619      	mov	r1, r3
 8007500:	4610      	mov	r0, r2
 8007502:	f7fe f84e 	bl	80055a2 <vListInsert>
 8007506:	e015      	b.n	8007534 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007508:	2300      	movs	r3, #0
 800750a:	9300      	str	r3, [sp, #0]
 800750c:	2300      	movs	r3, #0
 800750e:	693a      	ldr	r2, [r7, #16]
 8007510:	2100      	movs	r1, #0
 8007512:	68f8      	ldr	r0, [r7, #12]
 8007514:	f7ff fd68 	bl	8006fe8 <xTimerGenericCommand>
 8007518:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d109      	bne.n	8007534 <prvSwitchTimerLists+0x98>
 8007520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007524:	f383 8811 	msr	BASEPRI, r3
 8007528:	f3bf 8f6f 	isb	sy
 800752c:	f3bf 8f4f 	dsb	sy
 8007530:	603b      	str	r3, [r7, #0]
 8007532:	e7fe      	b.n	8007532 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007534:	4b09      	ldr	r3, [pc, #36]	; (800755c <prvSwitchTimerLists+0xc0>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1b2      	bne.n	80074a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800753e:	4b07      	ldr	r3, [pc, #28]	; (800755c <prvSwitchTimerLists+0xc0>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007544:	4b06      	ldr	r3, [pc, #24]	; (8007560 <prvSwitchTimerLists+0xc4>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a04      	ldr	r2, [pc, #16]	; (800755c <prvSwitchTimerLists+0xc0>)
 800754a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800754c:	4a04      	ldr	r2, [pc, #16]	; (8007560 <prvSwitchTimerLists+0xc4>)
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	6013      	str	r3, [r2, #0]
}
 8007552:	bf00      	nop
 8007554:	3718      	adds	r7, #24
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	20000c3c 	.word	0x20000c3c
 8007560:	20000c40 	.word	0x20000c40

08007564 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800756a:	f000 f95f 	bl	800782c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800756e:	4b15      	ldr	r3, [pc, #84]	; (80075c4 <prvCheckForValidListAndQueue+0x60>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d120      	bne.n	80075b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007576:	4814      	ldr	r0, [pc, #80]	; (80075c8 <prvCheckForValidListAndQueue+0x64>)
 8007578:	f7fd ffc2 	bl	8005500 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800757c:	4813      	ldr	r0, [pc, #76]	; (80075cc <prvCheckForValidListAndQueue+0x68>)
 800757e:	f7fd ffbf 	bl	8005500 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007582:	4b13      	ldr	r3, [pc, #76]	; (80075d0 <prvCheckForValidListAndQueue+0x6c>)
 8007584:	4a10      	ldr	r2, [pc, #64]	; (80075c8 <prvCheckForValidListAndQueue+0x64>)
 8007586:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007588:	4b12      	ldr	r3, [pc, #72]	; (80075d4 <prvCheckForValidListAndQueue+0x70>)
 800758a:	4a10      	ldr	r2, [pc, #64]	; (80075cc <prvCheckForValidListAndQueue+0x68>)
 800758c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800758e:	2300      	movs	r3, #0
 8007590:	9300      	str	r3, [sp, #0]
 8007592:	4b11      	ldr	r3, [pc, #68]	; (80075d8 <prvCheckForValidListAndQueue+0x74>)
 8007594:	4a11      	ldr	r2, [pc, #68]	; (80075dc <prvCheckForValidListAndQueue+0x78>)
 8007596:	2110      	movs	r1, #16
 8007598:	200a      	movs	r0, #10
 800759a:	f7fe f8cd 	bl	8005738 <xQueueGenericCreateStatic>
 800759e:	4602      	mov	r2, r0
 80075a0:	4b08      	ldr	r3, [pc, #32]	; (80075c4 <prvCheckForValidListAndQueue+0x60>)
 80075a2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80075a4:	4b07      	ldr	r3, [pc, #28]	; (80075c4 <prvCheckForValidListAndQueue+0x60>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d005      	beq.n	80075b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80075ac:	4b05      	ldr	r3, [pc, #20]	; (80075c4 <prvCheckForValidListAndQueue+0x60>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	490b      	ldr	r1, [pc, #44]	; (80075e0 <prvCheckForValidListAndQueue+0x7c>)
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7fe fd8e 	bl	80060d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80075b8:	f000 f966 	bl	8007888 <vPortExitCritical>
}
 80075bc:	bf00      	nop
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	20000c44 	.word	0x20000c44
 80075c8:	20000c14 	.word	0x20000c14
 80075cc:	20000c28 	.word	0x20000c28
 80075d0:	20000c3c 	.word	0x20000c3c
 80075d4:	20000c40 	.word	0x20000c40
 80075d8:	20000cf0 	.word	0x20000cf0
 80075dc:	20000c50 	.word	0x20000c50
 80075e0:	08007f68 	.word	0x08007f68

080075e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	3b04      	subs	r3, #4
 80075f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80075fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	3b04      	subs	r3, #4
 8007602:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	f023 0201 	bic.w	r2, r3, #1
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	3b04      	subs	r3, #4
 8007612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007614:	4a0c      	ldr	r2, [pc, #48]	; (8007648 <pxPortInitialiseStack+0x64>)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	3b14      	subs	r3, #20
 800761e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	3b04      	subs	r3, #4
 800762a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f06f 0202 	mvn.w	r2, #2
 8007632:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	3b20      	subs	r3, #32
 8007638:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800763a:	68fb      	ldr	r3, [r7, #12]
}
 800763c:	4618      	mov	r0, r3
 800763e:	3714      	adds	r7, #20
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr
 8007648:	0800764d 	.word	0x0800764d

0800764c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007652:	2300      	movs	r3, #0
 8007654:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007656:	4b11      	ldr	r3, [pc, #68]	; (800769c <prvTaskExitError+0x50>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800765e:	d009      	beq.n	8007674 <prvTaskExitError+0x28>
 8007660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007664:	f383 8811 	msr	BASEPRI, r3
 8007668:	f3bf 8f6f 	isb	sy
 800766c:	f3bf 8f4f 	dsb	sy
 8007670:	60fb      	str	r3, [r7, #12]
 8007672:	e7fe      	b.n	8007672 <prvTaskExitError+0x26>
 8007674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007678:	f383 8811 	msr	BASEPRI, r3
 800767c:	f3bf 8f6f 	isb	sy
 8007680:	f3bf 8f4f 	dsb	sy
 8007684:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007686:	bf00      	nop
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d0fc      	beq.n	8007688 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800768e:	bf00      	nop
 8007690:	3714      	adds	r7, #20
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	2000001c 	.word	0x2000001c

080076a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80076a0:	4b07      	ldr	r3, [pc, #28]	; (80076c0 <pxCurrentTCBConst2>)
 80076a2:	6819      	ldr	r1, [r3, #0]
 80076a4:	6808      	ldr	r0, [r1, #0]
 80076a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076aa:	f380 8809 	msr	PSP, r0
 80076ae:	f3bf 8f6f 	isb	sy
 80076b2:	f04f 0000 	mov.w	r0, #0
 80076b6:	f380 8811 	msr	BASEPRI, r0
 80076ba:	4770      	bx	lr
 80076bc:	f3af 8000 	nop.w

080076c0 <pxCurrentTCBConst2>:
 80076c0:	20000714 	.word	0x20000714
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80076c4:	bf00      	nop
 80076c6:	bf00      	nop

080076c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80076c8:	4808      	ldr	r0, [pc, #32]	; (80076ec <prvPortStartFirstTask+0x24>)
 80076ca:	6800      	ldr	r0, [r0, #0]
 80076cc:	6800      	ldr	r0, [r0, #0]
 80076ce:	f380 8808 	msr	MSP, r0
 80076d2:	f04f 0000 	mov.w	r0, #0
 80076d6:	f380 8814 	msr	CONTROL, r0
 80076da:	b662      	cpsie	i
 80076dc:	b661      	cpsie	f
 80076de:	f3bf 8f4f 	dsb	sy
 80076e2:	f3bf 8f6f 	isb	sy
 80076e6:	df00      	svc	0
 80076e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80076ea:	bf00      	nop
 80076ec:	e000ed08 	.word	0xe000ed08

080076f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80076f6:	4b44      	ldr	r3, [pc, #272]	; (8007808 <xPortStartScheduler+0x118>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a44      	ldr	r2, [pc, #272]	; (800780c <xPortStartScheduler+0x11c>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d109      	bne.n	8007714 <xPortStartScheduler+0x24>
 8007700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007704:	f383 8811 	msr	BASEPRI, r3
 8007708:	f3bf 8f6f 	isb	sy
 800770c:	f3bf 8f4f 	dsb	sy
 8007710:	613b      	str	r3, [r7, #16]
 8007712:	e7fe      	b.n	8007712 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007714:	4b3c      	ldr	r3, [pc, #240]	; (8007808 <xPortStartScheduler+0x118>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a3d      	ldr	r2, [pc, #244]	; (8007810 <xPortStartScheduler+0x120>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d109      	bne.n	8007732 <xPortStartScheduler+0x42>
 800771e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007722:	f383 8811 	msr	BASEPRI, r3
 8007726:	f3bf 8f6f 	isb	sy
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	60fb      	str	r3, [r7, #12]
 8007730:	e7fe      	b.n	8007730 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007732:	4b38      	ldr	r3, [pc, #224]	; (8007814 <xPortStartScheduler+0x124>)
 8007734:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	b2db      	uxtb	r3, r3
 800773c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	22ff      	movs	r2, #255	; 0xff
 8007742:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	b2db      	uxtb	r3, r3
 800774a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800774c:	78fb      	ldrb	r3, [r7, #3]
 800774e:	b2db      	uxtb	r3, r3
 8007750:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007754:	b2da      	uxtb	r2, r3
 8007756:	4b30      	ldr	r3, [pc, #192]	; (8007818 <xPortStartScheduler+0x128>)
 8007758:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800775a:	4b30      	ldr	r3, [pc, #192]	; (800781c <xPortStartScheduler+0x12c>)
 800775c:	2207      	movs	r2, #7
 800775e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007760:	e009      	b.n	8007776 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007762:	4b2e      	ldr	r3, [pc, #184]	; (800781c <xPortStartScheduler+0x12c>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	3b01      	subs	r3, #1
 8007768:	4a2c      	ldr	r2, [pc, #176]	; (800781c <xPortStartScheduler+0x12c>)
 800776a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800776c:	78fb      	ldrb	r3, [r7, #3]
 800776e:	b2db      	uxtb	r3, r3
 8007770:	005b      	lsls	r3, r3, #1
 8007772:	b2db      	uxtb	r3, r3
 8007774:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007776:	78fb      	ldrb	r3, [r7, #3]
 8007778:	b2db      	uxtb	r3, r3
 800777a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800777e:	2b80      	cmp	r3, #128	; 0x80
 8007780:	d0ef      	beq.n	8007762 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007782:	4b26      	ldr	r3, [pc, #152]	; (800781c <xPortStartScheduler+0x12c>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f1c3 0307 	rsb	r3, r3, #7
 800778a:	2b04      	cmp	r3, #4
 800778c:	d009      	beq.n	80077a2 <xPortStartScheduler+0xb2>
 800778e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007792:	f383 8811 	msr	BASEPRI, r3
 8007796:	f3bf 8f6f 	isb	sy
 800779a:	f3bf 8f4f 	dsb	sy
 800779e:	60bb      	str	r3, [r7, #8]
 80077a0:	e7fe      	b.n	80077a0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80077a2:	4b1e      	ldr	r3, [pc, #120]	; (800781c <xPortStartScheduler+0x12c>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	021b      	lsls	r3, r3, #8
 80077a8:	4a1c      	ldr	r2, [pc, #112]	; (800781c <xPortStartScheduler+0x12c>)
 80077aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80077ac:	4b1b      	ldr	r3, [pc, #108]	; (800781c <xPortStartScheduler+0x12c>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80077b4:	4a19      	ldr	r2, [pc, #100]	; (800781c <xPortStartScheduler+0x12c>)
 80077b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	b2da      	uxtb	r2, r3
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80077c0:	4b17      	ldr	r3, [pc, #92]	; (8007820 <xPortStartScheduler+0x130>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a16      	ldr	r2, [pc, #88]	; (8007820 <xPortStartScheduler+0x130>)
 80077c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80077ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80077cc:	4b14      	ldr	r3, [pc, #80]	; (8007820 <xPortStartScheduler+0x130>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a13      	ldr	r2, [pc, #76]	; (8007820 <xPortStartScheduler+0x130>)
 80077d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80077d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80077d8:	f000 f8d6 	bl	8007988 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80077dc:	4b11      	ldr	r3, [pc, #68]	; (8007824 <xPortStartScheduler+0x134>)
 80077de:	2200      	movs	r2, #0
 80077e0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80077e2:	f000 f8f5 	bl	80079d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80077e6:	4b10      	ldr	r3, [pc, #64]	; (8007828 <xPortStartScheduler+0x138>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a0f      	ldr	r2, [pc, #60]	; (8007828 <xPortStartScheduler+0x138>)
 80077ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80077f0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80077f2:	f7ff ff69 	bl	80076c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80077f6:	f7ff f871 	bl	80068dc <vTaskSwitchContext>
	prvTaskExitError();
 80077fa:	f7ff ff27 	bl	800764c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3718      	adds	r7, #24
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	e000ed00 	.word	0xe000ed00
 800780c:	410fc271 	.word	0x410fc271
 8007810:	410fc270 	.word	0x410fc270
 8007814:	e000e400 	.word	0xe000e400
 8007818:	20000d40 	.word	0x20000d40
 800781c:	20000d44 	.word	0x20000d44
 8007820:	e000ed20 	.word	0xe000ed20
 8007824:	2000001c 	.word	0x2000001c
 8007828:	e000ef34 	.word	0xe000ef34

0800782c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007836:	f383 8811 	msr	BASEPRI, r3
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007844:	4b0e      	ldr	r3, [pc, #56]	; (8007880 <vPortEnterCritical+0x54>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	3301      	adds	r3, #1
 800784a:	4a0d      	ldr	r2, [pc, #52]	; (8007880 <vPortEnterCritical+0x54>)
 800784c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800784e:	4b0c      	ldr	r3, [pc, #48]	; (8007880 <vPortEnterCritical+0x54>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2b01      	cmp	r3, #1
 8007854:	d10e      	bne.n	8007874 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007856:	4b0b      	ldr	r3, [pc, #44]	; (8007884 <vPortEnterCritical+0x58>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	b2db      	uxtb	r3, r3
 800785c:	2b00      	cmp	r3, #0
 800785e:	d009      	beq.n	8007874 <vPortEnterCritical+0x48>
 8007860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007864:	f383 8811 	msr	BASEPRI, r3
 8007868:	f3bf 8f6f 	isb	sy
 800786c:	f3bf 8f4f 	dsb	sy
 8007870:	603b      	str	r3, [r7, #0]
 8007872:	e7fe      	b.n	8007872 <vPortEnterCritical+0x46>
	}
}
 8007874:	bf00      	nop
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr
 8007880:	2000001c 	.word	0x2000001c
 8007884:	e000ed04 	.word	0xe000ed04

08007888 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800788e:	4b11      	ldr	r3, [pc, #68]	; (80078d4 <vPortExitCritical+0x4c>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d109      	bne.n	80078aa <vPortExitCritical+0x22>
 8007896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789a:	f383 8811 	msr	BASEPRI, r3
 800789e:	f3bf 8f6f 	isb	sy
 80078a2:	f3bf 8f4f 	dsb	sy
 80078a6:	607b      	str	r3, [r7, #4]
 80078a8:	e7fe      	b.n	80078a8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80078aa:	4b0a      	ldr	r3, [pc, #40]	; (80078d4 <vPortExitCritical+0x4c>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	3b01      	subs	r3, #1
 80078b0:	4a08      	ldr	r2, [pc, #32]	; (80078d4 <vPortExitCritical+0x4c>)
 80078b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80078b4:	4b07      	ldr	r3, [pc, #28]	; (80078d4 <vPortExitCritical+0x4c>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d104      	bne.n	80078c6 <vPortExitCritical+0x3e>
 80078bc:	2300      	movs	r3, #0
 80078be:	603b      	str	r3, [r7, #0]
	__asm volatile
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80078c6:	bf00      	nop
 80078c8:	370c      	adds	r7, #12
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr
 80078d2:	bf00      	nop
 80078d4:	2000001c 	.word	0x2000001c
	...

080078e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80078e0:	f3ef 8009 	mrs	r0, PSP
 80078e4:	f3bf 8f6f 	isb	sy
 80078e8:	4b15      	ldr	r3, [pc, #84]	; (8007940 <pxCurrentTCBConst>)
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	f01e 0f10 	tst.w	lr, #16
 80078f0:	bf08      	it	eq
 80078f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80078f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078fa:	6010      	str	r0, [r2, #0]
 80078fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007900:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007904:	f380 8811 	msr	BASEPRI, r0
 8007908:	f3bf 8f4f 	dsb	sy
 800790c:	f3bf 8f6f 	isb	sy
 8007910:	f7fe ffe4 	bl	80068dc <vTaskSwitchContext>
 8007914:	f04f 0000 	mov.w	r0, #0
 8007918:	f380 8811 	msr	BASEPRI, r0
 800791c:	bc09      	pop	{r0, r3}
 800791e:	6819      	ldr	r1, [r3, #0]
 8007920:	6808      	ldr	r0, [r1, #0]
 8007922:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007926:	f01e 0f10 	tst.w	lr, #16
 800792a:	bf08      	it	eq
 800792c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007930:	f380 8809 	msr	PSP, r0
 8007934:	f3bf 8f6f 	isb	sy
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	f3af 8000 	nop.w

08007940 <pxCurrentTCBConst>:
 8007940:	20000714 	.word	0x20000714
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007944:	bf00      	nop
 8007946:	bf00      	nop

08007948 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
	__asm volatile
 800794e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007952:	f383 8811 	msr	BASEPRI, r3
 8007956:	f3bf 8f6f 	isb	sy
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007960:	f7fe ff04 	bl	800676c <xTaskIncrementTick>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d003      	beq.n	8007972 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800796a:	4b06      	ldr	r3, [pc, #24]	; (8007984 <xPortSysTickHandler+0x3c>)
 800796c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007970:	601a      	str	r2, [r3, #0]
 8007972:	2300      	movs	r3, #0
 8007974:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800797c:	bf00      	nop
 800797e:	3708      	adds	r7, #8
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}
 8007984:	e000ed04 	.word	0xe000ed04

08007988 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007988:	b480      	push	{r7}
 800798a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800798c:	4b0b      	ldr	r3, [pc, #44]	; (80079bc <vPortSetupTimerInterrupt+0x34>)
 800798e:	2200      	movs	r2, #0
 8007990:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007992:	4b0b      	ldr	r3, [pc, #44]	; (80079c0 <vPortSetupTimerInterrupt+0x38>)
 8007994:	2200      	movs	r2, #0
 8007996:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007998:	4b0a      	ldr	r3, [pc, #40]	; (80079c4 <vPortSetupTimerInterrupt+0x3c>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a0a      	ldr	r2, [pc, #40]	; (80079c8 <vPortSetupTimerInterrupt+0x40>)
 800799e:	fba2 2303 	umull	r2, r3, r2, r3
 80079a2:	099b      	lsrs	r3, r3, #6
 80079a4:	4a09      	ldr	r2, [pc, #36]	; (80079cc <vPortSetupTimerInterrupt+0x44>)
 80079a6:	3b01      	subs	r3, #1
 80079a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80079aa:	4b04      	ldr	r3, [pc, #16]	; (80079bc <vPortSetupTimerInterrupt+0x34>)
 80079ac:	2207      	movs	r2, #7
 80079ae:	601a      	str	r2, [r3, #0]
}
 80079b0:	bf00      	nop
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr
 80079ba:	bf00      	nop
 80079bc:	e000e010 	.word	0xe000e010
 80079c0:	e000e018 	.word	0xe000e018
 80079c4:	20000010 	.word	0x20000010
 80079c8:	10624dd3 	.word	0x10624dd3
 80079cc:	e000e014 	.word	0xe000e014

080079d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80079d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80079e0 <vPortEnableVFP+0x10>
 80079d4:	6801      	ldr	r1, [r0, #0]
 80079d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80079da:	6001      	str	r1, [r0, #0]
 80079dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80079de:	bf00      	nop
 80079e0:	e000ed88 	.word	0xe000ed88

080079e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80079ea:	f3ef 8305 	mrs	r3, IPSR
 80079ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2b0f      	cmp	r3, #15
 80079f4:	d913      	bls.n	8007a1e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80079f6:	4a16      	ldr	r2, [pc, #88]	; (8007a50 <vPortValidateInterruptPriority+0x6c>)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	4413      	add	r3, r2
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007a00:	4b14      	ldr	r3, [pc, #80]	; (8007a54 <vPortValidateInterruptPriority+0x70>)
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	7afa      	ldrb	r2, [r7, #11]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d209      	bcs.n	8007a1e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8007a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0e:	f383 8811 	msr	BASEPRI, r3
 8007a12:	f3bf 8f6f 	isb	sy
 8007a16:	f3bf 8f4f 	dsb	sy
 8007a1a:	607b      	str	r3, [r7, #4]
 8007a1c:	e7fe      	b.n	8007a1c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007a1e:	4b0e      	ldr	r3, [pc, #56]	; (8007a58 <vPortValidateInterruptPriority+0x74>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007a26:	4b0d      	ldr	r3, [pc, #52]	; (8007a5c <vPortValidateInterruptPriority+0x78>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d909      	bls.n	8007a42 <vPortValidateInterruptPriority+0x5e>
 8007a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a32:	f383 8811 	msr	BASEPRI, r3
 8007a36:	f3bf 8f6f 	isb	sy
 8007a3a:	f3bf 8f4f 	dsb	sy
 8007a3e:	603b      	str	r3, [r7, #0]
 8007a40:	e7fe      	b.n	8007a40 <vPortValidateInterruptPriority+0x5c>
	}
 8007a42:	bf00      	nop
 8007a44:	3714      	adds	r7, #20
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	e000e3f0 	.word	0xe000e3f0
 8007a54:	20000d40 	.word	0x20000d40
 8007a58:	e000ed0c 	.word	0xe000ed0c
 8007a5c:	20000d44 	.word	0x20000d44

08007a60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b08a      	sub	sp, #40	; 0x28
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007a6c:	f7fe fdc4 	bl	80065f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007a70:	4b57      	ldr	r3, [pc, #348]	; (8007bd0 <pvPortMalloc+0x170>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d101      	bne.n	8007a7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007a78:	f000 f90c 	bl	8007c94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a7c:	4b55      	ldr	r3, [pc, #340]	; (8007bd4 <pvPortMalloc+0x174>)
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4013      	ands	r3, r2
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f040 808c 	bne.w	8007ba2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d01c      	beq.n	8007aca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007a90:	2208      	movs	r2, #8
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4413      	add	r3, r2
 8007a96:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f003 0307 	and.w	r3, r3, #7
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d013      	beq.n	8007aca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f023 0307 	bic.w	r3, r3, #7
 8007aa8:	3308      	adds	r3, #8
 8007aaa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f003 0307 	and.w	r3, r3, #7
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d009      	beq.n	8007aca <pvPortMalloc+0x6a>
 8007ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aba:	f383 8811 	msr	BASEPRI, r3
 8007abe:	f3bf 8f6f 	isb	sy
 8007ac2:	f3bf 8f4f 	dsb	sy
 8007ac6:	617b      	str	r3, [r7, #20]
 8007ac8:	e7fe      	b.n	8007ac8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d068      	beq.n	8007ba2 <pvPortMalloc+0x142>
 8007ad0:	4b41      	ldr	r3, [pc, #260]	; (8007bd8 <pvPortMalloc+0x178>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d863      	bhi.n	8007ba2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007ada:	4b40      	ldr	r3, [pc, #256]	; (8007bdc <pvPortMalloc+0x17c>)
 8007adc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007ade:	4b3f      	ldr	r3, [pc, #252]	; (8007bdc <pvPortMalloc+0x17c>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ae4:	e004      	b.n	8007af0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d903      	bls.n	8007b02 <pvPortMalloc+0xa2>
 8007afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1f1      	bne.n	8007ae6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007b02:	4b33      	ldr	r3, [pc, #204]	; (8007bd0 <pvPortMalloc+0x170>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d04a      	beq.n	8007ba2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b0c:	6a3b      	ldr	r3, [r7, #32]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	2208      	movs	r2, #8
 8007b12:	4413      	add	r3, r2
 8007b14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	6a3b      	ldr	r3, [r7, #32]
 8007b1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b20:	685a      	ldr	r2, [r3, #4]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	1ad2      	subs	r2, r2, r3
 8007b26:	2308      	movs	r3, #8
 8007b28:	005b      	lsls	r3, r3, #1
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d91e      	bls.n	8007b6c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4413      	add	r3, r2
 8007b34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	f003 0307 	and.w	r3, r3, #7
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d009      	beq.n	8007b54 <pvPortMalloc+0xf4>
 8007b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b44:	f383 8811 	msr	BASEPRI, r3
 8007b48:	f3bf 8f6f 	isb	sy
 8007b4c:	f3bf 8f4f 	dsb	sy
 8007b50:	613b      	str	r3, [r7, #16]
 8007b52:	e7fe      	b.n	8007b52 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b56:	685a      	ldr	r2, [r3, #4]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	1ad2      	subs	r2, r2, r3
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b66:	69b8      	ldr	r0, [r7, #24]
 8007b68:	f000 f8f6 	bl	8007d58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b6c:	4b1a      	ldr	r3, [pc, #104]	; (8007bd8 <pvPortMalloc+0x178>)
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	1ad3      	subs	r3, r2, r3
 8007b76:	4a18      	ldr	r2, [pc, #96]	; (8007bd8 <pvPortMalloc+0x178>)
 8007b78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b7a:	4b17      	ldr	r3, [pc, #92]	; (8007bd8 <pvPortMalloc+0x178>)
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	4b18      	ldr	r3, [pc, #96]	; (8007be0 <pvPortMalloc+0x180>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d203      	bcs.n	8007b8e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b86:	4b14      	ldr	r3, [pc, #80]	; (8007bd8 <pvPortMalloc+0x178>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a15      	ldr	r2, [pc, #84]	; (8007be0 <pvPortMalloc+0x180>)
 8007b8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b90:	685a      	ldr	r2, [r3, #4]
 8007b92:	4b10      	ldr	r3, [pc, #64]	; (8007bd4 <pvPortMalloc+0x174>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	431a      	orrs	r2, r3
 8007b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007ba2:	f7fe fd37 	bl	8006614 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	f003 0307 	and.w	r3, r3, #7
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d009      	beq.n	8007bc4 <pvPortMalloc+0x164>
 8007bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb4:	f383 8811 	msr	BASEPRI, r3
 8007bb8:	f3bf 8f6f 	isb	sy
 8007bbc:	f3bf 8f4f 	dsb	sy
 8007bc0:	60fb      	str	r3, [r7, #12]
 8007bc2:	e7fe      	b.n	8007bc2 <pvPortMalloc+0x162>
	return pvReturn;
 8007bc4:	69fb      	ldr	r3, [r7, #28]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3728      	adds	r7, #40	; 0x28
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	20001908 	.word	0x20001908
 8007bd4:	20001914 	.word	0x20001914
 8007bd8:	2000190c 	.word	0x2000190c
 8007bdc:	20001900 	.word	0x20001900
 8007be0:	20001910 	.word	0x20001910

08007be4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b086      	sub	sp, #24
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d046      	beq.n	8007c84 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007bf6:	2308      	movs	r3, #8
 8007bf8:	425b      	negs	r3, r3
 8007bfa:	697a      	ldr	r2, [r7, #20]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	685a      	ldr	r2, [r3, #4]
 8007c08:	4b20      	ldr	r3, [pc, #128]	; (8007c8c <vPortFree+0xa8>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4013      	ands	r3, r2
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d109      	bne.n	8007c26 <vPortFree+0x42>
 8007c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c16:	f383 8811 	msr	BASEPRI, r3
 8007c1a:	f3bf 8f6f 	isb	sy
 8007c1e:	f3bf 8f4f 	dsb	sy
 8007c22:	60fb      	str	r3, [r7, #12]
 8007c24:	e7fe      	b.n	8007c24 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d009      	beq.n	8007c42 <vPortFree+0x5e>
 8007c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c32:	f383 8811 	msr	BASEPRI, r3
 8007c36:	f3bf 8f6f 	isb	sy
 8007c3a:	f3bf 8f4f 	dsb	sy
 8007c3e:	60bb      	str	r3, [r7, #8]
 8007c40:	e7fe      	b.n	8007c40 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	685a      	ldr	r2, [r3, #4]
 8007c46:	4b11      	ldr	r3, [pc, #68]	; (8007c8c <vPortFree+0xa8>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4013      	ands	r3, r2
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d019      	beq.n	8007c84 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d115      	bne.n	8007c84 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	685a      	ldr	r2, [r3, #4]
 8007c5c:	4b0b      	ldr	r3, [pc, #44]	; (8007c8c <vPortFree+0xa8>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	43db      	mvns	r3, r3
 8007c62:	401a      	ands	r2, r3
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c68:	f7fe fcc6 	bl	80065f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	685a      	ldr	r2, [r3, #4]
 8007c70:	4b07      	ldr	r3, [pc, #28]	; (8007c90 <vPortFree+0xac>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4413      	add	r3, r2
 8007c76:	4a06      	ldr	r2, [pc, #24]	; (8007c90 <vPortFree+0xac>)
 8007c78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c7a:	6938      	ldr	r0, [r7, #16]
 8007c7c:	f000 f86c 	bl	8007d58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007c80:	f7fe fcc8 	bl	8006614 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007c84:	bf00      	nop
 8007c86:	3718      	adds	r7, #24
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	20001914 	.word	0x20001914
 8007c90:	2000190c 	.word	0x2000190c

08007c94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007c9a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007c9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ca0:	4b27      	ldr	r3, [pc, #156]	; (8007d40 <prvHeapInit+0xac>)
 8007ca2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f003 0307 	and.w	r3, r3, #7
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00c      	beq.n	8007cc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	3307      	adds	r3, #7
 8007cb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f023 0307 	bic.w	r3, r3, #7
 8007cba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007cbc:	68ba      	ldr	r2, [r7, #8]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	4a1f      	ldr	r2, [pc, #124]	; (8007d40 <prvHeapInit+0xac>)
 8007cc4:	4413      	add	r3, r2
 8007cc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007ccc:	4a1d      	ldr	r2, [pc, #116]	; (8007d44 <prvHeapInit+0xb0>)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007cd2:	4b1c      	ldr	r3, [pc, #112]	; (8007d44 <prvHeapInit+0xb0>)
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	68ba      	ldr	r2, [r7, #8]
 8007cdc:	4413      	add	r3, r2
 8007cde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ce0:	2208      	movs	r2, #8
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	1a9b      	subs	r3, r3, r2
 8007ce6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f023 0307 	bic.w	r3, r3, #7
 8007cee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	4a15      	ldr	r2, [pc, #84]	; (8007d48 <prvHeapInit+0xb4>)
 8007cf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007cf6:	4b14      	ldr	r3, [pc, #80]	; (8007d48 <prvHeapInit+0xb4>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007cfe:	4b12      	ldr	r3, [pc, #72]	; (8007d48 <prvHeapInit+0xb4>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2200      	movs	r2, #0
 8007d04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	1ad2      	subs	r2, r2, r3
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d14:	4b0c      	ldr	r3, [pc, #48]	; (8007d48 <prvHeapInit+0xb4>)
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	4a0a      	ldr	r2, [pc, #40]	; (8007d4c <prvHeapInit+0xb8>)
 8007d22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	4a09      	ldr	r2, [pc, #36]	; (8007d50 <prvHeapInit+0xbc>)
 8007d2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d2c:	4b09      	ldr	r3, [pc, #36]	; (8007d54 <prvHeapInit+0xc0>)
 8007d2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007d32:	601a      	str	r2, [r3, #0]
}
 8007d34:	bf00      	nop
 8007d36:	3714      	adds	r7, #20
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr
 8007d40:	20000d48 	.word	0x20000d48
 8007d44:	20001900 	.word	0x20001900
 8007d48:	20001908 	.word	0x20001908
 8007d4c:	20001910 	.word	0x20001910
 8007d50:	2000190c 	.word	0x2000190c
 8007d54:	20001914 	.word	0x20001914

08007d58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b085      	sub	sp, #20
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007d60:	4b28      	ldr	r3, [pc, #160]	; (8007e04 <prvInsertBlockIntoFreeList+0xac>)
 8007d62:	60fb      	str	r3, [r7, #12]
 8007d64:	e002      	b.n	8007d6c <prvInsertBlockIntoFreeList+0x14>
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	60fb      	str	r3, [r7, #12]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d8f7      	bhi.n	8007d66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	68ba      	ldr	r2, [r7, #8]
 8007d80:	4413      	add	r3, r2
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d108      	bne.n	8007d9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	685a      	ldr	r2, [r3, #4]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	441a      	add	r2, r3
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	441a      	add	r2, r3
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d118      	bne.n	8007de0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	4b15      	ldr	r3, [pc, #84]	; (8007e08 <prvInsertBlockIntoFreeList+0xb0>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d00d      	beq.n	8007dd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	685a      	ldr	r2, [r3, #4]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	441a      	add	r2, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	601a      	str	r2, [r3, #0]
 8007dd4:	e008      	b.n	8007de8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007dd6:	4b0c      	ldr	r3, [pc, #48]	; (8007e08 <prvInsertBlockIntoFreeList+0xb0>)
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	601a      	str	r2, [r3, #0]
 8007dde:	e003      	b.n	8007de8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d002      	beq.n	8007df6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007df6:	bf00      	nop
 8007df8:	3714      	adds	r7, #20
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	20001900 	.word	0x20001900
 8007e08:	20001908 	.word	0x20001908

08007e0c <__libc_init_array>:
 8007e0c:	b570      	push	{r4, r5, r6, lr}
 8007e0e:	4e0d      	ldr	r6, [pc, #52]	; (8007e44 <__libc_init_array+0x38>)
 8007e10:	4c0d      	ldr	r4, [pc, #52]	; (8007e48 <__libc_init_array+0x3c>)
 8007e12:	1ba4      	subs	r4, r4, r6
 8007e14:	10a4      	asrs	r4, r4, #2
 8007e16:	2500      	movs	r5, #0
 8007e18:	42a5      	cmp	r5, r4
 8007e1a:	d109      	bne.n	8007e30 <__libc_init_array+0x24>
 8007e1c:	4e0b      	ldr	r6, [pc, #44]	; (8007e4c <__libc_init_array+0x40>)
 8007e1e:	4c0c      	ldr	r4, [pc, #48]	; (8007e50 <__libc_init_array+0x44>)
 8007e20:	f000 f82c 	bl	8007e7c <_init>
 8007e24:	1ba4      	subs	r4, r4, r6
 8007e26:	10a4      	asrs	r4, r4, #2
 8007e28:	2500      	movs	r5, #0
 8007e2a:	42a5      	cmp	r5, r4
 8007e2c:	d105      	bne.n	8007e3a <__libc_init_array+0x2e>
 8007e2e:	bd70      	pop	{r4, r5, r6, pc}
 8007e30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e34:	4798      	blx	r3
 8007e36:	3501      	adds	r5, #1
 8007e38:	e7ee      	b.n	8007e18 <__libc_init_array+0xc>
 8007e3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e3e:	4798      	blx	r3
 8007e40:	3501      	adds	r5, #1
 8007e42:	e7f2      	b.n	8007e2a <__libc_init_array+0x1e>
 8007e44:	080087ec 	.word	0x080087ec
 8007e48:	080087ec 	.word	0x080087ec
 8007e4c:	080087ec 	.word	0x080087ec
 8007e50:	080087f0 	.word	0x080087f0

08007e54 <memcpy>:
 8007e54:	b510      	push	{r4, lr}
 8007e56:	1e43      	subs	r3, r0, #1
 8007e58:	440a      	add	r2, r1
 8007e5a:	4291      	cmp	r1, r2
 8007e5c:	d100      	bne.n	8007e60 <memcpy+0xc>
 8007e5e:	bd10      	pop	{r4, pc}
 8007e60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e68:	e7f7      	b.n	8007e5a <memcpy+0x6>

08007e6a <memset>:
 8007e6a:	4402      	add	r2, r0
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d100      	bne.n	8007e74 <memset+0xa>
 8007e72:	4770      	bx	lr
 8007e74:	f803 1b01 	strb.w	r1, [r3], #1
 8007e78:	e7f9      	b.n	8007e6e <memset+0x4>
	...

08007e7c <_init>:
 8007e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e7e:	bf00      	nop
 8007e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e82:	bc08      	pop	{r3}
 8007e84:	469e      	mov	lr, r3
 8007e86:	4770      	bx	lr

08007e88 <_fini>:
 8007e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e8a:	bf00      	nop
 8007e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e8e:	bc08      	pop	{r3}
 8007e90:	469e      	mov	lr, r3
 8007e92:	4770      	bx	lr
