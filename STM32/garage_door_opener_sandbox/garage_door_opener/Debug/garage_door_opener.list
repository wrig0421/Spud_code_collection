
garage_door_opener.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000860  08007be8  08007be8  00017be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008448  08008448  00020044  2**0
                  CONTENTS
  4 .ARM          00000008  08008448  08008448  00018448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008450  08008450  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008450  08008450  00018450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008454  08008454  00018454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08008458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a790  20000044  0800849c  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a7d4  0800849c  0002a7d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020ca9  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000491e  00000000  00000000  00040d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001770  00000000  00000000  00045640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001590  00000000  00000000  00046db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025b95  00000000  00000000  00048340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001abd4  00000000  00000000  0006ded5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dab61  00000000  00000000  00088aa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016360a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e74  00000000  00000000  00163660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000044 	.word	0x20000044
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007bd0 	.word	0x08007bd0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000048 	.word	0x20000048
 80001cc:	08007bd0 	.word	0x08007bd0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <board_wakeup>:
void board_wakeup(void);
void port_wakeup(void);


void board_wakeup(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	SystemClock_Config();
 80004dc:	f000 f81e 	bl	800051c <SystemClock_Config>
	HAL_Init();
 80004e0:	f001 f9a3 	bl	800182a <HAL_Init>
}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <port_wakeup>:


void port_wakeup(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 80004ec:	f000 f90a 	bl	8000704 <MX_GPIO_Init>
	MX_DMA_Init();
 80004f0:	f000 f8e2 	bl	80006b8 <MX_DMA_Init>
	MX_SPI2_Init();
 80004f4:	f000 f872 	bl	80005dc <MX_SPI2_Init>
	MX_USART1_UART_Init();
 80004f8:	f000 f8ae 	bl	8000658 <MX_USART1_UART_Init>
}
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}

08000500 <board_init>:


void board_init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	board_wakeup();
 8000504:	f7ff ffe8 	bl	80004d8 <board_wakeup>
	port_wakeup();
 8000508:	f7ff ffee 	bl	80004e8 <port_wakeup>
	flash_init();
 800050c:	f000 f988 	bl	8000820 <flash_init>
	ssd1351_init();
 8000510:	f000 fcaa 	bl	8000e68 <ssd1351_init>
	keypad_init();
 8000514:	f000 fa70 	bl	80009f8 <keypad_init>
	//gt521fx_fingerprint_init();
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b0ae      	sub	sp, #184	; 0xb8
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000526:	2244      	movs	r2, #68	; 0x44
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f007 fb48 	bl	8007bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000540:	463b      	mov	r3, r7
 8000542:	2260      	movs	r2, #96	; 0x60
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f007 fb3a 	bl	8007bc0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800054c:	2310      	movs	r3, #16
 800054e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000550:	2301      	movs	r3, #1
 8000552:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800055c:	2360      	movs	r3, #96	; 0x60
 800055e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000562:	2300      	movs	r3, #0
 8000564:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000568:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800056c:	4618      	mov	r0, r3
 800056e:	f002 f97f 	bl	8002870 <HAL_RCC_OscConfig>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000578:	f000 f94a 	bl	8000810 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057c:	230f      	movs	r3, #15
 800057e:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000580:	2300      	movs	r3, #0
 8000582:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000584:	2300      	movs	r3, #0
 8000586:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000590:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f002 fd8a 	bl	80030b0 <HAL_RCC_ClockConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80005a2:	f000 f935 	bl	8000810 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80005a6:	2301      	movs	r3, #1
 80005a8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005aa:	2300      	movs	r3, #0
 80005ac:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ae:	463b      	mov	r3, r7
 80005b0:	4618      	mov	r0, r3
 80005b2:	f002 ff83 	bl	80034bc <HAL_RCCEx_PeriphCLKConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80005bc:	f000 f928 	bl	8000810 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005c0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005c4:	f002 f8fe 	bl	80027c4 <HAL_PWREx_ControlVoltageScaling>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005ce:	f000 f91f 	bl	8000810 <Error_Handler>
  }
}
 80005d2:	bf00      	nop
 80005d4:	37b8      	adds	r7, #184	; 0xb8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI2_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80005e0:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <MX_SPI2_Init+0x74>)
 80005e2:	4a1c      	ldr	r2, [pc, #112]	; (8000654 <MX_SPI2_Init+0x78>)
 80005e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80005e6:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <MX_SPI2_Init+0x74>)
 80005e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80005ee:	4b18      	ldr	r3, [pc, #96]	; (8000650 <MX_SPI2_Init+0x74>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80005f4:	4b16      	ldr	r3, [pc, #88]	; (8000650 <MX_SPI2_Init+0x74>)
 80005f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80005fa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005fc:	4b14      	ldr	r3, [pc, #80]	; (8000650 <MX_SPI2_Init+0x74>)
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000602:	4b13      	ldr	r3, [pc, #76]	; (8000650 <MX_SPI2_Init+0x74>)
 8000604:	2200      	movs	r2, #0
 8000606:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000608:	4b11      	ldr	r3, [pc, #68]	; (8000650 <MX_SPI2_Init+0x74>)
 800060a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800060e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <MX_SPI2_Init+0x74>)
 8000612:	2200      	movs	r2, #0
 8000614:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_SPI2_Init+0x74>)
 8000618:	2200      	movs	r2, #0
 800061a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_SPI2_Init+0x74>)
 800061e:	2200      	movs	r2, #0
 8000620:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <MX_SPI2_Init+0x74>)
 8000624:	2200      	movs	r2, #0
 8000626:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000628:	4b09      	ldr	r3, [pc, #36]	; (8000650 <MX_SPI2_Init+0x74>)
 800062a:	2207      	movs	r2, #7
 800062c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <MX_SPI2_Init+0x74>)
 8000630:	2200      	movs	r2, #0
 8000632:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_SPI2_Init+0x74>)
 8000636:	2208      	movs	r2, #8
 8000638:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_SPI2_Init+0x74>)
 800063c:	f003 fa76 	bl	8003b2c <HAL_SPI_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000646:	f000 f8e3 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20001954 	.word	0x20001954
 8000654:	40003800 	.word	0x40003800

08000658 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800065c:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 800065e:	4a15      	ldr	r2, [pc, #84]	; (80006b4 <MX_USART1_UART_Init+0x5c>)
 8000660:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000662:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 8000664:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000668:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000670:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 800067e:	220c      	movs	r2, #12
 8000680:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 8000690:	2200      	movs	r2, #0
 8000692:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 8000696:	2200      	movs	r2, #0
 8000698:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_USART1_UART_Init+0x58>)
 800069c:	f003 fdb8 	bl	8004210 <HAL_UART_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006a6:	f000 f8b3 	bl	8000810 <Error_Handler>
	*/
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20001a48 	.word	0x20001a48
 80006b4:	40013800 	.word	0x40013800

080006b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <MX_DMA_Init+0x48>)
 80006c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006c2:	4a0f      	ldr	r2, [pc, #60]	; (8000700 <MX_DMA_Init+0x48>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6493      	str	r3, [r2, #72]	; 0x48
 80006ca:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <MX_DMA_Init+0x48>)
 80006cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2100      	movs	r1, #0
 80006da:	200e      	movs	r0, #14
 80006dc:	f001 fa19 	bl	8001b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80006e0:	200e      	movs	r0, #14
 80006e2:	f001 fa32 	bl	8001b4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2100      	movs	r1, #0
 80006ea:	200f      	movs	r0, #15
 80006ec:	f001 fa11 	bl	8001b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80006f0:	200f      	movs	r0, #15
 80006f2:	f001 fa2a 	bl	8001b4a <HAL_NVIC_EnableIRQ>

}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000

08000704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	f107 030c 	add.w	r3, r7, #12
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	4b3a      	ldr	r3, [pc, #232]	; (8000804 <MX_GPIO_Init+0x100>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	4a39      	ldr	r2, [pc, #228]	; (8000804 <MX_GPIO_Init+0x100>)
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000726:	4b37      	ldr	r3, [pc, #220]	; (8000804 <MX_GPIO_Init+0x100>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	4b34      	ldr	r3, [pc, #208]	; (8000804 <MX_GPIO_Init+0x100>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	4a33      	ldr	r2, [pc, #204]	; (8000804 <MX_GPIO_Init+0x100>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073e:	4b31      	ldr	r3, [pc, #196]	; (8000804 <MX_GPIO_Init+0x100>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	4b2e      	ldr	r3, [pc, #184]	; (8000804 <MX_GPIO_Init+0x100>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	4a2d      	ldr	r2, [pc, #180]	; (8000804 <MX_GPIO_Init+0x100>)
 8000750:	f043 0302 	orr.w	r3, r3, #2
 8000754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000756:	4b2b      	ldr	r3, [pc, #172]	; (8000804 <MX_GPIO_Init+0x100>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	f003 0302 	and.w	r3, r3, #2
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8
 8000762:	2200      	movs	r2, #0
 8000764:	f640 110e 	movw	r1, #2318	; 0x90e
 8000768:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076c:	f002 f804 	bl	8002778 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_6, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	2144      	movs	r1, #68	; 0x44
 8000774:	4824      	ldr	r0, [pc, #144]	; (8000808 <MX_GPIO_Init+0x104>)
 8000776:	f001 ffff 	bl	8002778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000780:	4822      	ldr	r0, [pc, #136]	; (800080c <MX_GPIO_Init+0x108>)
 8000782:	f001 fff9 	bl	8002778 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 PA8
                           PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8
 8000786:	f640 130e 	movw	r3, #2318	; 0x90e
 800078a:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078c:	2301      	movs	r3, #1
 800078e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000794:	2300      	movs	r3, #0
 8000796:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	4619      	mov	r1, r3
 800079e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a2:	f001 fe57 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 80007a6:	2344      	movs	r3, #68	; 0x44
 80007a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007aa:	2301      	movs	r3, #1
 80007ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b6:	f107 030c 	add.w	r3, r7, #12
 80007ba:	4619      	mov	r1, r3
 80007bc:	4812      	ldr	r0, [pc, #72]	; (8000808 <MX_GPIO_Init+0x104>)
 80007be:	f001 fe49 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 80007c2:	f44f 5399 	mov.w	r3, #4896	; 0x1320
 80007c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c8:	2300      	movs	r3, #0
 80007ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007cc:	2302      	movs	r3, #2
 80007ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	4619      	mov	r1, r3
 80007d6:	480c      	ldr	r0, [pc, #48]	; (8000808 <MX_GPIO_Init+0x104>)
 80007d8:	f001 fe3c 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	4619      	mov	r1, r3
 80007f4:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_GPIO_Init+0x108>)
 80007f6:	f001 fe2d 	bl	8002454 <HAL_GPIO_Init>
}
 80007fa:	bf00      	nop
 80007fc:	3720      	adds	r7, #32
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40021000 	.word	0x40021000
 8000808:	48000400 	.word	0x48000400
 800080c:	48000800 	.word	0x48000800

08000810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
	...

08000820 <flash_init>:
uint32_t flash_write(uint32_t address, uint64_t *data, uint32_t num_words);
uint32_t flash_get_page(uint32_t addr);


void flash_init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	flash_read(FLASH_ACCESS_STORAGE_ADDR_START, (uint64_t *)&flash_access_signature_page, sizeof(flash_access_signature_page_t));
 8000824:	2208      	movs	r2, #8
 8000826:	4906      	ldr	r1, [pc, #24]	; (8000840 <flash_init+0x20>)
 8000828:	4806      	ldr	r0, [pc, #24]	; (8000844 <flash_init+0x24>)
 800082a:	f000 f85f 	bl	80008ec <flash_read>
	//flash_read(FLASH_ACCESS_STORAGE_ADDR_START, &buf, 1);
	if (UINT32_MAX == flash_access_signature_page.gt_521fx_enroll_count) // uinitialized
 800082e:	4b04      	ldr	r3, [pc, #16]	; (8000840 <flash_init+0x20>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000836:	d101      	bne.n	800083c <flash_init+0x1c>
	{
		flash_access_clear_signature_page();
 8000838:	f000 f806 	bl	8000848 <flash_access_clear_signature_page>
	}
}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20009ad0 	.word	0x20009ad0
 8000844:	0803c000 	.word	0x0803c000

08000848 <flash_access_clear_signature_page>:


void flash_access_clear_signature_page(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	memset(&flash_access_signature_page, 0, sizeof(flash_access_signature_page_t));
 800084c:	2208      	movs	r2, #8
 800084e:	2100      	movs	r1, #0
 8000850:	4804      	ldr	r0, [pc, #16]	; (8000864 <flash_access_clear_signature_page+0x1c>)
 8000852:	f007 f9b5 	bl	8007bc0 <memset>
	flash_write(FLASH_ACCESS_STORAGE_ADDR_START, (uint64_t *)&flash_access_signature_page, sizeof(flash_access_signature_page_t));
 8000856:	2208      	movs	r2, #8
 8000858:	4902      	ldr	r1, [pc, #8]	; (8000864 <flash_access_clear_signature_page+0x1c>)
 800085a:	4803      	ldr	r0, [pc, #12]	; (8000868 <flash_access_clear_signature_page+0x20>)
 800085c:	f000 f866 	bl	800092c <flash_write>
}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20009ad0 	.word	0x20009ad0
 8000868:	0803c000 	.word	0x0803c000

0800086c <flash_get_page>:
	return flash_access_signature_page.gt_521fx_enroll_count;
}


uint32_t flash_get_page(uint32_t addr)
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	uint32_t page = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
	if (addr < (FLASH_BASE + FLASH_BANK_SIZE))
 8000878:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <flash_get_page+0x74>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	b29b      	uxth	r3, r3
 800087e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000882:	4293      	cmp	r3, r2
 8000884:	d007      	beq.n	8000896 <flash_get_page+0x2a>
 8000886:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <flash_get_page+0x74>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	029a      	lsls	r2, r3, #10
 800088c:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <flash_get_page+0x78>)
 800088e:	4013      	ands	r3, r2
 8000890:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000894:	e000      	b.n	8000898 <flash_get_page+0x2c>
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <flash_get_page+0x7c>)
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	4293      	cmp	r3, r2
 800089c:	d905      	bls.n	80008aa <flash_get_page+0x3e>
	{
		page = (addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80008a4:	0adb      	lsrs	r3, r3, #11
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	e013      	b.n	80008d2 <flash_get_page+0x66>
	}
	else
	{
		page = (addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 80008aa:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <flash_get_page+0x74>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d007      	beq.n	80008c8 <flash_get_page+0x5c>
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <flash_get_page+0x74>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	029a      	lsls	r2, r3, #10
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <flash_get_page+0x78>)
 80008c0:	4013      	ands	r3, r2
 80008c2:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80008c6:	e000      	b.n	80008ca <flash_get_page+0x5e>
 80008c8:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <flash_get_page+0x7c>)
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	1ad3      	subs	r3, r2, r3
 80008ce:	0adb      	lsrs	r3, r3, #11
 80008d0:	60fb      	str	r3, [r7, #12]
	}
	return page;
 80008d2:	68fb      	ldr	r3, [r7, #12]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	1fff75e0 	.word	0x1fff75e0
 80008e4:	03fffc00 	.word	0x03fffc00
 80008e8:	08040000 	.word	0x08040000

080008ec <flash_read>:


void flash_read(uint32_t address, uint64_t *rx_buf, uint16_t num_words)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	4613      	mov	r3, r2
 80008f8:	80fb      	strh	r3, [r7, #6]
	while(1)
	{
		*rx_buf = *(__IO uint64_t *)address;
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000900:	68b9      	ldr	r1, [r7, #8]
 8000902:	e9c1 2300 	strd	r2, r3, [r1]
		address += 4;
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	3304      	adds	r3, #4
 800090a:	60fb      	str	r3, [r7, #12]
		rx_buf++;
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	3308      	adds	r3, #8
 8000910:	60bb      	str	r3, [r7, #8]
		if (!(num_words--)) break;
 8000912:	88fb      	ldrh	r3, [r7, #6]
 8000914:	1e5a      	subs	r2, r3, #1
 8000916:	80fa      	strh	r2, [r7, #6]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d000      	beq.n	800091e <flash_read+0x32>
		*rx_buf = *(__IO uint64_t *)address;
 800091c:	e7ed      	b.n	80008fa <flash_read+0xe>
		if (!(num_words--)) break;
 800091e:	bf00      	nop
	}
}
 8000920:	bf00      	nop
 8000922:	3714      	adds	r7, #20
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <flash_write>:


uint32_t flash_write(uint32_t address, uint64_t *data, uint32_t num_dbls)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
	static FLASH_EraseInitTypeDef erase_init_struct;
	uint32_t page_error;

	if ((address + (sizeof(uint64_t) * num_dbls)) > FLASH_ACCESS_STORAGE_ADDR_END)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	00da      	lsls	r2, r3, #3
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	4413      	add	r3, r2
 8000940:	4a2b      	ldr	r2, [pc, #172]	; (80009f0 <flash_write+0xc4>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d902      	bls.n	800094c <flash_write+0x20>
	{
		return -1; // error not enough allocated space
 8000946:	f04f 33ff 	mov.w	r3, #4294967295
 800094a:	e04c      	b.n	80009e6 <flash_write+0xba>
	}
	HAL_FLASH_Unlock();
 800094c:	f001 fb6a 	bl	8002024 <HAL_FLASH_Unlock>

	uint32_t start_page = flash_get_page(address);
 8000950:	68f8      	ldr	r0, [r7, #12]
 8000952:	f7ff ff8b 	bl	800086c <flash_get_page>
 8000956:	61b8      	str	r0, [r7, #24]
	uint32_t end_page = flash_get_page(address + num_dbls * 8);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	00da      	lsls	r2, r3, #3
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	4413      	add	r3, r2
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff ff83 	bl	800086c <flash_get_page>
 8000966:	6178      	str	r0, [r7, #20]

	erase_init_struct.Banks = FLASH_BANK_1;
 8000968:	4b22      	ldr	r3, [pc, #136]	; (80009f4 <flash_write+0xc8>)
 800096a:	2201      	movs	r2, #1
 800096c:	605a      	str	r2, [r3, #4]
	erase_init_struct.TypeErase = FLASH_TYPEERASE_PAGES;
 800096e:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <flash_write+0xc8>)
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
	erase_init_struct.Page = start_page;
 8000974:	4a1f      	ldr	r2, [pc, #124]	; (80009f4 <flash_write+0xc8>)
 8000976:	69bb      	ldr	r3, [r7, #24]
 8000978:	6093      	str	r3, [r2, #8]
	erase_init_struct.NbPages = ((end_page - start_page) / FLASH_PAGE_SIZE) + 1;
 800097a:	697a      	ldr	r2, [r7, #20]
 800097c:	69bb      	ldr	r3, [r7, #24]
 800097e:	1ad3      	subs	r3, r2, r3
 8000980:	0adb      	lsrs	r3, r3, #11
 8000982:	3301      	adds	r3, #1
 8000984:	4a1b      	ldr	r2, [pc, #108]	; (80009f4 <flash_write+0xc8>)
 8000986:	60d3      	str	r3, [r2, #12]

	if (HAL_OK != HAL_FLASHEx_Erase(&erase_init_struct, &page_error))
 8000988:	f107 0310 	add.w	r3, r7, #16
 800098c:	4619      	mov	r1, r3
 800098e:	4819      	ldr	r0, [pc, #100]	; (80009f4 <flash_write+0xc8>)
 8000990:	f001 fc3a 	bl	8002208 <HAL_FLASHEx_Erase>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d003      	beq.n	80009a2 <flash_write+0x76>
	{
		return HAL_FLASH_GetError();
 800099a:	f001 fb75 	bl	8002088 <HAL_FLASH_GetError>
 800099e:	4603      	mov	r3, r0
 80009a0:	e021      	b.n	80009e6 <flash_write+0xba>
	}
	for (uint32_t i = 0; i < num_dbls; i++)
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
 80009a6:	e017      	b.n	80009d8 <flash_write+0xac>
	{
		//FLASH_TYPEPROGRAM_WORD
		if (HAL_OK == HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data[i]))
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	00db      	lsls	r3, r3, #3
 80009ac:	68ba      	ldr	r2, [r7, #8]
 80009ae:	4413      	add	r3, r2
 80009b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009b4:	68f9      	ldr	r1, [r7, #12]
 80009b6:	2000      	movs	r0, #0
 80009b8:	f001 fac8 	bl	8001f4c <HAL_FLASH_Program>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d103      	bne.n	80009ca <flash_write+0x9e>
		{
			address += 8;
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	3308      	adds	r3, #8
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	e003      	b.n	80009d2 <flash_write+0xa6>
		}
		else
		{
			return HAL_FLASH_GetError();
 80009ca:	f001 fb5d 	bl	8002088 <HAL_FLASH_GetError>
 80009ce:	4603      	mov	r3, r0
 80009d0:	e009      	b.n	80009e6 <flash_write+0xba>
	for (uint32_t i = 0; i < num_dbls; i++)
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	3301      	adds	r3, #1
 80009d6:	61fb      	str	r3, [r7, #28]
 80009d8:	69fa      	ldr	r2, [r7, #28]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d3e3      	bcc.n	80009a8 <flash_write+0x7c>
		}
	}
	HAL_FLASH_Lock();
 80009e0:	f001 fb42 	bl	8002068 <HAL_FLASH_Lock>
	return 0;
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3720      	adds	r7, #32
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	0803ffff 	.word	0x0803ffff
 80009f4:	20000060 	.word	0x20000060

080009f8 <keypad_init>:
uint8_t g_keys[KEYPAD_NUM_ROWS][KEYPAD_NUM_COLS];
uint8_t g_password[KEYPAD_PASSWORD_LENGTH] = {4, 4, 2, 6, 6, 1, 3, 3};
uint8_t g_last_button_pressed = 0;

void keypad_init(void)
{
 80009f8:	b490      	push	{r4, r7}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
	// '*' = 10, '0' = 11, '#' = 12
	uint8_t setting = 1;
 80009fe:	2301      	movs	r3, #1
 8000a00:	71fb      	strb	r3, [r7, #7]
	for (keypad_row_e row = KEYPAD_ROW_FIRST; row < KEYPAD_NUM_ROWS; row++)
 8000a02:	2300      	movs	r3, #0
 8000a04:	71bb      	strb	r3, [r7, #6]
 8000a06:	e017      	b.n	8000a38 <keypad_init+0x40>
	{
		for (keypad_col_e col = KEYPAD_COL_FIRST; col < KEYPAD_NUM_COLS; col++)
 8000a08:	2300      	movs	r3, #0
 8000a0a:	717b      	strb	r3, [r7, #5]
 8000a0c:	e00e      	b.n	8000a2c <keypad_init+0x34>
		{
			g_keys[row][col] = setting++;
 8000a0e:	79fa      	ldrb	r2, [r7, #7]
 8000a10:	1c53      	adds	r3, r2, #1
 8000a12:	71fb      	strb	r3, [r7, #7]
 8000a14:	79b9      	ldrb	r1, [r7, #6]
 8000a16:	7978      	ldrb	r0, [r7, #5]
 8000a18:	4c0c      	ldr	r4, [pc, #48]	; (8000a4c <keypad_init+0x54>)
 8000a1a:	460b      	mov	r3, r1
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	440b      	add	r3, r1
 8000a20:	4423      	add	r3, r4
 8000a22:	4403      	add	r3, r0
 8000a24:	701a      	strb	r2, [r3, #0]
		for (keypad_col_e col = KEYPAD_COL_FIRST; col < KEYPAD_NUM_COLS; col++)
 8000a26:	797b      	ldrb	r3, [r7, #5]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	717b      	strb	r3, [r7, #5]
 8000a2c:	797b      	ldrb	r3, [r7, #5]
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	d9ed      	bls.n	8000a0e <keypad_init+0x16>
	for (keypad_row_e row = KEYPAD_ROW_FIRST; row < KEYPAD_NUM_ROWS; row++)
 8000a32:	79bb      	ldrb	r3, [r7, #6]
 8000a34:	3301      	adds	r3, #1
 8000a36:	71bb      	strb	r3, [r7, #6]
 8000a38:	79bb      	ldrb	r3, [r7, #6]
 8000a3a:	2b03      	cmp	r3, #3
 8000a3c:	d9e4      	bls.n	8000a08 <keypad_init+0x10>
		}
	}
}
 8000a3e:	bf00      	nop
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc90      	pop	{r4, r7}
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	20009ad8 	.word	0x20009ad8

08000a50 <keypad_password_check>:


bool keypad_password_check(uint8_t *user_input)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < KEYPAD_PASSWORD_LENGTH; i++)
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	e00e      	b.n	8000a7c <keypad_password_check+0x2c>
	{
		if (g_password[i] != user_input[i]) return false;
 8000a5e:	4a0c      	ldr	r2, [pc, #48]	; (8000a90 <keypad_password_check+0x40>)
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	4413      	add	r3, r2
 8000a64:	781a      	ldrb	r2, [r3, #0]
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	6879      	ldr	r1, [r7, #4]
 8000a6a:	440b      	add	r3, r1
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d001      	beq.n	8000a76 <keypad_password_check+0x26>
 8000a72:	2300      	movs	r3, #0
 8000a74:	e006      	b.n	8000a84 <keypad_password_check+0x34>
	for(int i = 0; i < KEYPAD_PASSWORD_LENGTH; i++)
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	2b07      	cmp	r3, #7
 8000a80:	dded      	ble.n	8000a5e <keypad_password_check+0xe>
	}
	return true;
 8000a82:	2301      	movs	r3, #1
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3714      	adds	r7, #20
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	20000008 	.word	0x20000008

08000a94 <keypad_lookup>:


uint8_t keypad_lookup(keypad_row_e row, keypad_col_e col)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	460a      	mov	r2, r1
 8000a9e:	71fb      	strb	r3, [r7, #7]
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	71bb      	strb	r3, [r7, #6]
	return (g_keys[row][col]); // '*' = 10, '0' = 11, '#' = 12
 8000aa4:	79fa      	ldrb	r2, [r7, #7]
 8000aa6:	79b9      	ldrb	r1, [r7, #6]
 8000aa8:	4806      	ldr	r0, [pc, #24]	; (8000ac4 <keypad_lookup+0x30>)
 8000aaa:	4613      	mov	r3, r2
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	4413      	add	r3, r2
 8000ab0:	4403      	add	r3, r0
 8000ab2:	440b      	add	r3, r1
 8000ab4:	781b      	ldrb	r3, [r3, #0]
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	20009ad8 	.word	0x20009ad8

08000ac8 <keypad_button_pressed>:


uint8_t keypad_button_pressed(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
	return g_last_button_pressed;
 8000acc:	4b03      	ldr	r3, [pc, #12]	; (8000adc <keypad_button_pressed+0x14>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	20000070 	.word	0x20000070

08000ae0 <keypad_scan>:

keypad_col_e col_index = KEYPAD_COL_ONE;
keypad_row_e row_index = KEYPAD_ROW_ONE;

bool keypad_scan(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
	bool ret_val = false;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	73fb      	strb	r3, [r7, #15]
	uint16_t row_pin = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	81bb      	strh	r3, [r7, #12]
	uint16_t col_pin = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	817b      	strh	r3, [r7, #10]
	GPIO_TypeDef *col_port = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
	//static keypad_col_e col_index = KEYPAD_COL_ONE;
	//static keypad_row_e row_index = KEYPAD_ROW_ONE;
	switch(row_index)
 8000af6:	4b44      	ldr	r3, [pc, #272]	; (8000c08 <keypad_scan+0x128>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b03      	cmp	r3, #3
 8000afc:	d819      	bhi.n	8000b32 <keypad_scan+0x52>
 8000afe:	a201      	add	r2, pc, #4	; (adr r2, 8000b04 <keypad_scan+0x24>)
 8000b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b04:	08000b15 	.word	0x08000b15
 8000b08:	08000b1b 	.word	0x08000b1b
 8000b0c:	08000b23 	.word	0x08000b23
 8000b10:	08000b2b 	.word	0x08000b2b
	{
		case KEYPAD_ROW_ONE: row_pin = KEYPAD_ROW_ONE_PIN; break;
 8000b14:	2320      	movs	r3, #32
 8000b16:	81bb      	strh	r3, [r7, #12]
 8000b18:	e00c      	b.n	8000b34 <keypad_scan+0x54>
		case KEYPAD_ROW_TWO: row_pin = KEYPAD_ROW_TWO_PIN; break;
 8000b1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b1e:	81bb      	strh	r3, [r7, #12]
 8000b20:	e008      	b.n	8000b34 <keypad_scan+0x54>
		case KEYPAD_ROW_THREE: row_pin = KEYPAD_ROW_THREE_PIN; break;
 8000b22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b26:	81bb      	strh	r3, [r7, #12]
 8000b28:	e004      	b.n	8000b34 <keypad_scan+0x54>
		case KEYPAD_ROW_FOUR: row_pin = KEYPAD_ROW_FOUR_PIN; break;
 8000b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2e:	81bb      	strh	r3, [r7, #12]
 8000b30:	e000      	b.n	8000b34 <keypad_scan+0x54>
		default: while(1); break;
 8000b32:	e7fe      	b.n	8000b32 <keypad_scan+0x52>
	}
	switch(col_index)
 8000b34:	4b35      	ldr	r3, [pc, #212]	; (8000c0c <keypad_scan+0x12c>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	d011      	beq.n	8000b60 <keypad_scan+0x80>
 8000b3c:	2b02      	cmp	r3, #2
 8000b3e:	dc15      	bgt.n	8000b6c <keypad_scan+0x8c>
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d002      	beq.n	8000b4a <keypad_scan+0x6a>
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d006      	beq.n	8000b56 <keypad_scan+0x76>
 8000b48:	e010      	b.n	8000b6c <keypad_scan+0x8c>
	{
		case KEYPAD_COL_ONE:
			col_pin = KEYPAD_COL_ONE_PIN;
 8000b4a:	2304      	movs	r3, #4
 8000b4c:	817b      	strh	r3, [r7, #10]
			col_port = GPIOA;
 8000b4e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b52:	607b      	str	r3, [r7, #4]
		break;
 8000b54:	e00b      	b.n	8000b6e <keypad_scan+0x8e>
		case KEYPAD_COL_TWO:
			col_pin = KEYPAD_COL_TWO_PIN;
 8000b56:	2304      	movs	r3, #4
 8000b58:	817b      	strh	r3, [r7, #10]
			col_port = GPIOB;
 8000b5a:	4b2d      	ldr	r3, [pc, #180]	; (8000c10 <keypad_scan+0x130>)
 8000b5c:	607b      	str	r3, [r7, #4]
		break;
 8000b5e:	e006      	b.n	8000b6e <keypad_scan+0x8e>
		case KEYPAD_COL_THREE:
			col_pin = KEYPAD_COL_THREE_PIN;
 8000b60:	2308      	movs	r3, #8
 8000b62:	817b      	strh	r3, [r7, #10]
			col_port = GPIOA;
 8000b64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b68:	607b      	str	r3, [r7, #4]
		break;
 8000b6a:	e000      	b.n	8000b6e <keypad_scan+0x8e>
		default: while(1); break;
 8000b6c:	e7fe      	b.n	8000b6c <keypad_scan+0x8c>
	}
	HAL_GPIO_WritePin(col_port, col_pin, GPIO_PIN_SET);
 8000b6e:	897b      	ldrh	r3, [r7, #10]
 8000b70:	2201      	movs	r2, #1
 8000b72:	4619      	mov	r1, r3
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f001 fdff 	bl	8002778 <HAL_GPIO_WritePin>
	if (GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOB, row_pin)) ret_val = true;
 8000b7a:	89bb      	ldrh	r3, [r7, #12]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4824      	ldr	r0, [pc, #144]	; (8000c10 <keypad_scan+0x130>)
 8000b80:	f001 fde2 	bl	8002748 <HAL_GPIO_ReadPin>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d101      	bne.n	8000b8e <keypad_scan+0xae>
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(col_port, col_pin, GPIO_PIN_RESET);
 8000b8e:	897b      	ldrh	r3, [r7, #10]
 8000b90:	2200      	movs	r2, #0
 8000b92:	4619      	mov	r1, r3
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f001 fdef 	bl	8002778 <HAL_GPIO_WritePin>
	if (ret_val)
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d012      	beq.n	8000bc6 <keypad_scan+0xe6>
	{
		g_last_button_pressed = keypad_lookup(row_index, col_index);
 8000ba0:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <keypad_scan+0x128>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	4a19      	ldr	r2, [pc, #100]	; (8000c0c <keypad_scan+0x12c>)
 8000ba6:	7812      	ldrb	r2, [r2, #0]
 8000ba8:	4611      	mov	r1, r2
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff ff72 	bl	8000a94 <keypad_lookup>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <keypad_scan+0x134>)
 8000bb6:	701a      	strb	r2, [r3, #0]
		row_index = KEYPAD_ROW_ONE;
 8000bb8:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <keypad_scan+0x128>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
		col_index = KEYPAD_COL_ONE;
 8000bbe:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <keypad_scan+0x12c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]
 8000bc4:	e01b      	b.n	8000bfe <keypad_scan+0x11e>
	}
	else if (KEYPAD_ROW_FOUR == row_index++)
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <keypad_scan+0x128>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	1c5a      	adds	r2, r3, #1
 8000bcc:	b2d1      	uxtb	r1, r2
 8000bce:	4a0e      	ldr	r2, [pc, #56]	; (8000c08 <keypad_scan+0x128>)
 8000bd0:	7011      	strb	r1, [r2, #0]
 8000bd2:	2b03      	cmp	r3, #3
 8000bd4:	d113      	bne.n	8000bfe <keypad_scan+0x11e>
	{
		if (KEYPAD_COL_THREE == col_index)
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <keypad_scan+0x12c>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	d106      	bne.n	8000bec <keypad_scan+0x10c>
		{
			row_index = KEYPAD_ROW_ONE;
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <keypad_scan+0x128>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]
			col_index = KEYPAD_COL_ONE;
 8000be4:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <keypad_scan+0x12c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]
 8000bea:	e008      	b.n	8000bfe <keypad_scan+0x11e>
		}
		else
		{
			row_index = KEYPAD_ROW_ONE;
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <keypad_scan+0x128>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	701a      	strb	r2, [r3, #0]
			col_index++;
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <keypad_scan+0x12c>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <keypad_scan+0x12c>)
 8000bfc:	701a      	strb	r2, [r3, #0]
		}
	}
	//else row_index++;
	return ret_val;
 8000bfe:	7bfb      	ldrb	r3, [r7, #15]
		{
			return key_row;
		}
	}
	*/
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000072 	.word	0x20000072
 8000c0c:	20000071 	.word	0x20000071
 8000c10:	48000400 	.word	0x48000400
 8000c14:	20000070 	.word	0x20000070

08000c18 <main>:
#include "board_init.h"
#include "task_create.h"
#include "flash_access.h"

int main(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
	board_init();
 8000c1c:	f7ff fc70 	bl	8000500 <board_init>
	HAL_Delay(5000);
	board_init_set_wkup_src();
	HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE);
#endif
	//HAL_PWR_EnterSTANDBYMode();
	osKernelInitialize();
 8000c20:	f004 f99e 	bl	8004f60 <osKernelInitialize>
	task_create();
 8000c24:	f000 fd44 	bl	80016b0 <task_create>
	osKernelStart();
 8000c28:	f004 f9be 	bl	8004fa8 <osKernelStart>

	while(1); // should never reach this...
 8000c2c:	e7fe      	b.n	8000c2c <main+0x14>
	...

08000c30 <packet_queue_init>:

void packet_rsp_set(void);


void packet_queue_init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
	sensor_rx_queue = osMessageQueueNew(SNS_RX_QUEUE_DEPTH, sizeof( pkt_t ), NULL);
 8000c34:	2200      	movs	r2, #0
 8000c36:	210c      	movs	r1, #12
 8000c38:	2010      	movs	r0, #16
 8000c3a:	f004 fa88 	bl	800514e <osMessageQueueNew>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	4a05      	ldr	r2, [pc, #20]	; (8000c58 <packet_queue_init+0x28>)
 8000c42:	6013      	str	r3, [r2, #0]
	sensor_tx_queue = osMessageQueueNew(SNS_TX_QUEUE_DEPTH, sizeof( pkt_t ), NULL);
 8000c44:	2200      	movs	r2, #0
 8000c46:	210c      	movs	r1, #12
 8000c48:	2010      	movs	r0, #16
 8000c4a:	f004 fa80 	bl	800514e <osMessageQueueNew>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	4a02      	ldr	r2, [pc, #8]	; (8000c5c <packet_queue_init+0x2c>)
 8000c52:	6013      	str	r3, [r2, #0]
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20009ae8 	.word	0x20009ae8
 8000c5c:	20009ae4 	.word	0x20009ae4

08000c60 <USART3_IRQHandler>:

uint16_t g_free_buffer_index = 0;
uint8_t rx_data[sizeof(pkt_t)] = {0};

void USART3_IRQHandler()
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	HAL_UART_RxCpltCallback(&huart1);
 8000c64:	4802      	ldr	r0, [pc, #8]	; (8000c70 <USART3_IRQHandler+0x10>)
 8000c66:	f000 f805 	bl	8000c74 <HAL_UART_RxCpltCallback>
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20001a48 	.word	0x20001a48

08000c74 <HAL_UART_RxCpltCallback>:


bool uart_rx_flag = false;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_DMA(&huart1, rx_data, sizeof(pkt_t));
	memcpy(rsp_buffer.flat_data, rx_data, sizeof(pkt_t));
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_UART_RxCpltCallback+0x24>)
 8000c7e:	4a07      	ldr	r2, [pc, #28]	; (8000c9c <HAL_UART_RxCpltCallback+0x28>)
 8000c80:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c82:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	uart_rx_flag = true;
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <HAL_UART_RxCpltCallback+0x2c>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	701a      	strb	r2, [r3, #0]

}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	20009b48 	.word	0x20009b48
 8000c9c:	20000074 	.word	0x20000074
 8000ca0:	20000080 	.word	0x20000080

08000ca4 <ssd1351_spi_byte_write>:
void ssd1351_clear_pin(ssd1351_pins pin);
void ssd1351_reset_pixel_address(void);


static void ssd1351_spi_byte_write(uint8_t val)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
	uint8_t data = val;
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &data, 1, 10000);
 8000cb2:	f107 010f 	add.w	r1, r7, #15
 8000cb6:	f242 7310 	movw	r3, #10000	; 0x2710
 8000cba:	2201      	movs	r2, #1
 8000cbc:	4803      	ldr	r0, [pc, #12]	; (8000ccc <ssd1351_spi_byte_write+0x28>)
 8000cbe:	f002 ffd8 	bl	8003c72 <HAL_SPI_Transmit>
}
 8000cc2:	bf00      	nop
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20001954 	.word	0x20001954

08000cd0 <ssd1351_spi_block_write>:


static void ssd1351_spi_block_write(uint8_t *data, uint32_t len)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&hspi2, data, len, 10000);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	f242 7310 	movw	r3, #10000	; 0x2710
 8000ce2:	6879      	ldr	r1, [r7, #4]
 8000ce4:	4803      	ldr	r0, [pc, #12]	; (8000cf4 <ssd1351_spi_block_write+0x24>)
 8000ce6:	f002 ffc4 	bl	8003c72 <HAL_SPI_Transmit>
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20001954 	.word	0x20001954

08000cf8 <ssd1351_byte_write_data>:


void ssd1351_byte_write_data(uint8_t data)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
	ssd1351_set_pin(SSD1351_PIN_DC); // set DC (data mode)
 8000d02:	2001      	movs	r0, #1
 8000d04:	f000 f882 	bl	8000e0c <ssd1351_set_pin>
	ssd1351_clear_pin(SSD1351_PIN_CS); // select chip (active low)
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f000 f851 	bl	8000db0 <ssd1351_clear_pin>
	ssd1351_spi_byte_write(data); // byte write
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ffc7 	bl	8000ca4 <ssd1351_spi_byte_write>
	ssd1351_set_pin(SSD1351_PIN_CS); // deselect chip
 8000d16:	2000      	movs	r0, #0
 8000d18:	f000 f878 	bl	8000e0c <ssd1351_set_pin>
}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <ssd1351_block_write_data>:


void ssd1351_block_write_data(uint8_t *data, uint32_t len)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
	ssd1351_set_pin(SSD1351_PIN_DC); // set DC (data mode)
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f000 f86c 	bl	8000e0c <ssd1351_set_pin>
	ssd1351_clear_pin(SSD1351_PIN_CS); // select chip (active low)
 8000d34:	2000      	movs	r0, #0
 8000d36:	f000 f83b 	bl	8000db0 <ssd1351_clear_pin>
	ssd1351_spi_block_write(data, len); // byte write
 8000d3a:	6839      	ldr	r1, [r7, #0]
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f7ff ffc7 	bl	8000cd0 <ssd1351_spi_block_write>
	ssd1351_set_pin(SSD1351_PIN_CS); // deselect chip
 8000d42:	2000      	movs	r0, #0
 8000d44:	f000 f862 	bl	8000e0c <ssd1351_set_pin>
}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <ssd1351_write_cmd>:


void ssd1351_write_cmd(ssd1351_cmd_e cmd)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
	ssd1351_clear_pin(SSD1351_PIN_DC); // clear DC (cmd mode)
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	f000 f828 	bl	8000db0 <ssd1351_clear_pin>
	ssd1351_clear_pin(SSD1351_PIN_CS); // select chip (active low)
 8000d60:	2000      	movs	r0, #0
 8000d62:	f000 f825 	bl	8000db0 <ssd1351_clear_pin>
	ssd1351_spi_byte_write(cmd); // send cmd
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ff9b 	bl	8000ca4 <ssd1351_spi_byte_write>
	ssd1351_set_pin(SSD1351_PIN_CS); // deselect chip
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f000 f84c 	bl	8000e0c <ssd1351_set_pin>
}
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <ssd1351_write_buffer_to_display>:


void ssd1351_write_buffer_to_display(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
	ssd1351_write_cmd(SSD1351_CMD_WRITE_RAM);
 8000d80:	205c      	movs	r0, #92	; 0x5c
 8000d82:	f7ff ffe5 	bl	8000d50 <ssd1351_write_cmd>
	ssd1351_block_write_data(ssd1351_buffer.ssd1351_disp_buffer_uint8, sizeof(ssd1351_buffer.ssd1351_disp_buffer_uint8));
 8000d86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d8a:	4802      	ldr	r0, [pc, #8]	; (8000d94 <ssd1351_write_buffer_to_display+0x18>)
 8000d8c:	f7ff ffca 	bl	8000d24 <ssd1351_block_write_data>
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20001ad0 	.word	0x20001ad0

08000d98 <ssd1351_delay_ms>:


void ssd1351_delay_ms(uint32_t delay_ms)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay_ms);
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f000 fdb7 	bl	8001914 <HAL_Delay>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <ssd1351_clear_pin>:


void ssd1351_clear_pin(ssd1351_pins pin)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
	GPIO_TypeDef *hal_port;
	uint16_t hal_pin;
	switch(pin)
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d014      	beq.n	8000dea <ssd1351_clear_pin+0x3a>
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	dc17      	bgt.n	8000df4 <ssd1351_clear_pin+0x44>
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d002      	beq.n	8000dce <ssd1351_clear_pin+0x1e>
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d007      	beq.n	8000ddc <ssd1351_clear_pin+0x2c>
 8000dcc:	e012      	b.n	8000df4 <ssd1351_clear_pin+0x44>
	{
		case SSD1351_PIN_CS:
			hal_port = GPIOA;
 8000dce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000dd2:	60fb      	str	r3, [r7, #12]
			hal_pin = GPIO_PIN_11;
 8000dd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dd8:	817b      	strh	r3, [r7, #10]
		break;
 8000dda:	e00b      	b.n	8000df4 <ssd1351_clear_pin+0x44>
		case SSD1351_PIN_DC:
			hal_port = GPIOA;
 8000ddc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000de0:	60fb      	str	r3, [r7, #12]
			hal_pin = GPIO_PIN_8;
 8000de2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000de6:	817b      	strh	r3, [r7, #10]
		break;
 8000de8:	e004      	b.n	8000df4 <ssd1351_clear_pin+0x44>
		case SSD1351_PIN_RST:
			hal_port = GPIOB;
 8000dea:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <ssd1351_clear_pin+0x58>)
 8000dec:	60fb      	str	r3, [r7, #12]
			hal_pin = GPIO_PIN_6;
 8000dee:	2340      	movs	r3, #64	; 0x40
 8000df0:	817b      	strh	r3, [r7, #10]
		break;
 8000df2:	bf00      	nop
	}
	HAL_GPIO_WritePin(hal_port, hal_pin, GPIO_PIN_RESET);
 8000df4:	897b      	ldrh	r3, [r7, #10]
 8000df6:	2200      	movs	r2, #0
 8000df8:	4619      	mov	r1, r3
 8000dfa:	68f8      	ldr	r0, [r7, #12]
 8000dfc:	f001 fcbc 	bl	8002778 <HAL_GPIO_WritePin>
}
 8000e00:	bf00      	nop
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	48000400 	.word	0x48000400

08000e0c <ssd1351_set_pin>:


void ssd1351_set_pin(ssd1351_pins pin)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
	GPIO_TypeDef *hal_port;
	uint16_t hal_pin;
	switch(pin)
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d014      	beq.n	8000e46 <ssd1351_set_pin+0x3a>
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	dc17      	bgt.n	8000e50 <ssd1351_set_pin+0x44>
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d002      	beq.n	8000e2a <ssd1351_set_pin+0x1e>
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d007      	beq.n	8000e38 <ssd1351_set_pin+0x2c>
 8000e28:	e012      	b.n	8000e50 <ssd1351_set_pin+0x44>
	{
		case SSD1351_PIN_CS:
			hal_port = GPIOA;
 8000e2a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e2e:	60fb      	str	r3, [r7, #12]
			hal_pin = GPIO_PIN_11;
 8000e30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e34:	817b      	strh	r3, [r7, #10]
		break;
 8000e36:	e00b      	b.n	8000e50 <ssd1351_set_pin+0x44>
		case SSD1351_PIN_DC:
			hal_port = GPIOA;
 8000e38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e3c:	60fb      	str	r3, [r7, #12]
			hal_pin = GPIO_PIN_8;
 8000e3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e42:	817b      	strh	r3, [r7, #10]
		break;
 8000e44:	e004      	b.n	8000e50 <ssd1351_set_pin+0x44>
		case SSD1351_PIN_RST:
			hal_port = GPIOB;
 8000e46:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <ssd1351_set_pin+0x58>)
 8000e48:	60fb      	str	r3, [r7, #12]
			hal_pin = GPIO_PIN_6;
 8000e4a:	2340      	movs	r3, #64	; 0x40
 8000e4c:	817b      	strh	r3, [r7, #10]
		break;
 8000e4e:	bf00      	nop
	}
	HAL_GPIO_WritePin(hal_port, hal_pin, GPIO_PIN_SET);
 8000e50:	897b      	ldrh	r3, [r7, #10]
 8000e52:	2201      	movs	r2, #1
 8000e54:	4619      	mov	r1, r3
 8000e56:	68f8      	ldr	r0, [r7, #12]
 8000e58:	f001 fc8e 	bl	8002778 <HAL_GPIO_WritePin>
}
 8000e5c:	bf00      	nop
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	48000400 	.word	0x48000400

08000e68 <ssd1351_init>:


void ssd1351_init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	ssd1351_set_pin(SSD1351_PIN_RST); // clear DC (cmd mode)
 8000e6c:	2002      	movs	r0, #2
 8000e6e:	f7ff ffcd 	bl	8000e0c <ssd1351_set_pin>
	ssd1351_delay_ms(100); // how long to hold reset?
 8000e72:	2064      	movs	r0, #100	; 0x64
 8000e74:	f7ff ff90 	bl	8000d98 <ssd1351_delay_ms>
	ssd1351_clear_pin(SSD1351_PIN_RST); // clear DC (cmd mode)
 8000e78:	2002      	movs	r0, #2
 8000e7a:	f7ff ff99 	bl	8000db0 <ssd1351_clear_pin>
	ssd1351_delay_ms(100); // how long to pause after reset?
 8000e7e:	2064      	movs	r0, #100	; 0x64
 8000e80:	f7ff ff8a 	bl	8000d98 <ssd1351_delay_ms>
	ssd1351_set_pin(SSD1351_PIN_RST); // clear DC (cmd mode)
 8000e84:	2002      	movs	r0, #2
 8000e86:	f7ff ffc1 	bl	8000e0c <ssd1351_set_pin>

	ssd1351_write_cmd(SSD1351_CMD_SET_CMD_LOCK);
 8000e8a:	20fd      	movs	r0, #253	; 0xfd
 8000e8c:	f7ff ff60 	bl	8000d50 <ssd1351_write_cmd>
	ssd1351_byte_write_data(SSD1351_CMD_UNLOCK_BYTE);
 8000e90:	2012      	movs	r0, #18
 8000e92:	f7ff ff31 	bl	8000cf8 <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_SET_CMD_LOCK);
 8000e96:	20fd      	movs	r0, #253	; 0xfd
 8000e98:	f7ff ff5a 	bl	8000d50 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0xB1); // WHY?????
 8000e9c:	20b1      	movs	r0, #177	; 0xb1
 8000e9e:	f7ff ff2b 	bl	8000cf8 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_SLEEP_MODE_ON);
 8000ea2:	20ae      	movs	r0, #174	; 0xae
 8000ea4:	f7ff ff54 	bl	8000d50 <ssd1351_write_cmd>
	ssd1351_write_cmd(SSD1351_CMD_SET_DISP_MODE_OFF);
 8000ea8:	20a4      	movs	r0, #164	; 0xa4
 8000eaa:	f7ff ff51 	bl	8000d50 <ssd1351_write_cmd>

	ssd1351_write_cmd(SSD1351_CMD_SET_COLUMN_ADDRESS);
 8000eae:	2015      	movs	r0, #21
 8000eb0:	f7ff ff4e 	bl	8000d50 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x00);
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f7ff ff1f 	bl	8000cf8 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0x7F);
 8000eba:	207f      	movs	r0, #127	; 0x7f
 8000ebc:	f7ff ff1c 	bl	8000cf8 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_ROW_ADDRESS);
 8000ec0:	2075      	movs	r0, #117	; 0x75
 8000ec2:	f7ff ff45 	bl	8000d50 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x00);
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f7ff ff16 	bl	8000cf8 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0x7F);
 8000ecc:	207f      	movs	r0, #127	; 0x7f
 8000ece:	f7ff ff13 	bl	8000cf8 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_FRONT_CLOCK_DIVIDER);
 8000ed2:	20b3      	movs	r0, #179	; 0xb3
 8000ed4:	f7ff ff3c 	bl	8000d50 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0xF1); // highest frequency (div by 1)
 8000ed8:	20f1      	movs	r0, #241	; 0xf1
 8000eda:	f7ff ff0d 	bl	8000cf8 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_MUX_RATIO);
 8000ede:	20ca      	movs	r0, #202	; 0xca
 8000ee0:	f7ff ff36 	bl	8000d50 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x7F); // 128 MUX (Reset value)
 8000ee4:	207f      	movs	r0, #127	; 0x7f
 8000ee6:	f7ff ff07 	bl	8000cf8 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_REMAP_COLOR_DEPTH);
 8000eea:	20a0      	movs	r0, #160	; 0xa0
 8000eec:	f7ff ff30 	bl	8000d50 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x74);
 8000ef0:	2074      	movs	r0, #116	; 0x74
 8000ef2:	f7ff ff01 	bl	8000cf8 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_DISP_START_LINE);
 8000ef6:	20a1      	movs	r0, #161	; 0xa1
 8000ef8:	f7ff ff2a 	bl	8000d50 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x00);
 8000efc:	2000      	movs	r0, #0
 8000efe:	f7ff fefb 	bl	8000cf8 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_DISP_OFFSET);
 8000f02:	20a2      	movs	r0, #162	; 0xa2
 8000f04:	f7ff ff24 	bl	8000d50 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x00);
 8000f08:	2000      	movs	r0, #0
 8000f0a:	f7ff fef5 	bl	8000cf8 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_FUNCTION_SELECTION);
 8000f0e:	20ab      	movs	r0, #171	; 0xab
 8000f10:	f7ff ff1e 	bl	8000d50 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x01);
 8000f14:	2001      	movs	r0, #1
 8000f16:	f7ff feef 	bl	8000cf8 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_SEGMENT_LOW_VOLTAGE);
 8000f1a:	20b4      	movs	r0, #180	; 0xb4
 8000f1c:	f7ff ff18 	bl	8000d50 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0xA0);
 8000f20:	20a0      	movs	r0, #160	; 0xa0
 8000f22:	f7ff fee9 	bl	8000cf8 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0xB5);
 8000f26:	20b5      	movs	r0, #181	; 0xb5
 8000f28:	f7ff fee6 	bl	8000cf8 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0x55);
 8000f2c:	2055      	movs	r0, #85	; 0x55
 8000f2e:	f7ff fee3 	bl	8000cf8 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_CONTRAST_CURRENT);
 8000f32:	20c1      	movs	r0, #193	; 0xc1
 8000f34:	f7ff ff0c 	bl	8000d50 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0xC8);
 8000f38:	20c8      	movs	r0, #200	; 0xc8
 8000f3a:	f7ff fedd 	bl	8000cf8 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0x80);
 8000f3e:	2080      	movs	r0, #128	; 0x80
 8000f40:	f7ff feda 	bl	8000cf8 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0xC0);
 8000f44:	20c0      	movs	r0, #192	; 0xc0
 8000f46:	f7ff fed7 	bl	8000cf8 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_MASTER_CONTRAST_CURRENT_CTRL);
 8000f4a:	20c7      	movs	r0, #199	; 0xc7
 8000f4c:	f7ff ff00 	bl	8000d50 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x0F);
 8000f50:	200f      	movs	r0, #15
 8000f52:	f7ff fed1 	bl	8000cf8 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_RESET_PRECHARGE_PERIOD);
 8000f56:	20b1      	movs	r0, #177	; 0xb1
 8000f58:	f7ff fefa 	bl	8000d50 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x32);
 8000f5c:	2032      	movs	r0, #50	; 0x32
 8000f5e:	f7ff fecb 	bl	8000cf8 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_DISP_ENHANCEMENT);
 8000f62:	20b2      	movs	r0, #178	; 0xb2
 8000f64:	f7ff fef4 	bl	8000d50 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0xA4);
 8000f68:	20a4      	movs	r0, #164	; 0xa4
 8000f6a:	f7ff fec5 	bl	8000cf8 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0x00);
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f7ff fec2 	bl	8000cf8 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(0x00);
 8000f74:	2000      	movs	r0, #0
 8000f76:	f7ff febf 	bl	8000cf8 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_PRECHARGE_VOLTAGE);
 8000f7a:	20bb      	movs	r0, #187	; 0xbb
 8000f7c:	f7ff fee8 	bl	8000d50 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x17);
 8000f80:	2017      	movs	r0, #23
 8000f82:	f7ff feb9 	bl	8000cf8 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_SECOND_PRECHARGE_PERIOD);
 8000f86:	20b6      	movs	r0, #182	; 0xb6
 8000f88:	f7ff fee2 	bl	8000d50 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x01);
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	f7ff feb3 	bl	8000cf8 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_VCOMH_VOLTAGE);
 8000f92:	20be      	movs	r0, #190	; 0xbe
 8000f94:	f7ff fedc 	bl	8000d50 <ssd1351_write_cmd>
	ssd1351_byte_write_data(0x05);
 8000f98:	2005      	movs	r0, #5
 8000f9a:	f7ff fead 	bl	8000cf8 <ssd1351_byte_write_data>

	ssd1351_write_cmd(SSD1351_CMD_SET_DISP_MODE_NORMAL);
 8000f9e:	20a6      	movs	r0, #166	; 0xa6
 8000fa0:	f7ff fed6 	bl	8000d50 <ssd1351_write_cmd>

	ssd1351_clear_screen();
 8000fa4:	f000 f874 	bl	8001090 <ssd1351_clear_screen>
	ssd1351_write_cmd(SSD1351_CMD_SET_SLEEP_MODE_OFF);
 8000fa8:	20af      	movs	r0, #175	; 0xaf
 8000faa:	f7ff fed1 	bl	8000d50 <ssd1351_write_cmd>

	ssd1351_clear_screen();
 8000fae:	f000 f86f 	bl	8001090 <ssd1351_clear_screen>
	ssd1351_reset_ram_address();
 8000fb2:	f000 f865 	bl	8001080 <ssd1351_reset_ram_address>

	ssd1351_clear_screen();
 8000fb6:	f000 f86b 	bl	8001090 <ssd1351_clear_screen>
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <ssd1351_draw_pixel>:
	ssd1351_write_cmd(SSD1351_CMD_SET_DISP_MODE_OFF);
}


void ssd1351_draw_pixel(uint8_t x, uint8_t y, color_16bit_e color)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	71bb      	strb	r3, [r7, #6]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	80bb      	strh	r3, [r7, #4]
	if((x >= SSD1351_PIXEL_WIDTH - 1) || (y >= SSD1351_PIXEL_HEIGHT - 1)) return;
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	2b7e      	cmp	r3, #126	; 0x7e
 8000fd6:	d810      	bhi.n	8000ffa <ssd1351_draw_pixel+0x3a>
 8000fd8:	79bb      	ldrb	r3, [r7, #6]
 8000fda:	2b7e      	cmp	r3, #126	; 0x7e
 8000fdc:	d80d      	bhi.n	8000ffa <ssd1351_draw_pixel+0x3a>
	else if((x < 0) || (y < 0)) return;
	// there are 128 columns and 128 row.  2 bytes stored per pixel
	//uint16_t index = ((SSD1351_PIXEL_WIDTH - 1) - x) + (y * (SSD1351_PIXEL_WIDTH - 1))
	uint16_t index = x + y * 128;
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	79bb      	ldrb	r3, [r7, #6]
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	01db      	lsls	r3, r3, #7
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	4413      	add	r3, r2
 8000fec:	81fb      	strh	r3, [r7, #14]
	ssd1351_buffer.ssd1351_disp_buffer_uint16[index] = color;
 8000fee:	89fb      	ldrh	r3, [r7, #14]
 8000ff0:	4905      	ldr	r1, [pc, #20]	; (8001008 <ssd1351_draw_pixel+0x48>)
 8000ff2:	88ba      	ldrh	r2, [r7, #4]
 8000ff4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8000ff8:	e000      	b.n	8000ffc <ssd1351_draw_pixel+0x3c>
	if((x >= SSD1351_PIXEL_WIDTH - 1) || (y >= SSD1351_PIXEL_HEIGHT - 1)) return;
 8000ffa:	bf00      	nop
}
 8000ffc:	3714      	adds	r7, #20
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20001ad0 	.word	0x20001ad0

0800100c <ssd1351_reset_pixel_address>:
	ssd1351_coordinates.y = row;
}


void ssd1351_reset_pixel_address(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
	ssd1351_coordinates.x = 0;
 8001010:	4b05      	ldr	r3, [pc, #20]	; (8001028 <ssd1351_reset_pixel_address+0x1c>)
 8001012:	2200      	movs	r2, #0
 8001014:	701a      	strb	r2, [r3, #0]
	ssd1351_coordinates.y = 0;
 8001016:	4b04      	ldr	r3, [pc, #16]	; (8001028 <ssd1351_reset_pixel_address+0x1c>)
 8001018:	2200      	movs	r2, #0
 800101a:	705a      	strb	r2, [r3, #1]
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20001acc 	.word	0x20001acc

0800102c <ssd1351_set_ram_address>:


void ssd1351_set_ram_address(uint16_t column, uint16_t row)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	460a      	mov	r2, r1
 8001036:	80fb      	strh	r3, [r7, #6]
 8001038:	4613      	mov	r3, r2
 800103a:	80bb      	strh	r3, [r7, #4]
	ssd1351_write_cmd(SSD1351_CMD_SET_COLUMN_ADDRESS);
 800103c:	2015      	movs	r0, #21
 800103e:	f7ff fe87 	bl	8000d50 <ssd1351_write_cmd>
	ssd1351_byte_write_data((column & 0xFF00) >> 8);
 8001042:	88fb      	ldrh	r3, [r7, #6]
 8001044:	0a1b      	lsrs	r3, r3, #8
 8001046:	b29b      	uxth	r3, r3
 8001048:	b2db      	uxtb	r3, r3
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fe54 	bl	8000cf8 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(column & 0x00FF);
 8001050:	88fb      	ldrh	r3, [r7, #6]
 8001052:	b2db      	uxtb	r3, r3
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fe4f 	bl	8000cf8 <ssd1351_byte_write_data>
	ssd1351_write_cmd(SSD1351_CMD_SET_ROW_ADDRESS);
 800105a:	2075      	movs	r0, #117	; 0x75
 800105c:	f7ff fe78 	bl	8000d50 <ssd1351_write_cmd>
	ssd1351_byte_write_data((row & 0xFF00) >> 8);
 8001060:	88bb      	ldrh	r3, [r7, #4]
 8001062:	0a1b      	lsrs	r3, r3, #8
 8001064:	b29b      	uxth	r3, r3
 8001066:	b2db      	uxtb	r3, r3
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fe45 	bl	8000cf8 <ssd1351_byte_write_data>
	ssd1351_byte_write_data(row & 0x00FF);
 800106e:	88bb      	ldrh	r3, [r7, #4]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fe40 	bl	8000cf8 <ssd1351_byte_write_data>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <ssd1351_reset_ram_address>:


void ssd1351_reset_ram_address(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	ssd1351_set_ram_address(0x007F, 0x007F);
 8001084:	217f      	movs	r1, #127	; 0x7f
 8001086:	207f      	movs	r0, #127	; 0x7f
 8001088:	f7ff ffd0 	bl	800102c <ssd1351_set_ram_address>
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}

08001090 <ssd1351_clear_screen>:
	ssd1351_write_cmd(SSD1351_CMD_SET_SLEEP_MODE_OFF);
}


void ssd1351_clear_screen(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	//uint8_t clear_byte[128*128] = {0x00, 0x00};
	ssd1351_reset_ram_address();
 8001094:	f7ff fff4 	bl	8001080 <ssd1351_reset_ram_address>
	ssd1351_write_cmd(SSD1351_CMD_WRITE_RAM);
 8001098:	205c      	movs	r0, #92	; 0x5c
 800109a:	f7ff fe59 	bl	8000d50 <ssd1351_write_cmd>
	memset(ssd1351_buffer.ssd1351_disp_buffer_uint8, 0, sizeof(ssd1351_buffer.ssd1351_disp_buffer_uint8));
 800109e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010a2:	2100      	movs	r1, #0
 80010a4:	4805      	ldr	r0, [pc, #20]	; (80010bc <ssd1351_clear_screen+0x2c>)
 80010a6:	f006 fd8b 	bl	8007bc0 <memset>
	ssd1351_block_write_data(ssd1351_buffer.ssd1351_disp_buffer_uint8, sizeof(ssd1351_buffer));
 80010aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ae:	4803      	ldr	r0, [pc, #12]	; (80010bc <ssd1351_clear_screen+0x2c>)
 80010b0:	f7ff fe38 	bl	8000d24 <ssd1351_block_write_data>
	//ssd1351_reset_ram_address();
	ssd1351_reset_pixel_address();
 80010b4:	f7ff ffaa 	bl	800100c <ssd1351_reset_pixel_address>
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20001ad0 	.word	0x20001ad0

080010c0 <ssd1351_write_char>:


#define SPECIAL_CHAR_OFFSET 	32
void ssd1351_write_char(color_16bit_e color, font_t font, char c)
{
 80010c0:	b590      	push	{r4, r7, lr}
 80010c2:	b089      	sub	sp, #36	; 0x24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4604      	mov	r4, r0
 80010c8:	1d38      	adds	r0, r7, #4
 80010ca:	e880 0006 	stmia.w	r0, {r1, r2}
 80010ce:	461a      	mov	r2, r3
 80010d0:	4623      	mov	r3, r4
 80010d2:	81fb      	strh	r3, [r7, #14]
 80010d4:	4613      	mov	r3, r2
 80010d6:	737b      	strb	r3, [r7, #13]
	// basic idea for writing a character is as follows:
	// 1x 16-bit value is returned for each row in pixel height.  For example if the pixel height is
	// 10 then 10x 16-bit values make up that character
	uint16_t char_pix_row_data;
	uint16_t char_pix_vert_pos = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	83fb      	strh	r3, [r7, #30]
	uint16_t char_pix_horiz_pos = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	83bb      	strh	r3, [r7, #28]
	uint16_t height = font.height;
 80010e0:	797b      	ldrb	r3, [r7, #5]
 80010e2:	837b      	strh	r3, [r7, #26]
	uint16_t width = font.width;
 80010e4:	793b      	ldrb	r3, [r7, #4]
 80010e6:	833b      	strh	r3, [r7, #24]

	if((SSD1351_PIXEL_WIDTH <= ssd1351_coordinates.x + width) || (SSD1351_PIXEL_HEIGHT <= ssd1351_coordinates.y + height))
 80010e8:	4b3e      	ldr	r3, [pc, #248]	; (80011e4 <ssd1351_write_char+0x124>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	8b3b      	ldrh	r3, [r7, #24]
 80010f0:	4413      	add	r3, r2
 80010f2:	2b7f      	cmp	r3, #127	; 0x7f
 80010f4:	dc70      	bgt.n	80011d8 <ssd1351_write_char+0x118>
 80010f6:	4b3b      	ldr	r3, [pc, #236]	; (80011e4 <ssd1351_write_char+0x124>)
 80010f8:	785b      	ldrb	r3, [r3, #1]
 80010fa:	461a      	mov	r2, r3
 80010fc:	8b7b      	ldrh	r3, [r7, #26]
 80010fe:	4413      	add	r3, r2
 8001100:	2b7f      	cmp	r3, #127	; 0x7f
 8001102:	dc69      	bgt.n	80011d8 <ssd1351_write_char+0x118>
	{
		return;
	}
	if (c == '\n') ssd1351_coordinates.x = SSD1351_PIXEL_WIDTH - 1; // if new line simply
 8001104:	7b7b      	ldrb	r3, [r7, #13]
 8001106:	2b0a      	cmp	r3, #10
 8001108:	d134      	bne.n	8001174 <ssd1351_write_char+0xb4>
 800110a:	4b36      	ldr	r3, [pc, #216]	; (80011e4 <ssd1351_write_char+0x124>)
 800110c:	227f      	movs	r2, #127	; 0x7f
 800110e:	701a      	strb	r2, [r3, #0]
 8001110:	e034      	b.n	800117c <ssd1351_write_char+0xbc>
	else
	{
		while(char_pix_vert_pos < height)
		{
			char_pix_row_data = font.data[(c - SPECIAL_CHAR_OFFSET) * height + char_pix_vert_pos]; // "* font.height" to skip over rows and "+ i" to get the 2 byte value for the row
 8001112:	68ba      	ldr	r2, [r7, #8]
 8001114:	7b7b      	ldrb	r3, [r7, #13]
 8001116:	3b20      	subs	r3, #32
 8001118:	8b79      	ldrh	r1, [r7, #26]
 800111a:	fb01 f103 	mul.w	r1, r1, r3
 800111e:	8bfb      	ldrh	r3, [r7, #30]
 8001120:	440b      	add	r3, r1
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	4413      	add	r3, r2
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	82fb      	strh	r3, [r7, #22]
			while(char_pix_horiz_pos < width)
 800112a:	e01a      	b.n	8001162 <ssd1351_write_char+0xa2>
			{
				if ((char_pix_row_data << char_pix_horiz_pos) & 0x8000) // if bit is set then draw
 800112c:	8afa      	ldrh	r2, [r7, #22]
 800112e:	8bbb      	ldrh	r3, [r7, #28]
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d00f      	beq.n	800115c <ssd1351_write_char+0x9c>
				{
					ssd1351_draw_pixel(ssd1351_coordinates.x + char_pix_horiz_pos, ssd1351_coordinates.y + char_pix_vert_pos, color);
 800113c:	4b29      	ldr	r3, [pc, #164]	; (80011e4 <ssd1351_write_char+0x124>)
 800113e:	781a      	ldrb	r2, [r3, #0]
 8001140:	8bbb      	ldrh	r3, [r7, #28]
 8001142:	b2db      	uxtb	r3, r3
 8001144:	4413      	add	r3, r2
 8001146:	b2d8      	uxtb	r0, r3
 8001148:	4b26      	ldr	r3, [pc, #152]	; (80011e4 <ssd1351_write_char+0x124>)
 800114a:	785a      	ldrb	r2, [r3, #1]
 800114c:	8bfb      	ldrh	r3, [r7, #30]
 800114e:	b2db      	uxtb	r3, r3
 8001150:	4413      	add	r3, r2
 8001152:	b2db      	uxtb	r3, r3
 8001154:	89fa      	ldrh	r2, [r7, #14]
 8001156:	4619      	mov	r1, r3
 8001158:	f7ff ff32 	bl	8000fc0 <ssd1351_draw_pixel>
				}
				char_pix_horiz_pos++;
 800115c:	8bbb      	ldrh	r3, [r7, #28]
 800115e:	3301      	adds	r3, #1
 8001160:	83bb      	strh	r3, [r7, #28]
			while(char_pix_horiz_pos < width)
 8001162:	8bba      	ldrh	r2, [r7, #28]
 8001164:	8b3b      	ldrh	r3, [r7, #24]
 8001166:	429a      	cmp	r2, r3
 8001168:	d3e0      	bcc.n	800112c <ssd1351_write_char+0x6c>
			}
			char_pix_vert_pos++;
 800116a:	8bfb      	ldrh	r3, [r7, #30]
 800116c:	3301      	adds	r3, #1
 800116e:	83fb      	strh	r3, [r7, #30]
			char_pix_horiz_pos = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	83bb      	strh	r3, [r7, #28]
		while(char_pix_vert_pos < height)
 8001174:	8bfa      	ldrh	r2, [r7, #30]
 8001176:	8b7b      	ldrh	r3, [r7, #26]
 8001178:	429a      	cmp	r2, r3
 800117a:	d3ca      	bcc.n	8001112 <ssd1351_write_char+0x52>
		}

	}
	ssd1351_coordinates.x += width; // we just wrote a char increment x coordinate by font width
 800117c:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <ssd1351_write_char+0x124>)
 800117e:	781a      	ldrb	r2, [r3, #0]
 8001180:	8b3b      	ldrh	r3, [r7, #24]
 8001182:	b2db      	uxtb	r3, r3
 8001184:	4413      	add	r3, r2
 8001186:	b2da      	uxtb	r2, r3
 8001188:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <ssd1351_write_char+0x124>)
 800118a:	701a      	strb	r2, [r3, #0]
	if ((ssd1351_coordinates.x + width >= 127) & (ssd1351_coordinates.y + height <= 127)) // check if we need to go to new line
 800118c:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <ssd1351_write_char+0x124>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	461a      	mov	r2, r3
 8001192:	8b3b      	ldrh	r3, [r7, #24]
 8001194:	4413      	add	r3, r2
 8001196:	2b7e      	cmp	r3, #126	; 0x7e
 8001198:	bfcc      	ite	gt
 800119a:	2301      	movgt	r3, #1
 800119c:	2300      	movle	r3, #0
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <ssd1351_write_char+0x124>)
 80011a2:	785b      	ldrb	r3, [r3, #1]
 80011a4:	4619      	mov	r1, r3
 80011a6:	8b7b      	ldrh	r3, [r7, #26]
 80011a8:	440b      	add	r3, r1
 80011aa:	2b7f      	cmp	r3, #127	; 0x7f
 80011ac:	bfd4      	ite	le
 80011ae:	2301      	movle	r3, #1
 80011b0:	2300      	movgt	r3, #0
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	4013      	ands	r3, r2
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d00f      	beq.n	80011dc <ssd1351_write_char+0x11c>
	{
		ssd1351_coordinates.y = ssd1351_coordinates.y + height + 2; // the +2 is simply additional space between lines
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <ssd1351_write_char+0x124>)
 80011be:	785a      	ldrb	r2, [r3, #1]
 80011c0:	8b7b      	ldrh	r3, [r7, #26]
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	4413      	add	r3, r2
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	3302      	adds	r3, #2
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <ssd1351_write_char+0x124>)
 80011ce:	705a      	strb	r2, [r3, #1]
		ssd1351_coordinates.x = 0; // reset x coordinate to 0 for new line!
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <ssd1351_write_char+0x124>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	701a      	strb	r2, [r3, #0]
	}
	return;
 80011d6:	e001      	b.n	80011dc <ssd1351_write_char+0x11c>
		return;
 80011d8:	bf00      	nop
 80011da:	e000      	b.n	80011de <ssd1351_write_char+0x11e>
	return;
 80011dc:	bf00      	nop
}
 80011de:	3724      	adds	r7, #36	; 0x24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd90      	pop	{r4, r7, pc}
 80011e4:	20001acc 	.word	0x20001acc

080011e8 <ssd1351_printf>:


color_16bit_e g_background_color = COLOR_16BIT_BLACK;
color_16bit_e g_font_color = COLOR_16BIT_RED;
void ssd1351_printf(char *string)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	; 0x28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	char mem_string[18] = "";
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	819a      	strh	r2, [r3, #12]
	uint8_t mem_string_cnt = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t row_num = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	row_num = 0; // careful may be starting on a new row
 800120e:	2300      	movs	r3, #0
 8001210:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	bool new_word_flag = true;
 8001214:	2301      	movs	r3, #1
 8001216:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	bool print_flag = false;
 800121a:	2300      	movs	r3, #0
 800121c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	// find all spaces first...
	if (NULL == string) return;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	f000 808e 	beq.w	8001344 <ssd1351_printf+0x15c>
	for(int i = 0; i < strlen(string); i++)
 8001228:	2300      	movs	r3, #0
 800122a:	623b      	str	r3, [r7, #32]
 800122c:	e081      	b.n	8001332 <ssd1351_printf+0x14a>
	{
		if (new_word_flag)
 800122e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001232:	2b00      	cmp	r3, #0
 8001234:	d00b      	beq.n	800124e <ssd1351_printf+0x66>
		{
			new_word_flag = false;
 8001236:	2300      	movs	r3, #0
 8001238:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			row_num = i / 19;
 800123c:	6a3b      	ldr	r3, [r7, #32]
 800123e:	4a43      	ldr	r2, [pc, #268]	; (800134c <ssd1351_printf+0x164>)
 8001240:	fb82 1203 	smull	r1, r2, r2, r3
 8001244:	10d2      	asrs	r2, r2, #3
 8001246:	17db      	asrs	r3, r3, #31
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}
		if (strlen(string) - 1 == i) print_flag = true;
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7fe ffbe 	bl	80001d0 <strlen>
 8001254:	4603      	mov	r3, r0
 8001256:	1e5a      	subs	r2, r3, #1
 8001258:	6a3b      	ldr	r3, [r7, #32]
 800125a:	429a      	cmp	r2, r3
 800125c:	d102      	bne.n	8001264 <ssd1351_printf+0x7c>
 800125e:	2301      	movs	r3, #1
 8001260:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		if (string[i] != ' ') mem_string[mem_string_cnt++] = string[i];
 8001264:	6a3b      	ldr	r3, [r7, #32]
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b20      	cmp	r3, #32
 800126e:	d00e      	beq.n	800128e <ssd1351_printf+0xa6>
 8001270:	6a3b      	ldr	r3, [r7, #32]
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	441a      	add	r2, r3
 8001276:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800127a:	1c59      	adds	r1, r3, #1
 800127c:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 8001280:	7812      	ldrb	r2, [r2, #0]
 8001282:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001286:	440b      	add	r3, r1
 8001288:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800128c:	e002      	b.n	8001294 <ssd1351_printf+0xac>
		else print_flag = true;
 800128e:	2301      	movs	r3, #1
 8001290:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		if(print_flag)
 8001294:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001298:	2b00      	cmp	r3, #0
 800129a:	d047      	beq.n	800132c <ssd1351_printf+0x144>
		{
			mem_string_cnt = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if ((i / 19) != row_num)
 80012a2:	6a3b      	ldr	r3, [r7, #32]
 80012a4:	4a29      	ldr	r2, [pc, #164]	; (800134c <ssd1351_printf+0x164>)
 80012a6:	fb82 1203 	smull	r1, r2, r2, r3
 80012aa:	10d2      	asrs	r2, r2, #3
 80012ac:	17db      	asrs	r3, r3, #31
 80012ae:	1ad2      	subs	r2, r2, r3
 80012b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d017      	beq.n	80012e8 <ssd1351_printf+0x100>
			{
				ssd1351_write_char(g_font_color, Font_7x10, '\n');
 80012b8:	4b25      	ldr	r3, [pc, #148]	; (8001350 <ssd1351_printf+0x168>)
 80012ba:	8818      	ldrh	r0, [r3, #0]
 80012bc:	4a25      	ldr	r2, [pc, #148]	; (8001354 <ssd1351_printf+0x16c>)
 80012be:	230a      	movs	r3, #10
 80012c0:	ca06      	ldmia	r2, {r1, r2}
 80012c2:	f7ff fefd 	bl	80010c0 <ssd1351_write_char>
			}
			while(mem_string[mem_string_cnt] != 0)
 80012c6:	e00f      	b.n	80012e8 <ssd1351_printf+0x100>
			{
				ssd1351_write_char(g_font_color, Font_7x10, mem_string[mem_string_cnt++]);
 80012c8:	4b21      	ldr	r3, [pc, #132]	; (8001350 <ssd1351_printf+0x168>)
 80012ca:	8818      	ldrh	r0, [r3, #0]
 80012cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012d0:	1c5a      	adds	r2, r3, #1
 80012d2:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 80012d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012da:	4413      	add	r3, r2
 80012dc:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80012e0:	4a1c      	ldr	r2, [pc, #112]	; (8001354 <ssd1351_printf+0x16c>)
 80012e2:	ca06      	ldmia	r2, {r1, r2}
 80012e4:	f7ff feec 	bl	80010c0 <ssd1351_write_char>
			while(mem_string[mem_string_cnt] != 0)
 80012e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012ec:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012f0:	4413      	add	r3, r2
 80012f2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1e6      	bne.n	80012c8 <ssd1351_printf+0xe0>
			}
			ssd1351_write_char(g_font_color, Font_7x10, ' ');
 80012fa:	4b15      	ldr	r3, [pc, #84]	; (8001350 <ssd1351_printf+0x168>)
 80012fc:	8818      	ldrh	r0, [r3, #0]
 80012fe:	4a15      	ldr	r2, [pc, #84]	; (8001354 <ssd1351_printf+0x16c>)
 8001300:	2320      	movs	r3, #32
 8001302:	ca06      	ldmia	r2, {r1, r2}
 8001304:	f7ff fedc 	bl	80010c0 <ssd1351_write_char>
			ssd1351_write_buffer_to_display();
 8001308:	f7ff fd38 	bl	8000d7c <ssd1351_write_buffer_to_display>
			memset(mem_string, 0, sizeof(mem_string));
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	2212      	movs	r2, #18
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f006 fc53 	bl	8007bc0 <memset>
			mem_string_cnt = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			new_word_flag = true;
 8001320:	2301      	movs	r3, #1
 8001322:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			print_flag = false;
 8001326:	2300      	movs	r3, #0
 8001328:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	for(int i = 0; i < strlen(string); i++)
 800132c:	6a3b      	ldr	r3, [r7, #32]
 800132e:	3301      	adds	r3, #1
 8001330:	623b      	str	r3, [r7, #32]
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7fe ff4c 	bl	80001d0 <strlen>
 8001338:	4602      	mov	r2, r0
 800133a:	6a3b      	ldr	r3, [r7, #32]
 800133c:	429a      	cmp	r2, r3
 800133e:	f63f af76 	bhi.w	800122e <ssd1351_printf+0x46>
 8001342:	e000      	b.n	8001346 <ssd1351_printf+0x15e>
	if (NULL == string) return;
 8001344:	bf00      	nop
		string++;
	}
	*/
	//ssd1351_write_buffer_to_display();

}
 8001346:	3728      	adds	r7, #40	; 0x28
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	6bca1af3 	.word	0x6bca1af3
 8001350:	20000010 	.word	0x20000010
 8001354:	20000000 	.word	0x20000000

08001358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135e:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <HAL_MspInit+0x4c>)
 8001360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001362:	4a10      	ldr	r2, [pc, #64]	; (80013a4 <HAL_MspInit+0x4c>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6613      	str	r3, [r2, #96]	; 0x60
 800136a:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <HAL_MspInit+0x4c>)
 800136c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <HAL_MspInit+0x4c>)
 8001378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137a:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <HAL_MspInit+0x4c>)
 800137c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001380:	6593      	str	r3, [r2, #88]	; 0x58
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <HAL_MspInit+0x4c>)
 8001384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800138e:	2200      	movs	r2, #0
 8001390:	210f      	movs	r1, #15
 8001392:	f06f 0001 	mvn.w	r0, #1
 8001396:	f000 fbbc 	bl	8001b12 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40021000 	.word	0x40021000

080013a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	; 0x28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a25      	ldr	r2, [pc, #148]	; (800145c <HAL_SPI_MspInit+0xb4>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d144      	bne.n	8001454 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013ca:	4b25      	ldr	r3, [pc, #148]	; (8001460 <HAL_SPI_MspInit+0xb8>)
 80013cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ce:	4a24      	ldr	r2, [pc, #144]	; (8001460 <HAL_SPI_MspInit+0xb8>)
 80013d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d4:	6593      	str	r3, [r2, #88]	; 0x58
 80013d6:	4b22      	ldr	r3, [pc, #136]	; (8001460 <HAL_SPI_MspInit+0xb8>)
 80013d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e2:	4b1f      	ldr	r3, [pc, #124]	; (8001460 <HAL_SPI_MspInit+0xb8>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e6:	4a1e      	ldr	r2, [pc, #120]	; (8001460 <HAL_SPI_MspInit+0xb8>)
 80013e8:	f043 0304 	orr.w	r3, r3, #4
 80013ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ee:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <HAL_SPI_MspInit+0xb8>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f2:	f003 0304 	and.w	r3, r3, #4
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fa:	4b19      	ldr	r3, [pc, #100]	; (8001460 <HAL_SPI_MspInit+0xb8>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fe:	4a18      	ldr	r2, [pc, #96]	; (8001460 <HAL_SPI_MspInit+0xb8>)
 8001400:	f043 0302 	orr.w	r3, r3, #2
 8001404:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001406:	4b16      	ldr	r3, [pc, #88]	; (8001460 <HAL_SPI_MspInit+0xb8>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001412:	2304      	movs	r3, #4
 8001414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001416:	2302      	movs	r3, #2
 8001418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141e:	2303      	movs	r3, #3
 8001420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001422:	2305      	movs	r3, #5
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	480d      	ldr	r0, [pc, #52]	; (8001464 <HAL_SPI_MspInit+0xbc>)
 800142e:	f001 f811 	bl	8002454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001432:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001438:	2302      	movs	r3, #2
 800143a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001440:	2303      	movs	r3, #3
 8001442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001444:	2305      	movs	r3, #5
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	4619      	mov	r1, r3
 800144e:	4806      	ldr	r0, [pc, #24]	; (8001468 <HAL_SPI_MspInit+0xc0>)
 8001450:	f001 f800 	bl	8002454 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001454:	bf00      	nop
 8001456:	3728      	adds	r7, #40	; 0x28
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40003800 	.word	0x40003800
 8001460:	40021000 	.word	0x40021000
 8001464:	48000800 	.word	0x48000800
 8001468:	48000400 	.word	0x48000400

0800146c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a45      	ldr	r2, [pc, #276]	; (80015a0 <HAL_UART_MspInit+0x134>)
 800148a:	4293      	cmp	r3, r2
 800148c:	f040 8084 	bne.w	8001598 <HAL_UART_MspInit+0x12c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001490:	4b44      	ldr	r3, [pc, #272]	; (80015a4 <HAL_UART_MspInit+0x138>)
 8001492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001494:	4a43      	ldr	r2, [pc, #268]	; (80015a4 <HAL_UART_MspInit+0x138>)
 8001496:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800149a:	6613      	str	r3, [r2, #96]	; 0x60
 800149c:	4b41      	ldr	r3, [pc, #260]	; (80015a4 <HAL_UART_MspInit+0x138>)
 800149e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a8:	4b3e      	ldr	r3, [pc, #248]	; (80015a4 <HAL_UART_MspInit+0x138>)
 80014aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ac:	4a3d      	ldr	r2, [pc, #244]	; (80015a4 <HAL_UART_MspInit+0x138>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b4:	4b3b      	ldr	r3, [pc, #236]	; (80015a4 <HAL_UART_MspInit+0x138>)
 80014b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014c0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c6:	2302      	movs	r3, #2
 80014c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ce:	2303      	movs	r3, #3
 80014d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014d2:	2307      	movs	r3, #7
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	4619      	mov	r1, r3
 80014dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e0:	f000 ffb8 	bl	8002454 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80014e4:	4b30      	ldr	r3, [pc, #192]	; (80015a8 <HAL_UART_MspInit+0x13c>)
 80014e6:	4a31      	ldr	r2, [pc, #196]	; (80015ac <HAL_UART_MspInit+0x140>)
 80014e8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80014ea:	4b2f      	ldr	r3, [pc, #188]	; (80015a8 <HAL_UART_MspInit+0x13c>)
 80014ec:	2202      	movs	r2, #2
 80014ee:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014f0:	4b2d      	ldr	r3, [pc, #180]	; (80015a8 <HAL_UART_MspInit+0x13c>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014f6:	4b2c      	ldr	r3, [pc, #176]	; (80015a8 <HAL_UART_MspInit+0x13c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014fc:	4b2a      	ldr	r3, [pc, #168]	; (80015a8 <HAL_UART_MspInit+0x13c>)
 80014fe:	2280      	movs	r2, #128	; 0x80
 8001500:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001502:	4b29      	ldr	r3, [pc, #164]	; (80015a8 <HAL_UART_MspInit+0x13c>)
 8001504:	2200      	movs	r2, #0
 8001506:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001508:	4b27      	ldr	r3, [pc, #156]	; (80015a8 <HAL_UART_MspInit+0x13c>)
 800150a:	2200      	movs	r2, #0
 800150c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800150e:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <HAL_UART_MspInit+0x13c>)
 8001510:	2200      	movs	r2, #0
 8001512:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001514:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <HAL_UART_MspInit+0x13c>)
 8001516:	2200      	movs	r2, #0
 8001518:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800151a:	4823      	ldr	r0, [pc, #140]	; (80015a8 <HAL_UART_MspInit+0x13c>)
 800151c:	f000 fb30 	bl	8001b80 <HAL_DMA_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8001526:	f7ff f973 	bl	8000810 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a1e      	ldr	r2, [pc, #120]	; (80015a8 <HAL_UART_MspInit+0x13c>)
 800152e:	671a      	str	r2, [r3, #112]	; 0x70
 8001530:	4a1d      	ldr	r2, [pc, #116]	; (80015a8 <HAL_UART_MspInit+0x13c>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001536:	4b1e      	ldr	r3, [pc, #120]	; (80015b0 <HAL_UART_MspInit+0x144>)
 8001538:	4a1e      	ldr	r2, [pc, #120]	; (80015b4 <HAL_UART_MspInit+0x148>)
 800153a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 800153c:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <HAL_UART_MspInit+0x144>)
 800153e:	2202      	movs	r2, #2
 8001540:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001542:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <HAL_UART_MspInit+0x144>)
 8001544:	2210      	movs	r2, #16
 8001546:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001548:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <HAL_UART_MspInit+0x144>)
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800154e:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <HAL_UART_MspInit+0x144>)
 8001550:	2280      	movs	r2, #128	; 0x80
 8001552:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001554:	4b16      	ldr	r3, [pc, #88]	; (80015b0 <HAL_UART_MspInit+0x144>)
 8001556:	2200      	movs	r2, #0
 8001558:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <HAL_UART_MspInit+0x144>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001560:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <HAL_UART_MspInit+0x144>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001566:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_UART_MspInit+0x144>)
 8001568:	2200      	movs	r2, #0
 800156a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800156c:	4810      	ldr	r0, [pc, #64]	; (80015b0 <HAL_UART_MspInit+0x144>)
 800156e:	f000 fb07 	bl	8001b80 <HAL_DMA_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8001578:	f7ff f94a 	bl	8000810 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a0c      	ldr	r2, [pc, #48]	; (80015b0 <HAL_UART_MspInit+0x144>)
 8001580:	66da      	str	r2, [r3, #108]	; 0x6c
 8001582:	4a0b      	ldr	r2, [pc, #44]	; (80015b0 <HAL_UART_MspInit+0x144>)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001588:	2200      	movs	r2, #0
 800158a:	2105      	movs	r1, #5
 800158c:	2025      	movs	r0, #37	; 0x25
 800158e:	f000 fac0 	bl	8001b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001592:	2025      	movs	r0, #37	; 0x25
 8001594:	f000 fad9 	bl	8001b4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001598:	bf00      	nop
 800159a:	3728      	adds	r7, #40	; 0x28
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40013800 	.word	0x40013800
 80015a4:	40021000 	.word	0x40021000
 80015a8:	20001a00 	.word	0x20001a00
 80015ac:	40020058 	.word	0x40020058
 80015b0:	200019b8 	.word	0x200019b8
 80015b4:	40020044 	.word	0x40020044

080015b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <HardFault_Handler+0x4>

080015cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <MemManage_Handler+0x4>

080015d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d6:	e7fe      	b.n	80015d6 <BusFault_Handler+0x4>

080015d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <UsageFault_Handler+0x4>

080015de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f0:	f000 f970 	bl	80018d4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80015f4:	f005 fa4a 	bl	8006a8c <xTaskGetSchedulerState>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d001      	beq.n	8001602 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80015fe:	f006 f833 	bl	8007668 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800160c:	4802      	ldr	r0, [pc, #8]	; (8001618 <DMA1_Channel4_IRQHandler+0x10>)
 800160e:	f000 fbee 	bl	8001dee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200019b8 	.word	0x200019b8

0800161c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001620:	4802      	ldr	r0, [pc, #8]	; (800162c <DMA1_Channel5_IRQHandler+0x10>)
 8001622:	f000 fbe4 	bl	8001dee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20001a00 	.word	0x20001a00

08001630 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001634:	4802      	ldr	r0, [pc, #8]	; (8001640 <USART1_IRQHandler+0x10>)
 8001636:	f002 fe39 	bl	80042ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20001a48 	.word	0x20001a48

08001644 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001648:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <SystemInit+0x64>)
 800164a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800164e:	4a16      	ldr	r2, [pc, #88]	; (80016a8 <SystemInit+0x64>)
 8001650:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001654:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001658:	4b14      	ldr	r3, [pc, #80]	; (80016ac <SystemInit+0x68>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a13      	ldr	r2, [pc, #76]	; (80016ac <SystemInit+0x68>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <SystemInit+0x68>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <SystemInit+0x68>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a0f      	ldr	r2, [pc, #60]	; (80016ac <SystemInit+0x68>)
 8001670:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001674:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001678:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800167a:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <SystemInit+0x68>)
 800167c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001680:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001682:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <SystemInit+0x68>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a09      	ldr	r2, [pc, #36]	; (80016ac <SystemInit+0x68>)
 8001688:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800168c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800168e:	4b07      	ldr	r3, [pc, #28]	; (80016ac <SystemInit+0x68>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001694:	4b04      	ldr	r3, [pc, #16]	; (80016a8 <SystemInit+0x64>)
 8001696:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800169a:	609a      	str	r2, [r3, #8]
#endif
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000ed00 	.word	0xe000ed00
 80016ac:	40021000 	.word	0x40021000

080016b0 <task_create>:
  .priority = (osPriority_t) osPriorityNormal,
};


void task_create(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
	packet_queue_init();
 80016b4:	f7ff fabc 	bl	8000c30 <packet_queue_init>
	task_sensor_rxHandle = osThreadNew(sensor_rx_entry, NULL, &task_sensor_rx_attributes);
	task_sensor_txHandle = osThreadNew(task_sensor_tx_entry, NULL, &task_sensor_tx_attributes);
	task_sensor_accHandle = osThreadNew(task_sensor_access_entry, NULL, &task_sensor_acc_attributes);
	task_display_upHandle = osThreadNew(task_display_update_entry, NULL, &task_display_up_attributes);
	*/
	task_keypad_accHandle = osThreadNew(task_keypad_access_entry, NULL, &task_keypad_acc_attributes);
 80016b8:	4a04      	ldr	r2, [pc, #16]	; (80016cc <task_create+0x1c>)
 80016ba:	2100      	movs	r1, #0
 80016bc:	4804      	ldr	r0, [pc, #16]	; (80016d0 <task_create+0x20>)
 80016be:	f003 fc99 	bl	8004ff4 <osThreadNew>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4a03      	ldr	r2, [pc, #12]	; (80016d4 <task_create+0x24>)
 80016c6:	6013      	str	r3, [r2, #0]
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	08008424 	.word	0x08008424
 80016d0:	080016d9 	.word	0x080016d9
 80016d4:	20009bb0 	.word	0x20009bb0

080016d8 <task_keypad_access_entry>:
keypad_state_e keypad_state = KEYPAD_STATE_SCAN;

uint8_t key_strokes[KEYPAD_PASSWORD_LENGTH] = {0};

void task_keypad_access_entry(void *argument)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	uint8_t key_stroke = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	737b      	strb	r3, [r7, #13]
	uint8_t password_index = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	73fb      	strb	r3, [r7, #15]
	uint8_t failed_attempts = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	73bb      	strb	r3, [r7, #14]
	while(1)
	{
		switch(keypad_state)
 80016ec:	4b36      	ldr	r3, [pc, #216]	; (80017c8 <task_keypad_access_entry+0xf0>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b03      	cmp	r3, #3
 80016f2:	d865      	bhi.n	80017c0 <task_keypad_access_entry+0xe8>
 80016f4:	a201      	add	r2, pc, #4	; (adr r2, 80016fc <task_keypad_access_entry+0x24>)
 80016f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016fa:	bf00      	nop
 80016fc:	0800170d 	.word	0x0800170d
 8001700:	0800171f 	.word	0x0800171f
 8001704:	080017a3 	.word	0x080017a3
 8001708:	080017b1 	.word	0x080017b1
		{
			case KEYPAD_STATE_SCAN:
				if (keypad_scan()) keypad_state = KEYPAD_STATE_BTN_PRESS;
 800170c:	f7ff f9e8 	bl	8000ae0 <keypad_scan>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d053      	beq.n	80017be <task_keypad_access_entry+0xe6>
 8001716:	4b2c      	ldr	r3, [pc, #176]	; (80017c8 <task_keypad_access_entry+0xf0>)
 8001718:	2201      	movs	r2, #1
 800171a:	701a      	strb	r2, [r3, #0]
			break;
 800171c:	e04f      	b.n	80017be <task_keypad_access_entry+0xe6>
			case KEYPAD_STATE_BTN_PRESS:
				key_stroke = keypad_button_pressed();
 800171e:	f7ff f9d3 	bl	8000ac8 <keypad_button_pressed>
 8001722:	4603      	mov	r3, r0
 8001724:	737b      	strb	r3, [r7, #13]
				//ssd1351_printf("BUTTON PRESSED!\n");
				keypad_state = KEYPAD_STATE_SCAN;
 8001726:	4b28      	ldr	r3, [pc, #160]	; (80017c8 <task_keypad_access_entry+0xf0>)
 8001728:	2200      	movs	r2, #0
 800172a:	701a      	strb	r2, [r3, #0]
				osDelay(1000);
 800172c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001730:	f003 fcf2 	bl	8005118 <osDelay>

				key_strokes[password_index++] = key_stroke;
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	1c5a      	adds	r2, r3, #1
 8001738:	73fa      	strb	r2, [r7, #15]
 800173a:	4619      	mov	r1, r3
 800173c:	4a23      	ldr	r2, [pc, #140]	; (80017cc <task_keypad_access_entry+0xf4>)
 800173e:	7b7b      	ldrb	r3, [r7, #13]
 8001740:	5453      	strb	r3, [r2, r1]
				if (12 == key_stroke)
 8001742:	7b7b      	ldrb	r3, [r7, #13]
 8001744:	2b0c      	cmp	r3, #12
 8001746:	d106      	bne.n	8001756 <task_keypad_access_entry+0x7e>
				{
					memset(key_strokes, 0, KEYPAD_PASSWORD_LENGTH);
 8001748:	2208      	movs	r2, #8
 800174a:	2100      	movs	r1, #0
 800174c:	481f      	ldr	r0, [pc, #124]	; (80017cc <task_keypad_access_entry+0xf4>)
 800174e:	f006 fa37 	bl	8007bc0 <memset>
					password_index = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	73fb      	strb	r3, [r7, #15]
					// print display was cleared..
				}
				if (KEYPAD_PASSWORD_LENGTH == password_index)
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	2b08      	cmp	r3, #8
 800175a:	d11e      	bne.n	800179a <task_keypad_access_entry+0xc2>
				{
					if (keypad_password_check(key_strokes))
 800175c:	481b      	ldr	r0, [pc, #108]	; (80017cc <task_keypad_access_entry+0xf4>)
 800175e:	f7ff f977 	bl	8000a50 <keypad_password_check>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d00a      	beq.n	800177e <task_keypad_access_entry+0xa6>
					{
						memset(key_strokes, 0, KEYPAD_PASSWORD_LENGTH);
 8001768:	2208      	movs	r2, #8
 800176a:	2100      	movs	r1, #0
 800176c:	4817      	ldr	r0, [pc, #92]	; (80017cc <task_keypad_access_entry+0xf4>)
 800176e:	f006 fa27 	bl	8007bc0 <memset>
						password_index = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	73fb      	strb	r3, [r7, #15]
						keypad_state = KEYPAD_STATE_PASSWORD_MATCH;
 8001776:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <task_keypad_access_entry+0xf0>)
 8001778:	2202      	movs	r2, #2
 800177a:	701a      	strb	r2, [r3, #0]
				else
				{
					keypad_state = KEYPAD_STATE_SCAN;
				}

			break;
 800177c:	e020      	b.n	80017c0 <task_keypad_access_entry+0xe8>
						failed_attempts++;
 800177e:	7bbb      	ldrb	r3, [r7, #14]
 8001780:	3301      	adds	r3, #1
 8001782:	73bb      	strb	r3, [r7, #14]
						memset(key_strokes, 0, KEYPAD_PASSWORD_LENGTH);
 8001784:	2208      	movs	r2, #8
 8001786:	2100      	movs	r1, #0
 8001788:	4810      	ldr	r0, [pc, #64]	; (80017cc <task_keypad_access_entry+0xf4>)
 800178a:	f006 fa19 	bl	8007bc0 <memset>
						password_index = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	73fb      	strb	r3, [r7, #15]
						ssd1351_printf("Wrong. Dumbass!\n");
 8001792:	480f      	ldr	r0, [pc, #60]	; (80017d0 <task_keypad_access_entry+0xf8>)
 8001794:	f7ff fd28 	bl	80011e8 <ssd1351_printf>
			break;
 8001798:	e012      	b.n	80017c0 <task_keypad_access_entry+0xe8>
					keypad_state = KEYPAD_STATE_SCAN;
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <task_keypad_access_entry+0xf0>)
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
			break;
 80017a0:	e00e      	b.n	80017c0 <task_keypad_access_entry+0xe8>
			case KEYPAD_STATE_PASSWORD_MATCH:
				ssd1351_printf("Correct!\n");
 80017a2:	480c      	ldr	r0, [pc, #48]	; (80017d4 <task_keypad_access_entry+0xfc>)
 80017a4:	f7ff fd20 	bl	80011e8 <ssd1351_printf>
				keypad_state = KEYPAD_STATE_SCAN;
 80017a8:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <task_keypad_access_entry+0xf0>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	701a      	strb	r2, [r3, #0]
				// print success message
				// change state in task_sensor_access
		    break;
 80017ae:	e007      	b.n	80017c0 <task_keypad_access_entry+0xe8>
			case KEYPAD_STATE_LOCKOUT:
				ssd1351_printf("Wrong. Dumbass!\n");
 80017b0:	4807      	ldr	r0, [pc, #28]	; (80017d0 <task_keypad_access_entry+0xf8>)
 80017b2:	f7ff fd19 	bl	80011e8 <ssd1351_printf>
				keypad_state = KEYPAD_STATE_SCAN;
 80017b6:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <task_keypad_access_entry+0xf0>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
				// if 5 failures in a row then this should lock for like an hour maybe
		    break;
 80017bc:	e000      	b.n	80017c0 <task_keypad_access_entry+0xe8>
			break;
 80017be:	bf00      	nop
		}
		osDelay(1);
 80017c0:	2001      	movs	r0, #1
 80017c2:	f003 fca9 	bl	8005118 <osDelay>
		switch(keypad_state)
 80017c6:	e791      	b.n	80016ec <task_keypad_access_entry+0x14>
 80017c8:	20000081 	.word	0x20000081
 80017cc:	20000084 	.word	0x20000084
 80017d0:	08007c38 	.word	0x08007c38
 80017d4:	08007c4c 	.word	0x08007c4c

080017d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001810 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017dc:	f7ff ff32 	bl	8001644 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80017e0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80017e2:	e003      	b.n	80017ec <LoopCopyDataInit>

080017e4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80017e4:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80017e6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80017e8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80017ea:	3104      	adds	r1, #4

080017ec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80017ec:	480a      	ldr	r0, [pc, #40]	; (8001818 <LoopForever+0xa>)
	ldr	r3, =_edata
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <LoopForever+0xe>)
	adds	r2, r0, r1
 80017f0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80017f2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80017f4:	d3f6      	bcc.n	80017e4 <CopyDataInit>
	ldr	r2, =_sbss
 80017f6:	4a0a      	ldr	r2, [pc, #40]	; (8001820 <LoopForever+0x12>)
	b	LoopFillZerobss
 80017f8:	e002      	b.n	8001800 <LoopFillZerobss>

080017fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80017fa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80017fc:	f842 3b04 	str.w	r3, [r2], #4

08001800 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001800:	4b08      	ldr	r3, [pc, #32]	; (8001824 <LoopForever+0x16>)
	cmp	r2, r3
 8001802:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001804:	d3f9      	bcc.n	80017fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001806:	f006 f9a9 	bl	8007b5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800180a:	f7ff fa05 	bl	8000c18 <main>

0800180e <LoopForever>:

LoopForever:
    b LoopForever
 800180e:	e7fe      	b.n	800180e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001810:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001814:	08008458 	.word	0x08008458
	ldr	r0, =_sdata
 8001818:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800181c:	20000044 	.word	0x20000044
	ldr	r2, =_sbss
 8001820:	20000044 	.word	0x20000044
	ldr	r3, = _ebss
 8001824:	2000a7d4 	.word	0x2000a7d4

08001828 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001828:	e7fe      	b.n	8001828 <ADC1_IRQHandler>

0800182a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001830:	2300      	movs	r3, #0
 8001832:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001834:	2003      	movs	r0, #3
 8001836:	f000 f961 	bl	8001afc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800183a:	200f      	movs	r0, #15
 800183c:	f000 f80e 	bl	800185c <HAL_InitTick>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d002      	beq.n	800184c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	71fb      	strb	r3, [r7, #7]
 800184a:	e001      	b.n	8001850 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800184c:	f7ff fd84 	bl	8001358 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001850:	79fb      	ldrb	r3, [r7, #7]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001864:	2300      	movs	r3, #0
 8001866:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001868:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <HAL_InitTick+0x6c>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d023      	beq.n	80018b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001870:	4b16      	ldr	r3, [pc, #88]	; (80018cc <HAL_InitTick+0x70>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <HAL_InitTick+0x6c>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	4619      	mov	r1, r3
 800187a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800187e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001882:	fbb2 f3f3 	udiv	r3, r2, r3
 8001886:	4618      	mov	r0, r3
 8001888:	f000 f96d 	bl	8001b66 <HAL_SYSTICK_Config>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10f      	bne.n	80018b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b0f      	cmp	r3, #15
 8001896:	d809      	bhi.n	80018ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001898:	2200      	movs	r2, #0
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	f04f 30ff 	mov.w	r0, #4294967295
 80018a0:	f000 f937 	bl	8001b12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018a4:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <HAL_InitTick+0x74>)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	e007      	b.n	80018bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	73fb      	strb	r3, [r7, #15]
 80018b0:	e004      	b.n	80018bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	73fb      	strb	r3, [r7, #15]
 80018b6:	e001      	b.n	80018bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	2000001c 	.word	0x2000001c
 80018cc:	20000014 	.word	0x20000014
 80018d0:	20000018 	.word	0x20000018

080018d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_IncTick+0x20>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	461a      	mov	r2, r3
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_IncTick+0x24>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4413      	add	r3, r2
 80018e4:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <HAL_IncTick+0x24>)
 80018e6:	6013      	str	r3, [r2, #0]
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	2000001c 	.word	0x2000001c
 80018f8:	2000a790 	.word	0x2000a790

080018fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001900:	4b03      	ldr	r3, [pc, #12]	; (8001910 <HAL_GetTick+0x14>)
 8001902:	681b      	ldr	r3, [r3, #0]
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	2000a790 	.word	0x2000a790

08001914 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800191c:	f7ff ffee 	bl	80018fc <HAL_GetTick>
 8001920:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800192c:	d005      	beq.n	800193a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800192e:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <HAL_Delay+0x44>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	461a      	mov	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4413      	add	r3, r2
 8001938:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800193a:	bf00      	nop
 800193c:	f7ff ffde 	bl	80018fc <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	429a      	cmp	r2, r3
 800194a:	d8f7      	bhi.n	800193c <HAL_Delay+0x28>
  {
  }
}
 800194c:	bf00      	nop
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	2000001c 	.word	0x2000001c

0800195c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <__NVIC_SetPriorityGrouping+0x44>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001978:	4013      	ands	r3, r2
 800197a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001984:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800198c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800198e:	4a04      	ldr	r2, [pc, #16]	; (80019a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	60d3      	str	r3, [r2, #12]
}
 8001994:	bf00      	nop
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a8:	4b04      	ldr	r3, [pc, #16]	; (80019bc <__NVIC_GetPriorityGrouping+0x18>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	0a1b      	lsrs	r3, r3, #8
 80019ae:	f003 0307 	and.w	r3, r3, #7
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	db0b      	blt.n	80019ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	f003 021f 	and.w	r2, r3, #31
 80019d8:	4907      	ldr	r1, [pc, #28]	; (80019f8 <__NVIC_EnableIRQ+0x38>)
 80019da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019de:	095b      	lsrs	r3, r3, #5
 80019e0:	2001      	movs	r0, #1
 80019e2:	fa00 f202 	lsl.w	r2, r0, r2
 80019e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	e000e100 	.word	0xe000e100

080019fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	6039      	str	r1, [r7, #0]
 8001a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	db0a      	blt.n	8001a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	490c      	ldr	r1, [pc, #48]	; (8001a48 <__NVIC_SetPriority+0x4c>)
 8001a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1a:	0112      	lsls	r2, r2, #4
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	440b      	add	r3, r1
 8001a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a24:	e00a      	b.n	8001a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	4908      	ldr	r1, [pc, #32]	; (8001a4c <__NVIC_SetPriority+0x50>)
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	3b04      	subs	r3, #4
 8001a34:	0112      	lsls	r2, r2, #4
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	440b      	add	r3, r1
 8001a3a:	761a      	strb	r2, [r3, #24]
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	e000e100 	.word	0xe000e100
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b089      	sub	sp, #36	; 0x24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f1c3 0307 	rsb	r3, r3, #7
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	bf28      	it	cs
 8001a6e:	2304      	movcs	r3, #4
 8001a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	3304      	adds	r3, #4
 8001a76:	2b06      	cmp	r3, #6
 8001a78:	d902      	bls.n	8001a80 <NVIC_EncodePriority+0x30>
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3b03      	subs	r3, #3
 8001a7e:	e000      	b.n	8001a82 <NVIC_EncodePriority+0x32>
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a84:	f04f 32ff 	mov.w	r2, #4294967295
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43da      	mvns	r2, r3
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	401a      	ands	r2, r3
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a98:	f04f 31ff 	mov.w	r1, #4294967295
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa2:	43d9      	mvns	r1, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa8:	4313      	orrs	r3, r2
         );
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3724      	adds	r7, #36	; 0x24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
	...

08001ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ac8:	d301      	bcc.n	8001ace <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aca:	2301      	movs	r3, #1
 8001acc:	e00f      	b.n	8001aee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ace:	4a0a      	ldr	r2, [pc, #40]	; (8001af8 <SysTick_Config+0x40>)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ad6:	210f      	movs	r1, #15
 8001ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8001adc:	f7ff ff8e 	bl	80019fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae0:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <SysTick_Config+0x40>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ae6:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <SysTick_Config+0x40>)
 8001ae8:	2207      	movs	r2, #7
 8001aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	e000e010 	.word	0xe000e010

08001afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff ff29 	bl	800195c <__NVIC_SetPriorityGrouping>
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b086      	sub	sp, #24
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	4603      	mov	r3, r0
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
 8001b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b24:	f7ff ff3e 	bl	80019a4 <__NVIC_GetPriorityGrouping>
 8001b28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	68b9      	ldr	r1, [r7, #8]
 8001b2e:	6978      	ldr	r0, [r7, #20]
 8001b30:	f7ff ff8e 	bl	8001a50 <NVIC_EncodePriority>
 8001b34:	4602      	mov	r2, r0
 8001b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b3a:	4611      	mov	r1, r2
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff ff5d 	bl	80019fc <__NVIC_SetPriority>
}
 8001b42:	bf00      	nop
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	4603      	mov	r3, r0
 8001b52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff ff31 	bl	80019c0 <__NVIC_EnableIRQ>
}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b082      	sub	sp, #8
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff ffa2 	bl	8001ab8 <SysTick_Config>
 8001b74:	4603      	mov	r3, r0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e098      	b.n	8001cc4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	461a      	mov	r2, r3
 8001b98:	4b4d      	ldr	r3, [pc, #308]	; (8001cd0 <HAL_DMA_Init+0x150>)
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d80f      	bhi.n	8001bbe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	4b4b      	ldr	r3, [pc, #300]	; (8001cd4 <HAL_DMA_Init+0x154>)
 8001ba6:	4413      	add	r3, r2
 8001ba8:	4a4b      	ldr	r2, [pc, #300]	; (8001cd8 <HAL_DMA_Init+0x158>)
 8001baa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bae:	091b      	lsrs	r3, r3, #4
 8001bb0:	009a      	lsls	r2, r3, #2
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a48      	ldr	r2, [pc, #288]	; (8001cdc <HAL_DMA_Init+0x15c>)
 8001bba:	641a      	str	r2, [r3, #64]	; 0x40
 8001bbc:	e00e      	b.n	8001bdc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	4b46      	ldr	r3, [pc, #280]	; (8001ce0 <HAL_DMA_Init+0x160>)
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4a43      	ldr	r2, [pc, #268]	; (8001cd8 <HAL_DMA_Init+0x158>)
 8001bca:	fba2 2303 	umull	r2, r3, r2, r3
 8001bce:	091b      	lsrs	r3, r3, #4
 8001bd0:	009a      	lsls	r2, r3, #2
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a42      	ldr	r2, [pc, #264]	; (8001ce4 <HAL_DMA_Init+0x164>)
 8001bda:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2202      	movs	r2, #2
 8001be0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bf6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001c00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c36:	d039      	beq.n	8001cac <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	4a27      	ldr	r2, [pc, #156]	; (8001cdc <HAL_DMA_Init+0x15c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d11a      	bne.n	8001c78 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001c42:	4b29      	ldr	r3, [pc, #164]	; (8001ce8 <HAL_DMA_Init+0x168>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4a:	f003 031c 	and.w	r3, r3, #28
 8001c4e:	210f      	movs	r1, #15
 8001c50:	fa01 f303 	lsl.w	r3, r1, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	4924      	ldr	r1, [pc, #144]	; (8001ce8 <HAL_DMA_Init+0x168>)
 8001c58:	4013      	ands	r3, r2
 8001c5a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001c5c:	4b22      	ldr	r3, [pc, #136]	; (8001ce8 <HAL_DMA_Init+0x168>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6859      	ldr	r1, [r3, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c68:	f003 031c 	and.w	r3, r3, #28
 8001c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c70:	491d      	ldr	r1, [pc, #116]	; (8001ce8 <HAL_DMA_Init+0x168>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	600b      	str	r3, [r1, #0]
 8001c76:	e019      	b.n	8001cac <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001c78:	4b1c      	ldr	r3, [pc, #112]	; (8001cec <HAL_DMA_Init+0x16c>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c80:	f003 031c 	and.w	r3, r3, #28
 8001c84:	210f      	movs	r1, #15
 8001c86:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	4917      	ldr	r1, [pc, #92]	; (8001cec <HAL_DMA_Init+0x16c>)
 8001c8e:	4013      	ands	r3, r2
 8001c90:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001c92:	4b16      	ldr	r3, [pc, #88]	; (8001cec <HAL_DMA_Init+0x16c>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6859      	ldr	r1, [r3, #4]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	f003 031c 	and.w	r3, r3, #28
 8001ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca6:	4911      	ldr	r1, [pc, #68]	; (8001cec <HAL_DMA_Init+0x16c>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	40020407 	.word	0x40020407
 8001cd4:	bffdfff8 	.word	0xbffdfff8
 8001cd8:	cccccccd 	.word	0xcccccccd
 8001cdc:	40020000 	.word	0x40020000
 8001ce0:	bffdfbf8 	.word	0xbffdfbf8
 8001ce4:	40020400 	.word	0x40020400
 8001ce8:	400200a8 	.word	0x400200a8
 8001cec:	400204a8 	.word	0x400204a8

08001cf0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d008      	beq.n	8001d1a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2204      	movs	r2, #4
 8001d0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e022      	b.n	8001d60 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 020e 	bic.w	r2, r2, #14
 8001d28:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0201 	bic.w	r2, r2, #1
 8001d38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3e:	f003 021c 	and.w	r2, r3, #28
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	2101      	movs	r1, #1
 8001d48:	fa01 f202 	lsl.w	r2, r1, r2
 8001d4c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d74:	2300      	movs	r3, #0
 8001d76:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d005      	beq.n	8001d90 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2204      	movs	r2, #4
 8001d88:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	73fb      	strb	r3, [r7, #15]
 8001d8e:	e029      	b.n	8001de4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 020e 	bic.w	r2, r2, #14
 8001d9e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 0201 	bic.w	r2, r2, #1
 8001dae:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db4:	f003 021c 	and.w	r2, r3, #28
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	4798      	blx	r3
    }
  }
  return status;
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b084      	sub	sp, #16
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0a:	f003 031c 	and.w	r3, r3, #28
 8001e0e:	2204      	movs	r2, #4
 8001e10:	409a      	lsls	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4013      	ands	r3, r2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d026      	beq.n	8001e68 <HAL_DMA_IRQHandler+0x7a>
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d021      	beq.n	8001e68 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0320 	and.w	r3, r3, #32
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d107      	bne.n	8001e42 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 0204 	bic.w	r2, r2, #4
 8001e40:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e46:	f003 021c 	and.w	r2, r3, #28
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	2104      	movs	r1, #4
 8001e50:	fa01 f202 	lsl.w	r2, r1, r2
 8001e54:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d071      	beq.n	8001f42 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001e66:	e06c      	b.n	8001f42 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6c:	f003 031c 	and.w	r3, r3, #28
 8001e70:	2202      	movs	r2, #2
 8001e72:	409a      	lsls	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d02e      	beq.n	8001eda <HAL_DMA_IRQHandler+0xec>
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d029      	beq.n	8001eda <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0320 	and.w	r3, r3, #32
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d10b      	bne.n	8001eac <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f022 020a 	bic.w	r2, r2, #10
 8001ea2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb0:	f003 021c 	and.w	r2, r3, #28
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb8:	2102      	movs	r1, #2
 8001eba:	fa01 f202 	lsl.w	r2, r1, r2
 8001ebe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d038      	beq.n	8001f42 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001ed8:	e033      	b.n	8001f42 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	f003 031c 	and.w	r3, r3, #28
 8001ee2:	2208      	movs	r2, #8
 8001ee4:	409a      	lsls	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d02a      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x156>
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	f003 0308 	and.w	r3, r3, #8
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d025      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 020e 	bic.w	r2, r2, #14
 8001f06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0c:	f003 021c 	and.w	r2, r3, #28
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f14:	2101      	movs	r1, #1
 8001f16:	fa01 f202 	lsl.w	r2, r1, r2
 8001f1a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d004      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001f42:	bf00      	nop
 8001f44:	bf00      	nop
}
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001f5e:	4b2f      	ldr	r3, [pc, #188]	; (800201c <HAL_FLASH_Program+0xd0>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d101      	bne.n	8001f6a <HAL_FLASH_Program+0x1e>
 8001f66:	2302      	movs	r3, #2
 8001f68:	e053      	b.n	8002012 <HAL_FLASH_Program+0xc6>
 8001f6a:	4b2c      	ldr	r3, [pc, #176]	; (800201c <HAL_FLASH_Program+0xd0>)
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f70:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f74:	f000 f894 	bl	80020a0 <FLASH_WaitForLastOperation>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8001f7c:	7dfb      	ldrb	r3, [r7, #23]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d143      	bne.n	800200a <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001f82:	4b26      	ldr	r3, [pc, #152]	; (800201c <HAL_FLASH_Program+0xd0>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001f88:	4b25      	ldr	r3, [pc, #148]	; (8002020 <HAL_FLASH_Program+0xd4>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d009      	beq.n	8001fa8 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001f94:	4b22      	ldr	r3, [pc, #136]	; (8002020 <HAL_FLASH_Program+0xd4>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a21      	ldr	r2, [pc, #132]	; (8002020 <HAL_FLASH_Program+0xd4>)
 8001f9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f9e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001fa0:	4b1e      	ldr	r3, [pc, #120]	; (800201c <HAL_FLASH_Program+0xd0>)
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	771a      	strb	r2, [r3, #28]
 8001fa6:	e002      	b.n	8001fae <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001fa8:	4b1c      	ldr	r3, [pc, #112]	; (800201c <HAL_FLASH_Program+0xd0>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d107      	bne.n	8001fc4 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8001fb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fb8:	68b8      	ldr	r0, [r7, #8]
 8001fba:	f000 f8c9 	bl	8002150 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	e010      	b.n	8001fe6 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d002      	beq.n	8001fd0 <HAL_FLASH_Program+0x84>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d10a      	bne.n	8001fe6 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	68b8      	ldr	r0, [r7, #8]
 8001fd6:	f000 f8e1 	bl	800219c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d102      	bne.n	8001fe6 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8001fe0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001fe4:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001fe6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001fea:	f000 f859 	bl	80020a0 <FLASH_WaitForLastOperation>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d006      	beq.n	8002006 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8001ff8:	4b09      	ldr	r3, [pc, #36]	; (8002020 <HAL_FLASH_Program+0xd4>)
 8001ffa:	695a      	ldr	r2, [r3, #20]
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	4907      	ldr	r1, [pc, #28]	; (8002020 <HAL_FLASH_Program+0xd4>)
 8002002:	4013      	ands	r3, r2
 8002004:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002006:	f000 f9e1 	bl	80023cc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800200a:	4b04      	ldr	r3, [pc, #16]	; (800201c <HAL_FLASH_Program+0xd0>)
 800200c:	2200      	movs	r2, #0
 800200e:	701a      	strb	r2, [r3, #0]

  return status;
 8002010:	7dfb      	ldrb	r3, [r7, #23]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000020 	.word	0x20000020
 8002020:	40022000 	.word	0x40022000

08002024 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800202a:	2300      	movs	r3, #0
 800202c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800202e:	4b0b      	ldr	r3, [pc, #44]	; (800205c <HAL_FLASH_Unlock+0x38>)
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	2b00      	cmp	r3, #0
 8002034:	da0b      	bge.n	800204e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002036:	4b09      	ldr	r3, [pc, #36]	; (800205c <HAL_FLASH_Unlock+0x38>)
 8002038:	4a09      	ldr	r2, [pc, #36]	; (8002060 <HAL_FLASH_Unlock+0x3c>)
 800203a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800203c:	4b07      	ldr	r3, [pc, #28]	; (800205c <HAL_FLASH_Unlock+0x38>)
 800203e:	4a09      	ldr	r2, [pc, #36]	; (8002064 <HAL_FLASH_Unlock+0x40>)
 8002040:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002042:	4b06      	ldr	r3, [pc, #24]	; (800205c <HAL_FLASH_Unlock+0x38>)
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	2b00      	cmp	r3, #0
 8002048:	da01      	bge.n	800204e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800204e:	79fb      	ldrb	r3, [r7, #7]
}
 8002050:	4618      	mov	r0, r3
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	40022000 	.word	0x40022000
 8002060:	45670123 	.word	0x45670123
 8002064:	cdef89ab 	.word	0xcdef89ab

08002068 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800206c:	4b05      	ldr	r3, [pc, #20]	; (8002084 <HAL_FLASH_Lock+0x1c>)
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	4a04      	ldr	r2, [pc, #16]	; (8002084 <HAL_FLASH_Lock+0x1c>)
 8002072:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002076:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	40022000 	.word	0x40022000

08002088 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  *            @arg FLASH_FLAG_PEMPTY : FLASH Boot from not programmed flash (apply only for STM32L43x/STM32L44x devices)
  */
uint32_t HAL_FLASH_GetError(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800208c:	4b03      	ldr	r3, [pc, #12]	; (800209c <HAL_FLASH_GetError+0x14>)
 800208e:	685b      	ldr	r3, [r3, #4]
}
 8002090:	4618      	mov	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	20000020 	.word	0x20000020

080020a0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80020a8:	f7ff fc28 	bl	80018fc <HAL_GetTick>
 80020ac:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80020ae:	e00d      	b.n	80020cc <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b6:	d009      	beq.n	80020cc <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 80020b8:	f7ff fc20 	bl	80018fc <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d801      	bhi.n	80020cc <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e036      	b.n	800213a <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80020cc:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <FLASH_WaitForLastOperation+0xa4>)
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1eb      	bne.n	80020b0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80020d8:	4b1a      	ldr	r3, [pc, #104]	; (8002144 <FLASH_WaitForLastOperation+0xa4>)
 80020da:	691a      	ldr	r2, [r3, #16]
 80020dc:	4b1a      	ldr	r3, [pc, #104]	; (8002148 <FLASH_WaitForLastOperation+0xa8>)
 80020de:	4013      	ands	r3, r2
 80020e0:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d01e      	beq.n	8002126 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80020e8:	4b18      	ldr	r3, [pc, #96]	; (800214c <FLASH_WaitForLastOperation+0xac>)
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	4a16      	ldr	r2, [pc, #88]	; (800214c <FLASH_WaitForLastOperation+0xac>)
 80020f2:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d007      	beq.n	800210e <FLASH_WaitForLastOperation+0x6e>
 80020fe:	4b11      	ldr	r3, [pc, #68]	; (8002144 <FLASH_WaitForLastOperation+0xa4>)
 8002100:	699a      	ldr	r2, [r3, #24]
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002108:	490e      	ldr	r1, [pc, #56]	; (8002144 <FLASH_WaitForLastOperation+0xa4>)
 800210a:	4313      	orrs	r3, r2
 800210c:	618b      	str	r3, [r1, #24]
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d004      	beq.n	8002122 <FLASH_WaitForLastOperation+0x82>
 8002118:	4a0a      	ldr	r2, [pc, #40]	; (8002144 <FLASH_WaitForLastOperation+0xa4>)
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002120:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e009      	b.n	800213a <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002126:	4b07      	ldr	r3, [pc, #28]	; (8002144 <FLASH_WaitForLastOperation+0xa4>)
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d002      	beq.n	8002138 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002132:	4b04      	ldr	r3, [pc, #16]	; (8002144 <FLASH_WaitForLastOperation+0xa4>)
 8002134:	2201      	movs	r2, #1
 8002136:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40022000 	.word	0x40022000
 8002148:	0002c3fa 	.word	0x0002c3fa
 800214c:	20000020 	.word	0x20000020

08002150 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800215c:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <FLASH_Program_DoubleWord+0x48>)
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	4a0d      	ldr	r2, [pc, #52]	; (8002198 <FLASH_Program_DoubleWord+0x48>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800216e:	f3bf 8f6f 	isb	sy
}
 8002172:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8002174:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002178:	f04f 0200 	mov.w	r2, #0
 800217c:	f04f 0300 	mov.w	r3, #0
 8002180:	000a      	movs	r2, r1
 8002182:	2300      	movs	r3, #0
 8002184:	68f9      	ldr	r1, [r7, #12]
 8002186:	3104      	adds	r1, #4
 8002188:	4613      	mov	r3, r2
 800218a:	600b      	str	r3, [r1, #0]
}
 800218c:	bf00      	nop
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	40022000 	.word	0x40022000

0800219c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800219c:	b480      	push	{r7}
 800219e:	b089      	sub	sp, #36	; 0x24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80021a6:	2340      	movs	r3, #64	; 0x40
 80021a8:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80021b2:	4b14      	ldr	r3, [pc, #80]	; (8002204 <FLASH_Program_Fast+0x68>)
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	4a13      	ldr	r2, [pc, #76]	; (8002204 <FLASH_Program_Fast+0x68>)
 80021b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021bc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021be:	f3ef 8310 	mrs	r3, PRIMASK
 80021c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80021c4:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80021c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80021c8:	b672      	cpsid	i
}
 80021ca:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	3304      	adds	r3, #4
 80021d8:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	3304      	adds	r3, #4
 80021de:	617b      	str	r3, [r7, #20]
    row_index--;
 80021e0:	7ffb      	ldrb	r3, [r7, #31]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 80021e6:	7ffb      	ldrb	r3, [r7, #31]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1ef      	bne.n	80021cc <FLASH_Program_Fast+0x30>
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	f383 8810 	msr	PRIMASK, r3
}
 80021f6:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 80021f8:	bf00      	nop
 80021fa:	3724      	adds	r7, #36	; 0x24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	40022000 	.word	0x40022000

08002208 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002212:	4b4b      	ldr	r3, [pc, #300]	; (8002340 <HAL_FLASHEx_Erase+0x138>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d101      	bne.n	800221e <HAL_FLASHEx_Erase+0x16>
 800221a:	2302      	movs	r3, #2
 800221c:	e08b      	b.n	8002336 <HAL_FLASHEx_Erase+0x12e>
 800221e:	4b48      	ldr	r3, [pc, #288]	; (8002340 <HAL_FLASHEx_Erase+0x138>)
 8002220:	2201      	movs	r2, #1
 8002222:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002224:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002228:	f7ff ff3a 	bl	80020a0 <FLASH_WaitForLastOperation>
 800222c:	4603      	mov	r3, r0
 800222e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002230:	7bfb      	ldrb	r3, [r7, #15]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d17b      	bne.n	800232e <HAL_FLASHEx_Erase+0x126>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002236:	4b42      	ldr	r3, [pc, #264]	; (8002340 <HAL_FLASHEx_Erase+0x138>)
 8002238:	2200      	movs	r2, #0
 800223a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800223c:	4b41      	ldr	r3, [pc, #260]	; (8002344 <HAL_FLASHEx_Erase+0x13c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002244:	2b00      	cmp	r3, #0
 8002246:	d019      	beq.n	800227c <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002248:	4b3e      	ldr	r3, [pc, #248]	; (8002344 <HAL_FLASHEx_Erase+0x13c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a3d      	ldr	r2, [pc, #244]	; (8002344 <HAL_FLASHEx_Erase+0x13c>)
 800224e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002252:	6013      	str	r3, [r2, #0]

      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002254:	4b3b      	ldr	r3, [pc, #236]	; (8002344 <HAL_FLASHEx_Erase+0x13c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800225c:	2b00      	cmp	r3, #0
 800225e:	d009      	beq.n	8002274 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8002260:	4b38      	ldr	r3, [pc, #224]	; (8002344 <HAL_FLASHEx_Erase+0x13c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a37      	ldr	r2, [pc, #220]	; (8002344 <HAL_FLASHEx_Erase+0x13c>)
 8002266:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800226a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800226c:	4b34      	ldr	r3, [pc, #208]	; (8002340 <HAL_FLASHEx_Erase+0x138>)
 800226e:	2203      	movs	r2, #3
 8002270:	771a      	strb	r2, [r3, #28]
 8002272:	e016      	b.n	80022a2 <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8002274:	4b32      	ldr	r3, [pc, #200]	; (8002340 <HAL_FLASHEx_Erase+0x138>)
 8002276:	2201      	movs	r2, #1
 8002278:	771a      	strb	r2, [r3, #28]
 800227a:	e012      	b.n	80022a2 <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800227c:	4b31      	ldr	r3, [pc, #196]	; (8002344 <HAL_FLASHEx_Erase+0x13c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002284:	2b00      	cmp	r3, #0
 8002286:	d009      	beq.n	800229c <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002288:	4b2e      	ldr	r3, [pc, #184]	; (8002344 <HAL_FLASHEx_Erase+0x13c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a2d      	ldr	r2, [pc, #180]	; (8002344 <HAL_FLASHEx_Erase+0x13c>)
 800228e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002292:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002294:	4b2a      	ldr	r3, [pc, #168]	; (8002340 <HAL_FLASHEx_Erase+0x138>)
 8002296:	2202      	movs	r2, #2
 8002298:	771a      	strb	r2, [r3, #28]
 800229a:	e002      	b.n	80022a2 <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800229c:	4b28      	ldr	r3, [pc, #160]	; (8002340 <HAL_FLASHEx_Erase+0x138>)
 800229e:	2200      	movs	r2, #0
 80022a0:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d111      	bne.n	80022ce <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 f84a 	bl	8002348 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022b8:	f7ff fef2 	bl	80020a0 <FLASH_WaitForLastOperation>
 80022bc:	4603      	mov	r3, r0
 80022be:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80022c0:	4b20      	ldr	r3, [pc, #128]	; (8002344 <HAL_FLASHEx_Erase+0x13c>)
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	4a1f      	ldr	r2, [pc, #124]	; (8002344 <HAL_FLASHEx_Erase+0x13c>)
 80022c6:	f023 0304 	bic.w	r3, r3, #4
 80022ca:	6153      	str	r3, [r2, #20]
 80022cc:	e02d      	b.n	800232a <HAL_FLASHEx_Erase+0x122>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	f04f 32ff 	mov.w	r2, #4294967295
 80022d4:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	e01d      	b.n	800231a <HAL_FLASHEx_Erase+0x112>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	4619      	mov	r1, r3
 80022e4:	68b8      	ldr	r0, [r7, #8]
 80022e6:	f000 f84d 	bl	8002384 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022ea:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022ee:	f7ff fed7 	bl	80020a0 <FLASH_WaitForLastOperation>
 80022f2:	4603      	mov	r3, r0
 80022f4:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80022f6:	4b13      	ldr	r3, [pc, #76]	; (8002344 <HAL_FLASHEx_Erase+0x13c>)
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	4a12      	ldr	r2, [pc, #72]	; (8002344 <HAL_FLASHEx_Erase+0x13c>)
 80022fc:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8002300:	f023 0302 	bic.w	r3, r3, #2
 8002304:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8002306:	7bfb      	ldrb	r3, [r7, #15]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_FLASHEx_Erase+0x10c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	601a      	str	r2, [r3, #0]
          break;
 8002312:	e00a      	b.n	800232a <HAL_FLASHEx_Erase+0x122>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	3301      	adds	r3, #1
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	4413      	add	r3, r2
 8002324:	68ba      	ldr	r2, [r7, #8]
 8002326:	429a      	cmp	r2, r3
 8002328:	d3d9      	bcc.n	80022de <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800232a:	f000 f84f 	bl	80023cc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800232e:	4b04      	ldr	r3, [pc, #16]	; (8002340 <HAL_FLASHEx_Erase+0x138>)
 8002330:	2200      	movs	r2, #0
 8002332:	701a      	strb	r2, [r3, #0]

  return status;
 8002334:	7bfb      	ldrb	r3, [r7, #15]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	20000020 	.word	0x20000020
 8002344:	40022000 	.word	0x40022000

08002348 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d005      	beq.n	8002366 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800235a:	4b09      	ldr	r3, [pc, #36]	; (8002380 <FLASH_MassErase+0x38>)
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	4a08      	ldr	r2, [pc, #32]	; (8002380 <FLASH_MassErase+0x38>)
 8002360:	f043 0304 	orr.w	r3, r3, #4
 8002364:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002366:	4b06      	ldr	r3, [pc, #24]	; (8002380 <FLASH_MassErase+0x38>)
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	4a05      	ldr	r2, [pc, #20]	; (8002380 <FLASH_MassErase+0x38>)
 800236c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002370:	6153      	str	r3, [r2, #20]
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40022000 	.word	0x40022000

08002384 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800238e:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <FLASH_PageErase+0x44>)
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800239e:	490a      	ldr	r1, [pc, #40]	; (80023c8 <FLASH_PageErase+0x44>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80023a4:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <FLASH_PageErase+0x44>)
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	4a07      	ldr	r2, [pc, #28]	; (80023c8 <FLASH_PageErase+0x44>)
 80023aa:	f043 0302 	orr.w	r3, r3, #2
 80023ae:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80023b0:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <FLASH_PageErase+0x44>)
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	4a04      	ldr	r2, [pc, #16]	; (80023c8 <FLASH_PageErase+0x44>)
 80023b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ba:	6153      	str	r3, [r2, #20]
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	40022000 	.word	0x40022000

080023cc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80023d2:	4b1e      	ldr	r3, [pc, #120]	; (800244c <FLASH_FlushCaches+0x80>)
 80023d4:	7f1b      	ldrb	r3, [r3, #28]
 80023d6:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80023d8:	79fb      	ldrb	r3, [r7, #7]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d002      	beq.n	80023e4 <FLASH_FlushCaches+0x18>
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	2b03      	cmp	r3, #3
 80023e2:	d111      	bne.n	8002408 <FLASH_FlushCaches+0x3c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80023e4:	4b1a      	ldr	r3, [pc, #104]	; (8002450 <FLASH_FlushCaches+0x84>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a19      	ldr	r2, [pc, #100]	; (8002450 <FLASH_FlushCaches+0x84>)
 80023ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023ee:	6013      	str	r3, [r2, #0]
 80023f0:	4b17      	ldr	r3, [pc, #92]	; (8002450 <FLASH_FlushCaches+0x84>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a16      	ldr	r2, [pc, #88]	; (8002450 <FLASH_FlushCaches+0x84>)
 80023f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023fa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023fc:	4b14      	ldr	r3, [pc, #80]	; (8002450 <FLASH_FlushCaches+0x84>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a13      	ldr	r2, [pc, #76]	; (8002450 <FLASH_FlushCaches+0x84>)
 8002402:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002406:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8002408:	79fb      	ldrb	r3, [r7, #7]
 800240a:	2b02      	cmp	r3, #2
 800240c:	d002      	beq.n	8002414 <FLASH_FlushCaches+0x48>
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	2b03      	cmp	r3, #3
 8002412:	d111      	bne.n	8002438 <FLASH_FlushCaches+0x6c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002414:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <FLASH_FlushCaches+0x84>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a0d      	ldr	r2, [pc, #52]	; (8002450 <FLASH_FlushCaches+0x84>)
 800241a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800241e:	6013      	str	r3, [r2, #0]
 8002420:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <FLASH_FlushCaches+0x84>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a0a      	ldr	r2, [pc, #40]	; (8002450 <FLASH_FlushCaches+0x84>)
 8002426:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800242a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800242c:	4b08      	ldr	r3, [pc, #32]	; (8002450 <FLASH_FlushCaches+0x84>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a07      	ldr	r2, [pc, #28]	; (8002450 <FLASH_FlushCaches+0x84>)
 8002432:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002436:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002438:	4b04      	ldr	r3, [pc, #16]	; (800244c <FLASH_FlushCaches+0x80>)
 800243a:	2200      	movs	r2, #0
 800243c:	771a      	strb	r2, [r3, #28]
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	20000020 	.word	0x20000020
 8002450:	40022000 	.word	0x40022000

08002454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002454:	b480      	push	{r7}
 8002456:	b087      	sub	sp, #28
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002462:	e154      	b.n	800270e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	2101      	movs	r1, #1
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	fa01 f303 	lsl.w	r3, r1, r3
 8002470:	4013      	ands	r3, r2
 8002472:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 8146 	beq.w	8002708 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d00b      	beq.n	800249c <HAL_GPIO_Init+0x48>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b02      	cmp	r3, #2
 800248a:	d007      	beq.n	800249c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002490:	2b11      	cmp	r3, #17
 8002492:	d003      	beq.n	800249c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b12      	cmp	r3, #18
 800249a:	d130      	bne.n	80024fe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	2203      	movs	r2, #3
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	4013      	ands	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024d2:	2201      	movs	r2, #1
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43db      	mvns	r3, r3
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4013      	ands	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	091b      	lsrs	r3, r3, #4
 80024e8:	f003 0201 	and.w	r2, r3, #1
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	2203      	movs	r2, #3
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43db      	mvns	r3, r3
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	4013      	ands	r3, r2
 8002514:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	4313      	orrs	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d003      	beq.n	800253e <HAL_GPIO_Init+0xea>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2b12      	cmp	r3, #18
 800253c:	d123      	bne.n	8002586 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	08da      	lsrs	r2, r3, #3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3208      	adds	r2, #8
 8002546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800254a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	220f      	movs	r2, #15
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43db      	mvns	r3, r3
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	4013      	ands	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	691a      	ldr	r2, [r3, #16]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	4313      	orrs	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	08da      	lsrs	r2, r3, #3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3208      	adds	r2, #8
 8002580:	6939      	ldr	r1, [r7, #16]
 8002582:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	2203      	movs	r2, #3
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	43db      	mvns	r3, r3
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	4013      	ands	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f003 0203 	and.w	r2, r3, #3
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 80a0 	beq.w	8002708 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025c8:	4b58      	ldr	r3, [pc, #352]	; (800272c <HAL_GPIO_Init+0x2d8>)
 80025ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025cc:	4a57      	ldr	r2, [pc, #348]	; (800272c <HAL_GPIO_Init+0x2d8>)
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	6613      	str	r3, [r2, #96]	; 0x60
 80025d4:	4b55      	ldr	r3, [pc, #340]	; (800272c <HAL_GPIO_Init+0x2d8>)
 80025d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	60bb      	str	r3, [r7, #8]
 80025de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025e0:	4a53      	ldr	r2, [pc, #332]	; (8002730 <HAL_GPIO_Init+0x2dc>)
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	089b      	lsrs	r3, r3, #2
 80025e6:	3302      	adds	r3, #2
 80025e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f003 0303 	and.w	r3, r3, #3
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	220f      	movs	r2, #15
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4013      	ands	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800260a:	d019      	beq.n	8002640 <HAL_GPIO_Init+0x1ec>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a49      	ldr	r2, [pc, #292]	; (8002734 <HAL_GPIO_Init+0x2e0>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d013      	beq.n	800263c <HAL_GPIO_Init+0x1e8>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a48      	ldr	r2, [pc, #288]	; (8002738 <HAL_GPIO_Init+0x2e4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d00d      	beq.n	8002638 <HAL_GPIO_Init+0x1e4>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a47      	ldr	r2, [pc, #284]	; (800273c <HAL_GPIO_Init+0x2e8>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d007      	beq.n	8002634 <HAL_GPIO_Init+0x1e0>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a46      	ldr	r2, [pc, #280]	; (8002740 <HAL_GPIO_Init+0x2ec>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d101      	bne.n	8002630 <HAL_GPIO_Init+0x1dc>
 800262c:	2304      	movs	r3, #4
 800262e:	e008      	b.n	8002642 <HAL_GPIO_Init+0x1ee>
 8002630:	2307      	movs	r3, #7
 8002632:	e006      	b.n	8002642 <HAL_GPIO_Init+0x1ee>
 8002634:	2303      	movs	r3, #3
 8002636:	e004      	b.n	8002642 <HAL_GPIO_Init+0x1ee>
 8002638:	2302      	movs	r3, #2
 800263a:	e002      	b.n	8002642 <HAL_GPIO_Init+0x1ee>
 800263c:	2301      	movs	r3, #1
 800263e:	e000      	b.n	8002642 <HAL_GPIO_Init+0x1ee>
 8002640:	2300      	movs	r3, #0
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	f002 0203 	and.w	r2, r2, #3
 8002648:	0092      	lsls	r2, r2, #2
 800264a:	4093      	lsls	r3, r2
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	4313      	orrs	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002652:	4937      	ldr	r1, [pc, #220]	; (8002730 <HAL_GPIO_Init+0x2dc>)
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	089b      	lsrs	r3, r3, #2
 8002658:	3302      	adds	r3, #2
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002660:	4b38      	ldr	r3, [pc, #224]	; (8002744 <HAL_GPIO_Init+0x2f0>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	43db      	mvns	r3, r3
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	4013      	ands	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	4313      	orrs	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002684:	4a2f      	ldr	r2, [pc, #188]	; (8002744 <HAL_GPIO_Init+0x2f0>)
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800268a:	4b2e      	ldr	r3, [pc, #184]	; (8002744 <HAL_GPIO_Init+0x2f0>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	43db      	mvns	r3, r3
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	4013      	ands	r3, r2
 8002698:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026ae:	4a25      	ldr	r2, [pc, #148]	; (8002744 <HAL_GPIO_Init+0x2f0>)
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026b4:	4b23      	ldr	r3, [pc, #140]	; (8002744 <HAL_GPIO_Init+0x2f0>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	43db      	mvns	r3, r3
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	4013      	ands	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026d8:	4a1a      	ldr	r2, [pc, #104]	; (8002744 <HAL_GPIO_Init+0x2f0>)
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026de:	4b19      	ldr	r3, [pc, #100]	; (8002744 <HAL_GPIO_Init+0x2f0>)
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	43db      	mvns	r3, r3
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	4013      	ands	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4313      	orrs	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002702:	4a10      	ldr	r2, [pc, #64]	; (8002744 <HAL_GPIO_Init+0x2f0>)
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	3301      	adds	r3, #1
 800270c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	fa22 f303 	lsr.w	r3, r2, r3
 8002718:	2b00      	cmp	r3, #0
 800271a:	f47f aea3 	bne.w	8002464 <HAL_GPIO_Init+0x10>
  }
}
 800271e:	bf00      	nop
 8002720:	bf00      	nop
 8002722:	371c      	adds	r7, #28
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	40021000 	.word	0x40021000
 8002730:	40010000 	.word	0x40010000
 8002734:	48000400 	.word	0x48000400
 8002738:	48000800 	.word	0x48000800
 800273c:	48000c00 	.word	0x48000c00
 8002740:	48001000 	.word	0x48001000
 8002744:	40010400 	.word	0x40010400

08002748 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691a      	ldr	r2, [r3, #16]
 8002758:	887b      	ldrh	r3, [r7, #2]
 800275a:	4013      	ands	r3, r2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d002      	beq.n	8002766 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002760:	2301      	movs	r3, #1
 8002762:	73fb      	strb	r3, [r7, #15]
 8002764:	e001      	b.n	800276a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002766:	2300      	movs	r3, #0
 8002768:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800276a:	7bfb      	ldrb	r3, [r7, #15]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	460b      	mov	r3, r1
 8002782:	807b      	strh	r3, [r7, #2]
 8002784:	4613      	mov	r3, r2
 8002786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002788:	787b      	ldrb	r3, [r7, #1]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800278e:	887a      	ldrh	r2, [r7, #2]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002794:	e002      	b.n	800279c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002796:	887a      	ldrh	r2, [r7, #2]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80027ac:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	40007000 	.word	0x40007000

080027c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027d2:	d130      	bne.n	8002836 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80027d4:	4b23      	ldr	r3, [pc, #140]	; (8002864 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027e0:	d038      	beq.n	8002854 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027e2:	4b20      	ldr	r3, [pc, #128]	; (8002864 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027ea:	4a1e      	ldr	r2, [pc, #120]	; (8002864 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027f2:	4b1d      	ldr	r3, [pc, #116]	; (8002868 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2232      	movs	r2, #50	; 0x32
 80027f8:	fb02 f303 	mul.w	r3, r2, r3
 80027fc:	4a1b      	ldr	r2, [pc, #108]	; (800286c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002802:	0c9b      	lsrs	r3, r3, #18
 8002804:	3301      	adds	r3, #1
 8002806:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002808:	e002      	b.n	8002810 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	3b01      	subs	r3, #1
 800280e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002810:	4b14      	ldr	r3, [pc, #80]	; (8002864 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800281c:	d102      	bne.n	8002824 <HAL_PWREx_ControlVoltageScaling+0x60>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1f2      	bne.n	800280a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002824:	4b0f      	ldr	r3, [pc, #60]	; (8002864 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800282c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002830:	d110      	bne.n	8002854 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e00f      	b.n	8002856 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002836:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800283e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002842:	d007      	beq.n	8002854 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002844:	4b07      	ldr	r3, [pc, #28]	; (8002864 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800284c:	4a05      	ldr	r2, [pc, #20]	; (8002864 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800284e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002852:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	40007000 	.word	0x40007000
 8002868:	20000014 	.word	0x20000014
 800286c:	431bde83 	.word	0x431bde83

08002870 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b088      	sub	sp, #32
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d102      	bne.n	8002884 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	f000 bc11 	b.w	80030a6 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002884:	4ba0      	ldr	r3, [pc, #640]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 030c 	and.w	r3, r3, #12
 800288c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800288e:	4b9e      	ldr	r3, [pc, #632]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0310 	and.w	r3, r3, #16
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 80e4 	beq.w	8002a6e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d007      	beq.n	80028bc <HAL_RCC_OscConfig+0x4c>
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	2b0c      	cmp	r3, #12
 80028b0:	f040 808b 	bne.w	80029ca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	f040 8087 	bne.w	80029ca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028bc:	4b92      	ldr	r3, [pc, #584]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d005      	beq.n	80028d4 <HAL_RCC_OscConfig+0x64>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e3e8      	b.n	80030a6 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a1a      	ldr	r2, [r3, #32]
 80028d8:	4b8b      	ldr	r3, [pc, #556]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0308 	and.w	r3, r3, #8
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d004      	beq.n	80028ee <HAL_RCC_OscConfig+0x7e>
 80028e4:	4b88      	ldr	r3, [pc, #544]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028ec:	e005      	b.n	80028fa <HAL_RCC_OscConfig+0x8a>
 80028ee:	4b86      	ldr	r3, [pc, #536]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 80028f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028f4:	091b      	lsrs	r3, r3, #4
 80028f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d223      	bcs.n	8002946 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	4618      	mov	r0, r3
 8002904:	f000 fd7a 	bl	80033fc <RCC_SetFlashLatencyFromMSIRange>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e3c9      	b.n	80030a6 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002912:	4b7d      	ldr	r3, [pc, #500]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a7c      	ldr	r2, [pc, #496]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 8002918:	f043 0308 	orr.w	r3, r3, #8
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	4b7a      	ldr	r3, [pc, #488]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	4977      	ldr	r1, [pc, #476]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 800292c:	4313      	orrs	r3, r2
 800292e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002930:	4b75      	ldr	r3, [pc, #468]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	021b      	lsls	r3, r3, #8
 800293e:	4972      	ldr	r1, [pc, #456]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 8002940:	4313      	orrs	r3, r2
 8002942:	604b      	str	r3, [r1, #4]
 8002944:	e025      	b.n	8002992 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002946:	4b70      	ldr	r3, [pc, #448]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a6f      	ldr	r2, [pc, #444]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 800294c:	f043 0308 	orr.w	r3, r3, #8
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	4b6d      	ldr	r3, [pc, #436]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	496a      	ldr	r1, [pc, #424]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 8002960:	4313      	orrs	r3, r2
 8002962:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002964:	4b68      	ldr	r3, [pc, #416]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	021b      	lsls	r3, r3, #8
 8002972:	4965      	ldr	r1, [pc, #404]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 8002974:	4313      	orrs	r3, r2
 8002976:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d109      	bne.n	8002992 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	4618      	mov	r0, r3
 8002984:	f000 fd3a 	bl	80033fc <RCC_SetFlashLatencyFromMSIRange>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e389      	b.n	80030a6 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002992:	f000 fc6f 	bl	8003274 <HAL_RCC_GetSysClockFreq>
 8002996:	4602      	mov	r2, r0
 8002998:	4b5b      	ldr	r3, [pc, #364]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	091b      	lsrs	r3, r3, #4
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	495a      	ldr	r1, [pc, #360]	; (8002b0c <HAL_RCC_OscConfig+0x29c>)
 80029a4:	5ccb      	ldrb	r3, [r1, r3]
 80029a6:	f003 031f 	and.w	r3, r3, #31
 80029aa:	fa22 f303 	lsr.w	r3, r2, r3
 80029ae:	4a58      	ldr	r2, [pc, #352]	; (8002b10 <HAL_RCC_OscConfig+0x2a0>)
 80029b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029b2:	4b58      	ldr	r3, [pc, #352]	; (8002b14 <HAL_RCC_OscConfig+0x2a4>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fe ff50 	bl	800185c <HAL_InitTick>
 80029bc:	4603      	mov	r3, r0
 80029be:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d052      	beq.n	8002a6c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
 80029c8:	e36d      	b.n	80030a6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d032      	beq.n	8002a38 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029d2:	4b4d      	ldr	r3, [pc, #308]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a4c      	ldr	r2, [pc, #304]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029de:	f7fe ff8d 	bl	80018fc <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029e6:	f7fe ff89 	bl	80018fc <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e356      	b.n	80030a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029f8:	4b43      	ldr	r3, [pc, #268]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0f0      	beq.n	80029e6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a04:	4b40      	ldr	r3, [pc, #256]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a3f      	ldr	r2, [pc, #252]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 8002a0a:	f043 0308 	orr.w	r3, r3, #8
 8002a0e:	6013      	str	r3, [r2, #0]
 8002a10:	4b3d      	ldr	r3, [pc, #244]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	493a      	ldr	r1, [pc, #232]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a22:	4b39      	ldr	r3, [pc, #228]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	021b      	lsls	r3, r3, #8
 8002a30:	4935      	ldr	r1, [pc, #212]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	604b      	str	r3, [r1, #4]
 8002a36:	e01a      	b.n	8002a6e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a38:	4b33      	ldr	r3, [pc, #204]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a32      	ldr	r2, [pc, #200]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 8002a3e:	f023 0301 	bic.w	r3, r3, #1
 8002a42:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a44:	f7fe ff5a 	bl	80018fc <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a4c:	f7fe ff56 	bl	80018fc <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e323      	b.n	80030a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a5e:	4b2a      	ldr	r3, [pc, #168]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f0      	bne.n	8002a4c <HAL_RCC_OscConfig+0x1dc>
 8002a6a:	e000      	b.n	8002a6e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a6c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d073      	beq.n	8002b62 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d005      	beq.n	8002a8c <HAL_RCC_OscConfig+0x21c>
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	2b0c      	cmp	r3, #12
 8002a84:	d10e      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	2b03      	cmp	r3, #3
 8002a8a:	d10b      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a8c:	4b1e      	ldr	r3, [pc, #120]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d063      	beq.n	8002b60 <HAL_RCC_OscConfig+0x2f0>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d15f      	bne.n	8002b60 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e300      	b.n	80030a6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aac:	d106      	bne.n	8002abc <HAL_RCC_OscConfig+0x24c>
 8002aae:	4b16      	ldr	r3, [pc, #88]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a15      	ldr	r2, [pc, #84]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 8002ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	e01d      	b.n	8002af8 <HAL_RCC_OscConfig+0x288>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ac4:	d10c      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x270>
 8002ac6:	4b10      	ldr	r3, [pc, #64]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a0f      	ldr	r2, [pc, #60]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 8002acc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	4b0d      	ldr	r3, [pc, #52]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a0c      	ldr	r2, [pc, #48]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 8002ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	e00b      	b.n	8002af8 <HAL_RCC_OscConfig+0x288>
 8002ae0:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a08      	ldr	r2, [pc, #32]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 8002ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aea:	6013      	str	r3, [r2, #0]
 8002aec:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a05      	ldr	r2, [pc, #20]	; (8002b08 <HAL_RCC_OscConfig+0x298>)
 8002af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002af6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d01b      	beq.n	8002b38 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b00:	f7fe fefc 	bl	80018fc <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b06:	e010      	b.n	8002b2a <HAL_RCC_OscConfig+0x2ba>
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	080083dc 	.word	0x080083dc
 8002b10:	20000014 	.word	0x20000014
 8002b14:	20000018 	.word	0x20000018
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b18:	f7fe fef0 	bl	80018fc <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b64      	cmp	r3, #100	; 0x64
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e2bd      	b.n	80030a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b2a:	4baf      	ldr	r3, [pc, #700]	; (8002de8 <HAL_RCC_OscConfig+0x578>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0f0      	beq.n	8002b18 <HAL_RCC_OscConfig+0x2a8>
 8002b36:	e014      	b.n	8002b62 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b38:	f7fe fee0 	bl	80018fc <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b40:	f7fe fedc 	bl	80018fc <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b64      	cmp	r3, #100	; 0x64
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e2a9      	b.n	80030a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b52:	4ba5      	ldr	r3, [pc, #660]	; (8002de8 <HAL_RCC_OscConfig+0x578>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1f0      	bne.n	8002b40 <HAL_RCC_OscConfig+0x2d0>
 8002b5e:	e000      	b.n	8002b62 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d060      	beq.n	8002c30 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d005      	beq.n	8002b80 <HAL_RCC_OscConfig+0x310>
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	2b0c      	cmp	r3, #12
 8002b78:	d119      	bne.n	8002bae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d116      	bne.n	8002bae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b80:	4b99      	ldr	r3, [pc, #612]	; (8002de8 <HAL_RCC_OscConfig+0x578>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <HAL_RCC_OscConfig+0x328>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e286      	b.n	80030a6 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b98:	4b93      	ldr	r3, [pc, #588]	; (8002de8 <HAL_RCC_OscConfig+0x578>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	061b      	lsls	r3, r3, #24
 8002ba6:	4990      	ldr	r1, [pc, #576]	; (8002de8 <HAL_RCC_OscConfig+0x578>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bac:	e040      	b.n	8002c30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d023      	beq.n	8002bfe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bb6:	4b8c      	ldr	r3, [pc, #560]	; (8002de8 <HAL_RCC_OscConfig+0x578>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a8b      	ldr	r2, [pc, #556]	; (8002de8 <HAL_RCC_OscConfig+0x578>)
 8002bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc2:	f7fe fe9b 	bl	80018fc <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bc8:	e008      	b.n	8002bdc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bca:	f7fe fe97 	bl	80018fc <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e264      	b.n	80030a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bdc:	4b82      	ldr	r3, [pc, #520]	; (8002de8 <HAL_RCC_OscConfig+0x578>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0f0      	beq.n	8002bca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be8:	4b7f      	ldr	r3, [pc, #508]	; (8002de8 <HAL_RCC_OscConfig+0x578>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	061b      	lsls	r3, r3, #24
 8002bf6:	497c      	ldr	r1, [pc, #496]	; (8002de8 <HAL_RCC_OscConfig+0x578>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	604b      	str	r3, [r1, #4]
 8002bfc:	e018      	b.n	8002c30 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bfe:	4b7a      	ldr	r3, [pc, #488]	; (8002de8 <HAL_RCC_OscConfig+0x578>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a79      	ldr	r2, [pc, #484]	; (8002de8 <HAL_RCC_OscConfig+0x578>)
 8002c04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0a:	f7fe fe77 	bl	80018fc <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c12:	f7fe fe73 	bl	80018fc <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e240      	b.n	80030a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c24:	4b70      	ldr	r3, [pc, #448]	; (8002de8 <HAL_RCC_OscConfig+0x578>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1f0      	bne.n	8002c12 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0308 	and.w	r3, r3, #8
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d03c      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d01c      	beq.n	8002c7e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c44:	4b68      	ldr	r3, [pc, #416]	; (8002de8 <HAL_RCC_OscConfig+0x578>)
 8002c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c4a:	4a67      	ldr	r2, [pc, #412]	; (8002de8 <HAL_RCC_OscConfig+0x578>)
 8002c4c:	f043 0301 	orr.w	r3, r3, #1
 8002c50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c54:	f7fe fe52 	bl	80018fc <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c5c:	f7fe fe4e 	bl	80018fc <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e21b      	b.n	80030a6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c6e:	4b5e      	ldr	r3, [pc, #376]	; (8002de8 <HAL_RCC_OscConfig+0x578>)
 8002c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0ef      	beq.n	8002c5c <HAL_RCC_OscConfig+0x3ec>
 8002c7c:	e01b      	b.n	8002cb6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c7e:	4b5a      	ldr	r3, [pc, #360]	; (8002de8 <HAL_RCC_OscConfig+0x578>)
 8002c80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c84:	4a58      	ldr	r2, [pc, #352]	; (8002de8 <HAL_RCC_OscConfig+0x578>)
 8002c86:	f023 0301 	bic.w	r3, r3, #1
 8002c8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8e:	f7fe fe35 	bl	80018fc <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c96:	f7fe fe31 	bl	80018fc <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e1fe      	b.n	80030a6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ca8:	4b4f      	ldr	r3, [pc, #316]	; (8002de8 <HAL_RCC_OscConfig+0x578>)
 8002caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1ef      	bne.n	8002c96 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0304 	and.w	r3, r3, #4
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 80a6 	beq.w	8002e10 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002cc8:	4b47      	ldr	r3, [pc, #284]	; (8002de8 <HAL_RCC_OscConfig+0x578>)
 8002cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10d      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cd4:	4b44      	ldr	r3, [pc, #272]	; (8002de8 <HAL_RCC_OscConfig+0x578>)
 8002cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd8:	4a43      	ldr	r2, [pc, #268]	; (8002de8 <HAL_RCC_OscConfig+0x578>)
 8002cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cde:	6593      	str	r3, [r2, #88]	; 0x58
 8002ce0:	4b41      	ldr	r3, [pc, #260]	; (8002de8 <HAL_RCC_OscConfig+0x578>)
 8002ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce8:	60bb      	str	r3, [r7, #8]
 8002cea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cec:	2301      	movs	r3, #1
 8002cee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cf0:	4b3e      	ldr	r3, [pc, #248]	; (8002dec <HAL_RCC_OscConfig+0x57c>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d118      	bne.n	8002d2e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cfc:	4b3b      	ldr	r3, [pc, #236]	; (8002dec <HAL_RCC_OscConfig+0x57c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a3a      	ldr	r2, [pc, #232]	; (8002dec <HAL_RCC_OscConfig+0x57c>)
 8002d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d08:	f7fe fdf8 	bl	80018fc <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d10:	f7fe fdf4 	bl	80018fc <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e1c1      	b.n	80030a6 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d22:	4b32      	ldr	r3, [pc, #200]	; (8002dec <HAL_RCC_OscConfig+0x57c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0f0      	beq.n	8002d10 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d108      	bne.n	8002d48 <HAL_RCC_OscConfig+0x4d8>
 8002d36:	4b2c      	ldr	r3, [pc, #176]	; (8002de8 <HAL_RCC_OscConfig+0x578>)
 8002d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3c:	4a2a      	ldr	r2, [pc, #168]	; (8002de8 <HAL_RCC_OscConfig+0x578>)
 8002d3e:	f043 0301 	orr.w	r3, r3, #1
 8002d42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d46:	e024      	b.n	8002d92 <HAL_RCC_OscConfig+0x522>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	2b05      	cmp	r3, #5
 8002d4e:	d110      	bne.n	8002d72 <HAL_RCC_OscConfig+0x502>
 8002d50:	4b25      	ldr	r3, [pc, #148]	; (8002de8 <HAL_RCC_OscConfig+0x578>)
 8002d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d56:	4a24      	ldr	r2, [pc, #144]	; (8002de8 <HAL_RCC_OscConfig+0x578>)
 8002d58:	f043 0304 	orr.w	r3, r3, #4
 8002d5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d60:	4b21      	ldr	r3, [pc, #132]	; (8002de8 <HAL_RCC_OscConfig+0x578>)
 8002d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d66:	4a20      	ldr	r2, [pc, #128]	; (8002de8 <HAL_RCC_OscConfig+0x578>)
 8002d68:	f043 0301 	orr.w	r3, r3, #1
 8002d6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d70:	e00f      	b.n	8002d92 <HAL_RCC_OscConfig+0x522>
 8002d72:	4b1d      	ldr	r3, [pc, #116]	; (8002de8 <HAL_RCC_OscConfig+0x578>)
 8002d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d78:	4a1b      	ldr	r2, [pc, #108]	; (8002de8 <HAL_RCC_OscConfig+0x578>)
 8002d7a:	f023 0301 	bic.w	r3, r3, #1
 8002d7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d82:	4b19      	ldr	r3, [pc, #100]	; (8002de8 <HAL_RCC_OscConfig+0x578>)
 8002d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d88:	4a17      	ldr	r2, [pc, #92]	; (8002de8 <HAL_RCC_OscConfig+0x578>)
 8002d8a:	f023 0304 	bic.w	r3, r3, #4
 8002d8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d016      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9a:	f7fe fdaf 	bl	80018fc <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002da0:	e00a      	b.n	8002db8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da2:	f7fe fdab 	bl	80018fc <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e176      	b.n	80030a6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002db8:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <HAL_RCC_OscConfig+0x578>)
 8002dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0ed      	beq.n	8002da2 <HAL_RCC_OscConfig+0x532>
 8002dc6:	e01a      	b.n	8002dfe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc8:	f7fe fd98 	bl	80018fc <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dce:	e00f      	b.n	8002df0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd0:	f7fe fd94 	bl	80018fc <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d906      	bls.n	8002df0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e15f      	b.n	80030a6 <HAL_RCC_OscConfig+0x836>
 8002de6:	bf00      	nop
 8002de8:	40021000 	.word	0x40021000
 8002dec:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002df0:	4baa      	ldr	r3, [pc, #680]	; (800309c <HAL_RCC_OscConfig+0x82c>)
 8002df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1e8      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dfe:	7ffb      	ldrb	r3, [r7, #31]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d105      	bne.n	8002e10 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e04:	4ba5      	ldr	r3, [pc, #660]	; (800309c <HAL_RCC_OscConfig+0x82c>)
 8002e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e08:	4aa4      	ldr	r2, [pc, #656]	; (800309c <HAL_RCC_OscConfig+0x82c>)
 8002e0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e0e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0320 	and.w	r3, r3, #32
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d03c      	beq.n	8002e96 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d01c      	beq.n	8002e5e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e24:	4b9d      	ldr	r3, [pc, #628]	; (800309c <HAL_RCC_OscConfig+0x82c>)
 8002e26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e2a:	4a9c      	ldr	r2, [pc, #624]	; (800309c <HAL_RCC_OscConfig+0x82c>)
 8002e2c:	f043 0301 	orr.w	r3, r3, #1
 8002e30:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e34:	f7fe fd62 	bl	80018fc <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e3c:	f7fe fd5e 	bl	80018fc <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e12b      	b.n	80030a6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e4e:	4b93      	ldr	r3, [pc, #588]	; (800309c <HAL_RCC_OscConfig+0x82c>)
 8002e50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0ef      	beq.n	8002e3c <HAL_RCC_OscConfig+0x5cc>
 8002e5c:	e01b      	b.n	8002e96 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e5e:	4b8f      	ldr	r3, [pc, #572]	; (800309c <HAL_RCC_OscConfig+0x82c>)
 8002e60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e64:	4a8d      	ldr	r2, [pc, #564]	; (800309c <HAL_RCC_OscConfig+0x82c>)
 8002e66:	f023 0301 	bic.w	r3, r3, #1
 8002e6a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e6e:	f7fe fd45 	bl	80018fc <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e76:	f7fe fd41 	bl	80018fc <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e10e      	b.n	80030a6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e88:	4b84      	ldr	r3, [pc, #528]	; (800309c <HAL_RCC_OscConfig+0x82c>)
 8002e8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1ef      	bne.n	8002e76 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 8102 	beq.w	80030a4 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	f040 80c5 	bne.w	8003034 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002eaa:	4b7c      	ldr	r3, [pc, #496]	; (800309c <HAL_RCC_OscConfig+0x82c>)
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f003 0203 	and.w	r2, r3, #3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d12c      	bne.n	8002f18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d123      	bne.n	8002f18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eda:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d11b      	bne.n	8002f18 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d113      	bne.n	8002f18 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efa:	085b      	lsrs	r3, r3, #1
 8002efc:	3b01      	subs	r3, #1
 8002efe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d109      	bne.n	8002f18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	085b      	lsrs	r3, r3, #1
 8002f10:	3b01      	subs	r3, #1
 8002f12:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d067      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	2b0c      	cmp	r3, #12
 8002f1c:	d062      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f1e:	4b5f      	ldr	r3, [pc, #380]	; (800309c <HAL_RCC_OscConfig+0x82c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e0bb      	b.n	80030a6 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f2e:	4b5b      	ldr	r3, [pc, #364]	; (800309c <HAL_RCC_OscConfig+0x82c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a5a      	ldr	r2, [pc, #360]	; (800309c <HAL_RCC_OscConfig+0x82c>)
 8002f34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f38:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f3a:	f7fe fcdf 	bl	80018fc <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f42:	f7fe fcdb 	bl	80018fc <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e0a8      	b.n	80030a6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f54:	4b51      	ldr	r3, [pc, #324]	; (800309c <HAL_RCC_OscConfig+0x82c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1f0      	bne.n	8002f42 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f60:	4b4e      	ldr	r3, [pc, #312]	; (800309c <HAL_RCC_OscConfig+0x82c>)
 8002f62:	68da      	ldr	r2, [r3, #12]
 8002f64:	4b4e      	ldr	r3, [pc, #312]	; (80030a0 <HAL_RCC_OscConfig+0x830>)
 8002f66:	4013      	ands	r3, r2
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f70:	3a01      	subs	r2, #1
 8002f72:	0112      	lsls	r2, r2, #4
 8002f74:	4311      	orrs	r1, r2
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f7a:	0212      	lsls	r2, r2, #8
 8002f7c:	4311      	orrs	r1, r2
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f82:	0852      	lsrs	r2, r2, #1
 8002f84:	3a01      	subs	r2, #1
 8002f86:	0552      	lsls	r2, r2, #21
 8002f88:	4311      	orrs	r1, r2
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f8e:	0852      	lsrs	r2, r2, #1
 8002f90:	3a01      	subs	r2, #1
 8002f92:	0652      	lsls	r2, r2, #25
 8002f94:	4311      	orrs	r1, r2
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f9a:	06d2      	lsls	r2, r2, #27
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	493f      	ldr	r1, [pc, #252]	; (800309c <HAL_RCC_OscConfig+0x82c>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002fa4:	4b3d      	ldr	r3, [pc, #244]	; (800309c <HAL_RCC_OscConfig+0x82c>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a3c      	ldr	r2, [pc, #240]	; (800309c <HAL_RCC_OscConfig+0x82c>)
 8002faa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fb0:	4b3a      	ldr	r3, [pc, #232]	; (800309c <HAL_RCC_OscConfig+0x82c>)
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	4a39      	ldr	r2, [pc, #228]	; (800309c <HAL_RCC_OscConfig+0x82c>)
 8002fb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fbc:	f7fe fc9e 	bl	80018fc <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc4:	f7fe fc9a 	bl	80018fc <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e067      	b.n	80030a6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fd6:	4b31      	ldr	r3, [pc, #196]	; (800309c <HAL_RCC_OscConfig+0x82c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0f0      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fe2:	e05f      	b.n	80030a4 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e05e      	b.n	80030a6 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fe8:	4b2c      	ldr	r3, [pc, #176]	; (800309c <HAL_RCC_OscConfig+0x82c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d157      	bne.n	80030a4 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ff4:	4b29      	ldr	r3, [pc, #164]	; (800309c <HAL_RCC_OscConfig+0x82c>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a28      	ldr	r2, [pc, #160]	; (800309c <HAL_RCC_OscConfig+0x82c>)
 8002ffa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ffe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003000:	4b26      	ldr	r3, [pc, #152]	; (800309c <HAL_RCC_OscConfig+0x82c>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	4a25      	ldr	r2, [pc, #148]	; (800309c <HAL_RCC_OscConfig+0x82c>)
 8003006:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800300a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800300c:	f7fe fc76 	bl	80018fc <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003014:	f7fe fc72 	bl	80018fc <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e03f      	b.n	80030a6 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003026:	4b1d      	ldr	r3, [pc, #116]	; (800309c <HAL_RCC_OscConfig+0x82c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0f0      	beq.n	8003014 <HAL_RCC_OscConfig+0x7a4>
 8003032:	e037      	b.n	80030a4 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	2b0c      	cmp	r3, #12
 8003038:	d02d      	beq.n	8003096 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800303a:	4b18      	ldr	r3, [pc, #96]	; (800309c <HAL_RCC_OscConfig+0x82c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a17      	ldr	r2, [pc, #92]	; (800309c <HAL_RCC_OscConfig+0x82c>)
 8003040:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003044:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003046:	4b15      	ldr	r3, [pc, #84]	; (800309c <HAL_RCC_OscConfig+0x82c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d105      	bne.n	800305e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003052:	4b12      	ldr	r3, [pc, #72]	; (800309c <HAL_RCC_OscConfig+0x82c>)
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	4a11      	ldr	r2, [pc, #68]	; (800309c <HAL_RCC_OscConfig+0x82c>)
 8003058:	f023 0303 	bic.w	r3, r3, #3
 800305c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800305e:	4b0f      	ldr	r3, [pc, #60]	; (800309c <HAL_RCC_OscConfig+0x82c>)
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	4a0e      	ldr	r2, [pc, #56]	; (800309c <HAL_RCC_OscConfig+0x82c>)
 8003064:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003068:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800306c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306e:	f7fe fc45 	bl	80018fc <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003076:	f7fe fc41 	bl	80018fc <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e00e      	b.n	80030a6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003088:	4b04      	ldr	r3, [pc, #16]	; (800309c <HAL_RCC_OscConfig+0x82c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1f0      	bne.n	8003076 <HAL_RCC_OscConfig+0x806>
 8003094:	e006      	b.n	80030a4 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e005      	b.n	80030a6 <HAL_RCC_OscConfig+0x836>
 800309a:	bf00      	nop
 800309c:	40021000 	.word	0x40021000
 80030a0:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3720      	adds	r7, #32
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop

080030b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e0c8      	b.n	8003256 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030c4:	4b66      	ldr	r3, [pc, #408]	; (8003260 <HAL_RCC_ClockConfig+0x1b0>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d910      	bls.n	80030f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d2:	4b63      	ldr	r3, [pc, #396]	; (8003260 <HAL_RCC_ClockConfig+0x1b0>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f023 0207 	bic.w	r2, r3, #7
 80030da:	4961      	ldr	r1, [pc, #388]	; (8003260 <HAL_RCC_ClockConfig+0x1b0>)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	4313      	orrs	r3, r2
 80030e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e2:	4b5f      	ldr	r3, [pc, #380]	; (8003260 <HAL_RCC_ClockConfig+0x1b0>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d001      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0b0      	b.n	8003256 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d04c      	beq.n	800319a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b03      	cmp	r3, #3
 8003106:	d107      	bne.n	8003118 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003108:	4b56      	ldr	r3, [pc, #344]	; (8003264 <HAL_RCC_ClockConfig+0x1b4>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d121      	bne.n	8003158 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e09e      	b.n	8003256 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b02      	cmp	r3, #2
 800311e:	d107      	bne.n	8003130 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003120:	4b50      	ldr	r3, [pc, #320]	; (8003264 <HAL_RCC_ClockConfig+0x1b4>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d115      	bne.n	8003158 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e092      	b.n	8003256 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d107      	bne.n	8003148 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003138:	4b4a      	ldr	r3, [pc, #296]	; (8003264 <HAL_RCC_ClockConfig+0x1b4>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d109      	bne.n	8003158 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e086      	b.n	8003256 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003148:	4b46      	ldr	r3, [pc, #280]	; (8003264 <HAL_RCC_ClockConfig+0x1b4>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e07e      	b.n	8003256 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003158:	4b42      	ldr	r3, [pc, #264]	; (8003264 <HAL_RCC_ClockConfig+0x1b4>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f023 0203 	bic.w	r2, r3, #3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	493f      	ldr	r1, [pc, #252]	; (8003264 <HAL_RCC_ClockConfig+0x1b4>)
 8003166:	4313      	orrs	r3, r2
 8003168:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800316a:	f7fe fbc7 	bl	80018fc <HAL_GetTick>
 800316e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003170:	e00a      	b.n	8003188 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003172:	f7fe fbc3 	bl	80018fc <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003180:	4293      	cmp	r3, r2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e066      	b.n	8003256 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003188:	4b36      	ldr	r3, [pc, #216]	; (8003264 <HAL_RCC_ClockConfig+0x1b4>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f003 020c 	and.w	r2, r3, #12
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	429a      	cmp	r2, r3
 8003198:	d1eb      	bne.n	8003172 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d008      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031a6:	4b2f      	ldr	r3, [pc, #188]	; (8003264 <HAL_RCC_ClockConfig+0x1b4>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	492c      	ldr	r1, [pc, #176]	; (8003264 <HAL_RCC_ClockConfig+0x1b4>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031b8:	4b29      	ldr	r3, [pc, #164]	; (8003260 <HAL_RCC_ClockConfig+0x1b0>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d210      	bcs.n	80031e8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c6:	4b26      	ldr	r3, [pc, #152]	; (8003260 <HAL_RCC_ClockConfig+0x1b0>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f023 0207 	bic.w	r2, r3, #7
 80031ce:	4924      	ldr	r1, [pc, #144]	; (8003260 <HAL_RCC_ClockConfig+0x1b0>)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d6:	4b22      	ldr	r3, [pc, #136]	; (8003260 <HAL_RCC_ClockConfig+0x1b0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e036      	b.n	8003256 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d008      	beq.n	8003206 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031f4:	4b1b      	ldr	r3, [pc, #108]	; (8003264 <HAL_RCC_ClockConfig+0x1b4>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	4918      	ldr	r1, [pc, #96]	; (8003264 <HAL_RCC_ClockConfig+0x1b4>)
 8003202:	4313      	orrs	r3, r2
 8003204:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	2b00      	cmp	r3, #0
 8003210:	d009      	beq.n	8003226 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003212:	4b14      	ldr	r3, [pc, #80]	; (8003264 <HAL_RCC_ClockConfig+0x1b4>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	4910      	ldr	r1, [pc, #64]	; (8003264 <HAL_RCC_ClockConfig+0x1b4>)
 8003222:	4313      	orrs	r3, r2
 8003224:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003226:	f000 f825 	bl	8003274 <HAL_RCC_GetSysClockFreq>
 800322a:	4602      	mov	r2, r0
 800322c:	4b0d      	ldr	r3, [pc, #52]	; (8003264 <HAL_RCC_ClockConfig+0x1b4>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	091b      	lsrs	r3, r3, #4
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	490c      	ldr	r1, [pc, #48]	; (8003268 <HAL_RCC_ClockConfig+0x1b8>)
 8003238:	5ccb      	ldrb	r3, [r1, r3]
 800323a:	f003 031f 	and.w	r3, r3, #31
 800323e:	fa22 f303 	lsr.w	r3, r2, r3
 8003242:	4a0a      	ldr	r2, [pc, #40]	; (800326c <HAL_RCC_ClockConfig+0x1bc>)
 8003244:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003246:	4b0a      	ldr	r3, [pc, #40]	; (8003270 <HAL_RCC_ClockConfig+0x1c0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f7fe fb06 	bl	800185c <HAL_InitTick>
 8003250:	4603      	mov	r3, r0
 8003252:	72fb      	strb	r3, [r7, #11]

  return status;
 8003254:	7afb      	ldrb	r3, [r7, #11]
}
 8003256:	4618      	mov	r0, r3
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40022000 	.word	0x40022000
 8003264:	40021000 	.word	0x40021000
 8003268:	080083dc 	.word	0x080083dc
 800326c:	20000014 	.word	0x20000014
 8003270:	20000018 	.word	0x20000018

08003274 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003274:	b480      	push	{r7}
 8003276:	b089      	sub	sp, #36	; 0x24
 8003278:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800327a:	2300      	movs	r3, #0
 800327c:	61fb      	str	r3, [r7, #28]
 800327e:	2300      	movs	r3, #0
 8003280:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003282:	4b3e      	ldr	r3, [pc, #248]	; (800337c <HAL_RCC_GetSysClockFreq+0x108>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 030c 	and.w	r3, r3, #12
 800328a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800328c:	4b3b      	ldr	r3, [pc, #236]	; (800337c <HAL_RCC_GetSysClockFreq+0x108>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f003 0303 	and.w	r3, r3, #3
 8003294:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d005      	beq.n	80032a8 <HAL_RCC_GetSysClockFreq+0x34>
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	2b0c      	cmp	r3, #12
 80032a0:	d121      	bne.n	80032e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d11e      	bne.n	80032e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80032a8:	4b34      	ldr	r3, [pc, #208]	; (800337c <HAL_RCC_GetSysClockFreq+0x108>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0308 	and.w	r3, r3, #8
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d107      	bne.n	80032c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032b4:	4b31      	ldr	r3, [pc, #196]	; (800337c <HAL_RCC_GetSysClockFreq+0x108>)
 80032b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032ba:	0a1b      	lsrs	r3, r3, #8
 80032bc:	f003 030f 	and.w	r3, r3, #15
 80032c0:	61fb      	str	r3, [r7, #28]
 80032c2:	e005      	b.n	80032d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80032c4:	4b2d      	ldr	r3, [pc, #180]	; (800337c <HAL_RCC_GetSysClockFreq+0x108>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	091b      	lsrs	r3, r3, #4
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80032d0:	4a2b      	ldr	r2, [pc, #172]	; (8003380 <HAL_RCC_GetSysClockFreq+0x10c>)
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10d      	bne.n	80032fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032e4:	e00a      	b.n	80032fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	2b04      	cmp	r3, #4
 80032ea:	d102      	bne.n	80032f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032ec:	4b25      	ldr	r3, [pc, #148]	; (8003384 <HAL_RCC_GetSysClockFreq+0x110>)
 80032ee:	61bb      	str	r3, [r7, #24]
 80032f0:	e004      	b.n	80032fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d101      	bne.n	80032fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032f8:	4b23      	ldr	r3, [pc, #140]	; (8003388 <HAL_RCC_GetSysClockFreq+0x114>)
 80032fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	2b0c      	cmp	r3, #12
 8003300:	d134      	bne.n	800336c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003302:	4b1e      	ldr	r3, [pc, #120]	; (800337c <HAL_RCC_GetSysClockFreq+0x108>)
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2b02      	cmp	r3, #2
 8003310:	d003      	beq.n	800331a <HAL_RCC_GetSysClockFreq+0xa6>
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	2b03      	cmp	r3, #3
 8003316:	d003      	beq.n	8003320 <HAL_RCC_GetSysClockFreq+0xac>
 8003318:	e005      	b.n	8003326 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800331a:	4b1a      	ldr	r3, [pc, #104]	; (8003384 <HAL_RCC_GetSysClockFreq+0x110>)
 800331c:	617b      	str	r3, [r7, #20]
      break;
 800331e:	e005      	b.n	800332c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003320:	4b19      	ldr	r3, [pc, #100]	; (8003388 <HAL_RCC_GetSysClockFreq+0x114>)
 8003322:	617b      	str	r3, [r7, #20]
      break;
 8003324:	e002      	b.n	800332c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	617b      	str	r3, [r7, #20]
      break;
 800332a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800332c:	4b13      	ldr	r3, [pc, #76]	; (800337c <HAL_RCC_GetSysClockFreq+0x108>)
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	091b      	lsrs	r3, r3, #4
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	3301      	adds	r3, #1
 8003338:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800333a:	4b10      	ldr	r3, [pc, #64]	; (800337c <HAL_RCC_GetSysClockFreq+0x108>)
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	0a1b      	lsrs	r3, r3, #8
 8003340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	fb02 f203 	mul.w	r2, r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003350:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003352:	4b0a      	ldr	r3, [pc, #40]	; (800337c <HAL_RCC_GetSysClockFreq+0x108>)
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	0e5b      	lsrs	r3, r3, #25
 8003358:	f003 0303 	and.w	r3, r3, #3
 800335c:	3301      	adds	r3, #1
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	fbb2 f3f3 	udiv	r3, r2, r3
 800336a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800336c:	69bb      	ldr	r3, [r7, #24]
}
 800336e:	4618      	mov	r0, r3
 8003370:	3724      	adds	r7, #36	; 0x24
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	40021000 	.word	0x40021000
 8003380:	080083f4 	.word	0x080083f4
 8003384:	00f42400 	.word	0x00f42400
 8003388:	007a1200 	.word	0x007a1200

0800338c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003390:	4b03      	ldr	r3, [pc, #12]	; (80033a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003392:	681b      	ldr	r3, [r3, #0]
}
 8003394:	4618      	mov	r0, r3
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	20000014 	.word	0x20000014

080033a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80033a8:	f7ff fff0 	bl	800338c <HAL_RCC_GetHCLKFreq>
 80033ac:	4602      	mov	r2, r0
 80033ae:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	0a1b      	lsrs	r3, r3, #8
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	4904      	ldr	r1, [pc, #16]	; (80033cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80033ba:	5ccb      	ldrb	r3, [r1, r3]
 80033bc:	f003 031f 	and.w	r3, r3, #31
 80033c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40021000 	.word	0x40021000
 80033cc:	080083ec 	.word	0x080083ec

080033d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80033d4:	f7ff ffda 	bl	800338c <HAL_RCC_GetHCLKFreq>
 80033d8:	4602      	mov	r2, r0
 80033da:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	0adb      	lsrs	r3, r3, #11
 80033e0:	f003 0307 	and.w	r3, r3, #7
 80033e4:	4904      	ldr	r1, [pc, #16]	; (80033f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033e6:	5ccb      	ldrb	r3, [r1, r3]
 80033e8:	f003 031f 	and.w	r3, r3, #31
 80033ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40021000 	.word	0x40021000
 80033f8:	080083ec 	.word	0x080083ec

080033fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003404:	2300      	movs	r3, #0
 8003406:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003408:	4b2a      	ldr	r3, [pc, #168]	; (80034b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800340a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003414:	f7ff f9c8 	bl	80027a8 <HAL_PWREx_GetVoltageRange>
 8003418:	6178      	str	r0, [r7, #20]
 800341a:	e014      	b.n	8003446 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800341c:	4b25      	ldr	r3, [pc, #148]	; (80034b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800341e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003420:	4a24      	ldr	r2, [pc, #144]	; (80034b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003426:	6593      	str	r3, [r2, #88]	; 0x58
 8003428:	4b22      	ldr	r3, [pc, #136]	; (80034b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800342a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003430:	60fb      	str	r3, [r7, #12]
 8003432:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003434:	f7ff f9b8 	bl	80027a8 <HAL_PWREx_GetVoltageRange>
 8003438:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800343a:	4b1e      	ldr	r3, [pc, #120]	; (80034b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800343c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343e:	4a1d      	ldr	r2, [pc, #116]	; (80034b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003440:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003444:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800344c:	d10b      	bne.n	8003466 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b80      	cmp	r3, #128	; 0x80
 8003452:	d919      	bls.n	8003488 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2ba0      	cmp	r3, #160	; 0xa0
 8003458:	d902      	bls.n	8003460 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800345a:	2302      	movs	r3, #2
 800345c:	613b      	str	r3, [r7, #16]
 800345e:	e013      	b.n	8003488 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003460:	2301      	movs	r3, #1
 8003462:	613b      	str	r3, [r7, #16]
 8003464:	e010      	b.n	8003488 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b80      	cmp	r3, #128	; 0x80
 800346a:	d902      	bls.n	8003472 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800346c:	2303      	movs	r3, #3
 800346e:	613b      	str	r3, [r7, #16]
 8003470:	e00a      	b.n	8003488 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b80      	cmp	r3, #128	; 0x80
 8003476:	d102      	bne.n	800347e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003478:	2302      	movs	r3, #2
 800347a:	613b      	str	r3, [r7, #16]
 800347c:	e004      	b.n	8003488 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b70      	cmp	r3, #112	; 0x70
 8003482:	d101      	bne.n	8003488 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003484:	2301      	movs	r3, #1
 8003486:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003488:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f023 0207 	bic.w	r2, r3, #7
 8003490:	4909      	ldr	r1, [pc, #36]	; (80034b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003498:	4b07      	ldr	r3, [pc, #28]	; (80034b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d001      	beq.n	80034aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e000      	b.n	80034ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3718      	adds	r7, #24
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40021000 	.word	0x40021000
 80034b8:	40022000 	.word	0x40022000

080034bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034c4:	2300      	movs	r3, #0
 80034c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034c8:	2300      	movs	r3, #0
 80034ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d031      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034e0:	d01a      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80034e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034e6:	d814      	bhi.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d009      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80034ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034f0:	d10f      	bne.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80034f2:	4b5d      	ldr	r3, [pc, #372]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	4a5c      	ldr	r2, [pc, #368]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034fc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034fe:	e00c      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3304      	adds	r3, #4
 8003504:	2100      	movs	r1, #0
 8003506:	4618      	mov	r0, r3
 8003508:	f000 fa1e 	bl	8003948 <RCCEx_PLLSAI1_Config>
 800350c:	4603      	mov	r3, r0
 800350e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003510:	e003      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	74fb      	strb	r3, [r7, #19]
      break;
 8003516:	e000      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003518:	bf00      	nop
    }

    if(ret == HAL_OK)
 800351a:	7cfb      	ldrb	r3, [r7, #19]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10b      	bne.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003520:	4b51      	ldr	r3, [pc, #324]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003526:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352e:	494e      	ldr	r1, [pc, #312]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003530:	4313      	orrs	r3, r2
 8003532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003536:	e001      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003538:	7cfb      	ldrb	r3, [r7, #19]
 800353a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 809e 	beq.w	8003686 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800354a:	2300      	movs	r3, #0
 800354c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800354e:	4b46      	ldr	r3, [pc, #280]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800355a:	2301      	movs	r3, #1
 800355c:	e000      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800355e:	2300      	movs	r3, #0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00d      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003564:	4b40      	ldr	r3, [pc, #256]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003568:	4a3f      	ldr	r2, [pc, #252]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800356a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800356e:	6593      	str	r3, [r2, #88]	; 0x58
 8003570:	4b3d      	ldr	r3, [pc, #244]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003578:	60bb      	str	r3, [r7, #8]
 800357a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800357c:	2301      	movs	r3, #1
 800357e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003580:	4b3a      	ldr	r3, [pc, #232]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a39      	ldr	r2, [pc, #228]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800358a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800358c:	f7fe f9b6 	bl	80018fc <HAL_GetTick>
 8003590:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003592:	e009      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003594:	f7fe f9b2 	bl	80018fc <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d902      	bls.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	74fb      	strb	r3, [r7, #19]
        break;
 80035a6:	e005      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035a8:	4b30      	ldr	r3, [pc, #192]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d0ef      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80035b4:	7cfb      	ldrb	r3, [r7, #19]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d15a      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035ba:	4b2b      	ldr	r3, [pc, #172]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d01e      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d019      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035d6:	4b24      	ldr	r3, [pc, #144]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035e2:	4b21      	ldr	r3, [pc, #132]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e8:	4a1f      	ldr	r2, [pc, #124]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035f2:	4b1d      	ldr	r3, [pc, #116]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f8:	4a1b      	ldr	r2, [pc, #108]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003602:	4a19      	ldr	r2, [pc, #100]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b00      	cmp	r3, #0
 8003612:	d016      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003614:	f7fe f972 	bl	80018fc <HAL_GetTick>
 8003618:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800361a:	e00b      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800361c:	f7fe f96e 	bl	80018fc <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	f241 3288 	movw	r2, #5000	; 0x1388
 800362a:	4293      	cmp	r3, r2
 800362c:	d902      	bls.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	74fb      	strb	r3, [r7, #19]
            break;
 8003632:	e006      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003634:	4b0c      	ldr	r3, [pc, #48]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0ec      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003642:	7cfb      	ldrb	r3, [r7, #19]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10b      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003648:	4b07      	ldr	r3, [pc, #28]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800364a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800364e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003656:	4904      	ldr	r1, [pc, #16]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003658:	4313      	orrs	r3, r2
 800365a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800365e:	e009      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003660:	7cfb      	ldrb	r3, [r7, #19]
 8003662:	74bb      	strb	r3, [r7, #18]
 8003664:	e006      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003666:	bf00      	nop
 8003668:	40021000 	.word	0x40021000
 800366c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003670:	7cfb      	ldrb	r3, [r7, #19]
 8003672:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003674:	7c7b      	ldrb	r3, [r7, #17]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d105      	bne.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800367a:	4bb2      	ldr	r3, [pc, #712]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800367c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367e:	4ab1      	ldr	r2, [pc, #708]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003680:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003684:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00a      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003692:	4bac      	ldr	r3, [pc, #688]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003698:	f023 0203 	bic.w	r2, r3, #3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	49a8      	ldr	r1, [pc, #672]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00a      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036b4:	4ba3      	ldr	r3, [pc, #652]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ba:	f023 020c 	bic.w	r2, r3, #12
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	49a0      	ldr	r1, [pc, #640]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0304 	and.w	r3, r3, #4
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036d6:	4b9b      	ldr	r3, [pc, #620]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e4:	4997      	ldr	r1, [pc, #604]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0320 	and.w	r3, r3, #32
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00a      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036f8:	4b92      	ldr	r3, [pc, #584]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003706:	498f      	ldr	r1, [pc, #572]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003708:	4313      	orrs	r3, r2
 800370a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00a      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800371a:	4b8a      	ldr	r3, [pc, #552]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800371c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003720:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003728:	4986      	ldr	r1, [pc, #536]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00a      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800373c:	4b81      	ldr	r3, [pc, #516]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800373e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003742:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	497e      	ldr	r1, [pc, #504]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800374c:	4313      	orrs	r3, r2
 800374e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00a      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800375e:	4b79      	ldr	r3, [pc, #484]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003764:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376c:	4975      	ldr	r1, [pc, #468]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800376e:	4313      	orrs	r3, r2
 8003770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00a      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003780:	4b70      	ldr	r3, [pc, #448]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003786:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800378e:	496d      	ldr	r1, [pc, #436]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003790:	4313      	orrs	r3, r2
 8003792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00a      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037a2:	4b68      	ldr	r3, [pc, #416]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b0:	4964      	ldr	r1, [pc, #400]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d028      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037c4:	4b5f      	ldr	r3, [pc, #380]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037d2:	495c      	ldr	r1, [pc, #368]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037e2:	d106      	bne.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037e4:	4b57      	ldr	r3, [pc, #348]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	4a56      	ldr	r2, [pc, #344]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037ee:	60d3      	str	r3, [r2, #12]
 80037f0:	e011      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037fa:	d10c      	bne.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3304      	adds	r3, #4
 8003800:	2101      	movs	r1, #1
 8003802:	4618      	mov	r0, r3
 8003804:	f000 f8a0 	bl	8003948 <RCCEx_PLLSAI1_Config>
 8003808:	4603      	mov	r3, r0
 800380a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800380c:	7cfb      	ldrb	r3, [r7, #19]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8003812:	7cfb      	ldrb	r3, [r7, #19]
 8003814:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d028      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003822:	4b48      	ldr	r3, [pc, #288]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003828:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003830:	4944      	ldr	r1, [pc, #272]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003832:	4313      	orrs	r3, r2
 8003834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800383c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003840:	d106      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003842:	4b40      	ldr	r3, [pc, #256]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	4a3f      	ldr	r2, [pc, #252]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003848:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800384c:	60d3      	str	r3, [r2, #12]
 800384e:	e011      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003854:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003858:	d10c      	bne.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	3304      	adds	r3, #4
 800385e:	2101      	movs	r1, #1
 8003860:	4618      	mov	r0, r3
 8003862:	f000 f871 	bl	8003948 <RCCEx_PLLSAI1_Config>
 8003866:	4603      	mov	r3, r0
 8003868:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800386a:	7cfb      	ldrb	r3, [r7, #19]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003870:	7cfb      	ldrb	r3, [r7, #19]
 8003872:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d028      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003880:	4b30      	ldr	r3, [pc, #192]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003886:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800388e:	492d      	ldr	r1, [pc, #180]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003890:	4313      	orrs	r3, r2
 8003892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800389a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800389e:	d106      	bne.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038a0:	4b28      	ldr	r3, [pc, #160]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	4a27      	ldr	r2, [pc, #156]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038aa:	60d3      	str	r3, [r2, #12]
 80038ac:	e011      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x416>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038b6:	d10c      	bne.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x416>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3304      	adds	r3, #4
 80038bc:	2101      	movs	r1, #1
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 f842 	bl	8003948 <RCCEx_PLLSAI1_Config>
 80038c4:	4603      	mov	r3, r0
 80038c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038c8:	7cfb      	ldrb	r3, [r7, #19]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x416>
      {
        /* set overall return value */
        status = ret;
 80038ce:	7cfb      	ldrb	r3, [r7, #19]
 80038d0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d01c      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038de:	4b19      	ldr	r3, [pc, #100]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ec:	4915      	ldr	r1, [pc, #84]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038fc:	d10c      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	3304      	adds	r3, #4
 8003902:	2102      	movs	r1, #2
 8003904:	4618      	mov	r0, r3
 8003906:	f000 f81f 	bl	8003948 <RCCEx_PLLSAI1_Config>
 800390a:	4603      	mov	r3, r0
 800390c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800390e:	7cfb      	ldrb	r3, [r7, #19]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 8003914:	7cfb      	ldrb	r3, [r7, #19]
 8003916:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00a      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x47e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003924:	4b07      	ldr	r3, [pc, #28]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800392a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003932:	4904      	ldr	r1, [pc, #16]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003934:	4313      	orrs	r3, r2
 8003936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800393a:	7cbb      	ldrb	r3, [r7, #18]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3718      	adds	r7, #24
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	40021000 	.word	0x40021000

08003948 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003952:	2300      	movs	r3, #0
 8003954:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003956:	4b74      	ldr	r3, [pc, #464]	; (8003b28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f003 0303 	and.w	r3, r3, #3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d018      	beq.n	8003994 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003962:	4b71      	ldr	r3, [pc, #452]	; (8003b28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	f003 0203 	and.w	r2, r3, #3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	429a      	cmp	r2, r3
 8003970:	d10d      	bne.n	800398e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
       ||
 8003976:	2b00      	cmp	r3, #0
 8003978:	d009      	beq.n	800398e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800397a:	4b6b      	ldr	r3, [pc, #428]	; (8003b28 <RCCEx_PLLSAI1_Config+0x1e0>)
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	091b      	lsrs	r3, r3, #4
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	1c5a      	adds	r2, r3, #1
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
       ||
 800398a:	429a      	cmp	r2, r3
 800398c:	d047      	beq.n	8003a1e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	73fb      	strb	r3, [r7, #15]
 8003992:	e044      	b.n	8003a1e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2b03      	cmp	r3, #3
 800399a:	d018      	beq.n	80039ce <RCCEx_PLLSAI1_Config+0x86>
 800399c:	2b03      	cmp	r3, #3
 800399e:	d825      	bhi.n	80039ec <RCCEx_PLLSAI1_Config+0xa4>
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d002      	beq.n	80039aa <RCCEx_PLLSAI1_Config+0x62>
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d009      	beq.n	80039bc <RCCEx_PLLSAI1_Config+0x74>
 80039a8:	e020      	b.n	80039ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039aa:	4b5f      	ldr	r3, [pc, #380]	; (8003b28 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d11d      	bne.n	80039f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039ba:	e01a      	b.n	80039f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039bc:	4b5a      	ldr	r3, [pc, #360]	; (8003b28 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d116      	bne.n	80039f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039cc:	e013      	b.n	80039f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039ce:	4b56      	ldr	r3, [pc, #344]	; (8003b28 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10f      	bne.n	80039fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039da:	4b53      	ldr	r3, [pc, #332]	; (8003b28 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d109      	bne.n	80039fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039ea:	e006      	b.n	80039fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	73fb      	strb	r3, [r7, #15]
      break;
 80039f0:	e004      	b.n	80039fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039f2:	bf00      	nop
 80039f4:	e002      	b.n	80039fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039f6:	bf00      	nop
 80039f8:	e000      	b.n	80039fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10d      	bne.n	8003a1e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a02:	4b49      	ldr	r3, [pc, #292]	; (8003b28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6819      	ldr	r1, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	3b01      	subs	r3, #1
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	430b      	orrs	r3, r1
 8003a18:	4943      	ldr	r1, [pc, #268]	; (8003b28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a1e:	7bfb      	ldrb	r3, [r7, #15]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d17c      	bne.n	8003b1e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a24:	4b40      	ldr	r3, [pc, #256]	; (8003b28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a3f      	ldr	r2, [pc, #252]	; (8003b28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a30:	f7fd ff64 	bl	80018fc <HAL_GetTick>
 8003a34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a36:	e009      	b.n	8003a4c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a38:	f7fd ff60 	bl	80018fc <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d902      	bls.n	8003a4c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	73fb      	strb	r3, [r7, #15]
        break;
 8003a4a:	e005      	b.n	8003a58 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a4c:	4b36      	ldr	r3, [pc, #216]	; (8003b28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1ef      	bne.n	8003a38 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a58:	7bfb      	ldrb	r3, [r7, #15]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d15f      	bne.n	8003b1e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d110      	bne.n	8003a86 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a64:	4b30      	ldr	r3, [pc, #192]	; (8003b28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003a6c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6892      	ldr	r2, [r2, #8]
 8003a74:	0211      	lsls	r1, r2, #8
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	68d2      	ldr	r2, [r2, #12]
 8003a7a:	06d2      	lsls	r2, r2, #27
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	492a      	ldr	r1, [pc, #168]	; (8003b28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	610b      	str	r3, [r1, #16]
 8003a84:	e027      	b.n	8003ad6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d112      	bne.n	8003ab2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a8c:	4b26      	ldr	r3, [pc, #152]	; (8003b28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003a94:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	6892      	ldr	r2, [r2, #8]
 8003a9c:	0211      	lsls	r1, r2, #8
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6912      	ldr	r2, [r2, #16]
 8003aa2:	0852      	lsrs	r2, r2, #1
 8003aa4:	3a01      	subs	r2, #1
 8003aa6:	0552      	lsls	r2, r2, #21
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	491f      	ldr	r1, [pc, #124]	; (8003b28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	610b      	str	r3, [r1, #16]
 8003ab0:	e011      	b.n	8003ad6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ab2:	4b1d      	ldr	r3, [pc, #116]	; (8003b28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003aba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6892      	ldr	r2, [r2, #8]
 8003ac2:	0211      	lsls	r1, r2, #8
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	6952      	ldr	r2, [r2, #20]
 8003ac8:	0852      	lsrs	r2, r2, #1
 8003aca:	3a01      	subs	r2, #1
 8003acc:	0652      	lsls	r2, r2, #25
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	4915      	ldr	r1, [pc, #84]	; (8003b28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ad6:	4b14      	ldr	r3, [pc, #80]	; (8003b28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a13      	ldr	r2, [pc, #76]	; (8003b28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003adc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ae0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae2:	f7fd ff0b 	bl	80018fc <HAL_GetTick>
 8003ae6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ae8:	e009      	b.n	8003afe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003aea:	f7fd ff07 	bl	80018fc <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d902      	bls.n	8003afe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	73fb      	strb	r3, [r7, #15]
          break;
 8003afc:	e005      	b.n	8003b0a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003afe:	4b0a      	ldr	r3, [pc, #40]	; (8003b28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0ef      	beq.n	8003aea <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003b0a:	7bfb      	ldrb	r3, [r7, #15]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d106      	bne.n	8003b1e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b10:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b12:	691a      	ldr	r2, [r3, #16]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	4903      	ldr	r1, [pc, #12]	; (8003b28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40021000 	.word	0x40021000

08003b2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e095      	b.n	8003c6a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d108      	bne.n	8003b58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b4e:	d009      	beq.n	8003b64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	61da      	str	r2, [r3, #28]
 8003b56:	e005      	b.n	8003b64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d106      	bne.n	8003b84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7fd fc12 	bl	80013a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2202      	movs	r2, #2
 8003b88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b9a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ba4:	d902      	bls.n	8003bac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60fb      	str	r3, [r7, #12]
 8003baa:	e002      	b.n	8003bb2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003bac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bb0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003bba:	d007      	beq.n	8003bcc <HAL_SPI_Init+0xa0>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bc4:	d002      	beq.n	8003bcc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c04:	431a      	orrs	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0e:	ea42 0103 	orr.w	r1, r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c16:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	0c1b      	lsrs	r3, r3, #16
 8003c28:	f003 0204 	and.w	r2, r3, #4
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	f003 0310 	and.w	r3, r3, #16
 8003c34:	431a      	orrs	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c3a:	f003 0308 	and.w	r3, r3, #8
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003c48:	ea42 0103 	orr.w	r1, r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b088      	sub	sp, #32
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	603b      	str	r3, [r7, #0]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c82:	2300      	movs	r3, #0
 8003c84:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d101      	bne.n	8003c94 <HAL_SPI_Transmit+0x22>
 8003c90:	2302      	movs	r3, #2
 8003c92:	e158      	b.n	8003f46 <HAL_SPI_Transmit+0x2d4>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c9c:	f7fd fe2e 	bl	80018fc <HAL_GetTick>
 8003ca0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003ca2:	88fb      	ldrh	r3, [r7, #6]
 8003ca4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d002      	beq.n	8003cb8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cb6:	e13d      	b.n	8003f34 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d002      	beq.n	8003cc4 <HAL_SPI_Transmit+0x52>
 8003cbe:	88fb      	ldrh	r3, [r7, #6]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d102      	bne.n	8003cca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cc8:	e134      	b.n	8003f34 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2203      	movs	r2, #3
 8003cce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	68ba      	ldr	r2, [r7, #8]
 8003cdc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	88fa      	ldrh	r2, [r7, #6]
 8003ce2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	88fa      	ldrh	r2, [r7, #6]
 8003ce8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d14:	d10f      	bne.n	8003d36 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d34:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d40:	2b40      	cmp	r3, #64	; 0x40
 8003d42:	d007      	beq.n	8003d54 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d5c:	d94b      	bls.n	8003df6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d002      	beq.n	8003d6c <HAL_SPI_Transmit+0xfa>
 8003d66:	8afb      	ldrh	r3, [r7, #22]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d13e      	bne.n	8003dea <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d70:	881a      	ldrh	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7c:	1c9a      	adds	r2, r3, #2
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d90:	e02b      	b.n	8003dea <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d112      	bne.n	8003dc6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da4:	881a      	ldrh	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db0:	1c9a      	adds	r2, r3, #2
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003dc4:	e011      	b.n	8003dea <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dc6:	f7fd fd99 	bl	80018fc <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d803      	bhi.n	8003dde <HAL_SPI_Transmit+0x16c>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ddc:	d102      	bne.n	8003de4 <HAL_SPI_Transmit+0x172>
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d102      	bne.n	8003dea <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003de8:	e0a4      	b.n	8003f34 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1ce      	bne.n	8003d92 <HAL_SPI_Transmit+0x120>
 8003df4:	e07c      	b.n	8003ef0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d002      	beq.n	8003e04 <HAL_SPI_Transmit+0x192>
 8003dfe:	8afb      	ldrh	r3, [r7, #22]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d170      	bne.n	8003ee6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d912      	bls.n	8003e34 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e12:	881a      	ldrh	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1e:	1c9a      	adds	r2, r3, #2
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	3b02      	subs	r3, #2
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e32:	e058      	b.n	8003ee6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	330c      	adds	r3, #12
 8003e3e:	7812      	ldrb	r2, [r2, #0]
 8003e40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e46:	1c5a      	adds	r2, r3, #1
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	3b01      	subs	r3, #1
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003e5a:	e044      	b.n	8003ee6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d12b      	bne.n	8003ec2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d912      	bls.n	8003e9a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e78:	881a      	ldrh	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e84:	1c9a      	adds	r2, r3, #2
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	3b02      	subs	r3, #2
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e98:	e025      	b.n	8003ee6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	330c      	adds	r3, #12
 8003ea4:	7812      	ldrb	r2, [r2, #0]
 8003ea6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ec0:	e011      	b.n	8003ee6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ec2:	f7fd fd1b 	bl	80018fc <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d803      	bhi.n	8003eda <HAL_SPI_Transmit+0x268>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed8:	d102      	bne.n	8003ee0 <HAL_SPI_Transmit+0x26e>
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d102      	bne.n	8003ee6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ee4:	e026      	b.n	8003f34 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1b5      	bne.n	8003e5c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	6839      	ldr	r1, [r7, #0]
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f000 f945 	bl	8004184 <SPI_EndRxTxTransaction>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d002      	beq.n	8003f06 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2220      	movs	r2, #32
 8003f04:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10a      	bne.n	8003f24 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f0e:	2300      	movs	r3, #0
 8003f10:	613b      	str	r3, [r7, #16]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	613b      	str	r3, [r7, #16]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	613b      	str	r3, [r7, #16]
 8003f22:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d002      	beq.n	8003f32 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	77fb      	strb	r3, [r7, #31]
 8003f30:	e000      	b.n	8003f34 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003f32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003f44:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3720      	adds	r7, #32
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
	...

08003f50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b088      	sub	sp, #32
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	603b      	str	r3, [r7, #0]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f60:	f7fd fccc 	bl	80018fc <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f68:	1a9b      	subs	r3, r3, r2
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f70:	f7fd fcc4 	bl	80018fc <HAL_GetTick>
 8003f74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f76:	4b39      	ldr	r3, [pc, #228]	; (800405c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	015b      	lsls	r3, r3, #5
 8003f7c:	0d1b      	lsrs	r3, r3, #20
 8003f7e:	69fa      	ldr	r2, [r7, #28]
 8003f80:	fb02 f303 	mul.w	r3, r2, r3
 8003f84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f86:	e054      	b.n	8004032 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8e:	d050      	beq.n	8004032 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f90:	f7fd fcb4 	bl	80018fc <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	69fa      	ldr	r2, [r7, #28]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d902      	bls.n	8003fa6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d13d      	bne.n	8004022 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003fb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fbe:	d111      	bne.n	8003fe4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fc8:	d004      	beq.n	8003fd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fd2:	d107      	bne.n	8003fe4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fe2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fec:	d10f      	bne.n	800400e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800400c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e017      	b.n	8004052 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004028:	2300      	movs	r3, #0
 800402a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	3b01      	subs	r3, #1
 8004030:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	4013      	ands	r3, r2
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	429a      	cmp	r2, r3
 8004040:	bf0c      	ite	eq
 8004042:	2301      	moveq	r3, #1
 8004044:	2300      	movne	r3, #0
 8004046:	b2db      	uxtb	r3, r3
 8004048:	461a      	mov	r2, r3
 800404a:	79fb      	ldrb	r3, [r7, #7]
 800404c:	429a      	cmp	r2, r3
 800404e:	d19b      	bne.n	8003f88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3720      	adds	r7, #32
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	20000014 	.word	0x20000014

08004060 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b088      	sub	sp, #32
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
 800406c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800406e:	f7fd fc45 	bl	80018fc <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004076:	1a9b      	subs	r3, r3, r2
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	4413      	add	r3, r2
 800407c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800407e:	f7fd fc3d 	bl	80018fc <HAL_GetTick>
 8004082:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004084:	4b3e      	ldr	r3, [pc, #248]	; (8004180 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	4613      	mov	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	00da      	lsls	r2, r3, #3
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	0d1b      	lsrs	r3, r3, #20
 8004094:	69fa      	ldr	r2, [r7, #28]
 8004096:	fb02 f303 	mul.w	r3, r2, r3
 800409a:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 800409c:	e062      	b.n	8004164 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80040a4:	d109      	bne.n	80040ba <SPI_WaitFifoStateUntilTimeout+0x5a>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d106      	bne.n	80040ba <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	330c      	adds	r3, #12
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80040b8:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c0:	d050      	beq.n	8004164 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040c2:	f7fd fc1b 	bl	80018fc <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	69fa      	ldr	r2, [r7, #28]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d902      	bls.n	80040d8 <SPI_WaitFifoStateUntilTimeout+0x78>
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d13d      	bne.n	8004154 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040f0:	d111      	bne.n	8004116 <SPI_WaitFifoStateUntilTimeout+0xb6>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040fa:	d004      	beq.n	8004106 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004104:	d107      	bne.n	8004116 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004114:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800411e:	d10f      	bne.n	8004140 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800413e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e010      	b.n	8004176 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800415a:	2300      	movs	r3, #0
 800415c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	3b01      	subs	r3, #1
 8004162:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689a      	ldr	r2, [r3, #8]
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	4013      	ands	r3, r2
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	429a      	cmp	r2, r3
 8004172:	d194      	bne.n	800409e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3720      	adds	r7, #32
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20000014 	.word	0x20000014

08004184 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af02      	add	r7, sp, #8
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	9300      	str	r3, [sp, #0]
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2200      	movs	r2, #0
 8004198:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f7ff ff5f 	bl	8004060 <SPI_WaitFifoStateUntilTimeout>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d007      	beq.n	80041b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ac:	f043 0220 	orr.w	r2, r3, #32
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e027      	b.n	8004208 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	2200      	movs	r2, #0
 80041c0:	2180      	movs	r1, #128	; 0x80
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f7ff fec4 	bl	8003f50 <SPI_WaitFlagStateUntilTimeout>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d007      	beq.n	80041de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041d2:	f043 0220 	orr.w	r2, r3, #32
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e014      	b.n	8004208 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f7ff ff38 	bl	8004060 <SPI_WaitFifoStateUntilTimeout>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d007      	beq.n	8004206 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041fa:	f043 0220 	orr.w	r2, r3, #32
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e000      	b.n	8004208 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e040      	b.n	80042a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004226:	2b00      	cmp	r3, #0
 8004228:	d106      	bne.n	8004238 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f7fd f91a 	bl	800146c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2224      	movs	r2, #36	; 0x24
 800423c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0201 	bic.w	r2, r2, #1
 800424c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 fa4e 	bl	80046f0 <UART_SetConfig>
 8004254:	4603      	mov	r3, r0
 8004256:	2b01      	cmp	r3, #1
 8004258:	d101      	bne.n	800425e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e022      	b.n	80042a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	2b00      	cmp	r3, #0
 8004264:	d002      	beq.n	800426c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 fc76 	bl	8004b58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800427a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689a      	ldr	r2, [r3, #8]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800428a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f042 0201 	orr.w	r2, r2, #1
 800429a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 fcfd 	bl	8004c9c <UART_CheckIdleState>
 80042a2:	4603      	mov	r3, r0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3708      	adds	r7, #8
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b088      	sub	sp, #32
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80042cc:	69fa      	ldr	r2, [r7, #28]
 80042ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80042d2:	4013      	ands	r3, r2
 80042d4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d113      	bne.n	8004304 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	f003 0320 	and.w	r3, r3, #32
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00e      	beq.n	8004304 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	f003 0320 	and.w	r3, r3, #32
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d009      	beq.n	8004304 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 81ce 	beq.w	8004696 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	4798      	blx	r3
      }
      return;
 8004302:	e1c8      	b.n	8004696 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 80e3 	beq.w	80044d2 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b00      	cmp	r3, #0
 8004314:	d105      	bne.n	8004322 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004316:	69ba      	ldr	r2, [r7, #24]
 8004318:	4ba6      	ldr	r3, [pc, #664]	; (80045b4 <HAL_UART_IRQHandler+0x308>)
 800431a:	4013      	ands	r3, r2
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 80d8 	beq.w	80044d2 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	2b00      	cmp	r3, #0
 800432a:	d010      	beq.n	800434e <HAL_UART_IRQHandler+0xa2>
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00b      	beq.n	800434e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2201      	movs	r2, #1
 800433c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004344:	f043 0201 	orr.w	r2, r3, #1
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d010      	beq.n	800437a <HAL_UART_IRQHandler+0xce>
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00b      	beq.n	800437a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2202      	movs	r2, #2
 8004368:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004370:	f043 0204 	orr.w	r2, r3, #4
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b00      	cmp	r3, #0
 8004382:	d010      	beq.n	80043a6 <HAL_UART_IRQHandler+0xfa>
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00b      	beq.n	80043a6 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2204      	movs	r2, #4
 8004394:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800439c:	f043 0202 	orr.w	r2, r3, #2
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	f003 0308 	and.w	r3, r3, #8
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d015      	beq.n	80043dc <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	f003 0320 	and.w	r3, r3, #32
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d104      	bne.n	80043c4 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00b      	beq.n	80043dc <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2208      	movs	r2, #8
 80043ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043d2:	f043 0208 	orr.w	r2, r3, #8
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d011      	beq.n	800440a <HAL_UART_IRQHandler+0x15e>
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00c      	beq.n	800440a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004400:	f043 0220 	orr.w	r2, r3, #32
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 8142 	beq.w	800469a <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	f003 0320 	and.w	r3, r3, #32
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00c      	beq.n	800443a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	f003 0320 	and.w	r3, r3, #32
 8004426:	2b00      	cmp	r3, #0
 8004428:	d007      	beq.n	800443a <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800442e:	2b00      	cmp	r3, #0
 8004430:	d003      	beq.n	800443a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004440:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444c:	2b40      	cmp	r3, #64	; 0x40
 800444e:	d004      	beq.n	800445a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004456:	2b00      	cmp	r3, #0
 8004458:	d031      	beq.n	80044be <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 fce3 	bl	8004e26 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446a:	2b40      	cmp	r3, #64	; 0x40
 800446c:	d123      	bne.n	80044b6 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800447c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004482:	2b00      	cmp	r3, #0
 8004484:	d013      	beq.n	80044ae <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448a:	4a4b      	ldr	r2, [pc, #300]	; (80045b8 <HAL_UART_IRQHandler+0x30c>)
 800448c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004492:	4618      	mov	r0, r3
 8004494:	f7fd fc6a 	bl	8001d6c <HAL_DMA_Abort_IT>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d017      	beq.n	80044ce <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80044a8:	4610      	mov	r0, r2
 80044aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ac:	e00f      	b.n	80044ce <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f908 	bl	80046c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b4:	e00b      	b.n	80044ce <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f904 	bl	80046c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044bc:	e007      	b.n	80044ce <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f900 	bl	80046c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80044cc:	e0e5      	b.n	800469a <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ce:	bf00      	nop
    return;
 80044d0:	e0e3      	b.n	800469a <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	f040 80a9 	bne.w	800462e <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	f003 0310 	and.w	r3, r3, #16
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 80a3 	beq.w	800462e <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	f003 0310 	and.w	r3, r3, #16
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 809d 	beq.w	800462e <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2210      	movs	r2, #16
 80044fa:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004506:	2b40      	cmp	r3, #64	; 0x40
 8004508:	d158      	bne.n	80045bc <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8004514:	893b      	ldrh	r3, [r7, #8]
 8004516:	2b00      	cmp	r3, #0
 8004518:	f000 80c1 	beq.w	800469e <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004522:	893a      	ldrh	r2, [r7, #8]
 8004524:	429a      	cmp	r2, r3
 8004526:	f080 80ba 	bcs.w	800469e <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	893a      	ldrh	r2, [r7, #8]
 800452e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0320 	and.w	r3, r3, #32
 800453e:	2b00      	cmp	r3, #0
 8004540:	d12a      	bne.n	8004598 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004550:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689a      	ldr	r2, [r3, #8]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0201 	bic.w	r2, r2, #1
 8004560:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689a      	ldr	r2, [r3, #8]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004570:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2220      	movs	r2, #32
 8004576:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 0210 	bic.w	r2, r2, #16
 800458c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004592:	4618      	mov	r0, r3
 8004594:	f7fd fbac 	bl	8001cf0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	4619      	mov	r1, r3
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f893 	bl	80046d8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80045b2:	e074      	b.n	800469e <HAL_UART_IRQHandler+0x3f2>
 80045b4:	04000120 	.word	0x04000120
 80045b8:	08004e85 	.word	0x08004e85
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d063      	beq.n	80046a2 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 80045da:	897b      	ldrh	r3, [r7, #10]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d060      	beq.n	80046a2 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80045ee:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689a      	ldr	r2, [r3, #8]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 0201 	bic.w	r2, r2, #1
 80045fe:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2220      	movs	r2, #32
 8004604:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 0210 	bic.w	r2, r2, #16
 8004620:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004622:	897b      	ldrh	r3, [r7, #10]
 8004624:	4619      	mov	r1, r3
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f856 	bl	80046d8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800462c:	e039      	b.n	80046a2 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00d      	beq.n	8004654 <HAL_UART_IRQHandler+0x3a8>
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d008      	beq.n	8004654 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800464a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 fc48 	bl	8004ee2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004652:	e029      	b.n	80046a8 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00d      	beq.n	800467a <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004664:	2b00      	cmp	r3, #0
 8004666:	d008      	beq.n	800467a <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800466c:	2b00      	cmp	r3, #0
 800466e:	d01a      	beq.n	80046a6 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	4798      	blx	r3
    }
    return;
 8004678:	e015      	b.n	80046a6 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004680:	2b00      	cmp	r3, #0
 8004682:	d011      	beq.n	80046a8 <HAL_UART_IRQHandler+0x3fc>
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00c      	beq.n	80046a8 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 fc0e 	bl	8004eb0 <UART_EndTransmit_IT>
    return;
 8004694:	e008      	b.n	80046a8 <HAL_UART_IRQHandler+0x3fc>
      return;
 8004696:	bf00      	nop
 8004698:	e006      	b.n	80046a8 <HAL_UART_IRQHandler+0x3fc>
    return;
 800469a:	bf00      	nop
 800469c:	e004      	b.n	80046a8 <HAL_UART_IRQHandler+0x3fc>
      return;
 800469e:	bf00      	nop
 80046a0:	e002      	b.n	80046a8 <HAL_UART_IRQHandler+0x3fc>
      return;
 80046a2:	bf00      	nop
 80046a4:	e000      	b.n	80046a8 <HAL_UART_IRQHandler+0x3fc>
    return;
 80046a6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80046a8:	3720      	adds	r7, #32
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop

080046b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	460b      	mov	r3, r1
 80046e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046f0:	b5b0      	push	{r4, r5, r7, lr}
 80046f2:	b088      	sub	sp, #32
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046f8:	2300      	movs	r3, #0
 80046fa:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689a      	ldr	r2, [r3, #8]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	431a      	orrs	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	4313      	orrs	r3, r2
 8004712:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	4baa      	ldr	r3, [pc, #680]	; (80049c4 <UART_SetConfig+0x2d4>)
 800471c:	4013      	ands	r3, r2
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	6812      	ldr	r2, [r2, #0]
 8004722:	69f9      	ldr	r1, [r7, #28]
 8004724:	430b      	orrs	r3, r1
 8004726:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	430a      	orrs	r2, r1
 800473c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a9f      	ldr	r2, [pc, #636]	; (80049c8 <UART_SetConfig+0x2d8>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d004      	beq.n	8004758 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	69fa      	ldr	r2, [r7, #28]
 8004754:	4313      	orrs	r3, r2
 8004756:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	69fa      	ldr	r2, [r7, #28]
 8004768:	430a      	orrs	r2, r1
 800476a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a96      	ldr	r2, [pc, #600]	; (80049cc <UART_SetConfig+0x2dc>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d121      	bne.n	80047ba <UART_SetConfig+0xca>
 8004776:	4b96      	ldr	r3, [pc, #600]	; (80049d0 <UART_SetConfig+0x2e0>)
 8004778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477c:	f003 0303 	and.w	r3, r3, #3
 8004780:	2b03      	cmp	r3, #3
 8004782:	d817      	bhi.n	80047b4 <UART_SetConfig+0xc4>
 8004784:	a201      	add	r2, pc, #4	; (adr r2, 800478c <UART_SetConfig+0x9c>)
 8004786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478a:	bf00      	nop
 800478c:	0800479d 	.word	0x0800479d
 8004790:	080047a9 	.word	0x080047a9
 8004794:	080047a3 	.word	0x080047a3
 8004798:	080047af 	.word	0x080047af
 800479c:	2301      	movs	r3, #1
 800479e:	76fb      	strb	r3, [r7, #27]
 80047a0:	e096      	b.n	80048d0 <UART_SetConfig+0x1e0>
 80047a2:	2302      	movs	r3, #2
 80047a4:	76fb      	strb	r3, [r7, #27]
 80047a6:	e093      	b.n	80048d0 <UART_SetConfig+0x1e0>
 80047a8:	2304      	movs	r3, #4
 80047aa:	76fb      	strb	r3, [r7, #27]
 80047ac:	e090      	b.n	80048d0 <UART_SetConfig+0x1e0>
 80047ae:	2308      	movs	r3, #8
 80047b0:	76fb      	strb	r3, [r7, #27]
 80047b2:	e08d      	b.n	80048d0 <UART_SetConfig+0x1e0>
 80047b4:	2310      	movs	r3, #16
 80047b6:	76fb      	strb	r3, [r7, #27]
 80047b8:	e08a      	b.n	80048d0 <UART_SetConfig+0x1e0>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a85      	ldr	r2, [pc, #532]	; (80049d4 <UART_SetConfig+0x2e4>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d132      	bne.n	800482a <UART_SetConfig+0x13a>
 80047c4:	4b82      	ldr	r3, [pc, #520]	; (80049d0 <UART_SetConfig+0x2e0>)
 80047c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ca:	f003 030c 	and.w	r3, r3, #12
 80047ce:	2b0c      	cmp	r3, #12
 80047d0:	d828      	bhi.n	8004824 <UART_SetConfig+0x134>
 80047d2:	a201      	add	r2, pc, #4	; (adr r2, 80047d8 <UART_SetConfig+0xe8>)
 80047d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d8:	0800480d 	.word	0x0800480d
 80047dc:	08004825 	.word	0x08004825
 80047e0:	08004825 	.word	0x08004825
 80047e4:	08004825 	.word	0x08004825
 80047e8:	08004819 	.word	0x08004819
 80047ec:	08004825 	.word	0x08004825
 80047f0:	08004825 	.word	0x08004825
 80047f4:	08004825 	.word	0x08004825
 80047f8:	08004813 	.word	0x08004813
 80047fc:	08004825 	.word	0x08004825
 8004800:	08004825 	.word	0x08004825
 8004804:	08004825 	.word	0x08004825
 8004808:	0800481f 	.word	0x0800481f
 800480c:	2300      	movs	r3, #0
 800480e:	76fb      	strb	r3, [r7, #27]
 8004810:	e05e      	b.n	80048d0 <UART_SetConfig+0x1e0>
 8004812:	2302      	movs	r3, #2
 8004814:	76fb      	strb	r3, [r7, #27]
 8004816:	e05b      	b.n	80048d0 <UART_SetConfig+0x1e0>
 8004818:	2304      	movs	r3, #4
 800481a:	76fb      	strb	r3, [r7, #27]
 800481c:	e058      	b.n	80048d0 <UART_SetConfig+0x1e0>
 800481e:	2308      	movs	r3, #8
 8004820:	76fb      	strb	r3, [r7, #27]
 8004822:	e055      	b.n	80048d0 <UART_SetConfig+0x1e0>
 8004824:	2310      	movs	r3, #16
 8004826:	76fb      	strb	r3, [r7, #27]
 8004828:	e052      	b.n	80048d0 <UART_SetConfig+0x1e0>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a6a      	ldr	r2, [pc, #424]	; (80049d8 <UART_SetConfig+0x2e8>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d120      	bne.n	8004876 <UART_SetConfig+0x186>
 8004834:	4b66      	ldr	r3, [pc, #408]	; (80049d0 <UART_SetConfig+0x2e0>)
 8004836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800483a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800483e:	2b30      	cmp	r3, #48	; 0x30
 8004840:	d013      	beq.n	800486a <UART_SetConfig+0x17a>
 8004842:	2b30      	cmp	r3, #48	; 0x30
 8004844:	d814      	bhi.n	8004870 <UART_SetConfig+0x180>
 8004846:	2b20      	cmp	r3, #32
 8004848:	d009      	beq.n	800485e <UART_SetConfig+0x16e>
 800484a:	2b20      	cmp	r3, #32
 800484c:	d810      	bhi.n	8004870 <UART_SetConfig+0x180>
 800484e:	2b00      	cmp	r3, #0
 8004850:	d002      	beq.n	8004858 <UART_SetConfig+0x168>
 8004852:	2b10      	cmp	r3, #16
 8004854:	d006      	beq.n	8004864 <UART_SetConfig+0x174>
 8004856:	e00b      	b.n	8004870 <UART_SetConfig+0x180>
 8004858:	2300      	movs	r3, #0
 800485a:	76fb      	strb	r3, [r7, #27]
 800485c:	e038      	b.n	80048d0 <UART_SetConfig+0x1e0>
 800485e:	2302      	movs	r3, #2
 8004860:	76fb      	strb	r3, [r7, #27]
 8004862:	e035      	b.n	80048d0 <UART_SetConfig+0x1e0>
 8004864:	2304      	movs	r3, #4
 8004866:	76fb      	strb	r3, [r7, #27]
 8004868:	e032      	b.n	80048d0 <UART_SetConfig+0x1e0>
 800486a:	2308      	movs	r3, #8
 800486c:	76fb      	strb	r3, [r7, #27]
 800486e:	e02f      	b.n	80048d0 <UART_SetConfig+0x1e0>
 8004870:	2310      	movs	r3, #16
 8004872:	76fb      	strb	r3, [r7, #27]
 8004874:	e02c      	b.n	80048d0 <UART_SetConfig+0x1e0>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a53      	ldr	r2, [pc, #332]	; (80049c8 <UART_SetConfig+0x2d8>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d125      	bne.n	80048cc <UART_SetConfig+0x1dc>
 8004880:	4b53      	ldr	r3, [pc, #332]	; (80049d0 <UART_SetConfig+0x2e0>)
 8004882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004886:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800488a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800488e:	d017      	beq.n	80048c0 <UART_SetConfig+0x1d0>
 8004890:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004894:	d817      	bhi.n	80048c6 <UART_SetConfig+0x1d6>
 8004896:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800489a:	d00b      	beq.n	80048b4 <UART_SetConfig+0x1c4>
 800489c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048a0:	d811      	bhi.n	80048c6 <UART_SetConfig+0x1d6>
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <UART_SetConfig+0x1be>
 80048a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048aa:	d006      	beq.n	80048ba <UART_SetConfig+0x1ca>
 80048ac:	e00b      	b.n	80048c6 <UART_SetConfig+0x1d6>
 80048ae:	2300      	movs	r3, #0
 80048b0:	76fb      	strb	r3, [r7, #27]
 80048b2:	e00d      	b.n	80048d0 <UART_SetConfig+0x1e0>
 80048b4:	2302      	movs	r3, #2
 80048b6:	76fb      	strb	r3, [r7, #27]
 80048b8:	e00a      	b.n	80048d0 <UART_SetConfig+0x1e0>
 80048ba:	2304      	movs	r3, #4
 80048bc:	76fb      	strb	r3, [r7, #27]
 80048be:	e007      	b.n	80048d0 <UART_SetConfig+0x1e0>
 80048c0:	2308      	movs	r3, #8
 80048c2:	76fb      	strb	r3, [r7, #27]
 80048c4:	e004      	b.n	80048d0 <UART_SetConfig+0x1e0>
 80048c6:	2310      	movs	r3, #16
 80048c8:	76fb      	strb	r3, [r7, #27]
 80048ca:	e001      	b.n	80048d0 <UART_SetConfig+0x1e0>
 80048cc:	2310      	movs	r3, #16
 80048ce:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a3c      	ldr	r2, [pc, #240]	; (80049c8 <UART_SetConfig+0x2d8>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	f040 8082 	bne.w	80049e0 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048dc:	7efb      	ldrb	r3, [r7, #27]
 80048de:	2b08      	cmp	r3, #8
 80048e0:	d823      	bhi.n	800492a <UART_SetConfig+0x23a>
 80048e2:	a201      	add	r2, pc, #4	; (adr r2, 80048e8 <UART_SetConfig+0x1f8>)
 80048e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e8:	0800490d 	.word	0x0800490d
 80048ec:	0800492b 	.word	0x0800492b
 80048f0:	08004915 	.word	0x08004915
 80048f4:	0800492b 	.word	0x0800492b
 80048f8:	0800491b 	.word	0x0800491b
 80048fc:	0800492b 	.word	0x0800492b
 8004900:	0800492b 	.word	0x0800492b
 8004904:	0800492b 	.word	0x0800492b
 8004908:	08004923 	.word	0x08004923
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800490c:	f7fe fd4a 	bl	80033a4 <HAL_RCC_GetPCLK1Freq>
 8004910:	6178      	str	r0, [r7, #20]
        break;
 8004912:	e00f      	b.n	8004934 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004914:	4b31      	ldr	r3, [pc, #196]	; (80049dc <UART_SetConfig+0x2ec>)
 8004916:	617b      	str	r3, [r7, #20]
        break;
 8004918:	e00c      	b.n	8004934 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800491a:	f7fe fcab 	bl	8003274 <HAL_RCC_GetSysClockFreq>
 800491e:	6178      	str	r0, [r7, #20]
        break;
 8004920:	e008      	b.n	8004934 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004926:	617b      	str	r3, [r7, #20]
        break;
 8004928:	e004      	b.n	8004934 <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 800492a:	2300      	movs	r3, #0
 800492c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	76bb      	strb	r3, [r7, #26]
        break;
 8004932:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	2b00      	cmp	r3, #0
 8004938:	f000 8100 	beq.w	8004b3c <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	4613      	mov	r3, r2
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	4413      	add	r3, r2
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	429a      	cmp	r2, r3
 800494a:	d305      	bcc.n	8004958 <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	429a      	cmp	r2, r3
 8004956:	d902      	bls.n	800495e <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	76bb      	strb	r3, [r7, #26]
 800495c:	e0ee      	b.n	8004b3c <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	4618      	mov	r0, r3
 8004962:	f04f 0100 	mov.w	r1, #0
 8004966:	f04f 0200 	mov.w	r2, #0
 800496a:	f04f 0300 	mov.w	r3, #0
 800496e:	020b      	lsls	r3, r1, #8
 8004970:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004974:	0202      	lsls	r2, r0, #8
 8004976:	6879      	ldr	r1, [r7, #4]
 8004978:	6849      	ldr	r1, [r1, #4]
 800497a:	0849      	lsrs	r1, r1, #1
 800497c:	4608      	mov	r0, r1
 800497e:	f04f 0100 	mov.w	r1, #0
 8004982:	1814      	adds	r4, r2, r0
 8004984:	eb43 0501 	adc.w	r5, r3, r1
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	461a      	mov	r2, r3
 800498e:	f04f 0300 	mov.w	r3, #0
 8004992:	4620      	mov	r0, r4
 8004994:	4629      	mov	r1, r5
 8004996:	f7fb fc23 	bl	80001e0 <__aeabi_uldivmod>
 800499a:	4602      	mov	r2, r0
 800499c:	460b      	mov	r3, r1
 800499e:	4613      	mov	r3, r2
 80049a0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049a8:	d308      	bcc.n	80049bc <UART_SetConfig+0x2cc>
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049b0:	d204      	bcs.n	80049bc <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	60da      	str	r2, [r3, #12]
 80049ba:	e0bf      	b.n	8004b3c <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	76bb      	strb	r3, [r7, #26]
 80049c0:	e0bc      	b.n	8004b3c <UART_SetConfig+0x44c>
 80049c2:	bf00      	nop
 80049c4:	efff69f3 	.word	0xefff69f3
 80049c8:	40008000 	.word	0x40008000
 80049cc:	40013800 	.word	0x40013800
 80049d0:	40021000 	.word	0x40021000
 80049d4:	40004400 	.word	0x40004400
 80049d8:	40004800 	.word	0x40004800
 80049dc:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	69db      	ldr	r3, [r3, #28]
 80049e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049e8:	d15c      	bne.n	8004aa4 <UART_SetConfig+0x3b4>
  {
    switch (clocksource)
 80049ea:	7efb      	ldrb	r3, [r7, #27]
 80049ec:	2b08      	cmp	r3, #8
 80049ee:	d828      	bhi.n	8004a42 <UART_SetConfig+0x352>
 80049f0:	a201      	add	r2, pc, #4	; (adr r2, 80049f8 <UART_SetConfig+0x308>)
 80049f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f6:	bf00      	nop
 80049f8:	08004a1d 	.word	0x08004a1d
 80049fc:	08004a25 	.word	0x08004a25
 8004a00:	08004a2d 	.word	0x08004a2d
 8004a04:	08004a43 	.word	0x08004a43
 8004a08:	08004a33 	.word	0x08004a33
 8004a0c:	08004a43 	.word	0x08004a43
 8004a10:	08004a43 	.word	0x08004a43
 8004a14:	08004a43 	.word	0x08004a43
 8004a18:	08004a3b 	.word	0x08004a3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a1c:	f7fe fcc2 	bl	80033a4 <HAL_RCC_GetPCLK1Freq>
 8004a20:	6178      	str	r0, [r7, #20]
        break;
 8004a22:	e013      	b.n	8004a4c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a24:	f7fe fcd4 	bl	80033d0 <HAL_RCC_GetPCLK2Freq>
 8004a28:	6178      	str	r0, [r7, #20]
        break;
 8004a2a:	e00f      	b.n	8004a4c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a2c:	4b49      	ldr	r3, [pc, #292]	; (8004b54 <UART_SetConfig+0x464>)
 8004a2e:	617b      	str	r3, [r7, #20]
        break;
 8004a30:	e00c      	b.n	8004a4c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a32:	f7fe fc1f 	bl	8003274 <HAL_RCC_GetSysClockFreq>
 8004a36:	6178      	str	r0, [r7, #20]
        break;
 8004a38:	e008      	b.n	8004a4c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a3e:	617b      	str	r3, [r7, #20]
        break;
 8004a40:	e004      	b.n	8004a4c <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	76bb      	strb	r3, [r7, #26]
        break;
 8004a4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d074      	beq.n	8004b3c <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	005a      	lsls	r2, r3, #1
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	085b      	lsrs	r3, r3, #1
 8004a5c:	441a      	add	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	2b0f      	cmp	r3, #15
 8004a6e:	d916      	bls.n	8004a9e <UART_SetConfig+0x3ae>
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a76:	d212      	bcs.n	8004a9e <UART_SetConfig+0x3ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	f023 030f 	bic.w	r3, r3, #15
 8004a80:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	085b      	lsrs	r3, r3, #1
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	f003 0307 	and.w	r3, r3, #7
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	89fb      	ldrh	r3, [r7, #14]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	89fa      	ldrh	r2, [r7, #14]
 8004a9a:	60da      	str	r2, [r3, #12]
 8004a9c:	e04e      	b.n	8004b3c <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	76bb      	strb	r3, [r7, #26]
 8004aa2:	e04b      	b.n	8004b3c <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004aa4:	7efb      	ldrb	r3, [r7, #27]
 8004aa6:	2b08      	cmp	r3, #8
 8004aa8:	d827      	bhi.n	8004afa <UART_SetConfig+0x40a>
 8004aaa:	a201      	add	r2, pc, #4	; (adr r2, 8004ab0 <UART_SetConfig+0x3c0>)
 8004aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab0:	08004ad5 	.word	0x08004ad5
 8004ab4:	08004add 	.word	0x08004add
 8004ab8:	08004ae5 	.word	0x08004ae5
 8004abc:	08004afb 	.word	0x08004afb
 8004ac0:	08004aeb 	.word	0x08004aeb
 8004ac4:	08004afb 	.word	0x08004afb
 8004ac8:	08004afb 	.word	0x08004afb
 8004acc:	08004afb 	.word	0x08004afb
 8004ad0:	08004af3 	.word	0x08004af3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ad4:	f7fe fc66 	bl	80033a4 <HAL_RCC_GetPCLK1Freq>
 8004ad8:	6178      	str	r0, [r7, #20]
        break;
 8004ada:	e013      	b.n	8004b04 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004adc:	f7fe fc78 	bl	80033d0 <HAL_RCC_GetPCLK2Freq>
 8004ae0:	6178      	str	r0, [r7, #20]
        break;
 8004ae2:	e00f      	b.n	8004b04 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ae4:	4b1b      	ldr	r3, [pc, #108]	; (8004b54 <UART_SetConfig+0x464>)
 8004ae6:	617b      	str	r3, [r7, #20]
        break;
 8004ae8:	e00c      	b.n	8004b04 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aea:	f7fe fbc3 	bl	8003274 <HAL_RCC_GetSysClockFreq>
 8004aee:	6178      	str	r0, [r7, #20]
        break;
 8004af0:	e008      	b.n	8004b04 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004af6:	617b      	str	r3, [r7, #20]
        break;
 8004af8:	e004      	b.n	8004b04 <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	76bb      	strb	r3, [r7, #26]
        break;
 8004b02:	bf00      	nop
    }

    if (pclk != 0U)
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d018      	beq.n	8004b3c <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	085a      	lsrs	r2, r3, #1
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	441a      	add	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	2b0f      	cmp	r3, #15
 8004b24:	d908      	bls.n	8004b38 <UART_SetConfig+0x448>
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b2c:	d204      	bcs.n	8004b38 <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = usartdiv;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	60da      	str	r2, [r3, #12]
 8004b36:	e001      	b.n	8004b3c <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004b48:	7ebb      	ldrb	r3, [r7, #26]
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3720      	adds	r7, #32
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bdb0      	pop	{r4, r5, r7, pc}
 8004b52:	bf00      	nop
 8004b54:	00f42400 	.word	0x00f42400

08004b58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00a      	beq.n	8004b82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00a      	beq.n	8004ba4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00a      	beq.n	8004bc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	f003 0308 	and.w	r3, r3, #8
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00a      	beq.n	8004be8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	430a      	orrs	r2, r1
 8004be6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bec:	f003 0310 	and.w	r3, r3, #16
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00a      	beq.n	8004c0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0e:	f003 0320 	and.w	r3, r3, #32
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00a      	beq.n	8004c2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d01a      	beq.n	8004c6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c56:	d10a      	bne.n	8004c6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00a      	beq.n	8004c90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	605a      	str	r2, [r3, #4]
  }
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af02      	add	r7, sp, #8
 8004ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004cac:	f7fc fe26 	bl	80018fc <HAL_GetTick>
 8004cb0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0308 	and.w	r3, r3, #8
 8004cbc:	2b08      	cmp	r3, #8
 8004cbe:	d10e      	bne.n	8004cde <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f82d 	bl	8004d2e <UART_WaitOnFlagUntilTimeout>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e023      	b.n	8004d26 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b04      	cmp	r3, #4
 8004cea:	d10e      	bne.n	8004d0a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f817 	bl	8004d2e <UART_WaitOnFlagUntilTimeout>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e00d      	b.n	8004d26 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2220      	movs	r2, #32
 8004d0e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2220      	movs	r2, #32
 8004d14:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b084      	sub	sp, #16
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	60f8      	str	r0, [r7, #12]
 8004d36:	60b9      	str	r1, [r7, #8]
 8004d38:	603b      	str	r3, [r7, #0]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d3e:	e05e      	b.n	8004dfe <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d46:	d05a      	beq.n	8004dfe <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d48:	f7fc fdd8 	bl	80018fc <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	69ba      	ldr	r2, [r7, #24]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d302      	bcc.n	8004d5e <UART_WaitOnFlagUntilTimeout+0x30>
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d11b      	bne.n	8004d96 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d6c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f022 0201 	bic.w	r2, r2, #1
 8004d7c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2220      	movs	r2, #32
 8004d82:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2220      	movs	r2, #32
 8004d88:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e043      	b.n	8004e1e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0304 	and.w	r3, r3, #4
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d02c      	beq.n	8004dfe <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004db2:	d124      	bne.n	8004dfe <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004dbc:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004dcc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	689a      	ldr	r2, [r3, #8]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 0201 	bic.w	r2, r2, #1
 8004ddc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2220      	movs	r2, #32
 8004de2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2220      	movs	r2, #32
 8004de8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2220      	movs	r2, #32
 8004dee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e00f      	b.n	8004e1e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	69da      	ldr	r2, [r3, #28]
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	4013      	ands	r3, r2
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	bf0c      	ite	eq
 8004e0e:	2301      	moveq	r3, #1
 8004e10:	2300      	movne	r3, #0
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	461a      	mov	r2, r3
 8004e16:	79fb      	ldrb	r3, [r7, #7]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d091      	beq.n	8004d40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b083      	sub	sp, #12
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e3c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	689a      	ldr	r2, [r3, #8]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0201 	bic.w	r2, r2, #1
 8004e4c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d107      	bne.n	8004e66 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0210 	bic.w	r2, r2, #16
 8004e64:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f7ff fc0e 	bl	80046c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ea8:	bf00      	nop
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ec6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f7ff fbeb 	bl	80046b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004eda:	bf00      	nop
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004eea:	bf00      	nop
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
	...

08004ef8 <__NVIC_SetPriority>:
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	4603      	mov	r3, r0
 8004f00:	6039      	str	r1, [r7, #0]
 8004f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	db0a      	blt.n	8004f22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	490c      	ldr	r1, [pc, #48]	; (8004f44 <__NVIC_SetPriority+0x4c>)
 8004f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f16:	0112      	lsls	r2, r2, #4
 8004f18:	b2d2      	uxtb	r2, r2
 8004f1a:	440b      	add	r3, r1
 8004f1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004f20:	e00a      	b.n	8004f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	4908      	ldr	r1, [pc, #32]	; (8004f48 <__NVIC_SetPriority+0x50>)
 8004f28:	79fb      	ldrb	r3, [r7, #7]
 8004f2a:	f003 030f 	and.w	r3, r3, #15
 8004f2e:	3b04      	subs	r3, #4
 8004f30:	0112      	lsls	r2, r2, #4
 8004f32:	b2d2      	uxtb	r2, r2
 8004f34:	440b      	add	r3, r1
 8004f36:	761a      	strb	r2, [r3, #24]
}
 8004f38:	bf00      	nop
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr
 8004f44:	e000e100 	.word	0xe000e100
 8004f48:	e000ed00 	.word	0xe000ed00

08004f4c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004f50:	2100      	movs	r1, #0
 8004f52:	f06f 0004 	mvn.w	r0, #4
 8004f56:	f7ff ffcf 	bl	8004ef8 <__NVIC_SetPriority>
#endif
}
 8004f5a:	bf00      	nop
 8004f5c:	bd80      	pop	{r7, pc}
	...

08004f60 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f66:	f3ef 8305 	mrs	r3, IPSR
 8004f6a:	603b      	str	r3, [r7, #0]
  return(result);
 8004f6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004f72:	f06f 0305 	mvn.w	r3, #5
 8004f76:	607b      	str	r3, [r7, #4]
 8004f78:	e00c      	b.n	8004f94 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004f7a:	4b0a      	ldr	r3, [pc, #40]	; (8004fa4 <osKernelInitialize+0x44>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d105      	bne.n	8004f8e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004f82:	4b08      	ldr	r3, [pc, #32]	; (8004fa4 <osKernelInitialize+0x44>)
 8004f84:	2201      	movs	r2, #1
 8004f86:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	607b      	str	r3, [r7, #4]
 8004f8c:	e002      	b.n	8004f94 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004f94:	687b      	ldr	r3, [r7, #4]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	2000008c 	.word	0x2000008c

08004fa8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fae:	f3ef 8305 	mrs	r3, IPSR
 8004fb2:	603b      	str	r3, [r7, #0]
  return(result);
 8004fb4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004fba:	f06f 0305 	mvn.w	r3, #5
 8004fbe:	607b      	str	r3, [r7, #4]
 8004fc0:	e010      	b.n	8004fe4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004fc2:	4b0b      	ldr	r3, [pc, #44]	; (8004ff0 <osKernelStart+0x48>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d109      	bne.n	8004fde <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004fca:	f7ff ffbf 	bl	8004f4c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004fce:	4b08      	ldr	r3, [pc, #32]	; (8004ff0 <osKernelStart+0x48>)
 8004fd0:	2202      	movs	r2, #2
 8004fd2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004fd4:	f001 f912 	bl	80061fc <vTaskStartScheduler>
      stat = osOK;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	607b      	str	r3, [r7, #4]
 8004fdc:	e002      	b.n	8004fe4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004fde:	f04f 33ff 	mov.w	r3, #4294967295
 8004fe2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004fe4:	687b      	ldr	r3, [r7, #4]
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	2000008c 	.word	0x2000008c

08004ff4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b08e      	sub	sp, #56	; 0x38
 8004ff8:	af04      	add	r7, sp, #16
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005000:	2300      	movs	r3, #0
 8005002:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005004:	f3ef 8305 	mrs	r3, IPSR
 8005008:	617b      	str	r3, [r7, #20]
  return(result);
 800500a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800500c:	2b00      	cmp	r3, #0
 800500e:	d17e      	bne.n	800510e <osThreadNew+0x11a>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d07b      	beq.n	800510e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005016:	2380      	movs	r3, #128	; 0x80
 8005018:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800501a:	2318      	movs	r3, #24
 800501c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800501e:	2300      	movs	r3, #0
 8005020:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005022:	f04f 33ff 	mov.w	r3, #4294967295
 8005026:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d045      	beq.n	80050ba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d002      	beq.n	800503c <osThreadNew+0x48>
        name = attr->name;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d002      	beq.n	800504a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d008      	beq.n	8005062 <osThreadNew+0x6e>
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	2b38      	cmp	r3, #56	; 0x38
 8005054:	d805      	bhi.n	8005062 <osThreadNew+0x6e>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b00      	cmp	r3, #0
 8005060:	d001      	beq.n	8005066 <osThreadNew+0x72>
        return (NULL);
 8005062:	2300      	movs	r3, #0
 8005064:	e054      	b.n	8005110 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	089b      	lsrs	r3, r3, #2
 8005074:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00e      	beq.n	800509c <osThreadNew+0xa8>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	2b5b      	cmp	r3, #91	; 0x5b
 8005084:	d90a      	bls.n	800509c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800508a:	2b00      	cmp	r3, #0
 800508c:	d006      	beq.n	800509c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d002      	beq.n	800509c <osThreadNew+0xa8>
        mem = 1;
 8005096:	2301      	movs	r3, #1
 8005098:	61bb      	str	r3, [r7, #24]
 800509a:	e010      	b.n	80050be <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10c      	bne.n	80050be <osThreadNew+0xca>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d108      	bne.n	80050be <osThreadNew+0xca>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d104      	bne.n	80050be <osThreadNew+0xca>
          mem = 0;
 80050b4:	2300      	movs	r3, #0
 80050b6:	61bb      	str	r3, [r7, #24]
 80050b8:	e001      	b.n	80050be <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80050ba:	2300      	movs	r3, #0
 80050bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d110      	bne.n	80050e6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80050cc:	9202      	str	r2, [sp, #8]
 80050ce:	9301      	str	r3, [sp, #4]
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	6a3a      	ldr	r2, [r7, #32]
 80050d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f000 feb8 	bl	8005e50 <xTaskCreateStatic>
 80050e0:	4603      	mov	r3, r0
 80050e2:	613b      	str	r3, [r7, #16]
 80050e4:	e013      	b.n	800510e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d110      	bne.n	800510e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80050ec:	6a3b      	ldr	r3, [r7, #32]
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	f107 0310 	add.w	r3, r7, #16
 80050f4:	9301      	str	r3, [sp, #4]
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f000 ff03 	bl	8005f0a <xTaskCreate>
 8005104:	4603      	mov	r3, r0
 8005106:	2b01      	cmp	r3, #1
 8005108:	d001      	beq.n	800510e <osThreadNew+0x11a>
            hTask = NULL;
 800510a:	2300      	movs	r3, #0
 800510c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800510e:	693b      	ldr	r3, [r7, #16]
}
 8005110:	4618      	mov	r0, r3
 8005112:	3728      	adds	r7, #40	; 0x28
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005120:	f3ef 8305 	mrs	r3, IPSR
 8005124:	60bb      	str	r3, [r7, #8]
  return(result);
 8005126:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005128:	2b00      	cmp	r3, #0
 800512a:	d003      	beq.n	8005134 <osDelay+0x1c>
    stat = osErrorISR;
 800512c:	f06f 0305 	mvn.w	r3, #5
 8005130:	60fb      	str	r3, [r7, #12]
 8005132:	e007      	b.n	8005144 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005134:	2300      	movs	r3, #0
 8005136:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d002      	beq.n	8005144 <osDelay+0x2c>
      vTaskDelay(ticks);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f001 f828 	bl	8006194 <vTaskDelay>
    }
  }

  return (stat);
 8005144:	68fb      	ldr	r3, [r7, #12]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800514e:	b580      	push	{r7, lr}
 8005150:	b08a      	sub	sp, #40	; 0x28
 8005152:	af02      	add	r7, sp, #8
 8005154:	60f8      	str	r0, [r7, #12]
 8005156:	60b9      	str	r1, [r7, #8]
 8005158:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800515a:	2300      	movs	r3, #0
 800515c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800515e:	f3ef 8305 	mrs	r3, IPSR
 8005162:	613b      	str	r3, [r7, #16]
  return(result);
 8005164:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005166:	2b00      	cmp	r3, #0
 8005168:	d15f      	bne.n	800522a <osMessageQueueNew+0xdc>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d05c      	beq.n	800522a <osMessageQueueNew+0xdc>
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d059      	beq.n	800522a <osMessageQueueNew+0xdc>
    mem = -1;
 8005176:	f04f 33ff 	mov.w	r3, #4294967295
 800517a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d029      	beq.n	80051d6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d012      	beq.n	80051b0 <osMessageQueueNew+0x62>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	2b4f      	cmp	r3, #79	; 0x4f
 8005190:	d90e      	bls.n	80051b0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00a      	beq.n	80051b0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	695a      	ldr	r2, [r3, #20]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	68b9      	ldr	r1, [r7, #8]
 80051a2:	fb01 f303 	mul.w	r3, r1, r3
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d302      	bcc.n	80051b0 <osMessageQueueNew+0x62>
        mem = 1;
 80051aa:	2301      	movs	r3, #1
 80051ac:	61bb      	str	r3, [r7, #24]
 80051ae:	e014      	b.n	80051da <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d110      	bne.n	80051da <osMessageQueueNew+0x8c>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10c      	bne.n	80051da <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d108      	bne.n	80051da <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	695b      	ldr	r3, [r3, #20]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d104      	bne.n	80051da <osMessageQueueNew+0x8c>
          mem = 0;
 80051d0:	2300      	movs	r3, #0
 80051d2:	61bb      	str	r3, [r7, #24]
 80051d4:	e001      	b.n	80051da <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80051d6:	2300      	movs	r3, #0
 80051d8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d10b      	bne.n	80051f8 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	691a      	ldr	r2, [r3, #16]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	2100      	movs	r1, #0
 80051ea:	9100      	str	r1, [sp, #0]
 80051ec:	68b9      	ldr	r1, [r7, #8]
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 f970 	bl	80054d4 <xQueueGenericCreateStatic>
 80051f4:	61f8      	str	r0, [r7, #28]
 80051f6:	e008      	b.n	800520a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d105      	bne.n	800520a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80051fe:	2200      	movs	r2, #0
 8005200:	68b9      	ldr	r1, [r7, #8]
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f000 f9de 	bl	80055c4 <xQueueGenericCreate>
 8005208:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00c      	beq.n	800522a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <osMessageQueueNew+0xd0>
        name = attr->name;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	617b      	str	r3, [r7, #20]
 800521c:	e001      	b.n	8005222 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800521e:	2300      	movs	r3, #0
 8005220:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005222:	6979      	ldr	r1, [r7, #20]
 8005224:	69f8      	ldr	r0, [r7, #28]
 8005226:	f000 fdb5 	bl	8005d94 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800522a:	69fb      	ldr	r3, [r7, #28]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3720      	adds	r7, #32
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	4a07      	ldr	r2, [pc, #28]	; (8005260 <vApplicationGetIdleTaskMemory+0x2c>)
 8005244:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	4a06      	ldr	r2, [pc, #24]	; (8005264 <vApplicationGetIdleTaskMemory+0x30>)
 800524a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2280      	movs	r2, #128	; 0x80
 8005250:	601a      	str	r2, [r3, #0]
}
 8005252:	bf00      	nop
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	20000090 	.word	0x20000090
 8005264:	200000ec 	.word	0x200000ec

08005268 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	4a07      	ldr	r2, [pc, #28]	; (8005294 <vApplicationGetTimerTaskMemory+0x2c>)
 8005278:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	4a06      	ldr	r2, [pc, #24]	; (8005298 <vApplicationGetTimerTaskMemory+0x30>)
 800527e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005286:	601a      	str	r2, [r3, #0]
}
 8005288:	bf00      	nop
 800528a:	3714      	adds	r7, #20
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr
 8005294:	200002ec 	.word	0x200002ec
 8005298:	20000348 	.word	0x20000348

0800529c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f103 0208 	add.w	r2, r3, #8
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f04f 32ff 	mov.w	r2, #4294967295
 80052b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f103 0208 	add.w	r2, r3, #8
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f103 0208 	add.w	r2, r3, #8
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80052ea:	bf00      	nop
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052f6:	b480      	push	{r7}
 80052f8:	b085      	sub	sp, #20
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
 80052fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	689a      	ldr	r2, [r3, #8]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	1c5a      	adds	r2, r3, #1
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	601a      	str	r2, [r3, #0]
}
 8005332:	bf00      	nop
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr

0800533e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800533e:	b480      	push	{r7}
 8005340:	b085      	sub	sp, #20
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
 8005346:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005354:	d103      	bne.n	800535e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	e00c      	b.n	8005378 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	3308      	adds	r3, #8
 8005362:	60fb      	str	r3, [r7, #12]
 8005364:	e002      	b.n	800536c <vListInsert+0x2e>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	60fb      	str	r3, [r7, #12]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68ba      	ldr	r2, [r7, #8]
 8005374:	429a      	cmp	r2, r3
 8005376:	d2f6      	bcs.n	8005366 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	1c5a      	adds	r2, r3, #1
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	601a      	str	r2, [r3, #0]
}
 80053a4:	bf00      	nop
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	6892      	ldr	r2, [r2, #8]
 80053c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	6852      	ldr	r2, [r2, #4]
 80053d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d103      	bne.n	80053e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	689a      	ldr	r2, [r3, #8]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	1e5a      	subs	r2, r3, #1
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3714      	adds	r7, #20
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10a      	bne.n	800542e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541c:	f383 8811 	msr	BASEPRI, r3
 8005420:	f3bf 8f6f 	isb	sy
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800542a:	bf00      	nop
 800542c:	e7fe      	b.n	800542c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800542e:	f002 f889 	bl	8007544 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800543a:	68f9      	ldr	r1, [r7, #12]
 800543c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800543e:	fb01 f303 	mul.w	r3, r1, r3
 8005442:	441a      	add	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800545e:	3b01      	subs	r3, #1
 8005460:	68f9      	ldr	r1, [r7, #12]
 8005462:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005464:	fb01 f303 	mul.w	r3, r1, r3
 8005468:	441a      	add	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	22ff      	movs	r2, #255	; 0xff
 8005472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	22ff      	movs	r2, #255	; 0xff
 800547a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d114      	bne.n	80054ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d01a      	beq.n	80054c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	3310      	adds	r3, #16
 8005490:	4618      	mov	r0, r3
 8005492:	f001 f93d 	bl	8006710 <xTaskRemoveFromEventList>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d012      	beq.n	80054c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800549c:	4b0c      	ldr	r3, [pc, #48]	; (80054d0 <xQueueGenericReset+0xcc>)
 800549e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	f3bf 8f4f 	dsb	sy
 80054a8:	f3bf 8f6f 	isb	sy
 80054ac:	e009      	b.n	80054c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	3310      	adds	r3, #16
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7ff fef2 	bl	800529c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	3324      	adds	r3, #36	; 0x24
 80054bc:	4618      	mov	r0, r3
 80054be:	f7ff feed 	bl	800529c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80054c2:	f002 f86f 	bl	80075a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80054c6:	2301      	movs	r3, #1
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	e000ed04 	.word	0xe000ed04

080054d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b08e      	sub	sp, #56	; 0x38
 80054d8:	af02      	add	r7, sp, #8
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
 80054e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10a      	bne.n	80054fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80054e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ec:	f383 8811 	msr	BASEPRI, r3
 80054f0:	f3bf 8f6f 	isb	sy
 80054f4:	f3bf 8f4f 	dsb	sy
 80054f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80054fa:	bf00      	nop
 80054fc:	e7fe      	b.n	80054fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10a      	bne.n	800551a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005508:	f383 8811 	msr	BASEPRI, r3
 800550c:	f3bf 8f6f 	isb	sy
 8005510:	f3bf 8f4f 	dsb	sy
 8005514:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005516:	bf00      	nop
 8005518:	e7fe      	b.n	8005518 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d002      	beq.n	8005526 <xQueueGenericCreateStatic+0x52>
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <xQueueGenericCreateStatic+0x56>
 8005526:	2301      	movs	r3, #1
 8005528:	e000      	b.n	800552c <xQueueGenericCreateStatic+0x58>
 800552a:	2300      	movs	r3, #0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10a      	bne.n	8005546 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005534:	f383 8811 	msr	BASEPRI, r3
 8005538:	f3bf 8f6f 	isb	sy
 800553c:	f3bf 8f4f 	dsb	sy
 8005540:	623b      	str	r3, [r7, #32]
}
 8005542:	bf00      	nop
 8005544:	e7fe      	b.n	8005544 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d102      	bne.n	8005552 <xQueueGenericCreateStatic+0x7e>
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <xQueueGenericCreateStatic+0x82>
 8005552:	2301      	movs	r3, #1
 8005554:	e000      	b.n	8005558 <xQueueGenericCreateStatic+0x84>
 8005556:	2300      	movs	r3, #0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10a      	bne.n	8005572 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800555c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005560:	f383 8811 	msr	BASEPRI, r3
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	61fb      	str	r3, [r7, #28]
}
 800556e:	bf00      	nop
 8005570:	e7fe      	b.n	8005570 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005572:	2350      	movs	r3, #80	; 0x50
 8005574:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	2b50      	cmp	r3, #80	; 0x50
 800557a:	d00a      	beq.n	8005592 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800557c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005580:	f383 8811 	msr	BASEPRI, r3
 8005584:	f3bf 8f6f 	isb	sy
 8005588:	f3bf 8f4f 	dsb	sy
 800558c:	61bb      	str	r3, [r7, #24]
}
 800558e:	bf00      	nop
 8005590:	e7fe      	b.n	8005590 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005592:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00d      	beq.n	80055ba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800559e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80055a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80055aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ac:	9300      	str	r3, [sp, #0]
 80055ae:	4613      	mov	r3, r2
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	68b9      	ldr	r1, [r7, #8]
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f000 f83f 	bl	8005638 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80055ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80055bc:	4618      	mov	r0, r3
 80055be:	3730      	adds	r7, #48	; 0x30
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b08a      	sub	sp, #40	; 0x28
 80055c8:	af02      	add	r7, sp, #8
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	4613      	mov	r3, r2
 80055d0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10a      	bne.n	80055ee <xQueueGenericCreate+0x2a>
	__asm volatile
 80055d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055dc:	f383 8811 	msr	BASEPRI, r3
 80055e0:	f3bf 8f6f 	isb	sy
 80055e4:	f3bf 8f4f 	dsb	sy
 80055e8:	613b      	str	r3, [r7, #16]
}
 80055ea:	bf00      	nop
 80055ec:	e7fe      	b.n	80055ec <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	fb02 f303 	mul.w	r3, r2, r3
 80055f6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	3350      	adds	r3, #80	; 0x50
 80055fc:	4618      	mov	r0, r3
 80055fe:	f002 f8c3 	bl	8007788 <pvPortMalloc>
 8005602:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d011      	beq.n	800562e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	3350      	adds	r3, #80	; 0x50
 8005612:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800561c:	79fa      	ldrb	r2, [r7, #7]
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	4613      	mov	r3, r2
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	68b9      	ldr	r1, [r7, #8]
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f000 f805 	bl	8005638 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800562e:	69bb      	ldr	r3, [r7, #24]
	}
 8005630:	4618      	mov	r0, r3
 8005632:	3720      	adds	r7, #32
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
 8005644:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d103      	bne.n	8005654 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	69ba      	ldr	r2, [r7, #24]
 8005650:	601a      	str	r2, [r3, #0]
 8005652:	e002      	b.n	800565a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005666:	2101      	movs	r1, #1
 8005668:	69b8      	ldr	r0, [r7, #24]
 800566a:	f7ff fecb 	bl	8005404 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	78fa      	ldrb	r2, [r7, #3]
 8005672:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005676:	bf00      	nop
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
	...

08005680 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b08e      	sub	sp, #56	; 0x38
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
 800568c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800568e:	2300      	movs	r3, #0
 8005690:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10a      	bne.n	80056b2 <xQueueGenericSend+0x32>
	__asm volatile
 800569c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a0:	f383 8811 	msr	BASEPRI, r3
 80056a4:	f3bf 8f6f 	isb	sy
 80056a8:	f3bf 8f4f 	dsb	sy
 80056ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80056ae:	bf00      	nop
 80056b0:	e7fe      	b.n	80056b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d103      	bne.n	80056c0 <xQueueGenericSend+0x40>
 80056b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d101      	bne.n	80056c4 <xQueueGenericSend+0x44>
 80056c0:	2301      	movs	r3, #1
 80056c2:	e000      	b.n	80056c6 <xQueueGenericSend+0x46>
 80056c4:	2300      	movs	r3, #0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10a      	bne.n	80056e0 <xQueueGenericSend+0x60>
	__asm volatile
 80056ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ce:	f383 8811 	msr	BASEPRI, r3
 80056d2:	f3bf 8f6f 	isb	sy
 80056d6:	f3bf 8f4f 	dsb	sy
 80056da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80056dc:	bf00      	nop
 80056de:	e7fe      	b.n	80056de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d103      	bne.n	80056ee <xQueueGenericSend+0x6e>
 80056e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d101      	bne.n	80056f2 <xQueueGenericSend+0x72>
 80056ee:	2301      	movs	r3, #1
 80056f0:	e000      	b.n	80056f4 <xQueueGenericSend+0x74>
 80056f2:	2300      	movs	r3, #0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10a      	bne.n	800570e <xQueueGenericSend+0x8e>
	__asm volatile
 80056f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fc:	f383 8811 	msr	BASEPRI, r3
 8005700:	f3bf 8f6f 	isb	sy
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	623b      	str	r3, [r7, #32]
}
 800570a:	bf00      	nop
 800570c:	e7fe      	b.n	800570c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800570e:	f001 f9bd 	bl	8006a8c <xTaskGetSchedulerState>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d102      	bne.n	800571e <xQueueGenericSend+0x9e>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d101      	bne.n	8005722 <xQueueGenericSend+0xa2>
 800571e:	2301      	movs	r3, #1
 8005720:	e000      	b.n	8005724 <xQueueGenericSend+0xa4>
 8005722:	2300      	movs	r3, #0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10a      	bne.n	800573e <xQueueGenericSend+0xbe>
	__asm volatile
 8005728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	61fb      	str	r3, [r7, #28]
}
 800573a:	bf00      	nop
 800573c:	e7fe      	b.n	800573c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800573e:	f001 ff01 	bl	8007544 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005744:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800574a:	429a      	cmp	r2, r3
 800574c:	d302      	bcc.n	8005754 <xQueueGenericSend+0xd4>
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	2b02      	cmp	r3, #2
 8005752:	d129      	bne.n	80057a8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005754:	683a      	ldr	r2, [r7, #0]
 8005756:	68b9      	ldr	r1, [r7, #8]
 8005758:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800575a:	f000 fa0b 	bl	8005b74 <prvCopyDataToQueue>
 800575e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	2b00      	cmp	r3, #0
 8005766:	d010      	beq.n	800578a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576a:	3324      	adds	r3, #36	; 0x24
 800576c:	4618      	mov	r0, r3
 800576e:	f000 ffcf 	bl	8006710 <xTaskRemoveFromEventList>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d013      	beq.n	80057a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005778:	4b3f      	ldr	r3, [pc, #252]	; (8005878 <xQueueGenericSend+0x1f8>)
 800577a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800577e:	601a      	str	r2, [r3, #0]
 8005780:	f3bf 8f4f 	dsb	sy
 8005784:	f3bf 8f6f 	isb	sy
 8005788:	e00a      	b.n	80057a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800578a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578c:	2b00      	cmp	r3, #0
 800578e:	d007      	beq.n	80057a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005790:	4b39      	ldr	r3, [pc, #228]	; (8005878 <xQueueGenericSend+0x1f8>)
 8005792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005796:	601a      	str	r2, [r3, #0]
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80057a0:	f001 ff00 	bl	80075a4 <vPortExitCritical>
				return pdPASS;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e063      	b.n	8005870 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d103      	bne.n	80057b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057ae:	f001 fef9 	bl	80075a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80057b2:	2300      	movs	r3, #0
 80057b4:	e05c      	b.n	8005870 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d106      	bne.n	80057ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057bc:	f107 0314 	add.w	r3, r7, #20
 80057c0:	4618      	mov	r0, r3
 80057c2:	f001 f809 	bl	80067d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057c6:	2301      	movs	r3, #1
 80057c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057ca:	f001 feeb 	bl	80075a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057ce:	f000 fd7b 	bl	80062c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057d2:	f001 feb7 	bl	8007544 <vPortEnterCritical>
 80057d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057dc:	b25b      	sxtb	r3, r3
 80057de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e2:	d103      	bne.n	80057ec <xQueueGenericSend+0x16c>
 80057e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057f2:	b25b      	sxtb	r3, r3
 80057f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f8:	d103      	bne.n	8005802 <xQueueGenericSend+0x182>
 80057fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005802:	f001 fecf 	bl	80075a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005806:	1d3a      	adds	r2, r7, #4
 8005808:	f107 0314 	add.w	r3, r7, #20
 800580c:	4611      	mov	r1, r2
 800580e:	4618      	mov	r0, r3
 8005810:	f000 fff8 	bl	8006804 <xTaskCheckForTimeOut>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d124      	bne.n	8005864 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800581a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800581c:	f000 faa2 	bl	8005d64 <prvIsQueueFull>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d018      	beq.n	8005858 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005828:	3310      	adds	r3, #16
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	4611      	mov	r1, r2
 800582e:	4618      	mov	r0, r3
 8005830:	f000 ff1e 	bl	8006670 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005834:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005836:	f000 fa2d 	bl	8005c94 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800583a:	f000 fd53 	bl	80062e4 <xTaskResumeAll>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	f47f af7c 	bne.w	800573e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005846:	4b0c      	ldr	r3, [pc, #48]	; (8005878 <xQueueGenericSend+0x1f8>)
 8005848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800584c:	601a      	str	r2, [r3, #0]
 800584e:	f3bf 8f4f 	dsb	sy
 8005852:	f3bf 8f6f 	isb	sy
 8005856:	e772      	b.n	800573e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005858:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800585a:	f000 fa1b 	bl	8005c94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800585e:	f000 fd41 	bl	80062e4 <xTaskResumeAll>
 8005862:	e76c      	b.n	800573e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005864:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005866:	f000 fa15 	bl	8005c94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800586a:	f000 fd3b 	bl	80062e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800586e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005870:	4618      	mov	r0, r3
 8005872:	3738      	adds	r7, #56	; 0x38
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	e000ed04 	.word	0xe000ed04

0800587c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b090      	sub	sp, #64	; 0x40
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
 8005888:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800588e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10a      	bne.n	80058aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005898:	f383 8811 	msr	BASEPRI, r3
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80058a6:	bf00      	nop
 80058a8:	e7fe      	b.n	80058a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d103      	bne.n	80058b8 <xQueueGenericSendFromISR+0x3c>
 80058b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <xQueueGenericSendFromISR+0x40>
 80058b8:	2301      	movs	r3, #1
 80058ba:	e000      	b.n	80058be <xQueueGenericSendFromISR+0x42>
 80058bc:	2300      	movs	r3, #0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d10a      	bne.n	80058d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80058c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c6:	f383 8811 	msr	BASEPRI, r3
 80058ca:	f3bf 8f6f 	isb	sy
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80058d4:	bf00      	nop
 80058d6:	e7fe      	b.n	80058d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d103      	bne.n	80058e6 <xQueueGenericSendFromISR+0x6a>
 80058de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d101      	bne.n	80058ea <xQueueGenericSendFromISR+0x6e>
 80058e6:	2301      	movs	r3, #1
 80058e8:	e000      	b.n	80058ec <xQueueGenericSendFromISR+0x70>
 80058ea:	2300      	movs	r3, #0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d10a      	bne.n	8005906 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80058f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f4:	f383 8811 	msr	BASEPRI, r3
 80058f8:	f3bf 8f6f 	isb	sy
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	623b      	str	r3, [r7, #32]
}
 8005902:	bf00      	nop
 8005904:	e7fe      	b.n	8005904 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005906:	f001 feff 	bl	8007708 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800590a:	f3ef 8211 	mrs	r2, BASEPRI
 800590e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005912:	f383 8811 	msr	BASEPRI, r3
 8005916:	f3bf 8f6f 	isb	sy
 800591a:	f3bf 8f4f 	dsb	sy
 800591e:	61fa      	str	r2, [r7, #28]
 8005920:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005922:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005924:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005928:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800592a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800592e:	429a      	cmp	r2, r3
 8005930:	d302      	bcc.n	8005938 <xQueueGenericSendFromISR+0xbc>
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	2b02      	cmp	r3, #2
 8005936:	d12f      	bne.n	8005998 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800593e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005946:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005948:	683a      	ldr	r2, [r7, #0]
 800594a:	68b9      	ldr	r1, [r7, #8]
 800594c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800594e:	f000 f911 	bl	8005b74 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005952:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800595a:	d112      	bne.n	8005982 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800595c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005960:	2b00      	cmp	r3, #0
 8005962:	d016      	beq.n	8005992 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005966:	3324      	adds	r3, #36	; 0x24
 8005968:	4618      	mov	r0, r3
 800596a:	f000 fed1 	bl	8006710 <xTaskRemoveFromEventList>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00e      	beq.n	8005992 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00b      	beq.n	8005992 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	e007      	b.n	8005992 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005982:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005986:	3301      	adds	r3, #1
 8005988:	b2db      	uxtb	r3, r3
 800598a:	b25a      	sxtb	r2, r3
 800598c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005992:	2301      	movs	r3, #1
 8005994:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005996:	e001      	b.n	800599c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005998:	2300      	movs	r3, #0
 800599a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800599c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800599e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80059a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80059a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3740      	adds	r7, #64	; 0x40
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
	...

080059b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b08c      	sub	sp, #48	; 0x30
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80059c0:	2300      	movs	r3, #0
 80059c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80059c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10a      	bne.n	80059e4 <xQueueReceive+0x30>
	__asm volatile
 80059ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d2:	f383 8811 	msr	BASEPRI, r3
 80059d6:	f3bf 8f6f 	isb	sy
 80059da:	f3bf 8f4f 	dsb	sy
 80059de:	623b      	str	r3, [r7, #32]
}
 80059e0:	bf00      	nop
 80059e2:	e7fe      	b.n	80059e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d103      	bne.n	80059f2 <xQueueReceive+0x3e>
 80059ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <xQueueReceive+0x42>
 80059f2:	2301      	movs	r3, #1
 80059f4:	e000      	b.n	80059f8 <xQueueReceive+0x44>
 80059f6:	2300      	movs	r3, #0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10a      	bne.n	8005a12 <xQueueReceive+0x5e>
	__asm volatile
 80059fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a00:	f383 8811 	msr	BASEPRI, r3
 8005a04:	f3bf 8f6f 	isb	sy
 8005a08:	f3bf 8f4f 	dsb	sy
 8005a0c:	61fb      	str	r3, [r7, #28]
}
 8005a0e:	bf00      	nop
 8005a10:	e7fe      	b.n	8005a10 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a12:	f001 f83b 	bl	8006a8c <xTaskGetSchedulerState>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d102      	bne.n	8005a22 <xQueueReceive+0x6e>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <xQueueReceive+0x72>
 8005a22:	2301      	movs	r3, #1
 8005a24:	e000      	b.n	8005a28 <xQueueReceive+0x74>
 8005a26:	2300      	movs	r3, #0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10a      	bne.n	8005a42 <xQueueReceive+0x8e>
	__asm volatile
 8005a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	61bb      	str	r3, [r7, #24]
}
 8005a3e:	bf00      	nop
 8005a40:	e7fe      	b.n	8005a40 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a42:	f001 fd7f 	bl	8007544 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d01f      	beq.n	8005a92 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a52:	68b9      	ldr	r1, [r7, #8]
 8005a54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a56:	f000 f8f7 	bl	8005c48 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5c:	1e5a      	subs	r2, r3, #1
 8005a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a60:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00f      	beq.n	8005a8a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6c:	3310      	adds	r3, #16
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 fe4e 	bl	8006710 <xTaskRemoveFromEventList>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d007      	beq.n	8005a8a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a7a:	4b3d      	ldr	r3, [pc, #244]	; (8005b70 <xQueueReceive+0x1bc>)
 8005a7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a80:	601a      	str	r2, [r3, #0]
 8005a82:	f3bf 8f4f 	dsb	sy
 8005a86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a8a:	f001 fd8b 	bl	80075a4 <vPortExitCritical>
				return pdPASS;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e069      	b.n	8005b66 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d103      	bne.n	8005aa0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a98:	f001 fd84 	bl	80075a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	e062      	b.n	8005b66 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d106      	bne.n	8005ab4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005aa6:	f107 0310 	add.w	r3, r7, #16
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 fe94 	bl	80067d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ab4:	f001 fd76 	bl	80075a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ab8:	f000 fc06 	bl	80062c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005abc:	f001 fd42 	bl	8007544 <vPortEnterCritical>
 8005ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ac6:	b25b      	sxtb	r3, r3
 8005ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005acc:	d103      	bne.n	8005ad6 <xQueueReceive+0x122>
 8005ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005adc:	b25b      	sxtb	r3, r3
 8005ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae2:	d103      	bne.n	8005aec <xQueueReceive+0x138>
 8005ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005aec:	f001 fd5a 	bl	80075a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005af0:	1d3a      	adds	r2, r7, #4
 8005af2:	f107 0310 	add.w	r3, r7, #16
 8005af6:	4611      	mov	r1, r2
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 fe83 	bl	8006804 <xTaskCheckForTimeOut>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d123      	bne.n	8005b4c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b06:	f000 f917 	bl	8005d38 <prvIsQueueEmpty>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d017      	beq.n	8005b40 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b12:	3324      	adds	r3, #36	; 0x24
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	4611      	mov	r1, r2
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f000 fda9 	bl	8006670 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b20:	f000 f8b8 	bl	8005c94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b24:	f000 fbde 	bl	80062e4 <xTaskResumeAll>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d189      	bne.n	8005a42 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005b2e:	4b10      	ldr	r3, [pc, #64]	; (8005b70 <xQueueReceive+0x1bc>)
 8005b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b34:	601a      	str	r2, [r3, #0]
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	f3bf 8f6f 	isb	sy
 8005b3e:	e780      	b.n	8005a42 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b42:	f000 f8a7 	bl	8005c94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b46:	f000 fbcd 	bl	80062e4 <xTaskResumeAll>
 8005b4a:	e77a      	b.n	8005a42 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b4e:	f000 f8a1 	bl	8005c94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b52:	f000 fbc7 	bl	80062e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b58:	f000 f8ee 	bl	8005d38 <prvIsQueueEmpty>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f43f af6f 	beq.w	8005a42 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3730      	adds	r7, #48	; 0x30
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	e000ed04 	.word	0xe000ed04

08005b74 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b086      	sub	sp, #24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005b80:	2300      	movs	r3, #0
 8005b82:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b88:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10d      	bne.n	8005bae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d14d      	bne.n	8005c36 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f000 ff92 	bl	8006ac8 <xTaskPriorityDisinherit>
 8005ba4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	609a      	str	r2, [r3, #8]
 8005bac:	e043      	b.n	8005c36 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d119      	bne.n	8005be8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6858      	ldr	r0, [r3, #4]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	68b9      	ldr	r1, [r7, #8]
 8005bc0:	f001 fff0 	bl	8007ba4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bcc:	441a      	add	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d32b      	bcc.n	8005c36 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	605a      	str	r2, [r3, #4]
 8005be6:	e026      	b.n	8005c36 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	68d8      	ldr	r0, [r3, #12]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	68b9      	ldr	r1, [r7, #8]
 8005bf4:	f001 ffd6 	bl	8007ba4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	68da      	ldr	r2, [r3, #12]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c00:	425b      	negs	r3, r3
 8005c02:	441a      	add	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	68da      	ldr	r2, [r3, #12]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d207      	bcs.n	8005c24 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	689a      	ldr	r2, [r3, #8]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1c:	425b      	negs	r3, r3
 8005c1e:	441a      	add	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d105      	bne.n	8005c36 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d002      	beq.n	8005c36 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	3b01      	subs	r3, #1
 8005c34:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	1c5a      	adds	r2, r3, #1
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005c3e:	697b      	ldr	r3, [r7, #20]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d018      	beq.n	8005c8c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68da      	ldr	r2, [r3, #12]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	441a      	add	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68da      	ldr	r2, [r3, #12]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d303      	bcc.n	8005c7c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68d9      	ldr	r1, [r3, #12]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c84:	461a      	mov	r2, r3
 8005c86:	6838      	ldr	r0, [r7, #0]
 8005c88:	f001 ff8c 	bl	8007ba4 <memcpy>
	}
}
 8005c8c:	bf00      	nop
 8005c8e:	3708      	adds	r7, #8
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005c9c:	f001 fc52 	bl	8007544 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ca6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ca8:	e011      	b.n	8005cce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d012      	beq.n	8005cd8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	3324      	adds	r3, #36	; 0x24
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f000 fd2a 	bl	8006710 <xTaskRemoveFromEventList>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d001      	beq.n	8005cc6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005cc2:	f000 fe01 	bl	80068c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005cc6:	7bfb      	ldrb	r3, [r7, #15]
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	dce9      	bgt.n	8005caa <prvUnlockQueue+0x16>
 8005cd6:	e000      	b.n	8005cda <prvUnlockQueue+0x46>
					break;
 8005cd8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	22ff      	movs	r2, #255	; 0xff
 8005cde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005ce2:	f001 fc5f 	bl	80075a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005ce6:	f001 fc2d 	bl	8007544 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cf0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cf2:	e011      	b.n	8005d18 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d012      	beq.n	8005d22 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	3310      	adds	r3, #16
 8005d00:	4618      	mov	r0, r3
 8005d02:	f000 fd05 	bl	8006710 <xTaskRemoveFromEventList>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d001      	beq.n	8005d10 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d0c:	f000 fddc 	bl	80068c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d10:	7bbb      	ldrb	r3, [r7, #14]
 8005d12:	3b01      	subs	r3, #1
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	dce9      	bgt.n	8005cf4 <prvUnlockQueue+0x60>
 8005d20:	e000      	b.n	8005d24 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d22:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	22ff      	movs	r2, #255	; 0xff
 8005d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005d2c:	f001 fc3a 	bl	80075a4 <vPortExitCritical>
}
 8005d30:	bf00      	nop
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d40:	f001 fc00 	bl	8007544 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d102      	bne.n	8005d52 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	e001      	b.n	8005d56 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d52:	2300      	movs	r3, #0
 8005d54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d56:	f001 fc25 	bl	80075a4 <vPortExitCritical>

	return xReturn;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d6c:	f001 fbea 	bl	8007544 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d102      	bne.n	8005d82 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	60fb      	str	r3, [r7, #12]
 8005d80:	e001      	b.n	8005d86 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005d82:	2300      	movs	r3, #0
 8005d84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d86:	f001 fc0d 	bl	80075a4 <vPortExitCritical>

	return xReturn;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d9e:	2300      	movs	r3, #0
 8005da0:	60fb      	str	r3, [r7, #12]
 8005da2:	e014      	b.n	8005dce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005da4:	4a0f      	ldr	r2, [pc, #60]	; (8005de4 <vQueueAddToRegistry+0x50>)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10b      	bne.n	8005dc8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005db0:	490c      	ldr	r1, [pc, #48]	; (8005de4 <vQueueAddToRegistry+0x50>)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	683a      	ldr	r2, [r7, #0]
 8005db6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005dba:	4a0a      	ldr	r2, [pc, #40]	; (8005de4 <vQueueAddToRegistry+0x50>)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	00db      	lsls	r3, r3, #3
 8005dc0:	4413      	add	r3, r2
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005dc6:	e006      	b.n	8005dd6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	60fb      	str	r3, [r7, #12]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2b07      	cmp	r3, #7
 8005dd2:	d9e7      	bls.n	8005da4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005dd4:	bf00      	nop
 8005dd6:	bf00      	nop
 8005dd8:	3714      	adds	r7, #20
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	2000a794 	.word	0x2000a794

08005de8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005df8:	f001 fba4 	bl	8007544 <vPortEnterCritical>
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e02:	b25b      	sxtb	r3, r3
 8005e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e08:	d103      	bne.n	8005e12 <vQueueWaitForMessageRestricted+0x2a>
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e18:	b25b      	sxtb	r3, r3
 8005e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e1e:	d103      	bne.n	8005e28 <vQueueWaitForMessageRestricted+0x40>
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e28:	f001 fbbc 	bl	80075a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d106      	bne.n	8005e42 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	3324      	adds	r3, #36	; 0x24
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	68b9      	ldr	r1, [r7, #8]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f000 fc3b 	bl	80066b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005e42:	6978      	ldr	r0, [r7, #20]
 8005e44:	f7ff ff26 	bl	8005c94 <prvUnlockQueue>
	}
 8005e48:	bf00      	nop
 8005e4a:	3718      	adds	r7, #24
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b08e      	sub	sp, #56	; 0x38
 8005e54:	af04      	add	r7, sp, #16
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
 8005e5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10a      	bne.n	8005e7a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e68:	f383 8811 	msr	BASEPRI, r3
 8005e6c:	f3bf 8f6f 	isb	sy
 8005e70:	f3bf 8f4f 	dsb	sy
 8005e74:	623b      	str	r3, [r7, #32]
}
 8005e76:	bf00      	nop
 8005e78:	e7fe      	b.n	8005e78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10a      	bne.n	8005e96 <xTaskCreateStatic+0x46>
	__asm volatile
 8005e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	61fb      	str	r3, [r7, #28]
}
 8005e92:	bf00      	nop
 8005e94:	e7fe      	b.n	8005e94 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e96:	235c      	movs	r3, #92	; 0x5c
 8005e98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	2b5c      	cmp	r3, #92	; 0x5c
 8005e9e:	d00a      	beq.n	8005eb6 <xTaskCreateStatic+0x66>
	__asm volatile
 8005ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea4:	f383 8811 	msr	BASEPRI, r3
 8005ea8:	f3bf 8f6f 	isb	sy
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	61bb      	str	r3, [r7, #24]
}
 8005eb2:	bf00      	nop
 8005eb4:	e7fe      	b.n	8005eb4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005eb6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d01e      	beq.n	8005efc <xTaskCreateStatic+0xac>
 8005ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d01b      	beq.n	8005efc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ecc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed0:	2202      	movs	r2, #2
 8005ed2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	9303      	str	r3, [sp, #12]
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	9302      	str	r3, [sp, #8]
 8005ede:	f107 0314 	add.w	r3, r7, #20
 8005ee2:	9301      	str	r3, [sp, #4]
 8005ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee6:	9300      	str	r3, [sp, #0]
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	68b9      	ldr	r1, [r7, #8]
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f000 f850 	bl	8005f94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ef4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ef6:	f000 f8dd 	bl	80060b4 <prvAddNewTaskToReadyList>
 8005efa:	e001      	b.n	8005f00 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005efc:	2300      	movs	r3, #0
 8005efe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f00:	697b      	ldr	r3, [r7, #20]
	}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3728      	adds	r7, #40	; 0x28
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b08c      	sub	sp, #48	; 0x30
 8005f0e:	af04      	add	r7, sp, #16
 8005f10:	60f8      	str	r0, [r7, #12]
 8005f12:	60b9      	str	r1, [r7, #8]
 8005f14:	603b      	str	r3, [r7, #0]
 8005f16:	4613      	mov	r3, r2
 8005f18:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f1a:	88fb      	ldrh	r3, [r7, #6]
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f001 fc32 	bl	8007788 <pvPortMalloc>
 8005f24:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00e      	beq.n	8005f4a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f2c:	205c      	movs	r0, #92	; 0x5c
 8005f2e:	f001 fc2b 	bl	8007788 <pvPortMalloc>
 8005f32:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	631a      	str	r2, [r3, #48]	; 0x30
 8005f40:	e005      	b.n	8005f4e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f42:	6978      	ldr	r0, [r7, #20]
 8005f44:	f001 fcec 	bl	8007920 <vPortFree>
 8005f48:	e001      	b.n	8005f4e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d017      	beq.n	8005f84 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f5c:	88fa      	ldrh	r2, [r7, #6]
 8005f5e:	2300      	movs	r3, #0
 8005f60:	9303      	str	r3, [sp, #12]
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	9302      	str	r3, [sp, #8]
 8005f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f68:	9301      	str	r3, [sp, #4]
 8005f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6c:	9300      	str	r3, [sp, #0]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	68b9      	ldr	r1, [r7, #8]
 8005f72:	68f8      	ldr	r0, [r7, #12]
 8005f74:	f000 f80e 	bl	8005f94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f78:	69f8      	ldr	r0, [r7, #28]
 8005f7a:	f000 f89b 	bl	80060b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	61bb      	str	r3, [r7, #24]
 8005f82:	e002      	b.n	8005f8a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f84:	f04f 33ff 	mov.w	r3, #4294967295
 8005f88:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f8a:	69bb      	ldr	r3, [r7, #24]
	}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3720      	adds	r7, #32
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b088      	sub	sp, #32
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
 8005fa0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	461a      	mov	r2, r3
 8005fac:	21a5      	movs	r1, #165	; 0xa5
 8005fae:	f001 fe07 	bl	8007bc0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4413      	add	r3, r2
 8005fc2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	f023 0307 	bic.w	r3, r3, #7
 8005fca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	f003 0307 	and.w	r3, r3, #7
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00a      	beq.n	8005fec <prvInitialiseNewTask+0x58>
	__asm volatile
 8005fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fda:	f383 8811 	msr	BASEPRI, r3
 8005fde:	f3bf 8f6f 	isb	sy
 8005fe2:	f3bf 8f4f 	dsb	sy
 8005fe6:	617b      	str	r3, [r7, #20]
}
 8005fe8:	bf00      	nop
 8005fea:	e7fe      	b.n	8005fea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d01f      	beq.n	8006032 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	61fb      	str	r3, [r7, #28]
 8005ff6:	e012      	b.n	800601e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	7819      	ldrb	r1, [r3, #0]
 8006000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	4413      	add	r3, r2
 8006006:	3334      	adds	r3, #52	; 0x34
 8006008:	460a      	mov	r2, r1
 800600a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	4413      	add	r3, r2
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d006      	beq.n	8006026 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	3301      	adds	r3, #1
 800601c:	61fb      	str	r3, [r7, #28]
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	2b0f      	cmp	r3, #15
 8006022:	d9e9      	bls.n	8005ff8 <prvInitialiseNewTask+0x64>
 8006024:	e000      	b.n	8006028 <prvInitialiseNewTask+0x94>
			{
				break;
 8006026:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602a:	2200      	movs	r2, #0
 800602c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006030:	e003      	b.n	800603a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006034:	2200      	movs	r2, #0
 8006036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800603a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603c:	2b37      	cmp	r3, #55	; 0x37
 800603e:	d901      	bls.n	8006044 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006040:	2337      	movs	r3, #55	; 0x37
 8006042:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006046:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006048:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800604a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800604e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006052:	2200      	movs	r2, #0
 8006054:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006058:	3304      	adds	r3, #4
 800605a:	4618      	mov	r0, r3
 800605c:	f7ff f93e 	bl	80052dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006062:	3318      	adds	r3, #24
 8006064:	4618      	mov	r0, r3
 8006066:	f7ff f939 	bl	80052dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800606a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800606e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006072:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006078:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800607a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800607e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006082:	2200      	movs	r2, #0
 8006084:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006088:	2200      	movs	r2, #0
 800608a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800608e:	683a      	ldr	r2, [r7, #0]
 8006090:	68f9      	ldr	r1, [r7, #12]
 8006092:	69b8      	ldr	r0, [r7, #24]
 8006094:	f001 f928 	bl	80072e8 <pxPortInitialiseStack>
 8006098:	4602      	mov	r2, r0
 800609a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800609e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d002      	beq.n	80060aa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80060a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060aa:	bf00      	nop
 80060ac:	3720      	adds	r7, #32
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
	...

080060b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80060bc:	f001 fa42 	bl	8007544 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80060c0:	4b2d      	ldr	r3, [pc, #180]	; (8006178 <prvAddNewTaskToReadyList+0xc4>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	3301      	adds	r3, #1
 80060c6:	4a2c      	ldr	r2, [pc, #176]	; (8006178 <prvAddNewTaskToReadyList+0xc4>)
 80060c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060ca:	4b2c      	ldr	r3, [pc, #176]	; (800617c <prvAddNewTaskToReadyList+0xc8>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d109      	bne.n	80060e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060d2:	4a2a      	ldr	r2, [pc, #168]	; (800617c <prvAddNewTaskToReadyList+0xc8>)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80060d8:	4b27      	ldr	r3, [pc, #156]	; (8006178 <prvAddNewTaskToReadyList+0xc4>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d110      	bne.n	8006102 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80060e0:	f000 fc16 	bl	8006910 <prvInitialiseTaskLists>
 80060e4:	e00d      	b.n	8006102 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80060e6:	4b26      	ldr	r3, [pc, #152]	; (8006180 <prvAddNewTaskToReadyList+0xcc>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d109      	bne.n	8006102 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060ee:	4b23      	ldr	r3, [pc, #140]	; (800617c <prvAddNewTaskToReadyList+0xc8>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d802      	bhi.n	8006102 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80060fc:	4a1f      	ldr	r2, [pc, #124]	; (800617c <prvAddNewTaskToReadyList+0xc8>)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006102:	4b20      	ldr	r3, [pc, #128]	; (8006184 <prvAddNewTaskToReadyList+0xd0>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	3301      	adds	r3, #1
 8006108:	4a1e      	ldr	r2, [pc, #120]	; (8006184 <prvAddNewTaskToReadyList+0xd0>)
 800610a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800610c:	4b1d      	ldr	r3, [pc, #116]	; (8006184 <prvAddNewTaskToReadyList+0xd0>)
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006118:	4b1b      	ldr	r3, [pc, #108]	; (8006188 <prvAddNewTaskToReadyList+0xd4>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	429a      	cmp	r2, r3
 800611e:	d903      	bls.n	8006128 <prvAddNewTaskToReadyList+0x74>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006124:	4a18      	ldr	r2, [pc, #96]	; (8006188 <prvAddNewTaskToReadyList+0xd4>)
 8006126:	6013      	str	r3, [r2, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800612c:	4613      	mov	r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	4a15      	ldr	r2, [pc, #84]	; (800618c <prvAddNewTaskToReadyList+0xd8>)
 8006136:	441a      	add	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	3304      	adds	r3, #4
 800613c:	4619      	mov	r1, r3
 800613e:	4610      	mov	r0, r2
 8006140:	f7ff f8d9 	bl	80052f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006144:	f001 fa2e 	bl	80075a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006148:	4b0d      	ldr	r3, [pc, #52]	; (8006180 <prvAddNewTaskToReadyList+0xcc>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00e      	beq.n	800616e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006150:	4b0a      	ldr	r3, [pc, #40]	; (800617c <prvAddNewTaskToReadyList+0xc8>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615a:	429a      	cmp	r2, r3
 800615c:	d207      	bcs.n	800616e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800615e:	4b0c      	ldr	r3, [pc, #48]	; (8006190 <prvAddNewTaskToReadyList+0xdc>)
 8006160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006164:	601a      	str	r2, [r3, #0]
 8006166:	f3bf 8f4f 	dsb	sy
 800616a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800616e:	bf00      	nop
 8006170:	3708      	adds	r7, #8
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	20000c1c 	.word	0x20000c1c
 800617c:	20000748 	.word	0x20000748
 8006180:	20000c28 	.word	0x20000c28
 8006184:	20000c38 	.word	0x20000c38
 8006188:	20000c24 	.word	0x20000c24
 800618c:	2000074c 	.word	0x2000074c
 8006190:	e000ed04 	.word	0xe000ed04

08006194 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800619c:	2300      	movs	r3, #0
 800619e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d017      	beq.n	80061d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80061a6:	4b13      	ldr	r3, [pc, #76]	; (80061f4 <vTaskDelay+0x60>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00a      	beq.n	80061c4 <vTaskDelay+0x30>
	__asm volatile
 80061ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	60bb      	str	r3, [r7, #8]
}
 80061c0:	bf00      	nop
 80061c2:	e7fe      	b.n	80061c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80061c4:	f000 f880 	bl	80062c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80061c8:	2100      	movs	r1, #0
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 fcea 	bl	8006ba4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80061d0:	f000 f888 	bl	80062e4 <xTaskResumeAll>
 80061d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d107      	bne.n	80061ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80061dc:	4b06      	ldr	r3, [pc, #24]	; (80061f8 <vTaskDelay+0x64>)
 80061de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	f3bf 8f4f 	dsb	sy
 80061e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80061ec:	bf00      	nop
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	20000c44 	.word	0x20000c44
 80061f8:	e000ed04 	.word	0xe000ed04

080061fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b08a      	sub	sp, #40	; 0x28
 8006200:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006202:	2300      	movs	r3, #0
 8006204:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006206:	2300      	movs	r3, #0
 8006208:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800620a:	463a      	mov	r2, r7
 800620c:	1d39      	adds	r1, r7, #4
 800620e:	f107 0308 	add.w	r3, r7, #8
 8006212:	4618      	mov	r0, r3
 8006214:	f7ff f80e 	bl	8005234 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006218:	6839      	ldr	r1, [r7, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	9202      	str	r2, [sp, #8]
 8006220:	9301      	str	r3, [sp, #4]
 8006222:	2300      	movs	r3, #0
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	2300      	movs	r3, #0
 8006228:	460a      	mov	r2, r1
 800622a:	4921      	ldr	r1, [pc, #132]	; (80062b0 <vTaskStartScheduler+0xb4>)
 800622c:	4821      	ldr	r0, [pc, #132]	; (80062b4 <vTaskStartScheduler+0xb8>)
 800622e:	f7ff fe0f 	bl	8005e50 <xTaskCreateStatic>
 8006232:	4603      	mov	r3, r0
 8006234:	4a20      	ldr	r2, [pc, #128]	; (80062b8 <vTaskStartScheduler+0xbc>)
 8006236:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006238:	4b1f      	ldr	r3, [pc, #124]	; (80062b8 <vTaskStartScheduler+0xbc>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d002      	beq.n	8006246 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006240:	2301      	movs	r3, #1
 8006242:	617b      	str	r3, [r7, #20]
 8006244:	e001      	b.n	800624a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006246:	2300      	movs	r3, #0
 8006248:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d102      	bne.n	8006256 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006250:	f000 fcfc 	bl	8006c4c <xTimerCreateTimerTask>
 8006254:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d116      	bne.n	800628a <vTaskStartScheduler+0x8e>
	__asm volatile
 800625c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006260:	f383 8811 	msr	BASEPRI, r3
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	613b      	str	r3, [r7, #16]
}
 800626e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006270:	4b12      	ldr	r3, [pc, #72]	; (80062bc <vTaskStartScheduler+0xc0>)
 8006272:	f04f 32ff 	mov.w	r2, #4294967295
 8006276:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006278:	4b11      	ldr	r3, [pc, #68]	; (80062c0 <vTaskStartScheduler+0xc4>)
 800627a:	2201      	movs	r2, #1
 800627c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800627e:	4b11      	ldr	r3, [pc, #68]	; (80062c4 <vTaskStartScheduler+0xc8>)
 8006280:	2200      	movs	r2, #0
 8006282:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006284:	f001 f8bc 	bl	8007400 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006288:	e00e      	b.n	80062a8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006290:	d10a      	bne.n	80062a8 <vTaskStartScheduler+0xac>
	__asm volatile
 8006292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006296:	f383 8811 	msr	BASEPRI, r3
 800629a:	f3bf 8f6f 	isb	sy
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	60fb      	str	r3, [r7, #12]
}
 80062a4:	bf00      	nop
 80062a6:	e7fe      	b.n	80062a6 <vTaskStartScheduler+0xaa>
}
 80062a8:	bf00      	nop
 80062aa:	3718      	adds	r7, #24
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	08007c58 	.word	0x08007c58
 80062b4:	080068e1 	.word	0x080068e1
 80062b8:	20000c40 	.word	0x20000c40
 80062bc:	20000c3c 	.word	0x20000c3c
 80062c0:	20000c28 	.word	0x20000c28
 80062c4:	20000c20 	.word	0x20000c20

080062c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80062c8:	b480      	push	{r7}
 80062ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80062cc:	4b04      	ldr	r3, [pc, #16]	; (80062e0 <vTaskSuspendAll+0x18>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	3301      	adds	r3, #1
 80062d2:	4a03      	ldr	r2, [pc, #12]	; (80062e0 <vTaskSuspendAll+0x18>)
 80062d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80062d6:	bf00      	nop
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr
 80062e0:	20000c44 	.word	0x20000c44

080062e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80062ea:	2300      	movs	r3, #0
 80062ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80062ee:	2300      	movs	r3, #0
 80062f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80062f2:	4b42      	ldr	r3, [pc, #264]	; (80063fc <xTaskResumeAll+0x118>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10a      	bne.n	8006310 <xTaskResumeAll+0x2c>
	__asm volatile
 80062fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fe:	f383 8811 	msr	BASEPRI, r3
 8006302:	f3bf 8f6f 	isb	sy
 8006306:	f3bf 8f4f 	dsb	sy
 800630a:	603b      	str	r3, [r7, #0]
}
 800630c:	bf00      	nop
 800630e:	e7fe      	b.n	800630e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006310:	f001 f918 	bl	8007544 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006314:	4b39      	ldr	r3, [pc, #228]	; (80063fc <xTaskResumeAll+0x118>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	3b01      	subs	r3, #1
 800631a:	4a38      	ldr	r2, [pc, #224]	; (80063fc <xTaskResumeAll+0x118>)
 800631c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800631e:	4b37      	ldr	r3, [pc, #220]	; (80063fc <xTaskResumeAll+0x118>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d162      	bne.n	80063ec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006326:	4b36      	ldr	r3, [pc, #216]	; (8006400 <xTaskResumeAll+0x11c>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d05e      	beq.n	80063ec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800632e:	e02f      	b.n	8006390 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006330:	4b34      	ldr	r3, [pc, #208]	; (8006404 <xTaskResumeAll+0x120>)
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	3318      	adds	r3, #24
 800633c:	4618      	mov	r0, r3
 800633e:	f7ff f837 	bl	80053b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	3304      	adds	r3, #4
 8006346:	4618      	mov	r0, r3
 8006348:	f7ff f832 	bl	80053b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006350:	4b2d      	ldr	r3, [pc, #180]	; (8006408 <xTaskResumeAll+0x124>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	429a      	cmp	r2, r3
 8006356:	d903      	bls.n	8006360 <xTaskResumeAll+0x7c>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635c:	4a2a      	ldr	r2, [pc, #168]	; (8006408 <xTaskResumeAll+0x124>)
 800635e:	6013      	str	r3, [r2, #0]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006364:	4613      	mov	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	4413      	add	r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	4a27      	ldr	r2, [pc, #156]	; (800640c <xTaskResumeAll+0x128>)
 800636e:	441a      	add	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	3304      	adds	r3, #4
 8006374:	4619      	mov	r1, r3
 8006376:	4610      	mov	r0, r2
 8006378:	f7fe ffbd 	bl	80052f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006380:	4b23      	ldr	r3, [pc, #140]	; (8006410 <xTaskResumeAll+0x12c>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006386:	429a      	cmp	r2, r3
 8006388:	d302      	bcc.n	8006390 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800638a:	4b22      	ldr	r3, [pc, #136]	; (8006414 <xTaskResumeAll+0x130>)
 800638c:	2201      	movs	r2, #1
 800638e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006390:	4b1c      	ldr	r3, [pc, #112]	; (8006404 <xTaskResumeAll+0x120>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d1cb      	bne.n	8006330 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800639e:	f000 fb55 	bl	8006a4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80063a2:	4b1d      	ldr	r3, [pc, #116]	; (8006418 <xTaskResumeAll+0x134>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d010      	beq.n	80063d0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80063ae:	f000 f847 	bl	8006440 <xTaskIncrementTick>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d002      	beq.n	80063be <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80063b8:	4b16      	ldr	r3, [pc, #88]	; (8006414 <xTaskResumeAll+0x130>)
 80063ba:	2201      	movs	r2, #1
 80063bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	3b01      	subs	r3, #1
 80063c2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1f1      	bne.n	80063ae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80063ca:	4b13      	ldr	r3, [pc, #76]	; (8006418 <xTaskResumeAll+0x134>)
 80063cc:	2200      	movs	r2, #0
 80063ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80063d0:	4b10      	ldr	r3, [pc, #64]	; (8006414 <xTaskResumeAll+0x130>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d009      	beq.n	80063ec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80063d8:	2301      	movs	r3, #1
 80063da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80063dc:	4b0f      	ldr	r3, [pc, #60]	; (800641c <xTaskResumeAll+0x138>)
 80063de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063e2:	601a      	str	r2, [r3, #0]
 80063e4:	f3bf 8f4f 	dsb	sy
 80063e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063ec:	f001 f8da 	bl	80075a4 <vPortExitCritical>

	return xAlreadyYielded;
 80063f0:	68bb      	ldr	r3, [r7, #8]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	20000c44 	.word	0x20000c44
 8006400:	20000c1c 	.word	0x20000c1c
 8006404:	20000bdc 	.word	0x20000bdc
 8006408:	20000c24 	.word	0x20000c24
 800640c:	2000074c 	.word	0x2000074c
 8006410:	20000748 	.word	0x20000748
 8006414:	20000c30 	.word	0x20000c30
 8006418:	20000c2c 	.word	0x20000c2c
 800641c:	e000ed04 	.word	0xe000ed04

08006420 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006426:	4b05      	ldr	r3, [pc, #20]	; (800643c <xTaskGetTickCount+0x1c>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800642c:	687b      	ldr	r3, [r7, #4]
}
 800642e:	4618      	mov	r0, r3
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	20000c20 	.word	0x20000c20

08006440 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b086      	sub	sp, #24
 8006444:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006446:	2300      	movs	r3, #0
 8006448:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800644a:	4b4f      	ldr	r3, [pc, #316]	; (8006588 <xTaskIncrementTick+0x148>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	f040 808f 	bne.w	8006572 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006454:	4b4d      	ldr	r3, [pc, #308]	; (800658c <xTaskIncrementTick+0x14c>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	3301      	adds	r3, #1
 800645a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800645c:	4a4b      	ldr	r2, [pc, #300]	; (800658c <xTaskIncrementTick+0x14c>)
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d120      	bne.n	80064aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006468:	4b49      	ldr	r3, [pc, #292]	; (8006590 <xTaskIncrementTick+0x150>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00a      	beq.n	8006488 <xTaskIncrementTick+0x48>
	__asm volatile
 8006472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006476:	f383 8811 	msr	BASEPRI, r3
 800647a:	f3bf 8f6f 	isb	sy
 800647e:	f3bf 8f4f 	dsb	sy
 8006482:	603b      	str	r3, [r7, #0]
}
 8006484:	bf00      	nop
 8006486:	e7fe      	b.n	8006486 <xTaskIncrementTick+0x46>
 8006488:	4b41      	ldr	r3, [pc, #260]	; (8006590 <xTaskIncrementTick+0x150>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	60fb      	str	r3, [r7, #12]
 800648e:	4b41      	ldr	r3, [pc, #260]	; (8006594 <xTaskIncrementTick+0x154>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a3f      	ldr	r2, [pc, #252]	; (8006590 <xTaskIncrementTick+0x150>)
 8006494:	6013      	str	r3, [r2, #0]
 8006496:	4a3f      	ldr	r2, [pc, #252]	; (8006594 <xTaskIncrementTick+0x154>)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6013      	str	r3, [r2, #0]
 800649c:	4b3e      	ldr	r3, [pc, #248]	; (8006598 <xTaskIncrementTick+0x158>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	3301      	adds	r3, #1
 80064a2:	4a3d      	ldr	r2, [pc, #244]	; (8006598 <xTaskIncrementTick+0x158>)
 80064a4:	6013      	str	r3, [r2, #0]
 80064a6:	f000 fad1 	bl	8006a4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80064aa:	4b3c      	ldr	r3, [pc, #240]	; (800659c <xTaskIncrementTick+0x15c>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d349      	bcc.n	8006548 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064b4:	4b36      	ldr	r3, [pc, #216]	; (8006590 <xTaskIncrementTick+0x150>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d104      	bne.n	80064c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064be:	4b37      	ldr	r3, [pc, #220]	; (800659c <xTaskIncrementTick+0x15c>)
 80064c0:	f04f 32ff 	mov.w	r2, #4294967295
 80064c4:	601a      	str	r2, [r3, #0]
					break;
 80064c6:	e03f      	b.n	8006548 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064c8:	4b31      	ldr	r3, [pc, #196]	; (8006590 <xTaskIncrementTick+0x150>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80064d8:	693a      	ldr	r2, [r7, #16]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d203      	bcs.n	80064e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80064e0:	4a2e      	ldr	r2, [pc, #184]	; (800659c <xTaskIncrementTick+0x15c>)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80064e6:	e02f      	b.n	8006548 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	3304      	adds	r3, #4
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7fe ff5f 	bl	80053b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d004      	beq.n	8006504 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	3318      	adds	r3, #24
 80064fe:	4618      	mov	r0, r3
 8006500:	f7fe ff56 	bl	80053b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006508:	4b25      	ldr	r3, [pc, #148]	; (80065a0 <xTaskIncrementTick+0x160>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	429a      	cmp	r2, r3
 800650e:	d903      	bls.n	8006518 <xTaskIncrementTick+0xd8>
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006514:	4a22      	ldr	r2, [pc, #136]	; (80065a0 <xTaskIncrementTick+0x160>)
 8006516:	6013      	str	r3, [r2, #0]
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800651c:	4613      	mov	r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4413      	add	r3, r2
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4a1f      	ldr	r2, [pc, #124]	; (80065a4 <xTaskIncrementTick+0x164>)
 8006526:	441a      	add	r2, r3
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	3304      	adds	r3, #4
 800652c:	4619      	mov	r1, r3
 800652e:	4610      	mov	r0, r2
 8006530:	f7fe fee1 	bl	80052f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006538:	4b1b      	ldr	r3, [pc, #108]	; (80065a8 <xTaskIncrementTick+0x168>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653e:	429a      	cmp	r2, r3
 8006540:	d3b8      	bcc.n	80064b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006542:	2301      	movs	r3, #1
 8006544:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006546:	e7b5      	b.n	80064b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006548:	4b17      	ldr	r3, [pc, #92]	; (80065a8 <xTaskIncrementTick+0x168>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800654e:	4915      	ldr	r1, [pc, #84]	; (80065a4 <xTaskIncrementTick+0x164>)
 8006550:	4613      	mov	r3, r2
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	4413      	add	r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	440b      	add	r3, r1
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d901      	bls.n	8006564 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006560:	2301      	movs	r3, #1
 8006562:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006564:	4b11      	ldr	r3, [pc, #68]	; (80065ac <xTaskIncrementTick+0x16c>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d007      	beq.n	800657c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800656c:	2301      	movs	r3, #1
 800656e:	617b      	str	r3, [r7, #20]
 8006570:	e004      	b.n	800657c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006572:	4b0f      	ldr	r3, [pc, #60]	; (80065b0 <xTaskIncrementTick+0x170>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	3301      	adds	r3, #1
 8006578:	4a0d      	ldr	r2, [pc, #52]	; (80065b0 <xTaskIncrementTick+0x170>)
 800657a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800657c:	697b      	ldr	r3, [r7, #20]
}
 800657e:	4618      	mov	r0, r3
 8006580:	3718      	adds	r7, #24
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	20000c44 	.word	0x20000c44
 800658c:	20000c20 	.word	0x20000c20
 8006590:	20000bd4 	.word	0x20000bd4
 8006594:	20000bd8 	.word	0x20000bd8
 8006598:	20000c34 	.word	0x20000c34
 800659c:	20000c3c 	.word	0x20000c3c
 80065a0:	20000c24 	.word	0x20000c24
 80065a4:	2000074c 	.word	0x2000074c
 80065a8:	20000748 	.word	0x20000748
 80065ac:	20000c30 	.word	0x20000c30
 80065b0:	20000c2c 	.word	0x20000c2c

080065b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80065ba:	4b28      	ldr	r3, [pc, #160]	; (800665c <vTaskSwitchContext+0xa8>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d003      	beq.n	80065ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80065c2:	4b27      	ldr	r3, [pc, #156]	; (8006660 <vTaskSwitchContext+0xac>)
 80065c4:	2201      	movs	r2, #1
 80065c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80065c8:	e041      	b.n	800664e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80065ca:	4b25      	ldr	r3, [pc, #148]	; (8006660 <vTaskSwitchContext+0xac>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065d0:	4b24      	ldr	r3, [pc, #144]	; (8006664 <vTaskSwitchContext+0xb0>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	60fb      	str	r3, [r7, #12]
 80065d6:	e010      	b.n	80065fa <vTaskSwitchContext+0x46>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10a      	bne.n	80065f4 <vTaskSwitchContext+0x40>
	__asm volatile
 80065de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e2:	f383 8811 	msr	BASEPRI, r3
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	607b      	str	r3, [r7, #4]
}
 80065f0:	bf00      	nop
 80065f2:	e7fe      	b.n	80065f2 <vTaskSwitchContext+0x3e>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	3b01      	subs	r3, #1
 80065f8:	60fb      	str	r3, [r7, #12]
 80065fa:	491b      	ldr	r1, [pc, #108]	; (8006668 <vTaskSwitchContext+0xb4>)
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	4613      	mov	r3, r2
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	4413      	add	r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	440b      	add	r3, r1
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d0e4      	beq.n	80065d8 <vTaskSwitchContext+0x24>
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	4613      	mov	r3, r2
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	4413      	add	r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4a13      	ldr	r2, [pc, #76]	; (8006668 <vTaskSwitchContext+0xb4>)
 800661a:	4413      	add	r3, r2
 800661c:	60bb      	str	r3, [r7, #8]
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	685a      	ldr	r2, [r3, #4]
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	605a      	str	r2, [r3, #4]
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	3308      	adds	r3, #8
 8006630:	429a      	cmp	r2, r3
 8006632:	d104      	bne.n	800663e <vTaskSwitchContext+0x8a>
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	685a      	ldr	r2, [r3, #4]
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	605a      	str	r2, [r3, #4]
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	4a09      	ldr	r2, [pc, #36]	; (800666c <vTaskSwitchContext+0xb8>)
 8006646:	6013      	str	r3, [r2, #0]
 8006648:	4a06      	ldr	r2, [pc, #24]	; (8006664 <vTaskSwitchContext+0xb0>)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6013      	str	r3, [r2, #0]
}
 800664e:	bf00      	nop
 8006650:	3714      	adds	r7, #20
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	20000c44 	.word	0x20000c44
 8006660:	20000c30 	.word	0x20000c30
 8006664:	20000c24 	.word	0x20000c24
 8006668:	2000074c 	.word	0x2000074c
 800666c:	20000748 	.word	0x20000748

08006670 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10a      	bne.n	8006696 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006684:	f383 8811 	msr	BASEPRI, r3
 8006688:	f3bf 8f6f 	isb	sy
 800668c:	f3bf 8f4f 	dsb	sy
 8006690:	60fb      	str	r3, [r7, #12]
}
 8006692:	bf00      	nop
 8006694:	e7fe      	b.n	8006694 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006696:	4b07      	ldr	r3, [pc, #28]	; (80066b4 <vTaskPlaceOnEventList+0x44>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	3318      	adds	r3, #24
 800669c:	4619      	mov	r1, r3
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7fe fe4d 	bl	800533e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80066a4:	2101      	movs	r1, #1
 80066a6:	6838      	ldr	r0, [r7, #0]
 80066a8:	f000 fa7c 	bl	8006ba4 <prvAddCurrentTaskToDelayedList>
}
 80066ac:	bf00      	nop
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	20000748 	.word	0x20000748

080066b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b086      	sub	sp, #24
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10a      	bne.n	80066e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80066ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ce:	f383 8811 	msr	BASEPRI, r3
 80066d2:	f3bf 8f6f 	isb	sy
 80066d6:	f3bf 8f4f 	dsb	sy
 80066da:	617b      	str	r3, [r7, #20]
}
 80066dc:	bf00      	nop
 80066de:	e7fe      	b.n	80066de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066e0:	4b0a      	ldr	r3, [pc, #40]	; (800670c <vTaskPlaceOnEventListRestricted+0x54>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	3318      	adds	r3, #24
 80066e6:	4619      	mov	r1, r3
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f7fe fe04 	bl	80052f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d002      	beq.n	80066fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80066f4:	f04f 33ff 	mov.w	r3, #4294967295
 80066f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80066fa:	6879      	ldr	r1, [r7, #4]
 80066fc:	68b8      	ldr	r0, [r7, #8]
 80066fe:	f000 fa51 	bl	8006ba4 <prvAddCurrentTaskToDelayedList>
	}
 8006702:	bf00      	nop
 8006704:	3718      	adds	r7, #24
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	20000748 	.word	0x20000748

08006710 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10a      	bne.n	800673c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672a:	f383 8811 	msr	BASEPRI, r3
 800672e:	f3bf 8f6f 	isb	sy
 8006732:	f3bf 8f4f 	dsb	sy
 8006736:	60fb      	str	r3, [r7, #12]
}
 8006738:	bf00      	nop
 800673a:	e7fe      	b.n	800673a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	3318      	adds	r3, #24
 8006740:	4618      	mov	r0, r3
 8006742:	f7fe fe35 	bl	80053b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006746:	4b1e      	ldr	r3, [pc, #120]	; (80067c0 <xTaskRemoveFromEventList+0xb0>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d11d      	bne.n	800678a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	3304      	adds	r3, #4
 8006752:	4618      	mov	r0, r3
 8006754:	f7fe fe2c 	bl	80053b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800675c:	4b19      	ldr	r3, [pc, #100]	; (80067c4 <xTaskRemoveFromEventList+0xb4>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	429a      	cmp	r2, r3
 8006762:	d903      	bls.n	800676c <xTaskRemoveFromEventList+0x5c>
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006768:	4a16      	ldr	r2, [pc, #88]	; (80067c4 <xTaskRemoveFromEventList+0xb4>)
 800676a:	6013      	str	r3, [r2, #0]
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006770:	4613      	mov	r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4a13      	ldr	r2, [pc, #76]	; (80067c8 <xTaskRemoveFromEventList+0xb8>)
 800677a:	441a      	add	r2, r3
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	3304      	adds	r3, #4
 8006780:	4619      	mov	r1, r3
 8006782:	4610      	mov	r0, r2
 8006784:	f7fe fdb7 	bl	80052f6 <vListInsertEnd>
 8006788:	e005      	b.n	8006796 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	3318      	adds	r3, #24
 800678e:	4619      	mov	r1, r3
 8006790:	480e      	ldr	r0, [pc, #56]	; (80067cc <xTaskRemoveFromEventList+0xbc>)
 8006792:	f7fe fdb0 	bl	80052f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800679a:	4b0d      	ldr	r3, [pc, #52]	; (80067d0 <xTaskRemoveFromEventList+0xc0>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d905      	bls.n	80067b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80067a4:	2301      	movs	r3, #1
 80067a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80067a8:	4b0a      	ldr	r3, [pc, #40]	; (80067d4 <xTaskRemoveFromEventList+0xc4>)
 80067aa:	2201      	movs	r2, #1
 80067ac:	601a      	str	r2, [r3, #0]
 80067ae:	e001      	b.n	80067b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80067b0:	2300      	movs	r3, #0
 80067b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80067b4:	697b      	ldr	r3, [r7, #20]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3718      	adds	r7, #24
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	20000c44 	.word	0x20000c44
 80067c4:	20000c24 	.word	0x20000c24
 80067c8:	2000074c 	.word	0x2000074c
 80067cc:	20000bdc 	.word	0x20000bdc
 80067d0:	20000748 	.word	0x20000748
 80067d4:	20000c30 	.word	0x20000c30

080067d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80067e0:	4b06      	ldr	r3, [pc, #24]	; (80067fc <vTaskInternalSetTimeOutState+0x24>)
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80067e8:	4b05      	ldr	r3, [pc, #20]	; (8006800 <vTaskInternalSetTimeOutState+0x28>)
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	605a      	str	r2, [r3, #4]
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr
 80067fc:	20000c34 	.word	0x20000c34
 8006800:	20000c20 	.word	0x20000c20

08006804 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b088      	sub	sp, #32
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d10a      	bne.n	800682a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006818:	f383 8811 	msr	BASEPRI, r3
 800681c:	f3bf 8f6f 	isb	sy
 8006820:	f3bf 8f4f 	dsb	sy
 8006824:	613b      	str	r3, [r7, #16]
}
 8006826:	bf00      	nop
 8006828:	e7fe      	b.n	8006828 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d10a      	bne.n	8006846 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006834:	f383 8811 	msr	BASEPRI, r3
 8006838:	f3bf 8f6f 	isb	sy
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	60fb      	str	r3, [r7, #12]
}
 8006842:	bf00      	nop
 8006844:	e7fe      	b.n	8006844 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006846:	f000 fe7d 	bl	8007544 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800684a:	4b1d      	ldr	r3, [pc, #116]	; (80068c0 <xTaskCheckForTimeOut+0xbc>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	69ba      	ldr	r2, [r7, #24]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006862:	d102      	bne.n	800686a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006864:	2300      	movs	r3, #0
 8006866:	61fb      	str	r3, [r7, #28]
 8006868:	e023      	b.n	80068b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	4b15      	ldr	r3, [pc, #84]	; (80068c4 <xTaskCheckForTimeOut+0xc0>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	429a      	cmp	r2, r3
 8006874:	d007      	beq.n	8006886 <xTaskCheckForTimeOut+0x82>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	69ba      	ldr	r2, [r7, #24]
 800687c:	429a      	cmp	r2, r3
 800687e:	d302      	bcc.n	8006886 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006880:	2301      	movs	r3, #1
 8006882:	61fb      	str	r3, [r7, #28]
 8006884:	e015      	b.n	80068b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	429a      	cmp	r2, r3
 800688e:	d20b      	bcs.n	80068a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	1ad2      	subs	r2, r2, r3
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f7ff ff9b 	bl	80067d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80068a2:	2300      	movs	r3, #0
 80068a4:	61fb      	str	r3, [r7, #28]
 80068a6:	e004      	b.n	80068b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	2200      	movs	r2, #0
 80068ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80068ae:	2301      	movs	r3, #1
 80068b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80068b2:	f000 fe77 	bl	80075a4 <vPortExitCritical>

	return xReturn;
 80068b6:	69fb      	ldr	r3, [r7, #28]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3720      	adds	r7, #32
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	20000c20 	.word	0x20000c20
 80068c4:	20000c34 	.word	0x20000c34

080068c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80068c8:	b480      	push	{r7}
 80068ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80068cc:	4b03      	ldr	r3, [pc, #12]	; (80068dc <vTaskMissedYield+0x14>)
 80068ce:	2201      	movs	r2, #1
 80068d0:	601a      	str	r2, [r3, #0]
}
 80068d2:	bf00      	nop
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr
 80068dc:	20000c30 	.word	0x20000c30

080068e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80068e8:	f000 f852 	bl	8006990 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80068ec:	4b06      	ldr	r3, [pc, #24]	; (8006908 <prvIdleTask+0x28>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d9f9      	bls.n	80068e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80068f4:	4b05      	ldr	r3, [pc, #20]	; (800690c <prvIdleTask+0x2c>)
 80068f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068fa:	601a      	str	r2, [r3, #0]
 80068fc:	f3bf 8f4f 	dsb	sy
 8006900:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006904:	e7f0      	b.n	80068e8 <prvIdleTask+0x8>
 8006906:	bf00      	nop
 8006908:	2000074c 	.word	0x2000074c
 800690c:	e000ed04 	.word	0xe000ed04

08006910 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006916:	2300      	movs	r3, #0
 8006918:	607b      	str	r3, [r7, #4]
 800691a:	e00c      	b.n	8006936 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	4613      	mov	r3, r2
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4413      	add	r3, r2
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4a12      	ldr	r2, [pc, #72]	; (8006970 <prvInitialiseTaskLists+0x60>)
 8006928:	4413      	add	r3, r2
 800692a:	4618      	mov	r0, r3
 800692c:	f7fe fcb6 	bl	800529c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	3301      	adds	r3, #1
 8006934:	607b      	str	r3, [r7, #4]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2b37      	cmp	r3, #55	; 0x37
 800693a:	d9ef      	bls.n	800691c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800693c:	480d      	ldr	r0, [pc, #52]	; (8006974 <prvInitialiseTaskLists+0x64>)
 800693e:	f7fe fcad 	bl	800529c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006942:	480d      	ldr	r0, [pc, #52]	; (8006978 <prvInitialiseTaskLists+0x68>)
 8006944:	f7fe fcaa 	bl	800529c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006948:	480c      	ldr	r0, [pc, #48]	; (800697c <prvInitialiseTaskLists+0x6c>)
 800694a:	f7fe fca7 	bl	800529c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800694e:	480c      	ldr	r0, [pc, #48]	; (8006980 <prvInitialiseTaskLists+0x70>)
 8006950:	f7fe fca4 	bl	800529c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006954:	480b      	ldr	r0, [pc, #44]	; (8006984 <prvInitialiseTaskLists+0x74>)
 8006956:	f7fe fca1 	bl	800529c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800695a:	4b0b      	ldr	r3, [pc, #44]	; (8006988 <prvInitialiseTaskLists+0x78>)
 800695c:	4a05      	ldr	r2, [pc, #20]	; (8006974 <prvInitialiseTaskLists+0x64>)
 800695e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006960:	4b0a      	ldr	r3, [pc, #40]	; (800698c <prvInitialiseTaskLists+0x7c>)
 8006962:	4a05      	ldr	r2, [pc, #20]	; (8006978 <prvInitialiseTaskLists+0x68>)
 8006964:	601a      	str	r2, [r3, #0]
}
 8006966:	bf00      	nop
 8006968:	3708      	adds	r7, #8
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	2000074c 	.word	0x2000074c
 8006974:	20000bac 	.word	0x20000bac
 8006978:	20000bc0 	.word	0x20000bc0
 800697c:	20000bdc 	.word	0x20000bdc
 8006980:	20000bf0 	.word	0x20000bf0
 8006984:	20000c08 	.word	0x20000c08
 8006988:	20000bd4 	.word	0x20000bd4
 800698c:	20000bd8 	.word	0x20000bd8

08006990 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006996:	e019      	b.n	80069cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006998:	f000 fdd4 	bl	8007544 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800699c:	4b10      	ldr	r3, [pc, #64]	; (80069e0 <prvCheckTasksWaitingTermination+0x50>)
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	3304      	adds	r3, #4
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7fe fd01 	bl	80053b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80069ae:	4b0d      	ldr	r3, [pc, #52]	; (80069e4 <prvCheckTasksWaitingTermination+0x54>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	3b01      	subs	r3, #1
 80069b4:	4a0b      	ldr	r2, [pc, #44]	; (80069e4 <prvCheckTasksWaitingTermination+0x54>)
 80069b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80069b8:	4b0b      	ldr	r3, [pc, #44]	; (80069e8 <prvCheckTasksWaitingTermination+0x58>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	3b01      	subs	r3, #1
 80069be:	4a0a      	ldr	r2, [pc, #40]	; (80069e8 <prvCheckTasksWaitingTermination+0x58>)
 80069c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80069c2:	f000 fdef 	bl	80075a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f810 	bl	80069ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069cc:	4b06      	ldr	r3, [pc, #24]	; (80069e8 <prvCheckTasksWaitingTermination+0x58>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1e1      	bne.n	8006998 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80069d4:	bf00      	nop
 80069d6:	bf00      	nop
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	20000bf0 	.word	0x20000bf0
 80069e4:	20000c1c 	.word	0x20000c1c
 80069e8:	20000c04 	.word	0x20000c04

080069ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d108      	bne.n	8006a10 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a02:	4618      	mov	r0, r3
 8006a04:	f000 ff8c 	bl	8007920 <vPortFree>
				vPortFree( pxTCB );
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 ff89 	bl	8007920 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a0e:	e018      	b.n	8006a42 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d103      	bne.n	8006a22 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 ff80 	bl	8007920 <vPortFree>
	}
 8006a20:	e00f      	b.n	8006a42 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d00a      	beq.n	8006a42 <prvDeleteTCB+0x56>
	__asm volatile
 8006a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a30:	f383 8811 	msr	BASEPRI, r3
 8006a34:	f3bf 8f6f 	isb	sy
 8006a38:	f3bf 8f4f 	dsb	sy
 8006a3c:	60fb      	str	r3, [r7, #12]
}
 8006a3e:	bf00      	nop
 8006a40:	e7fe      	b.n	8006a40 <prvDeleteTCB+0x54>
	}
 8006a42:	bf00      	nop
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
	...

08006a4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a52:	4b0c      	ldr	r3, [pc, #48]	; (8006a84 <prvResetNextTaskUnblockTime+0x38>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d104      	bne.n	8006a66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a5c:	4b0a      	ldr	r3, [pc, #40]	; (8006a88 <prvResetNextTaskUnblockTime+0x3c>)
 8006a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a64:	e008      	b.n	8006a78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a66:	4b07      	ldr	r3, [pc, #28]	; (8006a84 <prvResetNextTaskUnblockTime+0x38>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	4a04      	ldr	r2, [pc, #16]	; (8006a88 <prvResetNextTaskUnblockTime+0x3c>)
 8006a76:	6013      	str	r3, [r2, #0]
}
 8006a78:	bf00      	nop
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr
 8006a84:	20000bd4 	.word	0x20000bd4
 8006a88:	20000c3c 	.word	0x20000c3c

08006a8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a92:	4b0b      	ldr	r3, [pc, #44]	; (8006ac0 <xTaskGetSchedulerState+0x34>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d102      	bne.n	8006aa0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	607b      	str	r3, [r7, #4]
 8006a9e:	e008      	b.n	8006ab2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aa0:	4b08      	ldr	r3, [pc, #32]	; (8006ac4 <xTaskGetSchedulerState+0x38>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d102      	bne.n	8006aae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	607b      	str	r3, [r7, #4]
 8006aac:	e001      	b.n	8006ab2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006ab2:	687b      	ldr	r3, [r7, #4]
	}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr
 8006ac0:	20000c28 	.word	0x20000c28
 8006ac4:	20000c44 	.word	0x20000c44

08006ac8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d056      	beq.n	8006b8c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006ade:	4b2e      	ldr	r3, [pc, #184]	; (8006b98 <xTaskPriorityDisinherit+0xd0>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	693a      	ldr	r2, [r7, #16]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d00a      	beq.n	8006afe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aec:	f383 8811 	msr	BASEPRI, r3
 8006af0:	f3bf 8f6f 	isb	sy
 8006af4:	f3bf 8f4f 	dsb	sy
 8006af8:	60fb      	str	r3, [r7, #12]
}
 8006afa:	bf00      	nop
 8006afc:	e7fe      	b.n	8006afc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10a      	bne.n	8006b1c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0a:	f383 8811 	msr	BASEPRI, r3
 8006b0e:	f3bf 8f6f 	isb	sy
 8006b12:	f3bf 8f4f 	dsb	sy
 8006b16:	60bb      	str	r3, [r7, #8]
}
 8006b18:	bf00      	nop
 8006b1a:	e7fe      	b.n	8006b1a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b20:	1e5a      	subs	r2, r3, #1
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d02c      	beq.n	8006b8c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d128      	bne.n	8006b8c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	3304      	adds	r3, #4
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7fe fc36 	bl	80053b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b50:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b5c:	4b0f      	ldr	r3, [pc, #60]	; (8006b9c <xTaskPriorityDisinherit+0xd4>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d903      	bls.n	8006b6c <xTaskPriorityDisinherit+0xa4>
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b68:	4a0c      	ldr	r2, [pc, #48]	; (8006b9c <xTaskPriorityDisinherit+0xd4>)
 8006b6a:	6013      	str	r3, [r2, #0]
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b70:	4613      	mov	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4413      	add	r3, r2
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	4a09      	ldr	r2, [pc, #36]	; (8006ba0 <xTaskPriorityDisinherit+0xd8>)
 8006b7a:	441a      	add	r2, r3
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	3304      	adds	r3, #4
 8006b80:	4619      	mov	r1, r3
 8006b82:	4610      	mov	r0, r2
 8006b84:	f7fe fbb7 	bl	80052f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b8c:	697b      	ldr	r3, [r7, #20]
	}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3718      	adds	r7, #24
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	20000748 	.word	0x20000748
 8006b9c:	20000c24 	.word	0x20000c24
 8006ba0:	2000074c 	.word	0x2000074c

08006ba4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006bae:	4b21      	ldr	r3, [pc, #132]	; (8006c34 <prvAddCurrentTaskToDelayedList+0x90>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bb4:	4b20      	ldr	r3, [pc, #128]	; (8006c38 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	3304      	adds	r3, #4
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7fe fbf8 	bl	80053b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc6:	d10a      	bne.n	8006bde <prvAddCurrentTaskToDelayedList+0x3a>
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d007      	beq.n	8006bde <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bce:	4b1a      	ldr	r3, [pc, #104]	; (8006c38 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	3304      	adds	r3, #4
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	4819      	ldr	r0, [pc, #100]	; (8006c3c <prvAddCurrentTaskToDelayedList+0x98>)
 8006bd8:	f7fe fb8d 	bl	80052f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006bdc:	e026      	b.n	8006c2c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4413      	add	r3, r2
 8006be4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006be6:	4b14      	ldr	r3, [pc, #80]	; (8006c38 <prvAddCurrentTaskToDelayedList+0x94>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68ba      	ldr	r2, [r7, #8]
 8006bec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d209      	bcs.n	8006c0a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bf6:	4b12      	ldr	r3, [pc, #72]	; (8006c40 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	4b0f      	ldr	r3, [pc, #60]	; (8006c38 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	3304      	adds	r3, #4
 8006c00:	4619      	mov	r1, r3
 8006c02:	4610      	mov	r0, r2
 8006c04:	f7fe fb9b 	bl	800533e <vListInsert>
}
 8006c08:	e010      	b.n	8006c2c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c0a:	4b0e      	ldr	r3, [pc, #56]	; (8006c44 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	4b0a      	ldr	r3, [pc, #40]	; (8006c38 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	3304      	adds	r3, #4
 8006c14:	4619      	mov	r1, r3
 8006c16:	4610      	mov	r0, r2
 8006c18:	f7fe fb91 	bl	800533e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006c1c:	4b0a      	ldr	r3, [pc, #40]	; (8006c48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68ba      	ldr	r2, [r7, #8]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d202      	bcs.n	8006c2c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006c26:	4a08      	ldr	r2, [pc, #32]	; (8006c48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	6013      	str	r3, [r2, #0]
}
 8006c2c:	bf00      	nop
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	20000c20 	.word	0x20000c20
 8006c38:	20000748 	.word	0x20000748
 8006c3c:	20000c08 	.word	0x20000c08
 8006c40:	20000bd8 	.word	0x20000bd8
 8006c44:	20000bd4 	.word	0x20000bd4
 8006c48:	20000c3c 	.word	0x20000c3c

08006c4c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b08a      	sub	sp, #40	; 0x28
 8006c50:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006c52:	2300      	movs	r3, #0
 8006c54:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006c56:	f000 fb07 	bl	8007268 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006c5a:	4b1c      	ldr	r3, [pc, #112]	; (8006ccc <xTimerCreateTimerTask+0x80>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d021      	beq.n	8006ca6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006c62:	2300      	movs	r3, #0
 8006c64:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006c66:	2300      	movs	r3, #0
 8006c68:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006c6a:	1d3a      	adds	r2, r7, #4
 8006c6c:	f107 0108 	add.w	r1, r7, #8
 8006c70:	f107 030c 	add.w	r3, r7, #12
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7fe faf7 	bl	8005268 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006c7a:	6879      	ldr	r1, [r7, #4]
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	9202      	str	r2, [sp, #8]
 8006c82:	9301      	str	r3, [sp, #4]
 8006c84:	2302      	movs	r3, #2
 8006c86:	9300      	str	r3, [sp, #0]
 8006c88:	2300      	movs	r3, #0
 8006c8a:	460a      	mov	r2, r1
 8006c8c:	4910      	ldr	r1, [pc, #64]	; (8006cd0 <xTimerCreateTimerTask+0x84>)
 8006c8e:	4811      	ldr	r0, [pc, #68]	; (8006cd4 <xTimerCreateTimerTask+0x88>)
 8006c90:	f7ff f8de 	bl	8005e50 <xTaskCreateStatic>
 8006c94:	4603      	mov	r3, r0
 8006c96:	4a10      	ldr	r2, [pc, #64]	; (8006cd8 <xTimerCreateTimerTask+0x8c>)
 8006c98:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006c9a:	4b0f      	ldr	r3, [pc, #60]	; (8006cd8 <xTimerCreateTimerTask+0x8c>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d001      	beq.n	8006ca6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10a      	bne.n	8006cc2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb0:	f383 8811 	msr	BASEPRI, r3
 8006cb4:	f3bf 8f6f 	isb	sy
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	613b      	str	r3, [r7, #16]
}
 8006cbe:	bf00      	nop
 8006cc0:	e7fe      	b.n	8006cc0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006cc2:	697b      	ldr	r3, [r7, #20]
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3718      	adds	r7, #24
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	20000c78 	.word	0x20000c78
 8006cd0:	08007c60 	.word	0x08007c60
 8006cd4:	08006e11 	.word	0x08006e11
 8006cd8:	20000c7c 	.word	0x20000c7c

08006cdc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b08a      	sub	sp, #40	; 0x28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
 8006ce8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006cea:	2300      	movs	r3, #0
 8006cec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d10a      	bne.n	8006d0a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf8:	f383 8811 	msr	BASEPRI, r3
 8006cfc:	f3bf 8f6f 	isb	sy
 8006d00:	f3bf 8f4f 	dsb	sy
 8006d04:	623b      	str	r3, [r7, #32]
}
 8006d06:	bf00      	nop
 8006d08:	e7fe      	b.n	8006d08 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006d0a:	4b1a      	ldr	r3, [pc, #104]	; (8006d74 <xTimerGenericCommand+0x98>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d02a      	beq.n	8006d68 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	2b05      	cmp	r3, #5
 8006d22:	dc18      	bgt.n	8006d56 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006d24:	f7ff feb2 	bl	8006a8c <xTaskGetSchedulerState>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d109      	bne.n	8006d42 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006d2e:	4b11      	ldr	r3, [pc, #68]	; (8006d74 <xTimerGenericCommand+0x98>)
 8006d30:	6818      	ldr	r0, [r3, #0]
 8006d32:	f107 0110 	add.w	r1, r7, #16
 8006d36:	2300      	movs	r3, #0
 8006d38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d3a:	f7fe fca1 	bl	8005680 <xQueueGenericSend>
 8006d3e:	6278      	str	r0, [r7, #36]	; 0x24
 8006d40:	e012      	b.n	8006d68 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006d42:	4b0c      	ldr	r3, [pc, #48]	; (8006d74 <xTimerGenericCommand+0x98>)
 8006d44:	6818      	ldr	r0, [r3, #0]
 8006d46:	f107 0110 	add.w	r1, r7, #16
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f7fe fc97 	bl	8005680 <xQueueGenericSend>
 8006d52:	6278      	str	r0, [r7, #36]	; 0x24
 8006d54:	e008      	b.n	8006d68 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006d56:	4b07      	ldr	r3, [pc, #28]	; (8006d74 <xTimerGenericCommand+0x98>)
 8006d58:	6818      	ldr	r0, [r3, #0]
 8006d5a:	f107 0110 	add.w	r1, r7, #16
 8006d5e:	2300      	movs	r3, #0
 8006d60:	683a      	ldr	r2, [r7, #0]
 8006d62:	f7fe fd8b 	bl	800587c <xQueueGenericSendFromISR>
 8006d66:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3728      	adds	r7, #40	; 0x28
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	20000c78 	.word	0x20000c78

08006d78 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b088      	sub	sp, #32
 8006d7c:	af02      	add	r7, sp, #8
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d82:	4b22      	ldr	r3, [pc, #136]	; (8006e0c <prvProcessExpiredTimer+0x94>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	3304      	adds	r3, #4
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7fe fb0d 	bl	80053b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d9c:	f003 0304 	and.w	r3, r3, #4
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d022      	beq.n	8006dea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	699a      	ldr	r2, [r3, #24]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	18d1      	adds	r1, r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	683a      	ldr	r2, [r7, #0]
 8006db0:	6978      	ldr	r0, [r7, #20]
 8006db2:	f000 f8d1 	bl	8006f58 <prvInsertTimerInActiveList>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d01f      	beq.n	8006dfc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	9300      	str	r3, [sp, #0]
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	6978      	ldr	r0, [r7, #20]
 8006dc8:	f7ff ff88 	bl	8006cdc <xTimerGenericCommand>
 8006dcc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d113      	bne.n	8006dfc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd8:	f383 8811 	msr	BASEPRI, r3
 8006ddc:	f3bf 8f6f 	isb	sy
 8006de0:	f3bf 8f4f 	dsb	sy
 8006de4:	60fb      	str	r3, [r7, #12]
}
 8006de6:	bf00      	nop
 8006de8:	e7fe      	b.n	8006de8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006df0:	f023 0301 	bic.w	r3, r3, #1
 8006df4:	b2da      	uxtb	r2, r3
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	6a1b      	ldr	r3, [r3, #32]
 8006e00:	6978      	ldr	r0, [r7, #20]
 8006e02:	4798      	blx	r3
}
 8006e04:	bf00      	nop
 8006e06:	3718      	adds	r7, #24
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	20000c70 	.word	0x20000c70

08006e10 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e18:	f107 0308 	add.w	r3, r7, #8
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f000 f857 	bl	8006ed0 <prvGetNextExpireTime>
 8006e22:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	4619      	mov	r1, r3
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f000 f803 	bl	8006e34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006e2e:	f000 f8d5 	bl	8006fdc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e32:	e7f1      	b.n	8006e18 <prvTimerTask+0x8>

08006e34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006e3e:	f7ff fa43 	bl	80062c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e42:	f107 0308 	add.w	r3, r7, #8
 8006e46:	4618      	mov	r0, r3
 8006e48:	f000 f866 	bl	8006f18 <prvSampleTimeNow>
 8006e4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d130      	bne.n	8006eb6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d10a      	bne.n	8006e70 <prvProcessTimerOrBlockTask+0x3c>
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d806      	bhi.n	8006e70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006e62:	f7ff fa3f 	bl	80062e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006e66:	68f9      	ldr	r1, [r7, #12]
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f7ff ff85 	bl	8006d78 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006e6e:	e024      	b.n	8006eba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d008      	beq.n	8006e88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006e76:	4b13      	ldr	r3, [pc, #76]	; (8006ec4 <prvProcessTimerOrBlockTask+0x90>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d101      	bne.n	8006e84 <prvProcessTimerOrBlockTask+0x50>
 8006e80:	2301      	movs	r3, #1
 8006e82:	e000      	b.n	8006e86 <prvProcessTimerOrBlockTask+0x52>
 8006e84:	2300      	movs	r3, #0
 8006e86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006e88:	4b0f      	ldr	r3, [pc, #60]	; (8006ec8 <prvProcessTimerOrBlockTask+0x94>)
 8006e8a:	6818      	ldr	r0, [r3, #0]
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	683a      	ldr	r2, [r7, #0]
 8006e94:	4619      	mov	r1, r3
 8006e96:	f7fe ffa7 	bl	8005de8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006e9a:	f7ff fa23 	bl	80062e4 <xTaskResumeAll>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d10a      	bne.n	8006eba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006ea4:	4b09      	ldr	r3, [pc, #36]	; (8006ecc <prvProcessTimerOrBlockTask+0x98>)
 8006ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eaa:	601a      	str	r2, [r3, #0]
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	f3bf 8f6f 	isb	sy
}
 8006eb4:	e001      	b.n	8006eba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006eb6:	f7ff fa15 	bl	80062e4 <xTaskResumeAll>
}
 8006eba:	bf00      	nop
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	20000c74 	.word	0x20000c74
 8006ec8:	20000c78 	.word	0x20000c78
 8006ecc:	e000ed04 	.word	0xe000ed04

08006ed0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006ed8:	4b0e      	ldr	r3, [pc, #56]	; (8006f14 <prvGetNextExpireTime+0x44>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d101      	bne.n	8006ee6 <prvGetNextExpireTime+0x16>
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	e000      	b.n	8006ee8 <prvGetNextExpireTime+0x18>
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d105      	bne.n	8006f00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ef4:	4b07      	ldr	r3, [pc, #28]	; (8006f14 <prvGetNextExpireTime+0x44>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	60fb      	str	r3, [r7, #12]
 8006efe:	e001      	b.n	8006f04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006f00:	2300      	movs	r3, #0
 8006f02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006f04:	68fb      	ldr	r3, [r7, #12]
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3714      	adds	r7, #20
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	20000c70 	.word	0x20000c70

08006f18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006f20:	f7ff fa7e 	bl	8006420 <xTaskGetTickCount>
 8006f24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006f26:	4b0b      	ldr	r3, [pc, #44]	; (8006f54 <prvSampleTimeNow+0x3c>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d205      	bcs.n	8006f3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006f30:	f000 f936 	bl	80071a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	601a      	str	r2, [r3, #0]
 8006f3a:	e002      	b.n	8006f42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006f42:	4a04      	ldr	r2, [pc, #16]	; (8006f54 <prvSampleTimeNow+0x3c>)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006f48:	68fb      	ldr	r3, [r7, #12]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	20000c80 	.word	0x20000c80

08006f58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b086      	sub	sp, #24
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	607a      	str	r2, [r7, #4]
 8006f64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006f66:	2300      	movs	r3, #0
 8006f68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006f76:	68ba      	ldr	r2, [r7, #8]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d812      	bhi.n	8006fa4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	1ad2      	subs	r2, r2, r3
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d302      	bcc.n	8006f92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	617b      	str	r3, [r7, #20]
 8006f90:	e01b      	b.n	8006fca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006f92:	4b10      	ldr	r3, [pc, #64]	; (8006fd4 <prvInsertTimerInActiveList+0x7c>)
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	3304      	adds	r3, #4
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	4610      	mov	r0, r2
 8006f9e:	f7fe f9ce 	bl	800533e <vListInsert>
 8006fa2:	e012      	b.n	8006fca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d206      	bcs.n	8006fba <prvInsertTimerInActiveList+0x62>
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d302      	bcc.n	8006fba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	617b      	str	r3, [r7, #20]
 8006fb8:	e007      	b.n	8006fca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006fba:	4b07      	ldr	r3, [pc, #28]	; (8006fd8 <prvInsertTimerInActiveList+0x80>)
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	3304      	adds	r3, #4
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	4610      	mov	r0, r2
 8006fc6:	f7fe f9ba 	bl	800533e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006fca:	697b      	ldr	r3, [r7, #20]
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3718      	adds	r7, #24
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	20000c74 	.word	0x20000c74
 8006fd8:	20000c70 	.word	0x20000c70

08006fdc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b08e      	sub	sp, #56	; 0x38
 8006fe0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006fe2:	e0ca      	b.n	800717a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	da18      	bge.n	800701c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006fea:	1d3b      	adds	r3, r7, #4
 8006fec:	3304      	adds	r3, #4
 8006fee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10a      	bne.n	800700c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffa:	f383 8811 	msr	BASEPRI, r3
 8006ffe:	f3bf 8f6f 	isb	sy
 8007002:	f3bf 8f4f 	dsb	sy
 8007006:	61fb      	str	r3, [r7, #28]
}
 8007008:	bf00      	nop
 800700a:	e7fe      	b.n	800700a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800700c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007012:	6850      	ldr	r0, [r2, #4]
 8007014:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007016:	6892      	ldr	r2, [r2, #8]
 8007018:	4611      	mov	r1, r2
 800701a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	f2c0 80aa 	blt.w	8007178 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702a:	695b      	ldr	r3, [r3, #20]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d004      	beq.n	800703a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007032:	3304      	adds	r3, #4
 8007034:	4618      	mov	r0, r3
 8007036:	f7fe f9bb 	bl	80053b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800703a:	463b      	mov	r3, r7
 800703c:	4618      	mov	r0, r3
 800703e:	f7ff ff6b 	bl	8006f18 <prvSampleTimeNow>
 8007042:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2b09      	cmp	r3, #9
 8007048:	f200 8097 	bhi.w	800717a <prvProcessReceivedCommands+0x19e>
 800704c:	a201      	add	r2, pc, #4	; (adr r2, 8007054 <prvProcessReceivedCommands+0x78>)
 800704e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007052:	bf00      	nop
 8007054:	0800707d 	.word	0x0800707d
 8007058:	0800707d 	.word	0x0800707d
 800705c:	0800707d 	.word	0x0800707d
 8007060:	080070f1 	.word	0x080070f1
 8007064:	08007105 	.word	0x08007105
 8007068:	0800714f 	.word	0x0800714f
 800706c:	0800707d 	.word	0x0800707d
 8007070:	0800707d 	.word	0x0800707d
 8007074:	080070f1 	.word	0x080070f1
 8007078:	08007105 	.word	0x08007105
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800707c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007082:	f043 0301 	orr.w	r3, r3, #1
 8007086:	b2da      	uxtb	r2, r3
 8007088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800708e:	68ba      	ldr	r2, [r7, #8]
 8007090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007092:	699b      	ldr	r3, [r3, #24]
 8007094:	18d1      	adds	r1, r2, r3
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800709a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800709c:	f7ff ff5c 	bl	8006f58 <prvInsertTimerInActiveList>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d069      	beq.n	800717a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a8:	6a1b      	ldr	r3, [r3, #32]
 80070aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070b4:	f003 0304 	and.w	r3, r3, #4
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d05e      	beq.n	800717a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	441a      	add	r2, r3
 80070c4:	2300      	movs	r3, #0
 80070c6:	9300      	str	r3, [sp, #0]
 80070c8:	2300      	movs	r3, #0
 80070ca:	2100      	movs	r1, #0
 80070cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070ce:	f7ff fe05 	bl	8006cdc <xTimerGenericCommand>
 80070d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80070d4:	6a3b      	ldr	r3, [r7, #32]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d14f      	bne.n	800717a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80070da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070de:	f383 8811 	msr	BASEPRI, r3
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	f3bf 8f4f 	dsb	sy
 80070ea:	61bb      	str	r3, [r7, #24]
}
 80070ec:	bf00      	nop
 80070ee:	e7fe      	b.n	80070ee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070f6:	f023 0301 	bic.w	r3, r3, #1
 80070fa:	b2da      	uxtb	r2, r3
 80070fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007102:	e03a      	b.n	800717a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007106:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800710a:	f043 0301 	orr.w	r3, r3, #1
 800710e:	b2da      	uxtb	r2, r3
 8007110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007112:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800711c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711e:	699b      	ldr	r3, [r3, #24]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d10a      	bne.n	800713a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007128:	f383 8811 	msr	BASEPRI, r3
 800712c:	f3bf 8f6f 	isb	sy
 8007130:	f3bf 8f4f 	dsb	sy
 8007134:	617b      	str	r3, [r7, #20]
}
 8007136:	bf00      	nop
 8007138:	e7fe      	b.n	8007138 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800713a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713c:	699a      	ldr	r2, [r3, #24]
 800713e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007140:	18d1      	adds	r1, r2, r3
 8007142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007146:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007148:	f7ff ff06 	bl	8006f58 <prvInsertTimerInActiveList>
					break;
 800714c:	e015      	b.n	800717a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800714e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007150:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007154:	f003 0302 	and.w	r3, r3, #2
 8007158:	2b00      	cmp	r3, #0
 800715a:	d103      	bne.n	8007164 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800715c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800715e:	f000 fbdf 	bl	8007920 <vPortFree>
 8007162:	e00a      	b.n	800717a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007166:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800716a:	f023 0301 	bic.w	r3, r3, #1
 800716e:	b2da      	uxtb	r2, r3
 8007170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007172:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007176:	e000      	b.n	800717a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007178:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800717a:	4b08      	ldr	r3, [pc, #32]	; (800719c <prvProcessReceivedCommands+0x1c0>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	1d39      	adds	r1, r7, #4
 8007180:	2200      	movs	r2, #0
 8007182:	4618      	mov	r0, r3
 8007184:	f7fe fc16 	bl	80059b4 <xQueueReceive>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	f47f af2a 	bne.w	8006fe4 <prvProcessReceivedCommands+0x8>
	}
}
 8007190:	bf00      	nop
 8007192:	bf00      	nop
 8007194:	3730      	adds	r7, #48	; 0x30
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	20000c78 	.word	0x20000c78

080071a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b088      	sub	sp, #32
 80071a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071a6:	e048      	b.n	800723a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071a8:	4b2d      	ldr	r3, [pc, #180]	; (8007260 <prvSwitchTimerLists+0xc0>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071b2:	4b2b      	ldr	r3, [pc, #172]	; (8007260 <prvSwitchTimerLists+0xc0>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	3304      	adds	r3, #4
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7fe f8f5 	bl	80053b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6a1b      	ldr	r3, [r3, #32]
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071d4:	f003 0304 	and.w	r3, r3, #4
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d02e      	beq.n	800723a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	693a      	ldr	r2, [r7, #16]
 80071e2:	4413      	add	r3, r2
 80071e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d90e      	bls.n	800720c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80071fa:	4b19      	ldr	r3, [pc, #100]	; (8007260 <prvSwitchTimerLists+0xc0>)
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	3304      	adds	r3, #4
 8007202:	4619      	mov	r1, r3
 8007204:	4610      	mov	r0, r2
 8007206:	f7fe f89a 	bl	800533e <vListInsert>
 800720a:	e016      	b.n	800723a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800720c:	2300      	movs	r3, #0
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	2300      	movs	r3, #0
 8007212:	693a      	ldr	r2, [r7, #16]
 8007214:	2100      	movs	r1, #0
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f7ff fd60 	bl	8006cdc <xTimerGenericCommand>
 800721c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d10a      	bne.n	800723a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007228:	f383 8811 	msr	BASEPRI, r3
 800722c:	f3bf 8f6f 	isb	sy
 8007230:	f3bf 8f4f 	dsb	sy
 8007234:	603b      	str	r3, [r7, #0]
}
 8007236:	bf00      	nop
 8007238:	e7fe      	b.n	8007238 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800723a:	4b09      	ldr	r3, [pc, #36]	; (8007260 <prvSwitchTimerLists+0xc0>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1b1      	bne.n	80071a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007244:	4b06      	ldr	r3, [pc, #24]	; (8007260 <prvSwitchTimerLists+0xc0>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800724a:	4b06      	ldr	r3, [pc, #24]	; (8007264 <prvSwitchTimerLists+0xc4>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a04      	ldr	r2, [pc, #16]	; (8007260 <prvSwitchTimerLists+0xc0>)
 8007250:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007252:	4a04      	ldr	r2, [pc, #16]	; (8007264 <prvSwitchTimerLists+0xc4>)
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	6013      	str	r3, [r2, #0]
}
 8007258:	bf00      	nop
 800725a:	3718      	adds	r7, #24
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}
 8007260:	20000c70 	.word	0x20000c70
 8007264:	20000c74 	.word	0x20000c74

08007268 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800726e:	f000 f969 	bl	8007544 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007272:	4b15      	ldr	r3, [pc, #84]	; (80072c8 <prvCheckForValidListAndQueue+0x60>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d120      	bne.n	80072bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800727a:	4814      	ldr	r0, [pc, #80]	; (80072cc <prvCheckForValidListAndQueue+0x64>)
 800727c:	f7fe f80e 	bl	800529c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007280:	4813      	ldr	r0, [pc, #76]	; (80072d0 <prvCheckForValidListAndQueue+0x68>)
 8007282:	f7fe f80b 	bl	800529c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007286:	4b13      	ldr	r3, [pc, #76]	; (80072d4 <prvCheckForValidListAndQueue+0x6c>)
 8007288:	4a10      	ldr	r2, [pc, #64]	; (80072cc <prvCheckForValidListAndQueue+0x64>)
 800728a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800728c:	4b12      	ldr	r3, [pc, #72]	; (80072d8 <prvCheckForValidListAndQueue+0x70>)
 800728e:	4a10      	ldr	r2, [pc, #64]	; (80072d0 <prvCheckForValidListAndQueue+0x68>)
 8007290:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007292:	2300      	movs	r3, #0
 8007294:	9300      	str	r3, [sp, #0]
 8007296:	4b11      	ldr	r3, [pc, #68]	; (80072dc <prvCheckForValidListAndQueue+0x74>)
 8007298:	4a11      	ldr	r2, [pc, #68]	; (80072e0 <prvCheckForValidListAndQueue+0x78>)
 800729a:	2110      	movs	r1, #16
 800729c:	200a      	movs	r0, #10
 800729e:	f7fe f919 	bl	80054d4 <xQueueGenericCreateStatic>
 80072a2:	4603      	mov	r3, r0
 80072a4:	4a08      	ldr	r2, [pc, #32]	; (80072c8 <prvCheckForValidListAndQueue+0x60>)
 80072a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80072a8:	4b07      	ldr	r3, [pc, #28]	; (80072c8 <prvCheckForValidListAndQueue+0x60>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d005      	beq.n	80072bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80072b0:	4b05      	ldr	r3, [pc, #20]	; (80072c8 <prvCheckForValidListAndQueue+0x60>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	490b      	ldr	r1, [pc, #44]	; (80072e4 <prvCheckForValidListAndQueue+0x7c>)
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7fe fd6c 	bl	8005d94 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072bc:	f000 f972 	bl	80075a4 <vPortExitCritical>
}
 80072c0:	bf00      	nop
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	20000c78 	.word	0x20000c78
 80072cc:	20000c48 	.word	0x20000c48
 80072d0:	20000c5c 	.word	0x20000c5c
 80072d4:	20000c70 	.word	0x20000c70
 80072d8:	20000c74 	.word	0x20000c74
 80072dc:	20000d24 	.word	0x20000d24
 80072e0:	20000c84 	.word	0x20000c84
 80072e4:	08007c68 	.word	0x08007c68

080072e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	3b04      	subs	r3, #4
 80072f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007300:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	3b04      	subs	r3, #4
 8007306:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	f023 0201 	bic.w	r2, r3, #1
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	3b04      	subs	r3, #4
 8007316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007318:	4a0c      	ldr	r2, [pc, #48]	; (800734c <pxPortInitialiseStack+0x64>)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	3b14      	subs	r3, #20
 8007322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	3b04      	subs	r3, #4
 800732e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f06f 0202 	mvn.w	r2, #2
 8007336:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	3b20      	subs	r3, #32
 800733c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800733e:	68fb      	ldr	r3, [r7, #12]
}
 8007340:	4618      	mov	r0, r3
 8007342:	3714      	adds	r7, #20
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr
 800734c:	08007351 	.word	0x08007351

08007350 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007350:	b480      	push	{r7}
 8007352:	b085      	sub	sp, #20
 8007354:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007356:	2300      	movs	r3, #0
 8007358:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800735a:	4b12      	ldr	r3, [pc, #72]	; (80073a4 <prvTaskExitError+0x54>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007362:	d00a      	beq.n	800737a <prvTaskExitError+0x2a>
	__asm volatile
 8007364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007368:	f383 8811 	msr	BASEPRI, r3
 800736c:	f3bf 8f6f 	isb	sy
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	60fb      	str	r3, [r7, #12]
}
 8007376:	bf00      	nop
 8007378:	e7fe      	b.n	8007378 <prvTaskExitError+0x28>
	__asm volatile
 800737a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737e:	f383 8811 	msr	BASEPRI, r3
 8007382:	f3bf 8f6f 	isb	sy
 8007386:	f3bf 8f4f 	dsb	sy
 800738a:	60bb      	str	r3, [r7, #8]
}
 800738c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800738e:	bf00      	nop
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d0fc      	beq.n	8007390 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007396:	bf00      	nop
 8007398:	bf00      	nop
 800739a:	3714      	adds	r7, #20
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr
 80073a4:	20000040 	.word	0x20000040
	...

080073b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80073b0:	4b07      	ldr	r3, [pc, #28]	; (80073d0 <pxCurrentTCBConst2>)
 80073b2:	6819      	ldr	r1, [r3, #0]
 80073b4:	6808      	ldr	r0, [r1, #0]
 80073b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ba:	f380 8809 	msr	PSP, r0
 80073be:	f3bf 8f6f 	isb	sy
 80073c2:	f04f 0000 	mov.w	r0, #0
 80073c6:	f380 8811 	msr	BASEPRI, r0
 80073ca:	4770      	bx	lr
 80073cc:	f3af 8000 	nop.w

080073d0 <pxCurrentTCBConst2>:
 80073d0:	20000748 	.word	0x20000748
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80073d4:	bf00      	nop
 80073d6:	bf00      	nop

080073d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80073d8:	4808      	ldr	r0, [pc, #32]	; (80073fc <prvPortStartFirstTask+0x24>)
 80073da:	6800      	ldr	r0, [r0, #0]
 80073dc:	6800      	ldr	r0, [r0, #0]
 80073de:	f380 8808 	msr	MSP, r0
 80073e2:	f04f 0000 	mov.w	r0, #0
 80073e6:	f380 8814 	msr	CONTROL, r0
 80073ea:	b662      	cpsie	i
 80073ec:	b661      	cpsie	f
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	f3bf 8f6f 	isb	sy
 80073f6:	df00      	svc	0
 80073f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80073fa:	bf00      	nop
 80073fc:	e000ed08 	.word	0xe000ed08

08007400 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007406:	4b46      	ldr	r3, [pc, #280]	; (8007520 <xPortStartScheduler+0x120>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a46      	ldr	r2, [pc, #280]	; (8007524 <xPortStartScheduler+0x124>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d10a      	bne.n	8007426 <xPortStartScheduler+0x26>
	__asm volatile
 8007410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007414:	f383 8811 	msr	BASEPRI, r3
 8007418:	f3bf 8f6f 	isb	sy
 800741c:	f3bf 8f4f 	dsb	sy
 8007420:	613b      	str	r3, [r7, #16]
}
 8007422:	bf00      	nop
 8007424:	e7fe      	b.n	8007424 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007426:	4b3e      	ldr	r3, [pc, #248]	; (8007520 <xPortStartScheduler+0x120>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a3f      	ldr	r2, [pc, #252]	; (8007528 <xPortStartScheduler+0x128>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d10a      	bne.n	8007446 <xPortStartScheduler+0x46>
	__asm volatile
 8007430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	60fb      	str	r3, [r7, #12]
}
 8007442:	bf00      	nop
 8007444:	e7fe      	b.n	8007444 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007446:	4b39      	ldr	r3, [pc, #228]	; (800752c <xPortStartScheduler+0x12c>)
 8007448:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	b2db      	uxtb	r3, r3
 8007450:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	22ff      	movs	r2, #255	; 0xff
 8007456:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	b2db      	uxtb	r3, r3
 800745e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007460:	78fb      	ldrb	r3, [r7, #3]
 8007462:	b2db      	uxtb	r3, r3
 8007464:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007468:	b2da      	uxtb	r2, r3
 800746a:	4b31      	ldr	r3, [pc, #196]	; (8007530 <xPortStartScheduler+0x130>)
 800746c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800746e:	4b31      	ldr	r3, [pc, #196]	; (8007534 <xPortStartScheduler+0x134>)
 8007470:	2207      	movs	r2, #7
 8007472:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007474:	e009      	b.n	800748a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007476:	4b2f      	ldr	r3, [pc, #188]	; (8007534 <xPortStartScheduler+0x134>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	3b01      	subs	r3, #1
 800747c:	4a2d      	ldr	r2, [pc, #180]	; (8007534 <xPortStartScheduler+0x134>)
 800747e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007480:	78fb      	ldrb	r3, [r7, #3]
 8007482:	b2db      	uxtb	r3, r3
 8007484:	005b      	lsls	r3, r3, #1
 8007486:	b2db      	uxtb	r3, r3
 8007488:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800748a:	78fb      	ldrb	r3, [r7, #3]
 800748c:	b2db      	uxtb	r3, r3
 800748e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007492:	2b80      	cmp	r3, #128	; 0x80
 8007494:	d0ef      	beq.n	8007476 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007496:	4b27      	ldr	r3, [pc, #156]	; (8007534 <xPortStartScheduler+0x134>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f1c3 0307 	rsb	r3, r3, #7
 800749e:	2b04      	cmp	r3, #4
 80074a0:	d00a      	beq.n	80074b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80074a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	60bb      	str	r3, [r7, #8]
}
 80074b4:	bf00      	nop
 80074b6:	e7fe      	b.n	80074b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80074b8:	4b1e      	ldr	r3, [pc, #120]	; (8007534 <xPortStartScheduler+0x134>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	021b      	lsls	r3, r3, #8
 80074be:	4a1d      	ldr	r2, [pc, #116]	; (8007534 <xPortStartScheduler+0x134>)
 80074c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80074c2:	4b1c      	ldr	r3, [pc, #112]	; (8007534 <xPortStartScheduler+0x134>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80074ca:	4a1a      	ldr	r2, [pc, #104]	; (8007534 <xPortStartScheduler+0x134>)
 80074cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	b2da      	uxtb	r2, r3
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80074d6:	4b18      	ldr	r3, [pc, #96]	; (8007538 <xPortStartScheduler+0x138>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a17      	ldr	r2, [pc, #92]	; (8007538 <xPortStartScheduler+0x138>)
 80074dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80074e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80074e2:	4b15      	ldr	r3, [pc, #84]	; (8007538 <xPortStartScheduler+0x138>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a14      	ldr	r2, [pc, #80]	; (8007538 <xPortStartScheduler+0x138>)
 80074e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80074ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80074ee:	f000 f8dd 	bl	80076ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80074f2:	4b12      	ldr	r3, [pc, #72]	; (800753c <xPortStartScheduler+0x13c>)
 80074f4:	2200      	movs	r2, #0
 80074f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80074f8:	f000 f8fc 	bl	80076f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80074fc:	4b10      	ldr	r3, [pc, #64]	; (8007540 <xPortStartScheduler+0x140>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a0f      	ldr	r2, [pc, #60]	; (8007540 <xPortStartScheduler+0x140>)
 8007502:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007506:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007508:	f7ff ff66 	bl	80073d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800750c:	f7ff f852 	bl	80065b4 <vTaskSwitchContext>
	prvTaskExitError();
 8007510:	f7ff ff1e 	bl	8007350 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3718      	adds	r7, #24
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	e000ed00 	.word	0xe000ed00
 8007524:	410fc271 	.word	0x410fc271
 8007528:	410fc270 	.word	0x410fc270
 800752c:	e000e400 	.word	0xe000e400
 8007530:	20000d74 	.word	0x20000d74
 8007534:	20000d78 	.word	0x20000d78
 8007538:	e000ed20 	.word	0xe000ed20
 800753c:	20000040 	.word	0x20000040
 8007540:	e000ef34 	.word	0xe000ef34

08007544 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
	__asm volatile
 800754a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754e:	f383 8811 	msr	BASEPRI, r3
 8007552:	f3bf 8f6f 	isb	sy
 8007556:	f3bf 8f4f 	dsb	sy
 800755a:	607b      	str	r3, [r7, #4]
}
 800755c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800755e:	4b0f      	ldr	r3, [pc, #60]	; (800759c <vPortEnterCritical+0x58>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	3301      	adds	r3, #1
 8007564:	4a0d      	ldr	r2, [pc, #52]	; (800759c <vPortEnterCritical+0x58>)
 8007566:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007568:	4b0c      	ldr	r3, [pc, #48]	; (800759c <vPortEnterCritical+0x58>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2b01      	cmp	r3, #1
 800756e:	d10f      	bne.n	8007590 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007570:	4b0b      	ldr	r3, [pc, #44]	; (80075a0 <vPortEnterCritical+0x5c>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	b2db      	uxtb	r3, r3
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00a      	beq.n	8007590 <vPortEnterCritical+0x4c>
	__asm volatile
 800757a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757e:	f383 8811 	msr	BASEPRI, r3
 8007582:	f3bf 8f6f 	isb	sy
 8007586:	f3bf 8f4f 	dsb	sy
 800758a:	603b      	str	r3, [r7, #0]
}
 800758c:	bf00      	nop
 800758e:	e7fe      	b.n	800758e <vPortEnterCritical+0x4a>
	}
}
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr
 800759c:	20000040 	.word	0x20000040
 80075a0:	e000ed04 	.word	0xe000ed04

080075a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80075aa:	4b12      	ldr	r3, [pc, #72]	; (80075f4 <vPortExitCritical+0x50>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10a      	bne.n	80075c8 <vPortExitCritical+0x24>
	__asm volatile
 80075b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b6:	f383 8811 	msr	BASEPRI, r3
 80075ba:	f3bf 8f6f 	isb	sy
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	607b      	str	r3, [r7, #4]
}
 80075c4:	bf00      	nop
 80075c6:	e7fe      	b.n	80075c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80075c8:	4b0a      	ldr	r3, [pc, #40]	; (80075f4 <vPortExitCritical+0x50>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	3b01      	subs	r3, #1
 80075ce:	4a09      	ldr	r2, [pc, #36]	; (80075f4 <vPortExitCritical+0x50>)
 80075d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80075d2:	4b08      	ldr	r3, [pc, #32]	; (80075f4 <vPortExitCritical+0x50>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d105      	bne.n	80075e6 <vPortExitCritical+0x42>
 80075da:	2300      	movs	r3, #0
 80075dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	f383 8811 	msr	BASEPRI, r3
}
 80075e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80075e6:	bf00      	nop
 80075e8:	370c      	adds	r7, #12
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	20000040 	.word	0x20000040
	...

08007600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007600:	f3ef 8009 	mrs	r0, PSP
 8007604:	f3bf 8f6f 	isb	sy
 8007608:	4b15      	ldr	r3, [pc, #84]	; (8007660 <pxCurrentTCBConst>)
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	f01e 0f10 	tst.w	lr, #16
 8007610:	bf08      	it	eq
 8007612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800761a:	6010      	str	r0, [r2, #0]
 800761c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007620:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007624:	f380 8811 	msr	BASEPRI, r0
 8007628:	f3bf 8f4f 	dsb	sy
 800762c:	f3bf 8f6f 	isb	sy
 8007630:	f7fe ffc0 	bl	80065b4 <vTaskSwitchContext>
 8007634:	f04f 0000 	mov.w	r0, #0
 8007638:	f380 8811 	msr	BASEPRI, r0
 800763c:	bc09      	pop	{r0, r3}
 800763e:	6819      	ldr	r1, [r3, #0]
 8007640:	6808      	ldr	r0, [r1, #0]
 8007642:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007646:	f01e 0f10 	tst.w	lr, #16
 800764a:	bf08      	it	eq
 800764c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007650:	f380 8809 	msr	PSP, r0
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	f3af 8000 	nop.w

08007660 <pxCurrentTCBConst>:
 8007660:	20000748 	.word	0x20000748
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007664:	bf00      	nop
 8007666:	bf00      	nop

08007668 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
	__asm volatile
 800766e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007672:	f383 8811 	msr	BASEPRI, r3
 8007676:	f3bf 8f6f 	isb	sy
 800767a:	f3bf 8f4f 	dsb	sy
 800767e:	607b      	str	r3, [r7, #4]
}
 8007680:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007682:	f7fe fedd 	bl	8006440 <xTaskIncrementTick>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d003      	beq.n	8007694 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800768c:	4b06      	ldr	r3, [pc, #24]	; (80076a8 <xPortSysTickHandler+0x40>)
 800768e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007692:	601a      	str	r2, [r3, #0]
 8007694:	2300      	movs	r3, #0
 8007696:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	f383 8811 	msr	BASEPRI, r3
}
 800769e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80076a0:	bf00      	nop
 80076a2:	3708      	adds	r7, #8
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	e000ed04 	.word	0xe000ed04

080076ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80076ac:	b480      	push	{r7}
 80076ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80076b0:	4b0b      	ldr	r3, [pc, #44]	; (80076e0 <vPortSetupTimerInterrupt+0x34>)
 80076b2:	2200      	movs	r2, #0
 80076b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80076b6:	4b0b      	ldr	r3, [pc, #44]	; (80076e4 <vPortSetupTimerInterrupt+0x38>)
 80076b8:	2200      	movs	r2, #0
 80076ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80076bc:	4b0a      	ldr	r3, [pc, #40]	; (80076e8 <vPortSetupTimerInterrupt+0x3c>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a0a      	ldr	r2, [pc, #40]	; (80076ec <vPortSetupTimerInterrupt+0x40>)
 80076c2:	fba2 2303 	umull	r2, r3, r2, r3
 80076c6:	099b      	lsrs	r3, r3, #6
 80076c8:	4a09      	ldr	r2, [pc, #36]	; (80076f0 <vPortSetupTimerInterrupt+0x44>)
 80076ca:	3b01      	subs	r3, #1
 80076cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80076ce:	4b04      	ldr	r3, [pc, #16]	; (80076e0 <vPortSetupTimerInterrupt+0x34>)
 80076d0:	2207      	movs	r2, #7
 80076d2:	601a      	str	r2, [r3, #0]
}
 80076d4:	bf00      	nop
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	e000e010 	.word	0xe000e010
 80076e4:	e000e018 	.word	0xe000e018
 80076e8:	20000014 	.word	0x20000014
 80076ec:	10624dd3 	.word	0x10624dd3
 80076f0:	e000e014 	.word	0xe000e014

080076f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80076f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007704 <vPortEnableVFP+0x10>
 80076f8:	6801      	ldr	r1, [r0, #0]
 80076fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80076fe:	6001      	str	r1, [r0, #0]
 8007700:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007702:	bf00      	nop
 8007704:	e000ed88 	.word	0xe000ed88

08007708 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800770e:	f3ef 8305 	mrs	r3, IPSR
 8007712:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2b0f      	cmp	r3, #15
 8007718:	d914      	bls.n	8007744 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800771a:	4a17      	ldr	r2, [pc, #92]	; (8007778 <vPortValidateInterruptPriority+0x70>)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	4413      	add	r3, r2
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007724:	4b15      	ldr	r3, [pc, #84]	; (800777c <vPortValidateInterruptPriority+0x74>)
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	7afa      	ldrb	r2, [r7, #11]
 800772a:	429a      	cmp	r2, r3
 800772c:	d20a      	bcs.n	8007744 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800772e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007732:	f383 8811 	msr	BASEPRI, r3
 8007736:	f3bf 8f6f 	isb	sy
 800773a:	f3bf 8f4f 	dsb	sy
 800773e:	607b      	str	r3, [r7, #4]
}
 8007740:	bf00      	nop
 8007742:	e7fe      	b.n	8007742 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007744:	4b0e      	ldr	r3, [pc, #56]	; (8007780 <vPortValidateInterruptPriority+0x78>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800774c:	4b0d      	ldr	r3, [pc, #52]	; (8007784 <vPortValidateInterruptPriority+0x7c>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	429a      	cmp	r2, r3
 8007752:	d90a      	bls.n	800776a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007758:	f383 8811 	msr	BASEPRI, r3
 800775c:	f3bf 8f6f 	isb	sy
 8007760:	f3bf 8f4f 	dsb	sy
 8007764:	603b      	str	r3, [r7, #0]
}
 8007766:	bf00      	nop
 8007768:	e7fe      	b.n	8007768 <vPortValidateInterruptPriority+0x60>
	}
 800776a:	bf00      	nop
 800776c:	3714      	adds	r7, #20
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	e000e3f0 	.word	0xe000e3f0
 800777c:	20000d74 	.word	0x20000d74
 8007780:	e000ed0c 	.word	0xe000ed0c
 8007784:	20000d78 	.word	0x20000d78

08007788 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b08a      	sub	sp, #40	; 0x28
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007790:	2300      	movs	r3, #0
 8007792:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007794:	f7fe fd98 	bl	80062c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007798:	4b5b      	ldr	r3, [pc, #364]	; (8007908 <pvPortMalloc+0x180>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d101      	bne.n	80077a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80077a0:	f000 f920 	bl	80079e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80077a4:	4b59      	ldr	r3, [pc, #356]	; (800790c <pvPortMalloc+0x184>)
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4013      	ands	r3, r2
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f040 8093 	bne.w	80078d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d01d      	beq.n	80077f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80077b8:	2208      	movs	r2, #8
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4413      	add	r3, r2
 80077be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f003 0307 	and.w	r3, r3, #7
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d014      	beq.n	80077f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f023 0307 	bic.w	r3, r3, #7
 80077d0:	3308      	adds	r3, #8
 80077d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f003 0307 	and.w	r3, r3, #7
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00a      	beq.n	80077f4 <pvPortMalloc+0x6c>
	__asm volatile
 80077de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e2:	f383 8811 	msr	BASEPRI, r3
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	617b      	str	r3, [r7, #20]
}
 80077f0:	bf00      	nop
 80077f2:	e7fe      	b.n	80077f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d06e      	beq.n	80078d8 <pvPortMalloc+0x150>
 80077fa:	4b45      	ldr	r3, [pc, #276]	; (8007910 <pvPortMalloc+0x188>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	429a      	cmp	r2, r3
 8007802:	d869      	bhi.n	80078d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007804:	4b43      	ldr	r3, [pc, #268]	; (8007914 <pvPortMalloc+0x18c>)
 8007806:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007808:	4b42      	ldr	r3, [pc, #264]	; (8007914 <pvPortMalloc+0x18c>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800780e:	e004      	b.n	800781a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007812:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800781a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	429a      	cmp	r2, r3
 8007822:	d903      	bls.n	800782c <pvPortMalloc+0xa4>
 8007824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d1f1      	bne.n	8007810 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800782c:	4b36      	ldr	r3, [pc, #216]	; (8007908 <pvPortMalloc+0x180>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007832:	429a      	cmp	r2, r3
 8007834:	d050      	beq.n	80078d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007836:	6a3b      	ldr	r3, [r7, #32]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2208      	movs	r2, #8
 800783c:	4413      	add	r3, r2
 800783e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	6a3b      	ldr	r3, [r7, #32]
 8007846:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784a:	685a      	ldr	r2, [r3, #4]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	1ad2      	subs	r2, r2, r3
 8007850:	2308      	movs	r3, #8
 8007852:	005b      	lsls	r3, r3, #1
 8007854:	429a      	cmp	r2, r3
 8007856:	d91f      	bls.n	8007898 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4413      	add	r3, r2
 800785e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	f003 0307 	and.w	r3, r3, #7
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00a      	beq.n	8007880 <pvPortMalloc+0xf8>
	__asm volatile
 800786a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786e:	f383 8811 	msr	BASEPRI, r3
 8007872:	f3bf 8f6f 	isb	sy
 8007876:	f3bf 8f4f 	dsb	sy
 800787a:	613b      	str	r3, [r7, #16]
}
 800787c:	bf00      	nop
 800787e:	e7fe      	b.n	800787e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007882:	685a      	ldr	r2, [r3, #4]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	1ad2      	subs	r2, r2, r3
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800788c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007892:	69b8      	ldr	r0, [r7, #24]
 8007894:	f000 f908 	bl	8007aa8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007898:	4b1d      	ldr	r3, [pc, #116]	; (8007910 <pvPortMalloc+0x188>)
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	4a1b      	ldr	r2, [pc, #108]	; (8007910 <pvPortMalloc+0x188>)
 80078a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80078a6:	4b1a      	ldr	r3, [pc, #104]	; (8007910 <pvPortMalloc+0x188>)
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	4b1b      	ldr	r3, [pc, #108]	; (8007918 <pvPortMalloc+0x190>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d203      	bcs.n	80078ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80078b2:	4b17      	ldr	r3, [pc, #92]	; (8007910 <pvPortMalloc+0x188>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a18      	ldr	r2, [pc, #96]	; (8007918 <pvPortMalloc+0x190>)
 80078b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80078ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078bc:	685a      	ldr	r2, [r3, #4]
 80078be:	4b13      	ldr	r3, [pc, #76]	; (800790c <pvPortMalloc+0x184>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	431a      	orrs	r2, r3
 80078c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80078c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ca:	2200      	movs	r2, #0
 80078cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80078ce:	4b13      	ldr	r3, [pc, #76]	; (800791c <pvPortMalloc+0x194>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	3301      	adds	r3, #1
 80078d4:	4a11      	ldr	r2, [pc, #68]	; (800791c <pvPortMalloc+0x194>)
 80078d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80078d8:	f7fe fd04 	bl	80062e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	f003 0307 	and.w	r3, r3, #7
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00a      	beq.n	80078fc <pvPortMalloc+0x174>
	__asm volatile
 80078e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ea:	f383 8811 	msr	BASEPRI, r3
 80078ee:	f3bf 8f6f 	isb	sy
 80078f2:	f3bf 8f4f 	dsb	sy
 80078f6:	60fb      	str	r3, [r7, #12]
}
 80078f8:	bf00      	nop
 80078fa:	e7fe      	b.n	80078fa <pvPortMalloc+0x172>
	return pvReturn;
 80078fc:	69fb      	ldr	r3, [r7, #28]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3728      	adds	r7, #40	; 0x28
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	2000193c 	.word	0x2000193c
 800790c:	20001950 	.word	0x20001950
 8007910:	20001940 	.word	0x20001940
 8007914:	20001934 	.word	0x20001934
 8007918:	20001944 	.word	0x20001944
 800791c:	20001948 	.word	0x20001948

08007920 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d04d      	beq.n	80079ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007932:	2308      	movs	r3, #8
 8007934:	425b      	negs	r3, r3
 8007936:	697a      	ldr	r2, [r7, #20]
 8007938:	4413      	add	r3, r2
 800793a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	685a      	ldr	r2, [r3, #4]
 8007944:	4b24      	ldr	r3, [pc, #144]	; (80079d8 <vPortFree+0xb8>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4013      	ands	r3, r2
 800794a:	2b00      	cmp	r3, #0
 800794c:	d10a      	bne.n	8007964 <vPortFree+0x44>
	__asm volatile
 800794e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007952:	f383 8811 	msr	BASEPRI, r3
 8007956:	f3bf 8f6f 	isb	sy
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	60fb      	str	r3, [r7, #12]
}
 8007960:	bf00      	nop
 8007962:	e7fe      	b.n	8007962 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00a      	beq.n	8007982 <vPortFree+0x62>
	__asm volatile
 800796c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007970:	f383 8811 	msr	BASEPRI, r3
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	f3bf 8f4f 	dsb	sy
 800797c:	60bb      	str	r3, [r7, #8]
}
 800797e:	bf00      	nop
 8007980:	e7fe      	b.n	8007980 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	685a      	ldr	r2, [r3, #4]
 8007986:	4b14      	ldr	r3, [pc, #80]	; (80079d8 <vPortFree+0xb8>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4013      	ands	r3, r2
 800798c:	2b00      	cmp	r3, #0
 800798e:	d01e      	beq.n	80079ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d11a      	bne.n	80079ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	685a      	ldr	r2, [r3, #4]
 800799c:	4b0e      	ldr	r3, [pc, #56]	; (80079d8 <vPortFree+0xb8>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	43db      	mvns	r3, r3
 80079a2:	401a      	ands	r2, r3
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80079a8:	f7fe fc8e 	bl	80062c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	685a      	ldr	r2, [r3, #4]
 80079b0:	4b0a      	ldr	r3, [pc, #40]	; (80079dc <vPortFree+0xbc>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4413      	add	r3, r2
 80079b6:	4a09      	ldr	r2, [pc, #36]	; (80079dc <vPortFree+0xbc>)
 80079b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80079ba:	6938      	ldr	r0, [r7, #16]
 80079bc:	f000 f874 	bl	8007aa8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80079c0:	4b07      	ldr	r3, [pc, #28]	; (80079e0 <vPortFree+0xc0>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	3301      	adds	r3, #1
 80079c6:	4a06      	ldr	r2, [pc, #24]	; (80079e0 <vPortFree+0xc0>)
 80079c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80079ca:	f7fe fc8b 	bl	80062e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80079ce:	bf00      	nop
 80079d0:	3718      	adds	r7, #24
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	20001950 	.word	0x20001950
 80079dc:	20001940 	.word	0x20001940
 80079e0:	2000194c 	.word	0x2000194c

080079e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80079ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80079ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80079f0:	4b27      	ldr	r3, [pc, #156]	; (8007a90 <prvHeapInit+0xac>)
 80079f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f003 0307 	and.w	r3, r3, #7
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00c      	beq.n	8007a18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	3307      	adds	r3, #7
 8007a02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f023 0307 	bic.w	r3, r3, #7
 8007a0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a0c:	68ba      	ldr	r2, [r7, #8]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	1ad3      	subs	r3, r2, r3
 8007a12:	4a1f      	ldr	r2, [pc, #124]	; (8007a90 <prvHeapInit+0xac>)
 8007a14:	4413      	add	r3, r2
 8007a16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a1c:	4a1d      	ldr	r2, [pc, #116]	; (8007a94 <prvHeapInit+0xb0>)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007a22:	4b1c      	ldr	r3, [pc, #112]	; (8007a94 <prvHeapInit+0xb0>)
 8007a24:	2200      	movs	r2, #0
 8007a26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007a30:	2208      	movs	r2, #8
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	1a9b      	subs	r3, r3, r2
 8007a36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f023 0307 	bic.w	r3, r3, #7
 8007a3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	4a15      	ldr	r2, [pc, #84]	; (8007a98 <prvHeapInit+0xb4>)
 8007a44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a46:	4b14      	ldr	r3, [pc, #80]	; (8007a98 <prvHeapInit+0xb4>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a4e:	4b12      	ldr	r3, [pc, #72]	; (8007a98 <prvHeapInit+0xb4>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2200      	movs	r2, #0
 8007a54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	1ad2      	subs	r2, r2, r3
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a64:	4b0c      	ldr	r3, [pc, #48]	; (8007a98 <prvHeapInit+0xb4>)
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	4a0a      	ldr	r2, [pc, #40]	; (8007a9c <prvHeapInit+0xb8>)
 8007a72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	4a09      	ldr	r2, [pc, #36]	; (8007aa0 <prvHeapInit+0xbc>)
 8007a7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a7c:	4b09      	ldr	r3, [pc, #36]	; (8007aa4 <prvHeapInit+0xc0>)
 8007a7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007a82:	601a      	str	r2, [r3, #0]
}
 8007a84:	bf00      	nop
 8007a86:	3714      	adds	r7, #20
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr
 8007a90:	20000d7c 	.word	0x20000d7c
 8007a94:	20001934 	.word	0x20001934
 8007a98:	2000193c 	.word	0x2000193c
 8007a9c:	20001944 	.word	0x20001944
 8007aa0:	20001940 	.word	0x20001940
 8007aa4:	20001950 	.word	0x20001950

08007aa8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ab0:	4b28      	ldr	r3, [pc, #160]	; (8007b54 <prvInsertBlockIntoFreeList+0xac>)
 8007ab2:	60fb      	str	r3, [r7, #12]
 8007ab4:	e002      	b.n	8007abc <prvInsertBlockIntoFreeList+0x14>
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	60fb      	str	r3, [r7, #12]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d8f7      	bhi.n	8007ab6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	68ba      	ldr	r2, [r7, #8]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d108      	bne.n	8007aea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	685a      	ldr	r2, [r3, #4]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	441a      	add	r2, r3
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	441a      	add	r2, r3
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d118      	bne.n	8007b30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	4b15      	ldr	r3, [pc, #84]	; (8007b58 <prvInsertBlockIntoFreeList+0xb0>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d00d      	beq.n	8007b26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	441a      	add	r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	601a      	str	r2, [r3, #0]
 8007b24:	e008      	b.n	8007b38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b26:	4b0c      	ldr	r3, [pc, #48]	; (8007b58 <prvInsertBlockIntoFreeList+0xb0>)
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	601a      	str	r2, [r3, #0]
 8007b2e:	e003      	b.n	8007b38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d002      	beq.n	8007b46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b46:	bf00      	nop
 8007b48:	3714      	adds	r7, #20
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	20001934 	.word	0x20001934
 8007b58:	2000193c 	.word	0x2000193c

08007b5c <__libc_init_array>:
 8007b5c:	b570      	push	{r4, r5, r6, lr}
 8007b5e:	4d0d      	ldr	r5, [pc, #52]	; (8007b94 <__libc_init_array+0x38>)
 8007b60:	4c0d      	ldr	r4, [pc, #52]	; (8007b98 <__libc_init_array+0x3c>)
 8007b62:	1b64      	subs	r4, r4, r5
 8007b64:	10a4      	asrs	r4, r4, #2
 8007b66:	2600      	movs	r6, #0
 8007b68:	42a6      	cmp	r6, r4
 8007b6a:	d109      	bne.n	8007b80 <__libc_init_array+0x24>
 8007b6c:	4d0b      	ldr	r5, [pc, #44]	; (8007b9c <__libc_init_array+0x40>)
 8007b6e:	4c0c      	ldr	r4, [pc, #48]	; (8007ba0 <__libc_init_array+0x44>)
 8007b70:	f000 f82e 	bl	8007bd0 <_init>
 8007b74:	1b64      	subs	r4, r4, r5
 8007b76:	10a4      	asrs	r4, r4, #2
 8007b78:	2600      	movs	r6, #0
 8007b7a:	42a6      	cmp	r6, r4
 8007b7c:	d105      	bne.n	8007b8a <__libc_init_array+0x2e>
 8007b7e:	bd70      	pop	{r4, r5, r6, pc}
 8007b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b84:	4798      	blx	r3
 8007b86:	3601      	adds	r6, #1
 8007b88:	e7ee      	b.n	8007b68 <__libc_init_array+0xc>
 8007b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b8e:	4798      	blx	r3
 8007b90:	3601      	adds	r6, #1
 8007b92:	e7f2      	b.n	8007b7a <__libc_init_array+0x1e>
 8007b94:	08008450 	.word	0x08008450
 8007b98:	08008450 	.word	0x08008450
 8007b9c:	08008450 	.word	0x08008450
 8007ba0:	08008454 	.word	0x08008454

08007ba4 <memcpy>:
 8007ba4:	440a      	add	r2, r1
 8007ba6:	4291      	cmp	r1, r2
 8007ba8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007bac:	d100      	bne.n	8007bb0 <memcpy+0xc>
 8007bae:	4770      	bx	lr
 8007bb0:	b510      	push	{r4, lr}
 8007bb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bba:	4291      	cmp	r1, r2
 8007bbc:	d1f9      	bne.n	8007bb2 <memcpy+0xe>
 8007bbe:	bd10      	pop	{r4, pc}

08007bc0 <memset>:
 8007bc0:	4402      	add	r2, r0
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d100      	bne.n	8007bca <memset+0xa>
 8007bc8:	4770      	bx	lr
 8007bca:	f803 1b01 	strb.w	r1, [r3], #1
 8007bce:	e7f9      	b.n	8007bc4 <memset+0x4>

08007bd0 <_init>:
 8007bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bd2:	bf00      	nop
 8007bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bd6:	bc08      	pop	{r3}
 8007bd8:	469e      	mov	lr, r3
 8007bda:	4770      	bx	lr

08007bdc <_fini>:
 8007bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bde:	bf00      	nop
 8007be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007be2:	bc08      	pop	{r3}
 8007be4:	469e      	mov	lr, r3
 8007be6:	4770      	bx	lr
